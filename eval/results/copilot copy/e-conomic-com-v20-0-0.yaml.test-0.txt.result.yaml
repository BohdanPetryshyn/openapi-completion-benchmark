openapi: 3.0.1
servers:
  - url: https://apis.e-conomic.com/api/v20.0.0/
info:
  contact:
    email: api@e-conomic.com
    url: https://www.e-conomic.com/
  description: "# Changelog\r

    \r

    <details>\r

    \  <summary>Click to see changelog.</summary>\r

    \r

    | Version | Description|\r

    |---------||\r

    | 20.0.0  | Customer contacts and delivery locations endpoints deprecated. You can find the same enpoints in [`Customers API`](https://apis.e-conomic.com/#Customers) \r

    | 19.0.0  | Page-based endpoints were moved under /paged url and cursor-based endpoints dropped the /all.\r

    | 18.0.0  | Added isDeleted flag to [`customer-contacts`](#tag/Customer-contacts) and included deleted contacts in the response. <br> Deleted contacts can be used for history purposes, but cannot be set as reference persons on sales documents. <br> In previous versions only customer-contacts/id returns deleted contacts as well.\r

    | 17.0.2  | `TimeEntryEmployeeNumberCannotBeUpdated` and `MileageEmployeeNumberCannotBeUpdated` error codes removed. The change affects all versions, but we bumped the version for transparency.\r

    | 17.0.1  | New custom [`OpenAPI extension`](#section/Retrieving-data/Custom-extensions-in-OpenAPI-specification) added in the specification: `x-error-codes`. Existing `x-required-roles` extension converted to an array of strings.\r

    | 17.0.0  | Improved the error model. Added `code` and `property` fields to the model. `code` represents the error code. `property` is the field name on which the input validation failed.\r

    | 16.4.0  | [`customer-deliverylocations`](#tag/Customer-delivery-locations) endpoints added.\r

    | 16.3.0  | [`customer-contacts`](#tag/Customer-contacts) endpoints added.  \r

    | 16.2.2  | Added input validations for required string properties, if a string property is required it can't be empty, it should contain at least 1 character.\r

    | 16.2.1  | Error codes extended for [`mileages`](#tag/Mileage-entries) and [`timeentries`](#tag/Time-entries). Affects all the exisiting versions.\r

    | 16.2.0  | - [`employeegroups`](#operation/DeleteEmployeeGroupById) DELETE endpoint added. <br>- [`employees`](#operation/DeleteEmployeeById) DELETE endpoint added. <br>- [`project-employeegroups`](#operation/DeleteProjectEmployeeGroupById) DELETE endpoint added. <br>- [`project-employees`](#operation/DeleteProjectEmployeeById) DELETE endpoint added.\r

    | 16.1.0  | [`Time entry prices`](#tag/Time-entry-prices) and [`Mileage entry prices`](#tag/Mileage-entry-prices) endpoints added.\r

    | 16.0.0  | Changed parameter schema for [`mileages`](#operation/ApproveMileageEntries) and [`timeentries`](#operation/ApproveTimeEntries) approve endpoints.\r

    | 15.0.0  | Added cost and sales accounts properties in [`activitygroups`](#tag/Activity-Groups) endpoints.\r

    | 14.1.3  | - Added new filter for `IsAccessible` in [`activities`](#tag/Activities) endpoints. <br>- Added new filter for `IsBarred` in [`costtypes`](#tag/Cost-Types) endpoints.\r

    | 14.1.2  | - Added input validations for [`activitygroups`](#tag/Activity-Groups). <br>- Updated description for [`projectgroups`](#operation/CreateProjectGroup) properties.\r

    | 14.1.1  | Added input validations for [`projectgroups`](#operation/CreateProjectGroup).\r

    | 14.1.0  | [`project-employees-count`](#operation/GetNumberOfProjectEmployees) endpoint added.                                                                                                                                                                                                                                             \r

    | 14.0.0  | - [`project-activities`](#tag/Project-Activities) endpoints added. <br>- `projects/activities` have been deprecated.|\r

    | 13.2.0  | [`costtypegroups`](#tag/Cost-Type-Groups) endpoints added.|\r

    | 13.1.0  | [`costtypes`](#tag/Cost-Types) endpoints added.|\r

    | 13.0.0  | - [`projectgroups`](#operation/CreateProjectGroup) POST endpoint added, `Number` made non-required,<br>- [`activitygroups`](#operation/CreateActivityGroup) POST endpoint added, `Number` made non-required.|\r

    | 12.0.0  | [`projects`](#tag/Projects) `Number` made non-required|\r

    | 11.0.0  | [`employees`](#tag/Employees) `Number` made required|\r

    | 10.1.2  | API version number moved to the server|\r

    | 10.1.1  | - [`activities`](#operation/GetAllowedActivities) `employeeNumber` maximum value changed to 999999. <br>- [`projects`](#operation/GetPagedListOfProjectUnderEmployee) `employeeNumber` maximum value changed to 999999.                                                                                                                                                                                                                                                                                                                                                                                             |\r

    | 10.1.0  | [`project-employees`](#operation/CreateProjectEmployee) POST endpoint added|\r

    | 10.0.0  | - [`activities`](#tag/Activities) POST and PUT endpoints added. <br>- [`activitygroups`](#tag/Activity-Groups) GET endpoints added. <br>- Object version field added to `activities`, `projectstatuses` and `projectgroups` endpoints.                                                                                                                                                                                                                                                                                                                                                                              |\r

    | 9.0.0   | `Project related settings for employee` resource renamed as `Project employee`.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\r

    | 8.1.0   | [`project-customers`](#tag/Project-Customers) endpoints added|\r

    | 8.0.0   | - [`employeegroups`](#tag/Employee-groups) endpoints added: GET all paginated, GET count, POST and PUT. <br>- [`project-employeegroups`](#tag/Project-employee-groups) endpoints added: GET all paginated, GET all cursor-based, GET count, GET by number, POST and PUT. <br> - Object version field added to employee groups endpoints.                                                                                                                                                                                                                                                                            ||\r

    | 7.0.0   | [Projects related settings for employee](#tag/Project-employees) extended with new fields for Name, GroupNumber and IsBarred.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\r

    | 6.0.0   | Readonly property `IsReconciled` added to `TimeEntries` endpoint|\r

    | 5.1.0   | [Project delete](#operation/DeleteProjectById) endpoint added.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\r

    | 5.0.0   | - Project-related properties such as `isUser`, `userId`, `canApprove`, `canInvoice`, `employeeType` in `/employees` moved to `/project-employees`. <br>- Properties `lastUpdated`, `costPrice`, `salesPrice` and `invoicedtotal` in `/projects` changed to readonly.<br>- Property `date` in `/timeentries` changed to mandatory.<br>- Access permission to `/employees` changed to requiring access to `Sales`.<br>- PUT endpoints for `/timeentries/{number}`, `/employees/{number}`, `/employeeprojectrelatedsettings/{number}` have been deprecated and new ones without `{number}` in the URL have been added. |\r

    | 4.0.0   | `project.CustomerNumber` made non-required, range check introduced|\r

    | 3.1.0   | Error messages of time entry approval improved, `timeEntry.IsApproved`, `mileage.IsApproved` and `mileage.IncludeApproval` made read-only.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\r

    | 3.0.0   | `mileage.Date` made required. Verification for `mileage.EmployeeNumber` and `mileage.Distance` added.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\r

    | 2.2.2   | Range check introduced in `projects.Number`, `employee.Number` and `employeeGroup.Number`|\r

    | 2.2.1   | Employees PATCH endpoint deprecated|\r

    | 2.2.0   | [`employeegroups/all`](#operation/GetAllEmployeeGroups) and [`employeegroups/{number}`](#operation/GetEmployeeGroupById) endpoints added.                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\r

    | 2.1.0   | [`/activities/allowed`](#operation/GetAllowedActivities) endpoint added to get allowed activities for an employee and project.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\r

    | 2.0.0   | Open API released! Endpoints related to Projects module added|\r

    \r

    </details>\r


    # TL;DR\r

    \r

    **Add these three headers to your requests.**\r

    \r

    | Header                | Value                      | What is this?                                                |\r

    | :-------------------- | :------------------------- | :----------------------------------------------------------- |\r

    | X-AppSecretToken      | YOUR_PRIVATE_TOKEN         | This identifies your app. This is your secret token. Try using the value `demo`. |\r

    | X-AgreementGrantToken | YOUR_AGREEMENT_GRANT_TOKEN | This identifies the grant issued by an agreement, to allow your app to access the agreements data. Try using the value `demo`. |\r

    | Content-Type          | application/json           | We’re a JSON based API. This tells us that you agree with us on using JSON. |\r

    \r

    ### Examples\r

    \r

    #### jQuery\r

    \r

    ```javascript/jQuery\r

    $.ajax({\r

    \    url: \"https://apis.e-conomic.com/api/v20.0.0/projects\",\r

    \    dataType: \"json\",\r

    \    headers: {\r

    \        'X-AppSecretToken': \"demo\",\r

    \        'X-AgreementGrantToken': \"demo\",\r

    \        'Content-Type': \"application/json\"\r

    \    },\r

    \    type: \"GET\"\r

    })\r

    \    .always(function (data) {\r

    \    $(\"#output\").text(JSON.stringify(data, null, 4));\r

    });\r

    ```\r

    \r

    #### cURL\r

    \r

    ```curl\r

    curl -H \"X-AppSecretToken: demo\" -H \"X-AgreementGrantToken: demo\" https://apis.e-conomic.com/api/v20.0.0/projects\r

    ```\r

    \r

    \r

    \r

    # Introduction\r

    \r

    Welcome to the **Visma e-conomic OpenAPI** documentation!\r

    \r

    The e-conomic API is a document-based JSON REST API. \r

    \r

    For more in-depth information about e-conomic itself, please have a look at the e-copedia [http://wiki.e-conomic.dk](http://wiki.e-conomic.dk/).\r

    \r

    ## Usage\r

    \r

    - **Generating a client** can easily be done using tools like [swagger-codegen](https://github.com/swagger-api/swagger-codegen) or others that work with [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) specs.\r

    \r

    \r

    ## Versioning\r

    \r

    API releases are versioned using a three-part versioning scheme: `{major version}.{minor version}.{patch version}`.\r

    \r

    We broadly follow [Semantic Versioning](https://semver.org/) principles when versioning the API. The major version number is incremented when a breaking change occurs. \r

    \r

    The format is:\r

    \r

    `/api/v{major version}.{minor version}.{patch version}/{resource-name}`\r

    \r

    Each value of the above are integers and you should configure the specific version in each API call. \r

    \r

    An example could be: `/api/v2.2.1/projects`\r

    \r

    To track the changes of versions, please see our [changelog](#section/Changelog).\r

    \r

    We reserve the right to deprecate versions at intervals since this allows for moving into a friendly environment for you faster.\r

    \r

    ## Demo authentication\r

    \r

    If you wish to try out the API before registering a developer agreement, you can do this by using the demo agreement, which mimics the authentication flow you will have to use when you create your app. All you have to do is specify HTTP header tokens `X-AgreementGrantToken: demo` and `X-AppSecretToken: demo`. Note however that you can only do GET requests with the demo agreement. If you want full access to our API's, you will need to register.\r

    \r

    # Retrieving data\r

    \r

    Our data is exposed as collections of items. Each item has many properties, with one property as a unique identifier, usually called `number` or `id`. You can always get a single item if you already know the unique identifier. In case the unique identifier is not known, you can always search the collection and retrieve an array of items that satisfy the search criteria, or retrieve only the count of items that satisfy the search criteria. When you search for items in a collection, you can always use filtering, sorting and pagination. When it comes to pagination, we offer two distinct approaches available on separate endpoints. You can read more about filtering, sorting and pagination in the following sections. \r

    \r

    ## Filtering\r

    \r

    Filtering is enabled on all collection endpoints but not on all properties.\r

    \r

    Filtering on collections can be done using the query string parameter `filter`. A filter is made up of a set of predicates and follows a syntax inspired by mongoDB. A predicate is made up of a property name, an operator, and a value.\r

    \r

    Example: `?filter=name$eq:Joe`\r

    \r

    This matches all resources with the value Joe in the property name.\r

    \r

    Predicates can be chained using either of the logical operators AND and OR.\r

    \r

    Example: `?filter=name$eq:Joe$and:city$like:*port`\r

    \r

    Filtering on strings is case insensitive.\r

    \r

    #### Filterable properties\r

    Information about what properties allow filtering and on what operators can be found in the property in the schema for the collection. Each property that allows filtering has the property `\"x-filterable\"` in combination with `operators` set. If you try to filter on something that isn’t allowed the server will respond with a status code 400.\r

    \r

    #### Specifying Operator affinity\r

    If you want to control the operator affinity then you can use parentheses.\r

    \r

    An example is: `?filter=name$eq:Joe$and:(city$like:*port$or:age$lt:40)`\r

    \r

    #### URL Encoding\r

    URL parameter values should always be URL compatible. Always URL encode filter strings.\r

    \r

    #### Filter Operators\r

    The possible filtering operators are:\r

    \r

    | Operator   | Syntax |\r

    | --------   | ------ |\r

    |Equals | $eq:|\r

    |Not equals | $ne:|\r

    |Greater than | $gt:|\r

    |Greater than or equal | $gte:|\r

    |Less than | $lt:|\r

    |Less than or equal | $lte:|\r

    |Substring match\t| $like:|\r

    |And also | $and:|\r

    |Or else | $or:|\r

    |In | $in:|\r

    |Not In | $nin:|\r

    \r

    #### Substring matching\r

    \r

    The `$like:` operator supports both using wildcards (*) and not using wildcards. If no wildcards are used, the expression is considered a `contains` expression and effectively becomes a filter with a wildcard at the start of the string and one at the end of the string. This operator is only allowed on some properties.\r

    \r

    #### Escaping special characters in your filter\r

    To not interfere with the parsing of the filter expression, certain escape sequences are necessary.\r

    \r

    - “$” is escaped with “$$”\r

    - “(” is escaped with “$(”\r

    - “)” is escaped with “$)”\r

    - “*” is escaped with “$*”\r

    - “,” is escaped with “$,”\r

    - “[” is escaped with “$[”\r

    - “]” is escaped with “$]”\r

    \r

    #### Using null values in your filter\r

    Should you want to filter for the nonexistence of a property (i.e. null value) you can use the null escape sequence.\r

    \r

    `$null:`\r

    \r

    #### Using in and not in operators\r

    To determine whether a specified value matches any value in (or not in) a list you filter using the `$in:` or `$nin:` operator. The list to filter by has to be enclosed in brackets and values separated by commas.\r

    \r

    `customerNumber$in:[2,5,7,22,45]`\r

    \r

    \r

    It is possible to also use the `$null:` keyword if you wish to include that in the filter. The max supported length of an array using the `$in:` or `$nin:` operator is 200.\r

    \r

    \r

    ## Sorting\r

    \r

    Sorting on strings is case insensitive.\r

    \r

    ### Sort ascending\r

    \r

    Sorting on collections can be done using the query string parameter ‘sort’.\r

    \r

    ```\r

    ?sort=name\r

    ```\r

    \r

    ### Sort descending\r

    \r

    The default sort direction is ascending, but this can be turned by prepending a minus (-).\r

    \r

    ```\r

    ?sort=-name\r

    ```\r

    \r

    ### Sort by multiple properties\r

    \r

    If you need to sort by multiple properties these can just be separated by commas. Mixing of directions is allowed.\r

    \r

    ```\r

    ?sort=-name,age\r

    ```\r

    \r

    ### Sort alphabetically\r

    \r

    In certain cases, you might want to enforce that even numeric values are sorted alphabetically, so 1000 is less than 30. In those cases, you can prepend the sort property with a tilde (~).\r

    \r

    ```\r

    ?sort=~name\r

    ```\r

    \r

    #### Sortable properties\r

    Information about what properties are sortable can be found in the schema for the collection. Each property that allows sorting has the property `\"x-sortable\": true` set.\r

    \r

    \r

    ## Pagination\r

    \r

    When it comes to retrieving a collection of items, you can use two distinct approaches:\r

    \r

    * **Cursor-based pagination** (continued loading of items using a `cursor` as a query parameter to get the next page of items)\r

    \  * This is the recommended approach, and the one you should use by default.\r

    \  * The endpoint naming scheme is **\"Retrieve all `Items`\"**. (Usage: `/{ITEM}?cursor={CURSOR_VALUE}`)\r

    \r

    \r

    * **Classic pagination** (limited functionality*. Specify `skippages` and `pagesize ` as query parameters to get a specific page of items)\r

    \  * You should only consider using classic pagination, if you rely on loading pages (i.e. for list views or table/grid-based UI's).\r

    \  * The endpoint naming scheme is **\"Retrieve a page of `Items`\"**. (Usage: `/{ITEM}/paged?skippages=0&pagesize=20`)  \r

    \    \\* It's important to note that there is a limit of 10.000 items using this approach. Any items outside of the first 10.000 items will not be loaded.\r

    \r

    Please bear in mind that the two approaches are supported by **separate endpoints**. To use classic pagination, add `/paged` to your request URL.\r

    \r

    If you need to know the total count of items that you can expect to get from your search, you can use a separate endpoint called **\"Retrieve the number of `Items`\"**.  \r

    You can also use the result of this endpoint to calculate the pagination navigation buttons for a table/grid-based UI.\r

    \r

    \r

    ### Which approach should you use?\r

    We highly recommend that you use cursor-based pagination because:\r

    - It is more performant and offers much faster retrieval of items;\r

    - It can be used for very large collections of many thousands or millions of items, whereas classic pagination is limited to only returning 10.000 results, everything else is ignored;  \r

    \  Classic pagination is only appropriate when you have an app with a table/grid-based UI.\r

    \r

    ### Cursor-based pagination\r

    \r

    #### How it works\r

    \r

    When you search for items in a large collection, the response will contain the first 1.000 items and a `cursor` that you can use in a subsequent request to get the next series of items. This way you can retrieve the next set of items only when needed (if 1.000 items suffice, you don't need to send a second request).\r

    \r

    Please note that the cursor is currently the `id` of the first `item` on the next set and it should not be mistaken for the number of items which are yet to be displayed.\r

    Also, if the cursor is not present in the response, it means that there are no more items in the results.\r

    \r

    ##### Real world example\r

    \r

    I want to retrieve all projects.\r

    \r

    1) I send a request to `https://apis.e-conomic.com/api/v20.0.0/projects`\r

    \   and get back an array of 1.000 projects, and a `cursor` with value `34781`\r

    \r

    \r

    2) I send a request for the next items in the resulting collection:  \r

    \   `https://apis.e-conomic.com/api/v20.0.0/projects?cursor=34781`  \r

    \   and get back an array of 1.000 projects and a cursor with value `87695`\r

    \r

    \r

    3) I send a request for the next items in the result:  \r

    \   `https://apis.e-conomic.com/api/v20.0.0/projects?cursor=87695`  \r

    \   and get back an array of 56 items and no cursor.  \r

    \   No cursor means I have retrieved all the projects, i.e. I have reached the end of the list.\r

    \r

    \r

    ### Classic pagination\r

    \r

    If no parameters are used, the collection endpoint returns 20 items at a time. URL parameters allow you to increase this to up to 100 items or to skip pages if necessary.\r

    \r

    ##### Real world example\r

    \r

    I want to show a grid with page size of 50 and pagination navigation buttons.\r

    \r

    1) I send a request to see how many projects there are in the collection:  \r

    \   `https://apis.e-conomic.com/api/v20.0.0/projects/count`  \r

    \   I get the number of projects in the collection, `2056`, and I can calculate the number of pages to be 2056 divided by 50 = 40 with 6 as remainder, meaning I have 41 pages total. I can then use this to present the user the navigation buttons.\r

    \r

    \r

    2) I send a request to retrieve the first page of projects that my user will see:  \r

    \   `https://apis.e-conomic.com/api/v20.0.0/projects/paged?pagesize=50&sort=name`  \r

    \   with this I get back an array of 50 projects, sorted alphabetically by the project name.\r

    \r

    \r

    3) Now if the user wants to see page number 6, I'll send a new request, skipping the first 5 pages to get the projects from page number 6:  \r

    \   `https://apis.e-conomic.com/api/v20.0.0/projects/paged?pagesize=50&skippages=5&sort=name`  \r

    \   I get back an array of 50 projects, that belong to page number 6 when sorting alphabetically by the project name.\r

    \r

    \r

    \r

    ### Number of items in a collection\r

    \r

    As mentioned before we offer endpoint to get the count of items in the collection. You can also use this info for calculation of pagination navigation in case of classic pagination.\r

    \r

    Example `https://apis.e-conomic.com/api/v20.0.0/projects/count`\r

    \r

    \r

    ## HTTP Status Codes\r

    \r

    The Open API returns these HTTP status codes.\r

    \r

    | Code | Text                   | Description                                                  |\r

    | :--- | :--------------------- | :----------------------------------------------------------- |\r

    | 200  | OK                     | Everything is OK                                             |\r

    | 201  | Created                | When you create resources, this is what you get. This will be accompanied by the created resource in the body and a location header with a link to the created resource. |\r

    | 204  | No Content             | In certain cases there is nothing to return. So we will let you know by returning a 204. |\r

    | 400  | Bad Request            | The request you made was somehow malformed. A malformed request could be failed validation on creation or updating. If you try to filter on something that isn’t filterable this is also what you’ll see. Whenever possible we will also try to include a developer hint to help you get around this issue. |\r

    | 401  | Unauthorized           | The credentials you supplied us with weren’t correct, or perhaps you forgot them altogether. If an agreement has revoked the grant they gave your app, this is what you will see. |\r

    | 403  | Forbidden              | You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued. |\r

    | 404  | Not Found              | This is returned when you try to request something that doesn’t exist. This could be a resource that has been deleted or just a URL you tried to hack. If you see a lot of these, it could be an indication that you aren’t using the links provided by the API. You should never need to concatenate any URLs. The API should provide you with the links needed. |\r

    | 405  | Method Not Allowed     | Not all endpoints support all HTTP methods. If you try issue a PUT request to a collection resource this is what you get. |\r

    | 415  | Unsupported Media Type | Our API is a JSON api. If you ask us to give you anything else, we give you this, and tell you why in the JSON body of the response. |\r

    | 500  | Internal Server Error  | We don’t like to see these, and they are flagged in our logs. When you see this, something went wrong on our end. Either try again, or contact our support. |\r

    \r

    \r

    ## Required and Readonly Properties\r

    \r

    Since OpenAPI allows client generation based on the specification, we decided to use the same model/schema in our for both read and write endpoints where possible.\r

    \r

    This led us to chose not to have the Id/Number in the URL parameter for PUT requests, but to use the one from the body, so there is no confusion.\r

    \r

    When a property is marked as `required` it means you need to provide a value on each POST and PUT requests.\r

    \r

    When a property is marked as `readonly` it means you should provide the same value you get in the GET requests, or do not send the property in the JSON at all (skip it).\r

    \r

    ## Custom resource encoding\r

    \r

    For some resource ids (the direct URL path to a resource) the question of non-alphanumeric characters must be solved in REST APIs by either encoding or replacement to ensure URL compatibility.\r

    \r

    In the e-conomic REST API a subset of non-alphanumeric characters are replaced using a custom scheme for resource URLs:\r

    \r

    | Character        | Replacement |\r

    | :--------------- | :---------- |\r

    | “<”              | *0*         |\r

    | “>”              | *1*         |\r

    | “*”              | *2*         |\r

    | “%”              | *3*         |\r

    | “:”              | *4*         |\r

    | “&”              | *5*         |\r

    | “/”              | *6*         |\r

    | “\\”              | *7*         |\r

    | “_”              | *8*         |\r

    | “ ” (whitespace) | *9*         |\r

    | “?”              | *10*        |\r

    | “.”              | *11*        |\r

    | “#”              | *12*        |\r

    | “+”              | *13*        |\r

    \r

    Example: Product “My Awesome Product_Discount5%” Resource URL (self): https://apis.e-conomic.com/products/My_9_Awesome_9_Product_8_Discount5_3_\r

    \r

    All other non-alphanumeric characters in resource URLs are standard URL encoded. Please refer to standard URL encoding for characters not mentioned above.\r

    \r

    ## Implementation specifics\r

    \r

    Helpful details to know when implementing e-conomic REST.\r

    \r

    ### Booleans\r

    \r

    Booleans should only be expected to be represented in responses when true. A false boolean is omitted from response body. The same logic applies to write operations such as POST and PUT.\r

    \r

    ### Null values\r

    \r

    Null values are omitted from the response body.\r

    \r

    ### Nulling\r

    \r

    We do not generally accept null as a value and a validation exception should be expected. To null a property you must exclude it from your JSON on the write operation.\r

    \r

    ## Object version\r

    \r

    ObjectVersion is the mechanism that enforces updates only on latest state of an object.\r

    ObjectVersion property is mandatory in Put Requests.\r

    ObjectVersion property is retrieved on Get Request and needs to be included in Put Request.\r

    If object was modified between Get and Put requests, Put request will fail with error code `409 Conflict`\r

    \r

    ```\r

    {\r

    \  \"message\": \"Update conflict. Version does not match.\",\r

    \  \"developerHint\": \"The resource has been updated by another user. Retrieve the resource/object and try the update again. This is needed in order to prevent you from rolling back another user's update.\",\r

    \  \"logId\": \"09580053-1141-4e7f-85e1-bed8600e0278\",\r

    \  \"logTimeUtc\": \"2021-11-04T09:07:56\",\r

    \  \"property\": \"version\"\r

    }\r

    ```\r

    \r

    ## Custom extensions in OpenAPI specification\r

    \r

    In the specification file, there are some custom extensions that developers can make use of when consuming endpoints. \r

    Those extensions are always prefixed by `x-`.\r

    \r

    1) `x-required-roles`: The list of roles that are required for each group of endpoints.\r

    2) `x-error-codes`: The list of error codes that are potentially returned from each group of endpoints.\r\n"
  title: Visma e-conomic OpenAPI
  version: v20.0.0
  x-apisguru-categories:
    - ecommerce
  x-logo:
    url: ""
  x-origin:
    - format: openapi
      url: https://apis.e-conomic.com/openapi/e-conomic.openapi.json
      version: "3.0"
  x-providerName: e-conomic.com
security:
  - X-AgreementGrantToken: []
    X-AppSecretToken: []
tags:
  - description: "<code>Projects</code> are indispensable within the Projects module, as any registration needs to be linked to a project.\r

      Projects are either:\r

      * Sub-projects or\r

      * Main projects\r

      \r

      Sub-projects can be linked to a main project or used independently.\r

      \r

      Both kinds of projects can be invoiced, but expenses, time entries and mileages can only be registered on sub-projects.\r

      \r

      Main projects are primarily used to group sub-projects.\r

      \r

      External projects are assigned a customer number, which means that the registration on projects can have an effect on accounting.\r

      \r

      \r

      #### Examples of use cases:\r

      \r

      * Create new projects;\r

      * Retrieve all projects which need to be delivered by a given date;\r

      \r

      \r

      Related guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-projekt) (Danish)\r

      <details>

      <summary><b>Click to see the list of possible error codes.</b></summary>


      | Error Code | Description |

      | ---------- | ----------- |

      |ProjectCannotBeCreatedUpdatedNumberIsInvalid|Project cannot be created or updated since the given number is invalid.

      |ProjectCannotBeCreatedUpdatedGroupNumberIsInvalid|Project cannot be created or updated since the given group number is invalid.

      |ProjectCannotBeCreatedUpdatedNumberAlreadyExists|Project cannot be created or updated since the given number already exists.

      |ProjectCannotBeCreatedAsClosed|Project cannot be created as closed.

      |ProjectCannotBeCreatedUpdatedGroupDoesNotExist|Project cannot be created or updated since the given project group does not exist.

      |ProjectCannotBeCreatedUpdatedCustomerNumberRequired|Project cannot be created or updated since customer number is required.

      |ProjectCannotBeCreatedUpdatedMainProjectNumberCannotBeSet|Project cannot be created or updated, main project number can only be set when creating subprojects.

      |ProjectCannotBeCreatedUpdatedMainProjectNumberDoesNotExistOrInvalid|Project cannot be created or updated, provided main project number doesn't exist or is not a main project.

      |ProjectCannotBeCreatedUpdatedInvalidCustomerNumber|Project cannot be created or updated, customer number is invalid.

      |ProjectCannotBeCreatedUpdatedCustomerNotFound|Project cannot be created or updated, customer was not found.

      |ProjectCannotBeMadeMainHasTimeEntries|Project cannot be made main project, it has time entries.

      |ProjectCannotBeMadeMainHasMileageEntries|Project cannot be made main project, it has mileage entries.

      |ProjectCannotBeMadeSubprojectHasSubProjects|Project cannot be made subproject, it already has subprojects.

      |ProjectCannotBeDeletedHasSubProjects|Project cannot be deleted since it has subprojects.

      |ProjectCannotBeDeletedHasTimeEntries|Project cannot be deleted since it has time entries.

      |ProjectCannotBeDeletedHasDraftEntries|Project cannot be deleted since it has draft daybook entries.

      |ProjectCannotBeDeletedHasBookedEntries|Project cannot be deleted since it has booked daybook entries.

      |ProjectCannotBeDeletedHasInvoices|Project cannot be deleted since it has invoices.

      |ProjectCannotBeDeletedHasSalesDocuments|Project cannot be deleted since it has sales documents.

      |ProjectCannotBeDeletedHasExpenses|Project cannot be deleted since it has expenses.

      |ProjectCannotBeDeletedHasMileages|Project cannot be deleted since it has mileage entries.

      </details>


      **Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n"
    name: Projects
    x-error-codes:
      - ProjectCannotBeCreatedUpdatedNumberIsInvalid
      - ProjectCannotBeCreatedUpdatedGroupNumberIsInvalid
      - ProjectCannotBeCreatedUpdatedNumberAlreadyExists
      - ProjectCannotBeCreatedAsClosed
      - ProjectCannotBeCreatedUpdatedGroupDoesNotExist
      - ProjectCannotBeCreatedUpdatedCustomerNumberRequired
      - ProjectCannotBeCreatedUpdatedMainProjectNumberCannotBeSet
      - ProjectCannotBeCreatedUpdatedMainProjectNumberDoesNotExistOrInvalid
      - ProjectCannotBeCreatedUpdatedInvalidCustomerNumber
      - ProjectCannotBeCreatedUpdatedCustomerNotFound
      - ProjectCannotBeMadeMainHasTimeEntries
      - ProjectCannotBeMadeMainHasMileageEntries
      - ProjectCannotBeMadeSubprojectHasSubProjects
      - ProjectCannotBeDeletedHasSubProjects
      - ProjectCannotBeDeletedHasTimeEntries
      - ProjectCannotBeDeletedHasDraftEntries
      - ProjectCannotBeDeletedHasBookedEntries
      - ProjectCannotBeDeletedHasInvoices
      - ProjectCannotBeDeletedHasSalesDocuments
      - ProjectCannotBeDeletedHasExpenses
      - ProjectCannotBeDeletedHasMileages
    x-required-roles:
      - ProjectEmployee
      - SuperUser
  - description: "<code>Project Statuses</code> help distinguish between two types of statuses:\r

      * Quote sent\r

      * Realised\r

      \r

      However, having a status is not mandatory, so there may be projects without one.\r

      \r

      #### Examples of use cases:\r

      \r

      - Retrieve all projects which have the status set to Realised.\r

      \r

      \r

      Related guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-projektstatus) (Danish)\r


      **Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n"
    name: Project Statuses
    x-required-roles:
      - ProjectEmployee
      - SuperUser
  - description: "<code>Project Groups</code> allow projects to be classified as:\r

      \r

      - Internal\r

      - External, invoiceable or\r

      - External, non-invoiceable\r

      \r

      Internal projects are only for internal use, whereas external projects are for other companies and therefore need to be assigned a customer.\r

      \r

      The distinction between invoiceable and non-invoiceable is whether the costs registered on a project are to be considered billable to the user's customer or not.\r

      \r

      Additionally, project groups determine whether registrations on a project should have an impact on the financial accounting or not.\r

      \r

      \r

      #### Examples of use cases:\r

      \r

      * Retrieve all project groups;\r

      * Display the available project groups when creating a new project.\r

      \r

      \r

      Related guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-en-projektgruppe) (Danish)<details>

      <summary><b>Click to see the list of possible error codes.</b></summary>


      | Error Code | Description |

      | ---------- | ----------- |

      |ProjectGroupCannotBeCreatedUpdatedNumberAlreadyExists|Project group cannot be created since the given number already exists.

      |ProjectGroupCannotBeCreatedUpdatedCostDataInvalid|Project group cannot be created or updated. If includeCostPriceInFinance is true, then costAccountOngoingType, costAccountOngoing, costContraAccountOngoing and costAccountClosed are required, otherwise they should be ommited.

      |ProjectGroupCannotBeCreatedUpdatedSalesDataInvalid|Project group cannot be created or updated. If includeSalesPriceInFinance is true, then salesAccountOngoingType, salesAccountOngoing, salesContraAccountOngoing and salesAccountClosed are required, otherwise they should be ommited.

      |ProjectGroupCannotBeCreatedUpdatedAccountDoesNotExist|Project group cannot be created or updated. The account does not exist.

      |ProjectGroupCannotBeCreatedUpdatedAccountIsBarred|Project group cannot be created or updated. The account is barred.

      |ProjectGroupCannotBeCreatedUpdatedAccountIsOfWrongType|Project group cannot be created or updated. The type of the account needs to be either `Balance` or `Profit & Loss`.

      </details>


      **Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n"
    name: Project Groups
    x-error-codes:
      - ProjectGroupCannotBeCreatedUpdatedNumberAlreadyExists
      - ProjectGroupCannotBeCreatedUpdatedCostDataInvalid
      - ProjectGroupCannotBeCreatedUpdatedSalesDataInvalid
      - ProjectGroupCannotBeCreatedUpdatedAccountDoesNotExist
      - ProjectGroupCannotBeCreatedUpdatedAccountIsBarred
      - ProjectGroupCannotBeCreatedUpdatedAccountIsOfWrongType
    x-required-roles:
      - ProjectEmployee
      - SuperUser
  - description: "<code>Time entries</code> endpoints allow for the registration of time spent working on a certain activity on a given project.<br>\r

      Until they are approved, time entries are only considered drafts and can be edited or deleted.\r

      \r

      #### Examples of use cases:\r

      \r

      * Retrieve all time entries registered on a project;\r

      * Create new time entries;\r

      * Approve the time entries that meet all requirements (e.g. date is within a valid accounting year and there is no recording rule to prevent registration on the selected activity or project).\r

      \r

      \r

      Related guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/tidsregistrering) (Danish)\r

      <details>

      <summary><b>Click to see the list of possible error codes.</b></summary>


      | Error Code | Description |

      | ---------- | ----------- |

      |TimeEntryIsApproved|Time entry is already approved.

      |TimeEntryOnBarredProjectCannotBeApproved|Time entry cannot be approved since the project has been barred.

      |CannotCreateUpdateActivityNotFound|Time entry cannot be created or updated since the provided activity was not found.

      |CannotCreateUpdateActivityIsBarred|Time entry cannot be created or updated since the provided activity is barred.

      |CannotCreateUpdateActivityNotPartOfProject|Time entry cannot be created or updated since the provided activity is not part of the provided project.

      |TimeEntryIsNotInAccountingPeriod|Time entry is not in a valid accounting period.

      |TimeEntryCannotBeCreatedUpdatedOrApprovedAccountingPeriodIsBarredOrClosed|Time entry cannot be created, updated or approved, it is in an accounting period that is either barred or closed.

      |TimeEntryCannotBeCreatedUpdatedOrApprovedAccountingPeriodIsClosed|Time entry cannot be created, updated or approved, it is in a closed accounting period.

      |TimeEntryCannotBeApprovedNotFound|Time entry cannot be approved since it was not found.

      |TimeEntryCannotBeUpdatedAlreadyApproved|Time entry cannot be updated or deleted since it is approved.

      |TimeEntryCannotBeCreatedUpdatedDateIsNotSet|Time entry cannot be created or updated, date must be set and be greater than minimum date.

      |TimeEntryNumberListCannotBeEmpty|List of time entries cannot be empty.

      |TimeEntryApprovalFailedBaseCurrencyIsNotSet|Time entry cannot be approved since the company base currency has not been set.

      |TimeEntryCannotBeCreatedUpdatedForCompletedActivity|Time entry cannot be created or updated since the activity is completed.

      |TimeEntryCannotBeCreatedUpdatedForActivityThatHasntStarted|Time entry cannot be created or updated since the activity has not started yet.

      |EmployeeHasNoAccessToProject|Employee has no access to the provided project.

      |EmployeeHasNoAccessToActivity|Employee has no access to the provided activity.

      |EntriesNotAllowedProjectNotFound|Entries not allowed on an inexistent project.

      |EntriesNotAllowedProjectIsMain|Entries not allowed on a main project.

      |EntriesNotAllowedProjectIsClosed|Entries not allowed on a closed project.

      |EntriesNotAllowedProjectIsBarred|Entries not allowed on a barred project.

      |EntriesNotAllowedEmployeeNotFound|Entries not allowed because the given employee was not found.

      |EntriesNotAllowedEmployeeIsBarred|Entries not allowed because the given employee is barred.

      |CannotBeApprovedEmployeeNotFound|Entry cannot be approved since employee was not found.

      |CannotBeApprovedEmployeeIsBarred|Entry cannot be approved since employee is barred.

      |CannotBeApprovedActivityNotFound|Entry cannot be approved since activity was not found.

      |CannotBeApprovedActivityIsBarred|Entry cannot be approved since activity is barred.

      |CannotBeApprovedForCompletedActivity|Entry cannot be approved since the activity is completed or hasn't started yet.

      |CannotBeApprovedActivityNotPartOfProject|Entry cannot be approved since the activity is not part of the project.

      </details>


      **Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n"
    name: Time entries
    x-error-codes:
      - TimeEntryIsApproved
      - TimeEntryOnBarredProjectCannotBeApproved
      - CannotCreateUpdateActivityNotFound
      - CannotCreateUpdateActivityIsBarred
      - CannotCreateUpdateActivityNotPartOfProject
      - TimeEntryIsNotInAccountingPeriod
      - TimeEntryCannotBeCreatedUpdatedOrApprovedAccountingPeriodIsBarredOrClosed
      - TimeEntryCannotBeCreatedUpdatedOrApprovedAccountingPeriodIsClosed
      - TimeEntryCannotBeApprovedNotFound
      - TimeEntryCannotBeUpdatedAlreadyApproved
      - TimeEntryCannotBeCreatedUpdatedDateIsNotSet
      - TimeEntryNumberListCannotBeEmpty
      - TimeEntryApprovalFailedBaseCurrencyIsNotSet
      - TimeEntryCannotBeCreatedUpdatedForCompletedActivity
      - TimeEntryCannotBeCreatedUpdatedForActivityThatHasntStarted
      - EmployeeHasNoAccessToProject
      - EmployeeHasNoAccessToActivity
      - EntriesNotAllowedProjectNotFound
      - EntriesNotAllowedProjectIsMain
      - EntriesNotAllowedProjectIsClosed
      - EntriesNotAllowedProjectIsBarred
      - EntriesNotAllowedEmployeeNotFound
      - EntriesNotAllowedEmployeeIsBarred
      - CannotBeApprovedEmployeeNotFound
      - CannotBeApprovedEmployeeIsBarred
      - CannotBeApprovedActivityNotFound
      - CannotBeApprovedActivityIsBarred
      - CannotBeApprovedForCompletedActivity
      - CannotBeApprovedActivityNotPartOfProject
    x-required-roles:
      - ProjectEmployee
      - SuperUser
  - description: "<code>Time entry prices</code> endpoints extend <code>Time entries</code> with prices.<br>\r

      A time entry cost or sales price is calculated by multiplying the activity cost or sales price respectively by the number of hours reported in the time entry.<br>\r

      If no activity price is provided, the time entry cost/sales price equals the employee cost/sales price * the number of hours reported in the time entry.\r

      \r

      #### Examples of use cases:\r

      \r

      * Retrieve the cost and sales prices.\r

      \r

      Related guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/tidsregistrering) (Danish)\r


      **Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n"
    name: Time entry prices
    x-required-roles:
      - ProjectEmployee
      - SuperUser
  - description: "<code>Mileage entries</code> are the registration of project-related mileages by <code>Employees</code> on <code>Projects</code>.<br>\r

      Until they are approved, mileages are only considered drafts and can be edited or deleted.\r

      \r

      \r

      #### Examples of use cases:\r

      \r

      * Create mileage entries;\r

      * Retrieve all mileages registered on a project;\r

      * Approve the mileages that meet all requirements (e.g. mileage date is within a valid accounting year and there is no recording rule to prevent registration on the selected project)\r

      \r

      \r

      Related guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/kilometerregistrering) (Danish)\r

      <details>

      <summary><b>Click to see the list of possible error codes.</b></summary>


      | Error Code | Description |

      | ---------- | ----------- |

      |MileageIsNotFound|Mileage entry was not found.

      |MileageIsAlreadyApproved|Mileage entry is already approved.

      |MileageOnBarredProjectCannotBeApproved|Mileage entry cannot be approved since the project has been barred.

      |MileageCannotBeUpdatedAlreadyApproved|Mileage entry cannot be updated or deleted since it is approved.

      |MileageIsNotInAccountingPeriod|Mileage entry is not in a valid accounting period.

      |MileageAccountingPeriodIsBarredOrClosed|Mileage entry is in an invalid (closed or barred) accounting period.

      |MileageAccountingPeriodIsClosed|Mileage entry is in a closed accounting period.

      |MileageNumberListCannotBeEmpty|List of mileage entries cannot be empty.

      |MileageApprovalFailedBaseCurrencyIsNotSet|Mileage entry cannot be approved since the company base currency has not been set.

      |MileageCannotBeCreatedUpdatedDateIsNotSet|Mileage entry cannot be created or updated, date must be set and be greater than minimum date.

      |MileageCannotBeCreatedUpdatedDateIsNotInAccountingPeriod|Mileage entry cannot be created or updated, its date is not in an existing accounting period.

      |MileageCannotBeCreatedUpdatedDateIsInClosedBarredAccountingPeriod|Mileage entry cannot be created or updated, its date is in a closed or barred accounting period.

      |MileageSetupCannotBeCreatedUpdatedCostAccountNotExists|Mileage setup cannot be created or updated, cost account ongoing does not exist.

      |MileageSetupCannotBeCreatedUpdatedContraAccountNotExists|Mileage setup cannot be created or updated, contra account ongoing does not exist.

      |MileageSetupCannotBeCreatedUpdatedCostAccountClosedNotExists|Mileage setup cannot be created or updated, cost account closed does not exist.

      |EmployeeHasNoAccessToProject|Employee has no access to the provided project.

      |EmployeeHasNoAccessToActivity|Employee has no access to the provided activity.

      |EntriesNotAllowedProjectNotFound|Entries not allowed on an inexistent project.

      |EntriesNotAllowedProjectIsMain|Entries not allowed on a main project.

      |EntriesNotAllowedProjectIsClosed|Entries not allowed on a closed project.

      |EntriesNotAllowedProjectIsBarred|Entries not allowed on a barred project.

      |EntriesNotAllowedEmployeeNotFound|Entries not allowed because the given employee was not found.

      |EntriesNotAllowedEmployeeIsBarred|Entries not allowed because the given employee is barred.

      |CannotBeApprovedEmployeeNotFound|Entry cannot be approved since employee was not found.

      |CannotBeApprovedEmployeeIsBarred|Entry cannot be approved since employee is barred.

      |CannotBeApprovedActivityNotFound|Entry cannot be approved since activity was not found.

      |CannotBeApprovedActivityIsBarred|Entry cannot be approved since activity is barred.

      |CannotBeApprovedForCompletedActivity|Entry cannot be approved since the activity is completed or hasn't started yet.

      |CannotBeApprovedActivityNotPartOfProject|Entry cannot be approved since the activity is not part of the project.

      </details>


      **Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n"
    name: Mileage entries
    x-error-codes:
      - MileageIsNotFound
      - MileageIsAlreadyApproved
      - MileageOnBarredProjectCannotBeApproved
      - MileageCannotBeUpdatedAlreadyApproved
      - MileageIsNotInAccountingPeriod
      - MileageAccountingPeriodIsBarredOrClosed
      - MileageAccountingPeriodIsClosed
      - MileageNumberListCannotBeEmpty
      - MileageApprovalFailedBaseCurrencyIsNotSet
      - MileageCannotBeCreatedUpdatedDateIsNotSet
      - MileageCannotBeCreatedUpdatedDateIsNotInAccountingPeriod
      - MileageCannotBeCreatedUpdatedDateIsInClosedBarredAccountingPeriod
      - MileageSetupCannotBeCreatedUpdatedCostAccountNotExists
      - MileageSetupCannotBeCreatedUpdatedContraAccountNotExists
      - MileageSetupCannotBeCreatedUpdatedCostAccountClosedNotExists
      - EmployeeHasNoAccessToProject
      - EmployeeHasNoAccessToActivity
      - EntriesNotAllowedProjectNotFound
      - EntriesNotAllowedProjectIsMain
      - EntriesNotAllowedProjectIsClosed
      - EntriesNotAllowedProjectIsBarred
      - EntriesNotAllowedEmployeeNotFound
      - EntriesNotAllowedEmployeeIsBarred
      - CannotBeApprovedEmployeeNotFound
      - CannotBeApprovedEmployeeIsBarred
      - CannotBeApprovedActivityNotFound
      - CannotBeApprovedActivityIsBarred
      - CannotBeApprovedForCompletedActivity
      - CannotBeApprovedActivityNotPartOfProject
    x-required-roles:
      - ProjectEmployee
      - SuperUser
  - description: "<code>Mileage prices</code> endpoints extend <code>Mileages</code> with prices.<br>\r

      A mileage entry cost or sales price is calculated by multiplying the mileage cost or sales rate respectively by the number of kilometers.<br>\r

      The mileage cost or sales rate is provided by the mileage setup.\r

      \r

      \r

      #### Examples of use cases:\r

      \r

      * Retrieve cost and sales prices and rates.\r

      \r

      Related guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/kilometerregistrering) (Danish)\r


      **Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n"
    name: Mileage entry prices
    x-required-roles:
      - ProjectEmployee
      - SuperUser
  - description: "<code>Project-employees</code> endpoints provide project-related information about employees.\r

      \r

      Employees can also be users in the system, but only if they are created via the UI Projects/ Employees section and the employee type is not 0.<br>\r

      Sometimes the employee type can be 0 even if IsUser is true, but only if an user is created via All Settings and then linked to an employee.\r

      \r

      \r

      #### Examples of use cases:\r

      \r

      * Retrieve all employees who have a certain name;\r

      * Display all those employees when registering a time entry.\r

      \r

      \r

      Related guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-eller-tilknyt-en-medarbejder-til-bruger-i-projekt) (Danish)\r

      <details>

      <summary><b>Click to see the list of possible error codes.</b></summary>


      | Error Code | Description |

      | ---------- | ----------- |

      |EmployeeCannotBeCreatedUpdatedNumberAlreadyExists|Employee cannot be created since the given number already exists.

      |EmployeeCannotBeCreatedUpdatedGroupNotFound|Employee cannot be created or updated since the given employee group was not found.

      |EmployeeCannotBeCreatedUpdatedNameNullOrEmpty|Employee cannot be created or updated since employee name cannot be null or empty.

      |ERROR_BOUNDCOWORKERTHEREISNUMBEROFPOSTSONDRAFTS|Finance vouchers exist for the selected employee.

      |ERROR_BOUNDCOWORKERACCOUNTNUMBEROFTIMEREGISTERINGONCOWORKER|There is/are time entry(ies) for the selected employee.

      |ERROR_BOUNDCOWORKERACCOUNTNUMBEROFEXPENSEREGISTERINGONCOWORKER|There is/are expense entry(ies) for the selected employee.

      |ERROR_BOUNDCOWORKERACCOUNTNUMBEROFMILEAGEENTRIESONCOWORKER|There is/are milage entry(ies) for the selected employee.

      |ERROR_BOUNDCOWORKERACCOUNTCOWORKERRESPONSIBLENUMBEROFCASES|The employee is responsible for project(s).

      |ERROR_BOUNDCOWORKERACCOUNTCOWORKERISBOUNDEDTOUSERSACCESSOFTIMEREGISTERING|The employee is linked to a user's access to time recording.

      |ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFDEBITORS|The employee is a sales representative for customer(s).

      |ERROR_BOUNDCOWORKERACCOUNTCOWORKERISOURREFFORNUMBEROFCREDITORS|The employee is linked to supplier(s).

      |ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFINVOICES|The employee is a sales representative for invoice(s).

      |ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFDRAFTS|The employee is a sales representative for draft invoice(s).

      |ERROR_BOUNDCOWORKERACCOUNTCOWORKERISREFMANFORNUMBEROFPURCHASEORDERS|The employee is linked to purchase order(s).

      </details>


      **Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n"
    name: Project employees
    x-error-codes:
      - EmployeeCannotBeCreatedUpdatedNumberAlreadyExists
      - EmployeeCannotBeCreatedUpdatedGroupNotFound
      - EmployeeCannotBeCreatedUpdatedNameNullOrEmpty
      - ERROR_BOUNDCOWORKERTHEREISNUMBEROFPOSTSONDRAFTS
      - ERROR_BOUNDCOWORKERACCOUNTNUMBEROFTIMEREGISTERINGONCOWORKER
      - ERROR_BOUNDCOWORKERACCOUNTNUMBEROFEXPENSEREGISTERINGONCOWORKER
      - ERROR_BOUNDCOWORKERACCOUNTNUMBEROFMILEAGEENTRIESONCOWORKER
      - ERROR_BOUNDCOWORKERACCOUNTCOWORKERRESPONSIBLENUMBEROFCASES
      - ERROR_BOUNDCOWORKERACCOUNTCOWORKERISBOUNDEDTOUSERSACCESSOFTIMEREGISTERING
      - ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFDEBITORS
      - ERROR_BOUNDCOWORKERACCOUNTCOWORKERISOURREFFORNUMBEROFCREDITORS
      - ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFINVOICES
      - ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFDRAFTS
      - ERROR_BOUNDCOWORKERACCOUNTCOWORKERISREFMANFORNUMBEROFPURCHASEORDERS
    x-required-roles:
      - ProjectEmployee
      - SuperUser
  - description: "<code>Project-employee Groups</code> help distinguish between various categories of employees.\r

      \r

      Note that <code>Employeegroups</code> and <code>Project-employeegroups</code> return the same data, the only difference between the two is that one requires access to the Sales module and the other one to the Projects module.\r

      \r

      #### Examples of use cases:\r

      \r

      * Retrieve all employee groups;\r

      * Display all employee groups when creating a new employee.\r

      \r

      \r

      Related guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-medarbejdergruppe) (Danish)\r

      <details>

      <summary><b>Click to see the list of possible error codes.</b></summary>


      | Error Code | Description |

      | ---------- | ----------- |

      |EmployeeGroupNumberAlreadyExists|Employee group cannot be created since the given number already exists.

      |ERROR_BOUNDCOWORKERACCOUNTCOWORKERINCHOSENGROUP|The employee group contains one or more employees.

      </details>


      **Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n"
    name: Project employee groups
    x-error-codes:
      - EmployeeGroupNumberAlreadyExists
      - ERROR_BOUNDCOWORKERACCOUNTCOWORKERINCHOSENGROUP
    x-required-roles:
      - ProjectEmployee
      - SuperUser
  - description: "<code>Activities</code> provide the means to set custom prices for the time <code>Employees</code> spend working on a <code>Project</code>.<br>\r

      \r

      \r

      #### Examples of use cases:\r

      \r

      * Retrieve all activities.\r

      * Display the activities which allow time registration.\r

      \r

      \r

      Related guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-aktivitet-i-projekt) (Danish)\r

      <details>

      <summary><b>Click to see the list of possible error codes.</b></summary>


      | Error Code | Description |

      | ---------- | ----------- |

      |ActivityNumberAlreadyExists|Activity cannot be created since the given number already exists.

      |ActivityGroupNumberDoesNotExist|Activity cannot be created or updated since the given group does not exist.

      |ActivityNameNullOrEmpty|Activity cannot be created or updated since its name cannot be null or empty.

      </details>


      **Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n"
    name: Activities
    x-error-codes:
      - ActivityNumberAlreadyExists
      - ActivityGroupNumberDoesNotExist
      - ActivityNameNullOrEmpty
    x-required-roles:
      - ProjectEmployee
      - SuperUser
  - description: "<code>Activity Groups</code> allow for the classification of activities as:\r

      - productive, invoiceable,\r

      - productive, non-invoiceable or\r

      - unproductive.\r

      \r

      Productive activities are activities with economic value.\r

      \r

      The distinction between invoiceable and non-invoiceable is whether time entries registered on an activity are to be considered billable to the user's customer or not.\r

      \r

      Additionally, activity groups determine if registrations on an activity should have an impact on the financial accounting or not.\r

      \r

      \r

      #### Examples of use cases:\r

      \r

      * Retrieve all activity groups;\r

      * Display all activity groups when creating a new activity.\r

      \r

      \r

      Related guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-en-aktivitetsgruppe) (Danish)\r


      **Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n"
    name: Activity Groups
    x-required-roles:
      - ProjectEmployee
      - SuperUser
  - description: "<code>Project-customers</code> endpoints return a list of all the existing customers that can be used within <code>Projects</code>.\r

      \r

      #### Examples of use cases:\r

      \r

      * Retrieve all available customers;\r

      * Display all customers when creating a new project.\r

      \r

      \r

      Related guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-ny-kunde) (Danish)

      **Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n"
    name: Project Customers
    x-required-roles:
      - ProjectEmployee
      - SuperUser
  - description: "<code>Project-activities</code> endpoints describe the relationship between projects and activities.\r

      \r

      Their main purpose is to determine the period for which users can register time on a given <code>Project</code> and a given <code>Activity</code>.\r

      \r

      By default, if there are no activities linked to a project, employees can register time on any activity.\r

      \r

      #### Examples of use cases:\r

      \r

      * Retrieve all project activities;\r

      * Display all the activities related to a project in order to determine the activities which allow the creation of time entries.\r

      \r

      \r

      Related guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/bestem-hvilke-aktiviteter-et-projekt-kan-tidsregistreres-paa) (Danish)\r

      <details>

      <summary><b>Click to see the list of possible error codes.</b></summary>


      | Error Code | Description |

      | ---------- | ----------- |

      |ProjectActivityCannotBeCreatedProjectNotFound|Project activity entry cannot be created, the given project was not found.

      |ProjectActivityCannotBeCreatedActivityNotFound|Project activity entry cannot be created, the given activity was not found.

      |ProjectActivityCannotBeCreatedActivityAlreadyExists|Project activity entry cannot be created, the activity already exists on the given project.

      |ProjectActivityCannotBeCreatedActivityIsBarred|Project activity entry cannot be created, the given activity is barred.

      |ProjectActivityCannotBeCreatedUpdatedInvalidDates|Project activity entry cannot be created or updated, the start date must be before the end date.

      |ProjectActivityCannotBeCreatedProjectIsMain|Project activity entry cannot be registered on a main project.

      |ProjectActivityCannotBeCreatedProjectIsClosed|Project activity entry cannot be registered on a closed project.

      |ProjectActivityCannotBeCreatedProjectIsBarred|Project activity entry cannot be registered on a barred project.

      |ProjectActivityCannotBeUpdatedReadonlyProperties|Project activity entry cannot be updated, cannot modify readonly properties.

      |EntriesNotAllowedEmployeeNotFound|Entries not allowed because the given employee was not found.

      |EntriesNotAllowedEmployeeIsBarred|Entries not allowed because the given employee is barred.

      </details>


      **Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n"
    name: Project Activities
    x-error-codes:
      - ProjectActivityCannotBeCreatedProjectNotFound
      - ProjectActivityCannotBeCreatedActivityNotFound
      - ProjectActivityCannotBeCreatedActivityAlreadyExists
      - ProjectActivityCannotBeCreatedActivityIsBarred
      - ProjectActivityCannotBeCreatedUpdatedInvalidDates
      - ProjectActivityCannotBeCreatedProjectIsMain
      - ProjectActivityCannotBeCreatedProjectIsClosed
      - ProjectActivityCannotBeCreatedProjectIsBarred
      - ProjectActivityCannotBeUpdatedReadonlyProperties
      - EntriesNotAllowedEmployeeNotFound
      - EntriesNotAllowedEmployeeIsBarred
    x-required-roles:
      - ProjectEmployee
      - SuperUser
  - description: "<code>Cost types</code> endpoints help create expenses.\r

      \r

      They determine whether an expense is invoiceable - through the cost type group assigned to the cost type - and the VAT code that's going to be applied.\r

      \r

      \r

      \r

      #### Example of use cases:\r

      \r

      * Retrieve all cost types;\r

      * Display all cost types when creating an expense.\r


      **Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n"
    name: Cost Types
    x-required-roles:
      - ProjectEmployee
      - SuperUser
  - description: "<code>Cost type groups</code> endpoints help distinguish between invoiceable and non-invoiceable cost types.\r

      \r

      The difference between the two is that only expenses with invoiceable cost types can be transferred to an invoice.\r

      \r

      Additionally, cost type groups determine the accounts where booked expenses go.\r

      \r

      \r

      #### Example of use cases:\r

      \r

      * Retrieve information related to cost type groups.\r


      **Required application roles:** ProjectEmployee or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n"
    name: Cost Type Groups
    x-required-roles:
      - ProjectEmployee
      - SuperUser
  - description: "<code>Employees</code> endpoints help retrieve the list of existing employees.\r

      \r

      \r

      #### Examples of use cases:\r

      \r

      * Retrieve all employees who have a certain name;\r

      * Display all employees when selecting a contact person for a project, sales document or customer.\r

      \r

      \r

      Related guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/medarbejdere) (Danish)\r

      <details>

      <summary><b>Click to see the list of possible error codes.</b></summary>


      | Error Code | Description |

      | ---------- | ----------- |

      |EmployeeCannotBeCreatedUpdatedNumberAlreadyExists|Employee cannot be created since the given number already exists.

      |EmployeeCannotBeCreatedUpdatedGroupNotFound|Employee cannot be created or updated since the given employee group was not found.

      |EmployeeCannotBeCreatedUpdatedNameNullOrEmpty|Employee cannot be created or updated since employee name cannot be null or empty.

      |ERROR_BOUNDCOWORKERTHEREISNUMBEROFPOSTSONDRAFTS|Finance vouchers exist for the selected employee.

      |ERROR_BOUNDCOWORKERACCOUNTNUMBEROFTIMEREGISTERINGONCOWORKER|There is/are time entry(ies) for the selected employee.

      |ERROR_BOUNDCOWORKERACCOUNTNUMBEROFEXPENSEREGISTERINGONCOWORKER|There is/are expense entry(ies) for the selected employee.

      |ERROR_BOUNDCOWORKERACCOUNTNUMBEROFMILEAGEENTRIESONCOWORKER|There is/are milage entry(ies) for the selected employee.

      |ERROR_BOUNDCOWORKERACCOUNTCOWORKERRESPONSIBLENUMBEROFCASES|The employee is responsible for project(s).

      |ERROR_BOUNDCOWORKERACCOUNTCOWORKERISBOUNDEDTOUSERSACCESSOFTIMEREGISTERING|The employee is linked to a user's access to time recording.

      |ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFDEBITORS|The employee is a sales representative for customer(s).

      |ERROR_BOUNDCOWORKERACCOUNTCOWORKERISOURREFFORNUMBEROFCREDITORS|The employee is linked to supplier(s).

      |ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFINVOICES|The employee is a sales representative for invoice(s).

      |ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFDRAFTS|The employee is a sales representative for draft invoice(s).

      |ERROR_BOUNDCOWORKERACCOUNTCOWORKERISREFMANFORNUMBEROFPURCHASEORDERS|The employee is linked to purchase order(s).

      </details>


      **Required application roles:** Sales or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n"
    name: Employees
    x-error-codes:
      - EmployeeCannotBeCreatedUpdatedNumberAlreadyExists
      - EmployeeCannotBeCreatedUpdatedGroupNotFound
      - EmployeeCannotBeCreatedUpdatedNameNullOrEmpty
      - ERROR_BOUNDCOWORKERTHEREISNUMBEROFPOSTSONDRAFTS
      - ERROR_BOUNDCOWORKERACCOUNTNUMBEROFTIMEREGISTERINGONCOWORKER
      - ERROR_BOUNDCOWORKERACCOUNTNUMBEROFEXPENSEREGISTERINGONCOWORKER
      - ERROR_BOUNDCOWORKERACCOUNTNUMBEROFMILEAGEENTRIESONCOWORKER
      - ERROR_BOUNDCOWORKERACCOUNTCOWORKERRESPONSIBLENUMBEROFCASES
      - ERROR_BOUNDCOWORKERACCOUNTCOWORKERISBOUNDEDTOUSERSACCESSOFTIMEREGISTERING
      - ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFDEBITORS
      - ERROR_BOUNDCOWORKERACCOUNTCOWORKERISOURREFFORNUMBEROFCREDITORS
      - ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFINVOICES
      - ERROR_BOUNDCOWORKERACCOUNTCOWORKERISSALESMANFORNUMBEROFDRAFTS
      - ERROR_BOUNDCOWORKERACCOUNTCOWORKERISREFMANFORNUMBEROFPURCHASEORDERS
    x-required-roles:
      - Sales
      - SuperUser
  - description: "<code>Employee Groups</code> help distinguish between various categories of employees.\r

      \r

      \r

      #### Examples of use cases:\r

      \r

      * Retrieve all employee groups;\r

      * Display all employee groups when creating a new employee.\r

      \r

      \r

      Related guide for users: [e-copedia](https://www.e-conomic.dk/support/artikler/opret-medarbejdergruppe) (Danish)<details>

      <summary><b>Click to see the list of possible error codes.</b></summary>


      | Error Code | Description |

      | ---------- | ----------- |

      |EmployeeGroupNumberAlreadyExists|Employee group cannot be created since the given number already exists.

      |ERROR_BOUNDCOWORKERACCOUNTCOWORKERINCHOSENGROUP|The employee group contains one or more employees.

      </details>


      **Required application roles:** Sales or SuperUser  [[More info]](https://www.e-conomic.com/developer/permissions)\n"
    name: Employee groups
    x-error-codes:
      - EmployeeGroupNumberAlreadyExists
      - ERROR_BOUNDCOWORKERACCOUNTCOWORKERINCHOSENGROUP
    x-required-roles:
      - Sales
      - SuperUser
paths:
  /activities:
    get:
      description: Use this endpoint to retrieve all Activities in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)
      operationId: GetAllActivities
      parameters:
        - in: query
          name: Cursor
          schema:
            description: Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)
            maxLength: 50
            minLength: 0
            type: string
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityCursorResults"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve all Activities
      tags:
        - Activities
    post:
      description: Use this endpoint to create a single Activity.
      operationId: CreateActivity
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Activity"
              example:
                Description: An awesome activity
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Activity"
              example:
                Description: An awesome activity
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Activity"
              example:
                Description: An awesome activity
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Activity"
              example:
                Description: An awesome activity
                Id: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedResult"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Create a single Activity
      tags:
        - Activities
    put:
      description: Use this endpoint to update a single Activity.
      operationId: UpdateActivity
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Activity"
              example:
                Description: An awesome activity
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Activity"
              example:
                Description: An awesome activity
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Activity"
              example:
                Description: An awesome activity
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Activity"
              example:
                Description: An awesome activity
                Id: 1
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Update a single Activity
      tags:
        - Activities
  /activities/allowed:
    get:
      description: Use this endpoint to get all the activities that the employee is allowed to register an entry on for a given project. Potential restrictions of registration are based on recording rules in the UI, which cannot be modified through the API. Add the employee number and project to your query parameter to obtain the allowed activities for registrations.
      operationId: GetAllowedActivities
      parameters:
        - description: The employee number.
          in: query
          name: employeeNumber
          required: true
          schema:
            format: int32
            maximum: 999999
            minimum: 1
            type: integer
        - description: The project number.
          in: query
          name: projectNumber
          required: true
          schema:
            format: int32
            maximum: 999999999
            minimum: 1
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Activity"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/Activity"
                type: array
            text/plain:
              schema:
                items:
                  $ref: "#/components/schemas/Activity"
                type: array
          description: List of allowed activities.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized, user has no access to requested data.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve allowed activities
      tags:
        - Activities
  /activities/count:
    get:
      description: Call this endpoint to get the number of Activities. You can use a filtering as well.
      operationId: GetNumberOfActivities
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve the number of Activities
      tags:
        - Activities
  /activities/paged:
    get:
      description: Use this endpoint to load a page of Activities.
      operationId: GetPageOfActivities
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
        - in: query
          name: Sort
          schema:
            description: Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)
            type: string
        - in: query
          name: PageSize
          schema:
            default: 20
            description: Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: SkipPages
          schema:
            default: 0
            description: Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Activity"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve a page of Activities
      tags:
        - Activities
  "/activities/{number}":
    get:
      description: Use this endpoint to load a single Activity by id/number.
      operationId: GetActivityById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve single Activity
      tags:
        - Activities
  /activitygroups:
    get:
      description: Use this endpoint to retrieve all Activity Groups in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)
      operationId: GetAllActivityGroups
      parameters:
        - in: query
          name: Cursor
          schema:
            description: Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)
            maxLength: 50
            minLength: 0
            type: string
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityGroupCursorResults"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve all Activity Groups
      tags:
        - Activity Groups
    post:
      description: Use this endpoint to create a single Activity Group.
      operationId: CreateActivityGroup
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ActivityGroup"
              example:
                Description: An awesome activity group
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ActivityGroup"
              example:
                Description: An awesome activity group
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ActivityGroup"
              example:
                Description: An awesome activity group
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ActivityGroup"
              example:
                Description: An awesome activity group
                Id: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedResult"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Create a single Activity Group
      tags:
        - Activity Groups
  /activitygroups/count:
    get:
      description: Call this endpoint to get the number of Activity Groups. You can use a filtering as well.
      operationId: GetNumberOfActivityGroups
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve the number of Activity Groups
      tags:
        - Activity Groups
  /activitygroups/paged:
    get:
      description: Use this endpoint to load a page of Activity Groups.
      operationId: GetPageOfActivityGroups
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
        - in: query
          name: Sort
          schema:
            description: Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)
            type: string
        - in: query
          name: PageSize
          schema:
            default: 20
            description: Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: SkipPages
          schema:
            default: 0
            description: Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ActivityGroup"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve a page of Activity Groups
      tags:
        - Activity Groups
  "/activitygroups/{number}":
    get:
      description: Use this endpoint to load a single Activity Group by id/number.
      operationId: GetActivityGroupById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityGroup"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve single Activity Group
      tags:
        - Activity Groups
  /costtypegroups:
    get:
      description: Use this endpoint to retrieve all Cost Type Groups in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)
      operationId: GetAllCostTypeGroups
      parameters:
        - in: query
          name: Cursor
          schema:
            description: Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)
            maxLength: 50
            minLength: 0
            type: string
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CostTypeGroupCursorResults"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve all Cost Type Groups
      tags:
        - Cost Type Groups
  /costtypegroups/count:
    get:
      description: Call this endpoint to get the number of Cost Type Groups. You can use a filtering as well.
      operationId: GetNumberOfCostTypeGroups
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve the number of Cost Type Groups
      tags:
        - Cost Type Groups
  /costtypegroups/paged:
    get:
      description: Use this endpoint to load a page of Cost Type Groups.
      operationId: GetPageOfCostTypeGroups
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
        - in: query
          name: Sort
          schema:
            description: Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)
            type: string
        - in: query
          name: PageSize
          schema:
            default: 20
            description: Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: SkipPages
          schema:
            default: 0
            description: Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CostTypeGroup"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve a page of Cost Type Groups
      tags:
        - Cost Type Groups
  "/costtypegroups/{number}":
    get:
      description: Use this endpoint to load a single Cost Type Group by id/number.
      operationId: GetCostTypeGroupById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CostTypeGroup"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve single Cost Type Group
      tags:
        - Cost Type Groups
  /costtypes:
    get:
      description: Use this endpoint to retrieve all Cost Types in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)
      operationId: GetAllCostTypes
      parameters:
        - in: query
          name: Cursor
          schema:
            description: Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)
            maxLength: 50
            minLength: 0
            type: string
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CostTypeCursorResults"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve all Cost Types
      tags:
        - Cost Types
  /costtypes/count:
    get:
      description: Call this endpoint to get the number of Cost Types. You can use a filtering as well.
      operationId: GetNumberOfCostTypes
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve the number of Cost Types
      tags:
        - Cost Types
  /costtypes/paged:
    get:
      description: Use this endpoint to load a page of Cost Types.
      operationId: GetPageOfCostTypes
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
        - in: query
          name: Sort
          schema:
            description: Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)
            type: string
        - in: query
          name: PageSize
          schema:
            default: 20
            description: Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: SkipPages
          schema:
            default: 0
            description: Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CostType"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve a page of Cost Types
      tags:
        - Cost Types
  "/costtypes/{number}":
    get:
      description: Use this endpoint to load a single Cost Type by id/number.
      operationId: GetCostTypeById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CostType"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve single Cost Type
      tags:
        - Cost Types
  /employeegroups:
    get:
      description: Use this endpoint to retrieve all Employee groups in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)
      operationId: GetAllEmployeeGroups
      parameters:
        - in: query
          name: Cursor
          schema:
            description: Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)
            maxLength: 50
            minLength: 0
            type: string
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeGroupCursorResults"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve all Employee groups
      tags:
        - Employee groups
    post:
      description: Use this endpoint to create a single Employee group.
      operationId: CreateEmployeeGroup
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EmployeeGroup"
              example:
                Description: An awesome employee group
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EmployeeGroup"
              example:
                Description: An awesome employee group
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EmployeeGroup"
              example:
                Description: An awesome employee group
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EmployeeGroup"
              example:
                Description: An awesome employee group
                Id: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedResult"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Create a single Employee group
      tags:
        - Employee groups
    put:
      description: Use this endpoint to update a single Employee group.
      operationId: UpdateEmployeeGroup
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EmployeeGroup"
              example:
                Description: An awesome employee group
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EmployeeGroup"
              example:
                Description: An awesome employee group
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EmployeeGroup"
              example:
                Description: An awesome employee group
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EmployeeGroup"
              example:
                Description: An awesome employee group
                Id: 1
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Update a single Employee group
      tags:
        - Employee groups
  /employeegroups/count:
    get:
      description: Call this endpoint to get the number of Employee groups. You can use a filtering as well.
      operationId: GetNumberOfEmployeeGroups
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve the number of Employee groups
      tags:
        - Employee groups
  /employeegroups/paged:
    get:
      description: Use this endpoint to load a page of Employee groups.
      operationId: GetPageOfEmployeeGroups
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
        - in: query
          name: Sort
          schema:
            description: Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)
            type: string
        - in: query
          name: PageSize
          schema:
            default: 20
            description: Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: SkipPages
          schema:
            default: 0
            description: Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/EmployeeGroup"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve a page of Employee groups
      tags:
        - Employee groups
  "/employeegroups/{number}":
    delete:
      description: Use this endpoint to delete a single Employee group by id/number.
      operationId: DeleteEmployeeGroupById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Delete single Employee group
      tags:
        - Employee groups
    get:
      description: Use this endpoint to load a single Employee group by id/number.
      operationId: GetEmployeeGroupById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeGroup"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve single Employee group
      tags:
        - Employee groups
  /employees:
    get:
      description: Use this endpoint to retrieve all Employees in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)
      operationId: GetAllEmployees
      parameters:
        - in: query
          name: Cursor
          schema:
            description: Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)
            maxLength: 50
            minLength: 0
            type: string
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeCursorResults"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve all Employees
      tags:
        - Employees
    post:
      description: Use this endpoint to create a single Employee.
      operationId: CreateEmployee
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Employee"
              example:
                Description: An awesome employee
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Employee"
              example:
                Description: An awesome employee
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Employee"
              example:
                Description: An awesome employee
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Employee"
              example:
                Description: An awesome employee
                Id: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedResult"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Create a single Employee
      tags:
        - Employees
    put:
      description: Use this endpoint to update a single Employee.
      operationId: UpdateEmployee
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Employee"
              example:
                Description: An awesome employee
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Employee"
              example:
                Description: An awesome employee
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Employee"
              example:
                Description: An awesome employee
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Employee"
              example:
                Description: An awesome employee
                Id: 1
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Update a single Employee
      tags:
        - Employees
  /employees/count:
    get:
      description: Call this endpoint to get the number of Employees. You can use a filtering as well.
      operationId: GetNumberOfEmployees
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve the number of Employees
      tags:
        - Employees
  /employees/paged:
    get:
      description: Use this endpoint to load a page of Employees.
      operationId: GetPageOfEmployees
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
        - in: query
          name: Sort
          schema:
            description: Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)
            type: string
        - in: query
          name: PageSize
          schema:
            default: 20
            description: Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: SkipPages
          schema:
            default: 0
            description: Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Employee"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve a page of Employees
      tags:
        - Employees
  "/employees/{number}":
    delete:
      description: Use this endpoint to delete a single Employee by id/number.
      operationId: DeleteEmployeeById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Delete single Employee
      tags:
        - Employees
    get:
      description: Use this endpoint to load a single Employee by id/number.
      operationId: GetEmployeeById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve single Employee
      tags:
        - Employees
  /mileageprices:
    get:
      description: Use this endpoint to retrieve all Mileage entry prices in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)
      operationId: GetAllMileageEntryPrices
      parameters:
        - in: query
          name: Cursor
          schema:
            description: Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)
            maxLength: 50
            minLength: 0
            type: string
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MileagePricesCursorResults"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve all Mileage entry prices
      tags:
        - Mileage entry prices
  /mileageprices/paged:
    get:
      description: Use this endpoint to load a page of Mileage entry prices.
      operationId: GetPageOfMileageEntryPrices
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
        - in: query
          name: Sort
          schema:
            description: Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)
            type: string
        - in: query
          name: PageSize
          schema:
            default: 20
            description: Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: SkipPages
          schema:
            default: 0
            description: Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MileagePrices"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve a page of Mileage entry prices
      tags:
        - Mileage entry prices
  "/mileageprices/{number}":
    get:
      description: Use this endpoint to load a single Mileage entry prices by id/number.
      operationId: GetMileagePricesById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MileagePrices"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve single Mileage entry prices
      tags:
        - Mileage entry prices
  /mileages:
    get:
      description: Use this endpoint to retrieve all Mileage entries in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)
      operationId: GetAllMileageEntries
      parameters:
        - in: query
          name: Cursor
          schema:
            description: Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)
            maxLength: 50
            minLength: 0
            type: string
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MileageCursorResults"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve all Mileage entries
      tags:
        - Mileage entries
    post:
      description: Use this endpoint to create a single Mileage entry.
      operationId: CreateMileage
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Mileage"
              example:
                Description: An awesome mileage
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Mileage"
              example:
                Description: An awesome mileage
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Mileage"
              example:
                Description: An awesome mileage
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Mileage"
              example:
                Description: An awesome mileage
                Id: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedResult"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Create a single Mileage entry
      tags:
        - Mileage entries
    put:
      description: Use this endpoint to update a single Mileage entry.
      operationId: UpdateMileage
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Mileage"
              example:
                Description: An awesome mileage
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Mileage"
              example:
                Description: An awesome mileage
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Mileage"
              example:
                Description: An awesome mileage
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Mileage"
              example:
                Description: An awesome mileage
                Id: 1
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Update a single Mileage entry
      tags:
        - Mileage entries
  /mileages/approve:
    post:
      description: Use this endpoint to approve a list of Mileage entries.
      operationId: ApproveMileageEntries
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/MileageNumbersCollection"
              example:
                numbers:
                  - 1
                  - 2
                  - 3
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/MileageNumbersCollection"
              example:
                numbers:
                  - 1
                  - 2
                  - 3
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/MileageNumbersCollection"
              example:
                numbers:
                  - 1
                  - 2
                  - 3
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/MileageNumbersCollection"
              example:
                numbers:
                  - 1
                  - 2
                  - 3
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Approve a list of Mileage entries
      tags:
        - Mileages
        - Mileage entries
  /mileages/count:
    get:
      description: Call this endpoint to get the number of Mileage entries. You can use a filtering as well.
      operationId: GetNumberOfMileageEntries
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve the number of Mileage entries
      tags:
        - Mileage entries
  /mileages/paged:
    get:
      description: Use this endpoint to load a page of Mileage entries.
      operationId: GetPageOfMileageEntries
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
        - in: query
          name: Sort
          schema:
            description: Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)
            type: string
        - in: query
          name: PageSize
          schema:
            default: 20
            description: Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: SkipPages
          schema:
            default: 0
            description: Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Mileage"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve a page of Mileage entries
      tags:
        - Mileage entries
  "/mileages/{number}":
    delete:
      description: Use this endpoint to delete a single Mileage entry by id/number.
      operationId: DeleteMileageById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Delete single Mileage entry
      tags:
        - Mileage entries
    get:
      description: Use this endpoint to load a single Mileage entry by id/number.
      operationId: GetMileageById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Mileage"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve single Mileage entry
      tags:
        - Mileage entries
  /project-activities:
    get:
      description: Use this endpoint to retrieve all Project Activities in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)
      operationId: GetAllProjectActivities
      parameters:
        - in: query
          name: Cursor
          schema:
            description: Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)
            maxLength: 50
            minLength: 0
            type: string
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectActivityCursorResults"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve all Project Activities
      tags:
        - Project Activities
    post:
      description: Use this endpoint to create a single Project Activity.
      operationId: CreateProjectActivity
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectActivity"
              example:
                Description: An awesome project activity
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectActivity"
              example:
                Description: An awesome project activity
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectActivity"
              example:
                Description: An awesome project activity
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectActivity"
              example:
                Description: An awesome project activity
                Id: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedResult"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Create a single Project Activity
      tags:
        - Project Activities
    put:
      description: Use this endpoint to update a single Project Activity.
      operationId: UpdateProjectActivity
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectActivity"
              example:
                Description: An awesome project activity
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectActivity"
              example:
                Description: An awesome project activity
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectActivity"
              example:
                Description: An awesome project activity
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectActivity"
              example:
                Description: An awesome project activity
                Id: 1
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Update a single Project Activity
      tags:
        - Project Activities
  /project-activities/count:
    get:
      description: Call this endpoint to get the number of Project Activities. You can use a filtering as well.
      operationId: GetNumberOfProjectActivities
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve the number of Project Activities
      tags:
        - Project Activities
  /project-activities/paged:
    get:
      description: Use this endpoint to load a page of Project Activities.
      operationId: GetPageOfProjectActivities
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
        - in: query
          name: Sort
          schema:
            description: Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)
            type: string
        - in: query
          name: PageSize
          schema:
            default: 20
            description: Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: SkipPages
          schema:
            default: 0
            description: Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectActivity"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve a page of Project Activities
      tags:
        - Project Activities
  "/project-activities/{number}":
    delete:
      description: Use this endpoint to delete a single Project Activity by id/number.
      operationId: DeleteProjectActivityById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Delete single Project Activity
      tags:
        - Project Activities
    get:
      description: Use this endpoint to load a single Project Activity by id/number.
      operationId: GetProjectActivityById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectActivity"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve single Project Activity
      tags:
        - Project Activities
  /project-customers:
    get:
      description: Use this endpoint to retrieve all Project Customers in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)
      operationId: GetAllProjectCustomers
      parameters:
        - in: query
          name: Cursor
          schema:
            description: Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)
            maxLength: 50
            minLength: 0
            type: string
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectCustomerCursorResults"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve all Project Customers
      tags:
        - Project Customers
  /project-customers/count:
    get:
      description: Call this endpoint to get the number of Project Customers. You can use a filtering as well.
      operationId: GetNumberOfProjectCustomers
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve the number of Project Customers
      tags:
        - Project Customers
  /project-customers/paged:
    get:
      description: Use this endpoint to load a page of Project Customers.
      operationId: GetPageOfProjectCustomers
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
        - in: query
          name: Sort
          schema:
            description: Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)
            type: string
        - in: query
          name: PageSize
          schema:
            default: 20
            description: Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: SkipPages
          schema:
            default: 0
            description: Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectCustomer"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve a page of Project Customers
      tags:
        - Project Customers
  "/project-customers/{number}":
    get:
      description: Use this endpoint to load a single Project Customer by id/number.
      operationId: GetProjectCustomerById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectCustomer"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve single Project Customer
      tags:
        - Project Customers
  /project-employeegroups:
    get:
      description: Use this endpoint to retrieve all Project employee groups in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)
      operationId: GetAllProjectEmployeeGroups
      parameters:
        - in: query
          name: Cursor
          schema:
            description: Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)
            maxLength: 50
            minLength: 0
            type: string
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectEmployeeGroupCursorResults"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve all Project employee groups
      tags:
        - Project employee groups
    post:
      description: Use this endpoint to create a single Project employee group.
      operationId: CreateProjectEmployeeGroup
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectEmployeeGroup"
              example:
                Description: An awesome employee group
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectEmployeeGroup"
              example:
                Description: An awesome employee group
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectEmployeeGroup"
              example:
                Description: An awesome employee group
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectEmployeeGroup"
              example:
                Description: An awesome employee group
                Id: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedResult"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Create a single Project employee group
      tags:
        - Project employee groups
    put:
      description: Use this endpoint to update a single Project employee group.
      operationId: UpdateProjectEmployeeGroup
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectEmployeeGroup"
              example:
                Description: An awesome employee group
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectEmployeeGroup"
              example:
                Description: An awesome employee group
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectEmployeeGroup"
              example:
                Description: An awesome employee group
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectEmployeeGroup"
              example:
                Description: An awesome employee group
                Id: 1
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Update a single Project employee group
      tags:
        - Project employee groups
  /project-employeegroups/count:
    get:
      description: Call this endpoint to get the number of Project employee groups. You can use a filtering as well.
      operationId: GetNumberOfProjectEmployeeGroups
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve the number of Project employee groups
      tags:
        - Project employee groups
  /project-employeegroups/paged:
    get:
      description: Use this endpoint to load a page of Project employee groups.
      operationId: GetPageOfProjectEmployeeGroups
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
        - in: query
          name: Sort
          schema:
            description: Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)
            type: string
        - in: query
          name: PageSize
          schema:
            default: 20
            description: Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: SkipPages
          schema:
            default: 0
            description: Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectEmployeeGroup"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve a page of Project employee groups
      tags:
        - Project employee groups
  "/project-employeegroups/{number}":
    delete:
      description: Use this endpoint to delete a single Project employee group by id/number.
      operationId: DeleteProjectEmployeeGroupById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Delete single Project employee group
      tags:
        - Project employee groups
    get:
      description: Use this endpoint to load a single Project employee group by id/number.
      operationId: GetProjectEmployeeGroupById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectEmployeeGroup"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve single Project employee group
      tags:
        - Project employee groups
  /project-employees:
    get:
      description: Use this endpoint to retrieve all Project employees in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)
      operationId: GetAllProjectEmployees
      parameters:
        - in: query
          name: Cursor
          schema:
            description: Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)
            maxLength: 50
            minLength: 0
            type: string
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectEmployeeCursorResults"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve all Project employees
      tags:
        - Project employees
    post:
      description: Use this endpoint to create a single Project employee.
      operationId: CreateProjectEmployee
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectEmployee"
              example:
                Description: An awesome project employee
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectEmployee"
              example:
                Description: An awesome project employee
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectEmployee"
              example:
                Description: An awesome project employee
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectEmployee"
              example:
                Description: An awesome project employee
                Id: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedResult"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Create a single Project employee
      tags:
        - Project employees
    put:
      description: Use this endpoint to update a single Project employee.
      operationId: UpdateProjectEmployee
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectEmployee"
              example:
                Description: An awesome project employee
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectEmployee"
              example:
                Description: An awesome project employee
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectEmployee"
              example:
                Description: An awesome project employee
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectEmployee"
              example:
                Description: An awesome project employee
                Id: 1
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Update a single Project employee
      tags:
        - Project employees
  /project-employees/count:
    get:
      description: Call this endpoint to get the number of Project employees. You can use a filtering as well.
      operationId: GetNumberOfProjectEmployees
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve the number of Project employees
      tags:
        - Project employees
  /project-employees/paged:
    get:
      description: Use this endpoint to load a page of Project employees.
      operationId: GetPageOfProjectEmployees
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
        - in: query
          name: Sort
          schema:
            description: Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)
            type: string
        - in: query
          name: PageSize
          schema:
            default: 20
            description: Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: SkipPages
          schema:
            default: 0
            description: Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectEmployee"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve a page of Project employees
      tags:
        - Project employees
  "/project-employees/{number}":
    delete:
      description: Use this endpoint to delete a single Project employee by id/number.
      operationId: DeleteProjectEmployeeById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Delete single Project employee
      tags:
        - Project employees
    get:
      description: Use this endpoint to load a single Project employee by id/number.
      operationId: GetProjectEmployeeById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectEmployee"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve single Project employee
      tags:
        - Project employees
  /projectgroups:
    get:
      description: Use this endpoint to retrieve all Project Groups in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)
      operationId: GetAllProjectGroups
      parameters:
        - in: query
          name: Cursor
          schema:
            description: Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)
            maxLength: 50
            minLength: 0
            type: string
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectGroupCursorResults"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve all Project Groups
      tags:
        - Project Groups
    post:
      description: Use this endpoint to create a single Project Group.
      operationId: CreateProjectGroup
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectGroup"
              example:
                Description: An awesome projectGroup
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectGroup"
              example:
                Description: An awesome projectGroup
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectGroup"
              example:
                Description: An awesome projectGroup
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProjectGroup"
              example:
                Description: An awesome projectGroup
                Id: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedResult"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Create a single Project Group
      tags:
        - Project Groups
  /projectgroups/count:
    get:
      description: Call this endpoint to get the number of Project Groups. You can use a filtering as well.
      operationId: GetNumberOfProjectGroups
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve the number of Project Groups
      tags:
        - Project Groups
  /projectgroups/paged:
    get:
      description: Use this endpoint to load a page of Project Groups.
      operationId: GetPageOfProjectGroups
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
        - in: query
          name: Sort
          schema:
            description: Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)
            type: string
        - in: query
          name: PageSize
          schema:
            default: 20
            description: Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: SkipPages
          schema:
            default: 0
            description: Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectGroup"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve a page of Project Groups
      tags:
        - Project Groups
  "/projectgroups/{number}":
    get:
      description: Use this endpoint to load a single Project Group by id/number.
      operationId: GetProjectGroupById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectGroup"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve single Project Group
      tags:
        - Project Groups
  /projects:
    get:
      description: Use this endpoint to retrieve all Projects in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)
      operationId: GetAllProjects
      parameters:
        - in: query
          name: Cursor
          schema:
            description: Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)
            maxLength: 50
            minLength: 0
            type: string
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectCursorResults"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve all Projects
      tags:
        - Projects
    post:
      description: Use this endpoint to create a single Project.
      operationId: CreateProject
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Project"
              example:
                Description: An awesome project
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Project"
              example:
                Description: An awesome project
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Project"
              example:
                Description: An awesome project
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Project"
              example:
                Description: An awesome project
                Id: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedResult"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Create a single Project
      tags:
        - Projects
    put:
      description: Use this endpoint to update a single Project.
      operationId: UpdateProject
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Project"
              example:
                Description: An awesome project
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Project"
              example:
                Description: An awesome project
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Project"
              example:
                Description: An awesome project
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Project"
              example:
                Description: An awesome project
                Id: 1
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Update a single Project
      tags:
        - Projects
  /projects/allowed:
    get:
      description: Use this endpoint to get all the projects that the employee is allowed to register an entry on. Potential restrictions of registration are based on recording rules in the UI, which cannot be modified through the API. Add the employee number to your query parameter to obtain the allowed projects for registrations.
      operationId: GetPagedListOfProjectUnderEmployee
      parameters:
        - description: The employee number.
          in: query
          name: employeeNumber
          required: true
          schema:
            format: int32
            maximum: 999999
            minimum: 1
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Project"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** The data you are sending is not passing our verification logic. Since this can be due to various reasons, you can check the message for the actual reason."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve the allowed projects that employee can register an entry on.
      tags:
        - Projects
  /projects/count:
    get:
      description: Call this endpoint to get the number of Projects. You can use a filtering as well.
      operationId: GetNumberOfProjects
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve the number of Projects
      tags:
        - Projects
  /projects/paged:
    get:
      description: Use this endpoint to load a page of Projects.
      operationId: GetPageOfProjects
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
        - in: query
          name: Sort
          schema:
            description: Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)
            type: string
        - in: query
          name: PageSize
          schema:
            default: 20
            description: Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: SkipPages
          schema:
            default: 0
            description: Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Project"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve a page of Projects
      tags:
        - Projects
  "/projects/{number}":
    delete:
      description: Use this endpoint to delete a single Project by id/number.
      operationId: DeleteProjectById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Delete single Project
      tags:
        - Projects
    get:
      description: Use this endpoint to load a single Project by id/number.
      operationId: GetProjectById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve single Project
      tags:
        - Projects
  /projectstatuses:
    get:
      description: Use this endpoint to retrieve all Project Statuses in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)
      operationId: GetAllProjectStatuses
      parameters:
        - in: query
          name: Cursor
          schema:
            description: Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)
            maxLength: 50
            minLength: 0
            type: string
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectStatusCursorResults"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve all Project Statuses
      tags:
        - Project Statuses
  /projectstatuses/count:
    get:
      description: Call this endpoint to get the number of Project Statuses. You can use a filtering as well.
      operationId: GetNumberOfProjectStatuses
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve the number of Project Statuses
      tags:
        - Project Statuses
  /projectstatuses/paged:
    get:
      description: Use this endpoint to load a page of Project Statuses.
      operationId: GetPageOfProjectStatuses
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
        - in: query
          name: Sort
          schema:
            description: Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)
            type: string
        - in: query
          name: PageSize
          schema:
            default: 20
            description: Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: SkipPages
          schema:
            default: 0
            description: Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectStatus"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve a page of Project Statuses
      tags:
        - Project Statuses
  "/projectstatuses/{number}":
    get:
      description: Use this endpoint to load a single Project Status by id/number.
      operationId: GetProjectStatusById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectStatus"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve single Project Status
      tags:
        - Project Statuses
  /timeentries:
    get:
      description: Use this endpoint to retrieve all Time entries in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)
      operationId: GetAllTimeEntries
      parameters:
        - in: query
          name: Cursor
          schema:
            description: Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)
            maxLength: 50
            minLength: 0
            type: string
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeEntryCursorResults"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve all Time entries
      tags:
        - Time entries
    post:
      description: Use this endpoint to create a single Time entry.
      operationId: CreateTimeEntry
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TimeEntry"
              example:
                Description: An awesome time entry
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TimeEntry"
              example:
                Description: An awesome time entry
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TimeEntry"
              example:
                Description: An awesome time entry
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TimeEntry"
              example:
                Description: An awesome time entry
                Id: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedResult"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Create a single Time entry
      tags:
        - Time entries
    put:
      description: Use this endpoint to update a single Time entry.
      operationId: UpdateTimeEntry
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TimeEntry"
              example:
                Description: An awesome time entry
                Id: 1
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TimeEntry"
              example:
                Description: An awesome time entry
                Id: 1
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TimeEntry"
              example:
                Description: An awesome time entry
                Id: 1
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TimeEntry"
              example:
                Description: An awesome time entry
                Id: 1
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Update conflict. Object version does not match.** The resource has been updated by another user. Retrieve the resource again to get the latest object version and then try to update."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Update a single Time entry
      tags:
        - Time entries
  /timeentries/approve:
    post:
      description: Use this endpoint to approve a list of Time entries.
      operationId: ApproveTimeEntries
      requestBody:
        content:
          application/*+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TimeEntryNumbersCollection"
              example:
                numbers:
                  - 1
                  - 2
                  - 3
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TimeEntryNumbersCollection"
              example:
                numbers:
                  - 1
                  - 2
                  - 3
          application/json-patch+json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TimeEntryNumbersCollection"
              example:
                numbers:
                  - 1
                  - 2
                  - 3
          text/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TimeEntryNumbersCollection"
              example:
                numbers:
                  - 1
                  - 2
                  - 3
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Approve a list of Time entries
      tags:
        - TimeEntries
        - Time entries
  /timeentries/count:
    get:
      description: Call this endpoint to get the number of Time entries. You can use a filtering as well.
      operationId: GetNumberOfTimeEntries
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve the number of Time entries
      tags:
        - Time entries
  /timeentries/paged:
    get:
      description: Use this endpoint to load a page of Time entries.
      operationId: GetPageOfTimeEntries
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
        - in: query
          name: Sort
          schema:
            description: Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)
            type: string
        - in: query
          name: PageSize
          schema:
            default: 20
            description: Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: SkipPages
          schema:
            default: 0
            description: Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TimeEntry"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve a page of Time entries
      tags:
        - Time entries
  "/timeentries/{number}":
    delete:
      description: Use this endpoint to delete a single Time entry by id/number.
      operationId: DeleteTimeEntryById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Delete single Time entry
      tags:
        - Time entries
    get:
      description: Use this endpoint to load a single Time entry by id/number.
      operationId: GetTimeEntryById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeEntry"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve single Time entry
      tags:
        - Time entries
  /timeentryprices:
    get:
      description: Use this endpoint to retrieve all Time entry prices in bulk.  Max number of items returned in a single call is 1000. Use the continuation cursor parameter to set the continuation cursor for retrieval of next set of data. [pagination instructions](#section/Retrieving-data/Pagination)
      operationId: GetAllTimeEntryPrices
      parameters:
        - in: query
          name: Cursor
          schema:
            description: Use this parameter to set the continuation cursor for paging. [pagination instructions](#section/Retrieving-data/Pagination)
            maxLength: 50
            minLength: 0
            type: string
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeEntryPricesCursorResults"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve all Time entry prices
      tags:
        - Time entry prices
  /timeentryprices/paged:
    get:
      description: Use this endpoint to load a page of Time entry prices.
      operationId: GetPageOfTimeEntryPrices
      parameters:
        - in: query
          name: Filter
          schema:
            description: Use this parameter to set the filtering for fields. [filtering instructions](#section/Retrieving-data/Filtering)
            type: string
        - in: query
          name: Sort
          schema:
            description: Use this parameter to set the sort fields and direction. [sort instructions](#section/Retrieving-data/Sorting)
            type: string
        - in: query
          name: PageSize
          schema:
            default: 20
            description: Use this parameter to set the page size. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 1
            type: integer
        - in: query
          name: SkipPages
          schema:
            default: 0
            description: Use this parameter to set number of pages to skip. [pagination instructions](#section/Retrieving-data/Pagination)
            format: int32
            maximum: 100
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TimeEntryPrices"
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve a page of Time entry prices
      tags:
        - Time entry prices
  "/timeentryprices/{number}":
    get:
      description: Use this endpoint to load a single Time entry prices by id/number.
      operationId: GetTimeEntryPricesById
      parameters:
        - in: path
          name: number
          required: true
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeEntryPrices"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Bad request.** Your request does not pass our validation. See the message for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Unauthorized access.** Please take a look at https://apis.e-conomic.com and follow the links to help on authorization, or use the word demo for both tokens."
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Access forbidden.** You won’t necessarily have access to everything. So even though you were authorized we might still deny access to certain resources. This depends on the roles asked for when the grant was issued."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Resource not found.** The resource you have been looking for does not exist."
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Too many requests.** You have made too many calls towards our API. You are over your quota. Need to wait a bit. Check info in the response headers."
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: "**Internal server error.** Something went wrong but the error has been logged. If you continue to see errors here, please contact api@e-conomic.com. Remember to include log id and agreement number when contacting support."
      summary: Retrieve single Time entry prices
      tags:
        - Time entry prices
components:
  schemas:
    Activity:
      additionalProperties: false
      example:
        Description: An awesome activity
        Id: 1
      properties:
        costPriceMarkupPercentage:
          description: "If cost prices are utilized on employees, this can be used to determine a markup percentage for the given activity.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          format: double
          nullable: true
          type: number
          x-filterable: not filterable
          x-sortable: false
        cutoffDate:
          description: "Date where price should change from before to after.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          format: date-time
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        groupNumber:
          description: "The number of the activity group that this activity belongs.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        hideInSearch:
          description: "Hides an activity from employees when registering in e-conomic UI.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          type: boolean
          x-filterable: not filterable
          x-sortable: false
        inLieuCode:
          description: "If time in lieu is used, this defines which code the activity should utilize when registered upon.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          format: int32
          type: integer
          x-filterable: not filterable
          x-sortable: false
        isAccessible:
          description: "Defines whether the activity can be registered upon.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        name:
          description: "Name of the activity.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>"
          maxLength: 100
          minLength: 0
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin, like
          x-sortable: false
        number:
          description: "The unique number of the activity.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: int32
          maximum: 999999999
          minimum: 1
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        objectVersion:
          description: "The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        salesPriceAfter:
          description: "Price to be used after defined cut off date if defined.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          format: double
          nullable: true
          type: number
          x-filterable: not filterable
          x-sortable: false
        salesPriceBefore:
          description: "Price for a given activity. This will be utilized if no special price is defined.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          format: double
          nullable: true
          type: number
          x-filterable: not filterable
          x-sortable: false
      required:
        - groupNumber
        - name
        - number
      type: object
    ActivityCursorResults:
      additionalProperties: false
      description: Array of objects along with a cursor. Max number in the array returned is 1000
      example:
        cursor: "234"
        items:
          - id: "13"
            name: Patrick
          - id: "16"
            name: John
      properties:
        cursor:
          description: "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        items:
          description: "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            $ref: "#/components/schemas/Activity"
          nullable: true
          type: array
          x-filterable: not filterable
          x-sortable: false
      type: object
    ActivityGroup:
      additionalProperties: false
      example:
        Description: An awesome activity group
        Id: 1
      properties:
        costAccountClosed:
          description: "The account number to register costs for closed activities. \r

            \r

            If includeCostPriceInFinance is set to true, this property is required. \r

            \r

            Otherwise, it cannot be provided. \r

            \r

            Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        costAccountOngoing:
          description: "The account number to register costs for ongoing activities. \r

            \r

            If includeCostPriceInFinance is set to true, this property is required. \r

            \r

            Otherwise, it cannot be provided. \r

            \r

            Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        costAccountOngoingType:
          allOf:
            - $ref: "#/components/schemas/OngoingAccountType"
          description: "The type of account for costs for ongoing activities:\ 

            - 0: Debit\ 

            - 1: Credit \r

            \r

            If includeCostPriceInFinance is set to true, this property is required. \r

            \r

            Otherwise, it cannot be provided.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          x-filterable: not filterable
          x-sortable: false
        costContraAccountOngoing:
          description: "The contra account number to register costs for ongoing activities. \r

            \r

            If includeCostPriceInFinance is set to true, this property is required. \r

            \r

            Otherwise, it cannot be provided. \r

            \r

            Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        includeCostPriceInFinance:
          description: "If set to true, activity costs will be included in accounting.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        includeSalesPriceInFinance:
          description: "If set to true, activity revenue will be included in accounting.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        name:
          description: "Name of the activity group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: true</p>"
          maxLength: 100
          minLength: 0
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin, like
          x-sortable: true
        number:
          description: "The unique number of the activity group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        objectVersion:
          description: "The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        salesAccountClosed:
          description: "The account number to register revenue for closed activities. \r

            \r

            If includeSalesPriceInFinance is set to true, this property is required. \r

            \r

            Otherwise, it cannot be provided. \r

            \r

            Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        salesAccountOngoing:
          description: "The account number to register revenue for ongoing activities. \r

            \r

            If includeSalesPriceInFinance is set to true, this property is required. \r

            \r

            Otherwise, it cannot be provided. \r

            \r

            Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        salesAccountOngoingType:
          allOf:
            - $ref: "#/components/schemas/OngoingAccountType"
          description: "The type of account for revenue from ongoing activities:\ 

            - 0: Debit\ 

            - 1: Credit \r

            \r

            If includeSalesPriceInFinance is set to true, this property is required. \r

            \r

            Otherwise, it cannot be provided.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          x-filterable: not filterable
          x-sortable: false
        salesContraAccountOngoing:
          description: "The contra account number to register revenue for ongoing activities. \r

            \r

            If includeSalesPriceInFinance is set to true, this property is required. \r

            \r

            Otherwise, it cannot be provided. \r

            \r

            Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        type:
          allOf:
            - $ref: "#/components/schemas/ActivityGroupType"
          description: |-
            Activity group types: 
            - 1: Productive, Invoiceable 
            - 2: Productive, Non-Invoiceable 
            - 3: Unproductive<p class='filter'>Filterable: eq, ne</p><p class='sort'>Sortable: true</p>
          x-filterable: eq, ne
          x-sortable: true
      required:
        - name
        - type
      type: object
    ActivityGroupCursorResults:
      additionalProperties: false
      description: Array of objects along with a cursor. Max number in the array returned is 1000
      example:
        cursor: "234"
        items:
          - id: "13"
            name: Patrick
          - id: "16"
            name: John
      properties:
        cursor:
          description: "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        items:
          description: "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            $ref: "#/components/schemas/ActivityGroup"
          nullable: true
          type: array
          x-filterable: not filterable
          x-sortable: false
      type: object
    ActivityGroupType:
      enum:
        - 1
        - 2
        - 3
      format: int32
      type: integer
    CostGroupType:
      enum:
        - 1
        - 2
      format: int32
      type: integer
    CostType:
      additionalProperties: false
      example:
        Description: An awesome cost type
        Id: 1
      properties:
        costGroupNumber:
          description: "The number of the cost type group that the cost type belongs to.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: true</p>"
          format: int32
          type: integer
          x-filterable: not filterable
          x-sortable: true
        isBarred:
          description: "It shows whether the cost type can be used to create expenses or not.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        lastUpdated:
          description: "The date when the cost type was last updated.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          format: date-time
          readOnly: true
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        name:
          description: "Name of the cost type.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: true</p>"
          maxLength: 100
          minLength: 0
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin, like
          x-sortable: true
        number:
          description: "The unique number of the cost type.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: int32
          maximum: 999999999
          minimum: 1
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        objectVersion:
          description: "The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        vatCode:
          description: "The code for the Vat that's going to be applied.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: true</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: true
      required:
        - costGroupNumber
        - name
        - number
      type: object
    CostTypeCursorResults:
      additionalProperties: false
      description: Array of objects along with a cursor. Max number in the array returned is 1000
      example:
        cursor: "234"
        items:
          - id: "13"
            name: Patrick
          - id: "16"
            name: John
      properties:
        cursor:
          description: "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        items:
          description: "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            $ref: "#/components/schemas/CostType"
          nullable: true
          type: array
          x-filterable: not filterable
          x-sortable: false
      type: object
    CostTypeGroup:
      additionalProperties: false
      example:
        Description: An awesome cost type group
        Id: 1
      properties:
        accountClosed:
          description: "The account number to register costs for closed projects.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: true</p>"
          format: int32
          type: integer
          x-filterable: not filterable
          x-sortable: true
        accountOnGoing:
          description: "The account number to register ongoing costs.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: true</p>"
          format: int32
          type: integer
          x-filterable: not filterable
          x-sortable: true
        markup:
          description: "The difference in percentage between the sales price and the cost price.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: true</p>"
          format: double
          nullable: true
          type: number
          x-filterable: not filterable
          x-sortable: true
        name:
          description: "Name of the cost type group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: true</p>"
          maxLength: 100
          minLength: 0
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin, like
          x-sortable: true
        number:
          description: "The unique number of the cost type group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: int32
          maximum: 999999999
          minimum: 1
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        objectVersion:
          description: "The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        type:
          allOf:
            - $ref: "#/components/schemas/CostGroupType"
          description: |-
            Cost type group types: 
            - 1: Invoiceable 
            - 2: NonInvoiceable<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>
          x-filterable: not filterable
          x-sortable: false
      required:
        - accountClosed
        - accountOnGoing
        - name
        - number
        - type
      type: object
    CostTypeGroupCursorResults:
      additionalProperties: false
      description: Array of objects along with a cursor. Max number in the array returned is 1000
      example:
        cursor: "234"
        items:
          - id: "13"
            name: Patrick
          - id: "16"
            name: John
      properties:
        cursor:
          description: "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        items:
          description: "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            $ref: "#/components/schemas/CostTypeGroup"
          nullable: true
          type: array
          x-filterable: not filterable
          x-sortable: false
      type: object
    CreatedResult:
      additionalProperties: false
      properties:
        number:
          description: "The identifier of the newly created entity<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          format: int32
          readOnly: true
          type: integer
          x-filterable: not filterable
          x-sortable: false
      type: object
    Employee:
      additionalProperties: false
      example:
        Description: An awesome employee
        Id: 1
      properties:
        access:
          description: "Shows if the employee can be registered on or is barred.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        email:
          description: "Employee's email address.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          maxLength: 50
          minLength: 0
          nullable: true
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        groupNumber:
          description: "The number of the employee group that this employee belongs.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        name:
          description: "Name of the employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>"
          maxLength: 100
          minLength: 0
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin, like
          x-sortable: false
        number:
          description: "The unique number of the employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: int32
          maximum: 999999
          minimum: 0
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        objectVersion:
          description: "The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        phone:
          description: "Employee's telephone number.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          maxLength: 20
          minLength: 0
          nullable: true
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
      required:
        - access
        - canApprove
        - canInvoice
        - groupNumber
        - name
        - number
      type: object
    EmployeeCursorResults:
      additionalProperties: false
      description: Array of objects along with a cursor. Max number in the array returned is 1000
      example:
        cursor: "234"
        items:
          - id: "13"
            name: Patrick
          - id: "16"
            name: John
      properties:
        cursor:
          description: "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        items:
          description: "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            $ref: "#/components/schemas/Employee"
          nullable: true
          type: array
          x-filterable: not filterable
          x-sortable: false
      type: object
    EmployeeGroup:
      additionalProperties: false
      example:
        Description: An awesome employee group
        Id: 1
      properties:
        name:
          description: "Name of the employee group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>"
          maxLength: 100
          minLength: 0
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin, like
          x-sortable: false
        number:
          description: "The unique number of the employee group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: int32
          maximum: 999999999
          minimum: 1
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        objectVersion:
          description: "The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
      required:
        - name
        - number
      type: object
    EmployeeGroupCursorResults:
      additionalProperties: false
      description: Array of objects along with a cursor. Max number in the array returned is 1000
      example:
        cursor: "234"
        items:
          - id: "13"
            name: Patrick
          - id: "16"
            name: John
      properties:
        cursor:
          description: "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        items:
          description: "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            $ref: "#/components/schemas/EmployeeGroup"
          nullable: true
          type: array
          x-filterable: not filterable
          x-sortable: false
      type: object
    EmployeeType:
      enum:
        - 0
        - 1
        - 2
        - 3
      format: int32
      type: integer
    Error:
      additionalProperties: false
      properties:
        developerHint:
          description: "Some hints for the developer that might help avoid the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        errorCode:
          description: "The error code.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        logId:
          description: "The unique log identifier of the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        logTimeUtc:
          description: "The UTC time of the error being logged.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        message:
          description: "Short description about the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        property:
          description: "The property name in case of validation logic issue.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
      type: object
    Mileage:
      additionalProperties: false
      example:
        Description: An awesome mileage
        Id: 1
      properties:
        date:
          description: "The date of the project mileage entry<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          format: date-time
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        distance:
          description: "The distance amount that the mileage registration should contain<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          format: double
          type: number
          x-filterable: not filterable
          x-sortable: false
        employeeNumber:
          description: "The employee number of the project mileage entry<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        from:
          description: "The starting place of the travel which the mileage registration reflects<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        includeApprove:
          description: "By default it is true, so a user with rights will be able to approve. \r

            \t\t\t\t\tOnce it is approved, field becomes false and it will be impossible to approve ever again.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          readOnly: true
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        isApproved:
          description: "Value specifying if the mileage was approved. If it was approved, it can not be updated anymore.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          readOnly: true
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        number:
          description: "The unique number of the project mileage entry<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: int32
          readOnly: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        objectVersion:
          description: "The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        projectNumber:
          description: "The project number of the project mileage entry<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        to:
          description: "The destination of the travel which the mileage registration reflects<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
      required:
        - date
        - distance
        - employeeNumber
        - projectNumber
      type: object
    MileageCursorResults:
      additionalProperties: false
      description: Array of objects along with a cursor. Max number in the array returned is 1000
      example:
        cursor: "234"
        items:
          - id: "13"
            name: Patrick
          - id: "16"
            name: John
      properties:
        cursor:
          description: "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        items:
          description: "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            $ref: "#/components/schemas/Mileage"
          nullable: true
          type: array
          x-filterable: not filterable
          x-sortable: false
      type: object
    MileageNumbersCollection:
      additionalProperties: false
      example:
        numbers:
          - 1
          - 2
          - 3
      properties:
        numbers:
          description: "The mileage numbers.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            format: int32
            type: integer
          type: array
          x-filterable: not filterable
          x-sortable: false
      required:
        - numbers
      type: object
    MileagePrices:
      additionalProperties: false
      example:
        Description: An awesome mileage price
        Id: 1
      properties:
        costPrice:
          description: "The total cost of the trip, calculated based on the mileage cost rates.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          format: double
          nullable: true
          readOnly: true
          type: number
          x-filterable: not filterable
          x-sortable: false
        costRate:
          description: "The cost of the trip per mile, provided by the mileage setup.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          format: double
          nullable: true
          readOnly: true
          type: number
          x-filterable: not filterable
          x-sortable: false
        number:
          description: "The mileage entry identifier.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        salesPrice:
          description: "The total sales price of the trip, calculated based on the mileage sales rates.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          format: double
          nullable: true
          readOnly: true
          type: number
          x-filterable: not filterable
          x-sortable: false
        salesRate:
          description: "The sales price of the trip per mile, provided by the mileage setup.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          format: double
          nullable: true
          readOnly: true
          type: number
          x-filterable: not filterable
          x-sortable: false
      type: object
    MileagePricesCursorResults:
      additionalProperties: false
      description: Array of objects along with a cursor. Max number in the array returned is 1000
      example:
        cursor: "234"
        items:
          - id: "13"
            name: Patrick
          - id: "16"
            name: John
      properties:
        cursor:
          description: "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        items:
          description: "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            $ref: "#/components/schemas/MileagePrices"
          nullable: true
          type: array
          x-filterable: not filterable
          x-sortable: false
      type: object
    OngoingAccountType:
      enum:
        - 0
        - 1
      format: int32
      type: integer
    Project:
      additionalProperties: false
      example:
        Description: An awesome project
        Id: 1
      properties:
        closedDate:
          description: "The date when the project was closed and booked.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          format: date-time
          nullable: true
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        contactPersonId:
          description: "The number of the contact person. Has to be from the same customer as the one defined in the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        costPrice:
          description: "Sum of registrations based on cost price for the project<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: double
          nullable: true
          readOnly: true
          type: number
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        customerNumber:
          description: "Number of customer this project is for. Required if project type is not Internal.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          maximum: 999999999
          minimum: 1
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        deliveryDate:
          description: "The project delivery date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          format: date-time
          nullable: true
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        deliveryLocationNumber:
          description: "The location number used to deliver the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        departmentNumber:
          description: "Only relevant if the user uses addon dimensions<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        description:
          description: "Text describing the project.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          maxLength: 2500
          minLength: 0
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        fixedPrice:
          description: "If a fixed price is agreed upon with a customer, this can be utilized. It is not retrieved when invoicing, however, so it is only used for reporting.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: double
          nullable: true
          type: number
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        invoicedTotal:
          description: "Sum of invoiced amount for the project<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: double
          nullable: true
          readOnly: true
          type: number
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        isBarred:
          description: "Barred projects cannot retrieve registrations<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        isClosed:
          description: "Shows if the project is closed. Closed project can't accept more entries.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          readOnly: true
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        isMainProject:
          description: "Decides whether the project is a main-project or sub-project. If false, it is a sub-project. If true, it is a main-project. Main-projects are grouping of projects. Main-project can't have entries, only sub-projects can.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        isMileageInvoiced:
          description: "Determines whether mileage should be included on sales invoices of the project<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        lastUpdated:
          description: "The date and time when this project was last updated. Use it in the filter to retrieve only updated projects.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          format: date-time
          nullable: true
          readOnly: true
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        mainProjectNumber:
          description: "The number of the main project, if this is a sub project linked to a main project. It can be null for both main and sub projects (sub project can exist not linked to any main project, like standalone project).<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        mileage:
          description: "Default amount of mileage for the project<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: double
          type: number
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        name:
          description: "Name of the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>"
          maxLength: 100
          minLength: 0
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin, like
          x-sortable: false
        number:
          description: "The unique number of the project. If it's not provided in the POST requests, it's auto-generated.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: int32
          maximum: 999999999
          minimum: 0
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        objectVersion:
          description: "The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        otherResponsibleEmployeeNumber:
          description: "Second employee number that is responsible for the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        projectGroupNumber:
          description: "The number of the project group that this project belongs.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        responsibleEmployeeNumber:
          description: "The employee number that is responsible for the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        salesPrice:
          description: "Sum of registrations based on sales price for the project<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: double
          nullable: true
          readOnly: true
          type: number
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        status:
          description: "The number of the project status. Project status is a separate manageable resource.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
      required:
        - name
        - projectGroupNumber
      type: object
    ProjectActivity:
      additionalProperties: false
      example:
        Description: An awesome project activity
        Id: 1
      properties:
        activityNumber:
          description: "The number of the activity that is linked to the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        completed:
          description: "If set to true, registration on the project is no longer allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        endDate:
          description: "The date when registration on the project activity stops being allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          format: date-time
          nullable: true
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        number:
          description: "The system unique number of the project activity entry. This property is not visible in the UI.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        objectVersion:
          description: "The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        projectNumber:
          description: "The number of the project that the activity is linked to.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        responsibleEmployeeNumber:
          description: "The number of the employee that is responsible for the project activity.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        startDate:
          description: "The date when registration on the project activity starts being allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          format: date-time
          nullable: true
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
      required:
        - activityNumber
        - projectNumber
      type: object
    ProjectActivityCursorResults:
      additionalProperties: false
      description: Array of objects along with a cursor. Max number in the array returned is 1000
      example:
        cursor: "234"
        items:
          - id: "13"
            name: Patrick
          - id: "16"
            name: John
      properties:
        cursor:
          description: "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        items:
          description: "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            $ref: "#/components/schemas/ProjectActivity"
          nullable: true
          type: array
          x-filterable: not filterable
          x-sortable: false
      type: object
    ProjectCursorResults:
      additionalProperties: false
      description: Array of objects along with a cursor. Max number in the array returned is 1000
      example:
        cursor: "234"
        items:
          - id: "13"
            name: Patrick
          - id: "16"
            name: John
      properties:
        cursor:
          description: "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        items:
          description: "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            $ref: "#/components/schemas/Project"
          nullable: true
          type: array
          x-filterable: not filterable
          x-sortable: false
      type: object
    ProjectCustomer:
      additionalProperties: false
      example:
        Description: An awesome customer
        Id: 1
      properties:
        name:
          description: "Name of the customer.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: true</p>"
          maxLength: 255
          minLength: 0
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin, like
          x-sortable: true
        number:
          description: "The unique number of the customer.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: int32
          maximum: 999999999
          minimum: 1
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        objectVersion:
          description: "The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
      required:
        - name
        - number
      type: object
    ProjectCustomerCursorResults:
      additionalProperties: false
      description: Array of objects along with a cursor. Max number in the array returned is 1000
      example:
        cursor: "234"
        items:
          - id: "13"
            name: Patrick
          - id: "16"
            name: John
      properties:
        cursor:
          description: "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        items:
          description: "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            $ref: "#/components/schemas/ProjectCustomer"
          nullable: true
          type: array
          x-filterable: not filterable
          x-sortable: false
      type: object
    ProjectEmployee:
      additionalProperties: false
      example:
        Description: An awesome project employee
        Id: 1
      properties:
        address:
          description: "Employee's home address.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          maxLength: 100
          minLength: 0
          nullable: true
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        canApprove:
          description: "Shows if the employee can approve for example time entries.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          type: boolean
          x-filterable: not filterable
          x-sortable: false
        canInvoice:
          description: "Shows if the employee can take for example a time entry to the invoice process.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        city:
          description: "Employee's city of residence.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          maxLength: 50
          minLength: 0
          nullable: true
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        costPriceAfter:
          description: "The cost after the cut off date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: double
          nullable: true
          type: number
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        costPriceBefore:
          description: "The cost before the cut off date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: double
          nullable: true
          type: number
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        cutOffDate:
          description: "By default, salesPriceBefore is used, unless a cutoffDate and salesPriceAfter is determined. The cutoffDate serves the purpose of choosing which date the salesPriceAfter shall apply from. It can be null if only salesPriceBefore should apply.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: true</p>"
          format: date
          nullable: true
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: true
        employeeType:
          allOf:
            - $ref: "#/components/schemas/EmployeeType"
          description: |-
            Employee types: 
            - 0: No user in e-conomic 
            - 1: Time Logger 
            - 2: Project Manager 
            - 3: Mobile Time Logger<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne</p><p class='sort'>Sortable: false</p>
          readOnly: true
          x-filterable: eq, ne
          x-sortable: false
        groupNumber:
          description: "The number of the employee group that this employee belongs.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        isBarred:
          description: "Shows if the employee can be registered on or is barred.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        isUser:
          description: "Shows if the employee is also a user.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          readOnly: true
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        name:
          description: "Name of the employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>"
          maxLength: 100
          minLength: 0
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin, like
          x-sortable: false
        number:
          description: "The unique number of the project employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: int32
          maximum: 999999
          minimum: 1
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        objectVersion:
          description: "The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        salesPriceAfter:
          description: "The sale price after the cut off date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: double
          nullable: true
          type: number
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        salesPriceBefore:
          description: "The sale price before the cut off date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: double
          nullable: true
          type: number
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        userId:
          description: "User id of the employee if it's a user.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        zipCode:
          description: "Employee's zip code.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          maxLength: 50
          minLength: 0
          nullable: true
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
      required:
        - canApprove
        - canInvoice
        - groupNumber
        - isBarred
        - name
        - number
      type: object
    ProjectEmployeeCursorResults:
      additionalProperties: false
      description: Array of objects along with a cursor. Max number in the array returned is 1000
      example:
        cursor: "234"
        items:
          - id: "13"
            name: Patrick
          - id: "16"
            name: John
      properties:
        cursor:
          description: "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        items:
          description: "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            $ref: "#/components/schemas/ProjectEmployee"
          nullable: true
          type: array
          x-filterable: not filterable
          x-sortable: false
      type: object
    ProjectEmployeeGroup:
      additionalProperties: false
      example:
        Description: An awesome employee group
        Id: 1
      properties:
        name:
          description: "Name of the employee group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>"
          maxLength: 100
          minLength: 0
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin, like
          x-sortable: false
        number:
          description: "The unique number of the employee group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: int32
          maximum: 999999999
          minimum: 1
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        objectVersion:
          description: "The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
      required:
        - name
        - number
      type: object
    ProjectEmployeeGroupCursorResults:
      additionalProperties: false
      description: Array of objects along with a cursor. Max number in the array returned is 1000
      example:
        cursor: "234"
        items:
          - id: "13"
            name: Patrick
          - id: "16"
            name: John
      properties:
        cursor:
          description: "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        items:
          description: "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            $ref: "#/components/schemas/ProjectEmployeeGroup"
          nullable: true
          type: array
          x-filterable: not filterable
          x-sortable: false
      type: object
    ProjectGroup:
      additionalProperties: false
      example:
        Description: An awesome projectGroup
        Id: 1
      properties:
        costAccountClosed:
          description: "The account number to register costs for closed projects. \r

            \r

            If includeCostPriceInFinance is set to true, this property is required. \r

            \r

            Otherwise, it cannot be provided. \r

            \r

            Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        costAccountOngoing:
          description: "The account number to register costs for ongoing projects. \r

            \r

            If includeCostPriceInFinance is set to true, this property is required. \r

            \r

            Otherwise, it cannot be provided. \r

            \r

            Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        costAccountOngoingType:
          allOf:
            - $ref: "#/components/schemas/OngoingAccountType"
          description: "The type of account for costs for ongoing projects:\ 

            - 0: Debit\ 

            - 1: Credit \r

            \r

            If includeCostPriceInFinance is set to true, this property is required. \r

            \r

            Otherwise, it cannot be provided.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          x-filterable: not filterable
          x-sortable: false
        costContraAccountOngoing:
          description: "The contra account number to register costs for ongoing projects. \r

            \r

            If includeCostPriceInFinance is set to true, this property is required. \r

            \r

            Otherwise, it cannot be provided. \r

            \r

            Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        includeCostPriceInFinance:
          description: "If set to true, project costs will be included in accounting.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        includeSalesPriceInFinance:
          description: "If set to true, project revenue will be included in accounting.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        name:
          description: "The project group name.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>"
          maxLength: 100
          minLength: 0
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin, like
          x-sortable: false
        number:
          description: "The unique number of the project group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        objectVersion:
          description: "The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        salesAccountClosed:
          description: "The account number to register revenue for closed projects. \r

            \r

            If includeSalesPriceInFinance is set to true, this property is required. \r

            \r

            Otherwise, it cannot be provided. \r

            \r

            Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        salesAccountOngoing:
          description: "The account number to register revenue for ongoing projects. \r

            \r

            If includeSalesPriceInFinance is set to true, this property is required. \r

            \r

            Otherwise, it cannot be provided. \r

            \r

            Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        salesAccountOngoingType:
          allOf:
            - $ref: "#/components/schemas/OngoingAccountType"
          description: "The type of account for revenue from ongoing projects:\ 

            - 0: Debit\ 

            - 1: Credit \r

            \r

            If includeSalesPriceInFinance is set to true, this property is required. \r

            \r

            Otherwise, it cannot be provided.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          x-filterable: not filterable
          x-sortable: false
        salesContraAccountOngoing:
          description: "The contra account number to register revenue for ongoing projects. \r

            \r

            If includeSalesPriceInFinance is set to true, this property is required. \r

            \r

            Otherwise, it cannot be provided. \r

            \r

            Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          nullable: true
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        type:
          allOf:
            - $ref: "#/components/schemas/ProjectGroupType"
          description: |-
            Project group types: 
            - 1: Internal 
            - 2: External Invoiceable 
            - 3: External Non Invoicable<p class='filter'>Filterable: eq, ne</p><p class='sort'>Sortable: false</p>
          x-filterable: eq, ne
          x-sortable: false
      required:
        - name
        - type
      type: object
    ProjectGroupCursorResults:
      additionalProperties: false
      description: Array of objects along with a cursor. Max number in the array returned is 1000
      example:
        cursor: "234"
        items:
          - id: "13"
            name: Patrick
          - id: "16"
            name: John
      properties:
        cursor:
          description: "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        items:
          description: "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            $ref: "#/components/schemas/ProjectGroup"
          nullable: true
          type: array
          x-filterable: not filterable
          x-sortable: false
      type: object
    ProjectGroupType:
      enum:
        - 1
        - 2
        - 3
      format: int32
      type: integer
    ProjectStatus:
      additionalProperties: false
      example:
        Description: An awesome projectStatus
        Id: 1
      properties:
        name:
          description: "Name of the project status.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin, like
          x-sortable: false
        number:
          description: "The unique number of the project status.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        objectVersion:
          description: "The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        priority:
          description: "Defines the priority of the project status<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        type:
          allOf:
            - $ref: "#/components/schemas/ProjectStatusType"
          description: |-
            Project status types: 
            - 1: Quote sent 
            - 2: Realised<p class='filter'>Filterable: eq, ne</p><p class='sort'>Sortable: false</p>
          x-filterable: eq, ne
          x-sortable: false
      type: object
    ProjectStatusCursorResults:
      additionalProperties: false
      description: Array of objects along with a cursor. Max number in the array returned is 1000
      example:
        cursor: "234"
        items:
          - id: "13"
            name: Patrick
          - id: "16"
            name: John
      properties:
        cursor:
          description: "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        items:
          description: "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            $ref: "#/components/schemas/ProjectStatus"
          nullable: true
          type: array
          x-filterable: not filterable
          x-sortable: false
      type: object
    ProjectStatusType:
      enum:
        - 1
        - 2
      format: int32
      type: integer
    TimeEntry:
      additionalProperties: false
      example:
        Description: An awesome time entry
        Id: 1
      properties:
        activityNumber:
          description: "The activity identifier of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        date:
          description: "The date of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          format: date-time
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        employeeNumber:
          description: "The employee identifier of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        isApproved:
          description: "Bool value specifying if the time entry was approved. If time entry was approved, it can not be updated anymore.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          readOnly: true
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        isReconciled:
          description: "Bool value specifying if the time entry was reconciled.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: boolean
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        lastUpdated:
          description: "The time entry last updated date.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>"
          format: date-time
          readOnly: true
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte
          x-sortable: false
        number:
          description: "The time entry identifier.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        numberOfHours:
          description: "Number of hours of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: double
          nullable: true
          type: number
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        objectVersion:
          description: "The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        projectNumber:
          description: "The project identifier of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: false
        text:
          description: "Text description of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>"
          nullable: true
          type: string
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin, like
          x-sortable: false
      required:
        - activityNumber
        - date
        - employeeNumber
        - projectNumber
      type: object
    TimeEntryCursorResults:
      additionalProperties: false
      description: Array of objects along with a cursor. Max number in the array returned is 1000
      example:
        cursor: "234"
        items:
          - id: "13"
            name: Patrick
          - id: "16"
            name: John
      properties:
        cursor:
          description: "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        items:
          description: "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            $ref: "#/components/schemas/TimeEntry"
          nullable: true
          type: array
          x-filterable: not filterable
          x-sortable: false
      type: object
    TimeEntryNumbersCollection:
      additionalProperties: false
      example:
        numbers:
          - 1
          - 2
          - 3
      properties:
        numbers:
          description: "The time entries numbers.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            format: int32
            type: integer
          type: array
          x-filterable: not filterable
          x-sortable: false
      required:
        - numbers
      type: object
    TimeEntryPrices:
      additionalProperties: false
      example:
        Description: An awesome time entry price
        Id: 1
      properties:
        costPrice:
          description: "The time entry cost price, calculated based on the activity cost price or on the employee cost price when no activity price is provided.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          format: double
          nullable: true
          readOnly: true
          type: number
          x-filterable: not filterable
          x-sortable: false
        number:
          description: "The time entry identifier.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>"
          format: int32
          type: integer
          x-filterable: eq, ne, lt, lte, gt, gte, in, nin
          x-sortable: true
        salesPrice:
          description: "The time entry sales price, calculated based on the activity sales price or on the employee sales price when no activity price is provided.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          format: double
          nullable: true
          readOnly: true
          type: number
          x-filterable: not filterable
          x-sortable: false
      type: object
    TimeEntryPricesCursorResults:
      additionalProperties: false
      description: Array of objects along with a cursor. Max number in the array returned is 1000
      example:
        cursor: "234"
        items:
          - id: "13"
            name: Patrick
          - id: "16"
            name: John
      properties:
        cursor:
          description: "Use this continuation cursor in a request back to continue the list. In case there are no more items to retrieve, the cursor is not returned at all.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          nullable: true
          readOnly: true
          type: string
          x-filterable: not filterable
          x-sortable: false
        items:
          description: "Max number of items returned is 1000.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          items:
            $ref: "#/components/schemas/TimeEntryPrices"
          nullable: true
          type: array
          x-filterable: not filterable
          x-sortable: false
      type: object
  securitySchemes:
    X-AgreementGrantToken:
      description: Agreement grant token needed to access the endpoints.
      in: header
      name: X-AgreementGrantToken
      type: apiKey
    X-AppSecretToken:
      description: Application secret token needed to access the endpoints.
      in: header
      name: X-AppSecretToken
      type: apiKey
x-tagGroups:
  - name: Projects
    tags:
      - Projects
      - Project Statuses
      - Project Groups
      - Time entries
      - Time entry prices
      - Mileage entries
      - Mileage entry prices
      - Project employees
      - Project employee groups
      - Activities
      - Activity Groups
      - Project Customers
      - Project Activities
      - Cost Types
      - Cost Type Groups
  - name: Sales
    tags:
      - Employees
      - Employee groups
