openapi: 3.0.0
servers:
  - url: https://api.severa.visma.com/rest-api
x-hasEquivalentPaths: true
info:
  description: "The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.\r

    \r

    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.\r

    \r

    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.\r

    \r

    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.\r

    \r\n"
  title: Severa Public Rest API Documentation
  version: "1.0"
  x-apisguru-categories:
    - project_management
  x-logo:
    url: https://assets-global.website-files.com/6305e092bc95bebe63ae6578/639981fb13f505465c007db2_2437_16-9.jpg
  x-origin:
    - format: openapi
      url: https://api.severa.visma.com/psapublicrest/openapidocs/v1.0/doc.json
      version: "3.0"
  x-providerName: visma.com
paths:
  /heartbeat/authorized:
    get:
      description: This route requires authentication, returns 204 http status when successful.
      operationId: HeartBeat_GetAuthorization
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2: []
      summary: Returns http status code 204 for successful authentication.
      tags:
        - NoScope
  /heartbeat/database:
    get:
      description: This does not require authentication.
      operationId: HeartBeat_GetDatabaseStatus
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: binary
                type: string
          description: Returns message "Database is alive."
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      summary: Can be used to check the status of the database.
      tags:
        - NoScope
  /heartbeat/server:
    get:
      description: This does not require authentication.
      operationId: HeartBeat_GetServerStatus
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: binary
                type: string
          description: Returns message "Server is alive."
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      summary: Can be used to check the status of the REST Api.
      tags:
        - NoScope
  /v1/activities:
    get:
      description: Start and end date times accept values of DateTimeOffset type, based on UTF-8 encoding.
      operationId: Activities_GetActivities
      parameters:
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Which activities to fetch - open/closed, Default all."
          in: query
          name: closed
          schema:
            nullable: true
            type: boolean
          x-position: 3
        - description: "Optional: activity category for the activities to be fetched. Should be one of Personal/Absences/CalendarEntry/SalesEvent/Task. Default all."
          explode: true
          in: query
          name: activityCategories
          schema:
            items:
              $ref: "#/components/schemas/ActivityCategory"
            nullable: true
            type: array
          style: form
          x-position: 4
        - description: "Optional: ID of customer. Default all."
          explode: true
          in: query
          name: customerGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 5
          x-relation-guid: CustomerModel
        - description: "Optional: Include the activities that don't have customer. Default is true."
          in: query
          name: includeTasksWithNoCustomer
          schema:
            default: true
            type: boolean
          x-position: 6
        - description: "Optional: ID of the project for the activities to be fetched. If not provided, returns for all projects. Default all."
          explode: true
          in: query
          name: projectGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 7
          x-relation-guid: ProjectOutputModel
        - description: "Optional: Include the activities that don't have project. Default is true."
          in: query
          name: includeTasksWithNoProject
          schema:
            default: true
            type: boolean
          x-position: 8
        - description: "Optional: ID of the business unit of the project based on which activities should be filtered. If not provided, returns for all business units. Default all."
          explode: true
          in: query
          name: projectBusinessUnitGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 9
          x-relation-guid: BusinessUnitModel
        - description: "Optional: ID of the project manager. If not provided, returns for all project managers. Default all."
          explode: true
          in: query
          name: projectOwnerGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 10
          x-relation-guid: UserOutputModel
        - description: "Optional: ID of the user for the activities to be fetched. If not provided, returns for all users. Default all."
          explode: true
          in: query
          name: userGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 11
          x-relation-guid: UserOutputModel
        - description: "Optional: Include the activities that the user is a member. Effective if userGuid is provided. Default is to not include."
          in: query
          name: includeAsMember
          schema:
            default: false
            type: boolean
          x-position: 12
        - description: "Optional: User keyword Ids of activity owner to search for."
          explode: true
          in: query
          name: userKeywordGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 13
          x-relation-guid: UserKeywordModel
        - description: "Optional: starting date and time from which to get the activities in user's timezone. Finds all activities that end after the date time. Format \"2017-04-12T13%3A20%3A00%2b02%3A00\". Default all."
          in: query
          name: startDateTime
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 14
        - description: "Optional: ending date and time to which to get the activities in user's timezone. Finds all activities that start before or on the date time. Format \"2017-04-12T13%3A20%3A00%2b02%3A00\". Default all. If activities for one day are fetched, give start date time with time as 00:00 with the offset of the timezone and end time as 23:59:59 with the offset."
          in: query
          name: endDateTime
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 15
        - description: "Optional: ID of the project task status. Default all."
          explode: true
          in: query
          name: projectTaskStatusGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 16
          x-relation-guid: ProjectTaskStatusModel
        - description: "Optional: ID of the phase for the activities to be fetched. If not provided, returns for all phases. Default all."
          explode: true
          in: query
          name: phaseGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 17
          x-relation-guid: PhaseOutputModel
        - description: "Optional: If one phase guid is given include activities also from sub phases. If multiple phase guids are given, returns activities only for those regardless of this parameter. Default false."
          in: query
          name: includeSubPhases
          schema:
            default: false
            type: boolean
          x-position: 18
        - description: "Optional: ID of the contact for the activities to be fetched. If not provided, returns for all users. Default all."
          explode: true
          in: query
          name: contactGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 19
          x-relation-guid: ContactModel
        - description: "Optional: has duration flag for the activity. Default all."
          in: query
          name: hasDuration
          schema:
            nullable: true
            type: boolean
          x-position: 20
        - description: "Optional: has any work hour entries associated with the activity. Default all."
          in: query
          name: hasHours
          schema:
            nullable: true
            type: boolean
          x-position: 21
        - description: "Optional: is the activity unassigned. Default all."
          in: query
          name: isUnassigned
          schema:
            nullable: true
            type: boolean
          x-position: 22
        - description: "Optional: Get activities that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 23
        - description: "Optional: If given as true returns activities that start after start time and end before end time. If given as false returns activities that start before end time and end after start time. Limit are included in both cases. Default false."
          in: query
          name: useStrictStartAndEndDateTime
          schema:
            default: false
            type: boolean
          x-position: 24
        - description: "Optional: ID of the project activity type. Default all."
          explode: true
          in: query
          name: activityTypeGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 25
          x-relation-guid: ActivityTypeModel
        - description: "Optional: Type of the recurrence. Default returns all not recurring activities, instances and exceptions. (None = not recurring activity)"
          in: query
          name: recurrenceType
          schema:
            $ref: "#/components/schemas/RecurrenceType"
          x-position: 26
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ActivityModel"
                type: array
          description: Activities for a project
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - activities:read
      summary: Get all activities of an organization
      tags:
        - ActivitiesRead
    post:
      operationId: Activities_PostActivity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityModel"
              nullable: true
        description: ActivityModel
        x-name: activity
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityModel"
          description: Created activity
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - activities:write
      summary: Insert a activity
      tags:
        - ActivitiesWrite
  "/v1/activities/{activityGuid}/activityparticipants":
    get:
      operationId: ActivityParticipants_GetActivityParticipants
      parameters:
        - description: ID of the activity
          in: path
          name: activityGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ActivityModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ActivityParticipantModel"
                type: array
          description: ActivityParticipants for an activity
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - activities:read
      summary: Get participants for an activity
      tags:
        - ActivitiesRead
  "/v1/activities/{activityGuid}/activityparticipants/{activityParticipantGuid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if participant can't be found."
      operationId: ActivityParticipants_DeleteActivityParticipant
      parameters:
        - description: ID of the activity from which to delete the participant. If an activity occurrence guid is given, this will create an exception to the recurring activity and delete the participant from that.
          in: path
          name: activityGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ActivityModel
        - description: ID of the participant
          in: path
          name: activityParticipantGuid
          required: true
          schema:
            type: string
          x-position: 2
          x-relation-guid: ActivityParticipantModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - activities:delete
      summary: Delete activity participant.
      tags:
        - ActivitiesDelete
  "/v1/activities/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if activity can't be found."
      operationId: Activities_DeleteActivity
      parameters:
        - description: ID for the activity to delete
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ActivityModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - activities:delete
      summary: Delete an activity
      tags:
        - ActivitiesDelete
    get:
      operationId: Activities_GetActivity
      parameters:
        - description: GUID used to get the activity.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ActivityModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - activities:read
      summary: Get activity by ID
      tags:
        - ActivitiesRead
    patch:
      operationId: Activities_PatchActivity
      parameters:
        - description: ID of the activity. Can also be comma separate list of IDs to patch multiple activities with one call. When multiple IDs are given, returns model which has list of succeeded activities and list of errors.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ActivityModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of ActivityModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ActivityModel"
                type: array
          description: List of updated activities
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - activities:write
      summary: Update (Patch) a activity or a part of it
      tags:
        - ActivitiesWrite
  "/v1/activities/{guid}/exceptions":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if activity can't be found or is not recurring."
      operationId: Activities_DeleteExceptions
      parameters:
        - description: ID of the recurring activity
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ActivityModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - activities:delete
      summary: Resets exceptions from a recurring activity.
      tags:
        - ActivitiesDelete
  /v1/activityparticipants:
    post:
      operationId: ActivityParticipants_PostActivityParticipant
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityParticipantModel"
              nullable: true
        description: ActivityParticipantModel
        x-name: activityParticipantModel
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityParticipantModel"
          description: Added participant
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - activities:write
      summary: Adds an activity participant
      tags:
        - ActivitiesWrite
  "/v1/activityparticipants/{guid}":
    get:
      operationId: ActivityParticipants_GetActivityParticipant
      parameters:
        - description: ID of the participant
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ActivityParticipantModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityParticipantModel"
          description: ActivityParticipant
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - activities:read
      summary: Get activity participant
      tags:
        - ActivitiesRead
    patch:
      description: Only IsConfirmed property can be updated.
      operationId: ActivityParticipants_PatchActivityParticipants
      parameters:
        - description: ID of the activity participant
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ActivityParticipantModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ActivityParticipantModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ActivityParticipantModel"
                type: array
          description: list of updated activity participants
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - activities:write
      summary: Update (Patch) a activity participant or a part of it
      tags:
        - ActivitiesWrite
  /v1/activitytypes:
    get:
      operationId: ActivityTypes_GetActivityTypes
      parameters:
        - description: If not given, return all Activity Types, if given as true return only active Activity Types, if given as false returns only inactive Activity Types
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Get activity types that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Category or multiple categories of activity types to search for. Default all."
          explode: true
          in: query
          name: category
          schema:
            items:
              $ref: "#/components/schemas/ActivityCategory"
            nullable: true
            type: array
          style: form
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ActivityTypeModel"
                type: array
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get the Activity Types
      tags:
        - SettingsRead
    post:
      operationId: ActivityTypes_PostActivityType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityTypeModel"
              nullable: true
        description: Activity type
        x-name: activityType
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityTypeModel"
          description: Inserted ActivityType
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert an Activity type.
      tags:
        - SettingsWrite
  "/v1/activitytypes/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if activity type can't be found."
      operationId: ActivityTypes_DeleteActivityType
      parameters:
        - description: ID for the activity type to delete
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ActivityTypeModel
        - description: "Optional: ID of the activity type to which to move usages of this activity type. Default null. If activity type is in use and usages aren't moved the deletion might fail."
          in: query
          name: moveUsagesToGuid
          schema:
            nullable: true
            type: string
          x-position: 2
          x-relation-guid: ActivityTypeModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete an activity type.
      tags:
        - SettingsDelete
    get:
      operationId: ActivityTypes_GetActivityType
      parameters:
        - description: GUID used to get the Activity Type.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ActivityTypeModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityTypeModel"
          description: Activity Type
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get Activity Type by ID
      tags:
        - SettingsRead
    patch:
      operationId: ActivityTypes_PatchActivityType
      parameters:
        - description: ID of the Activity Type
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ActivityTypeModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ActivityTypeModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ActivityTypeModel"
                type: array
          description: List of updated Activity Types
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) an Activity Type or a part of it
      tags:
        - SettingsWrite
  /v1/addresses:
    get:
      operationId: Addresses_GetAddresses
      parameters:
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 3
        - description: "Optional: Get addresses that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AddressModel"
                type: array
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get the addresses.
      tags:
        - CustomersRead
  "/v1/addresses/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if address can't be found."
      operationId: Addresses_DeleteAddress
      parameters:
        - description: ID for the address to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: AddressModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:delete
      summary: Delete an address.
      tags:
        - CustomersDelete
    get:
      operationId: Addresses_GetAddress
      parameters:
        - description: GUID used to get the address.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: AddressModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddressModel"
          description: Address.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get address by ID.
      tags:
        - CustomersRead
    patch:
      operationId: Addresses_PatchAddress
      parameters:
        - description: ID of the address.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: AddressModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of AddressModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AddressModel"
                type: array
          description: List of updated addresses.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:write
      summary: Update (Patch) an address or a part of it.
      tags:
        - CustomersWrite
  /v1/bankaccounts:
    get:
      operationId: BankAccounts_GetBankAccounts
      parameters:
        - description: "Optional: ID of the company."
          in: query
          name: companyGuid
          schema:
            nullable: true
            type: string
          x-position: 1
          x-relation-guid: CompanyModel
        - description: "Optional: ID of the business unit."
          in: query
          name: businessUnitGuid
          schema:
            nullable: true
            type: string
          x-position: 2
          x-relation-guid: BusinessUnitModel
        - description: If not given, returns all bank accounts, if given as true returns only active bank accounts, if given as false returns only inactive bank accounts.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 3
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 5
        - description: "Optional: Text to search from bank account name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 6
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 7
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=BankName&sortings[0].value=Desc &sortings[1].key=BusinessUnitName&sortings[1].value=Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 8
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BankAccountOutputModel"
                type: array
          description: Bank accounts.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all bank accounts for current organization.
      tags:
        - SettingsRead
  "/v1/bankaccounts/{guid}":
    get:
      operationId: BankAccounts_GetBankAccount
      parameters:
        - description: GUID used to get the bank account.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: BankAccountOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccountOutputModel"
          description: Bank account.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get bank account by ID.
      tags:
        - SettingsRead
  /v1/businessunits:
    get:
      operationId: BusinessUnits_GetBusinessUnits
      parameters:
        - description: If not given, return all BusinessUnits, if given as true return only active BusinessUnits, if given as false returns only inactive BusinessUnits
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: ID of the company to which the business units belong."
          in: query
          name: companyGuid
          schema:
            nullable: true
            type: string
          x-position: 2
          x-relation-guid: CompanyModel
        - description: "Optional: ID of the country in which the company of business units is located."
          in: query
          name: companyCountryGuid
          schema:
            nullable: true
            type: string
          x-position: 3
          x-relation-guid: CountryModel
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 5
        - description: "Optional: Text to search from business unit name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 6
        - description: "Optional: Get business units that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 7
        - description: "Optional: Code of the business unit."
          in: query
          name: code
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 8
        - description: "Optional: Name of the business unit."
          in: query
          name: name
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 9
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BusinessUnitModel"
                type: array
          description: All the BusinessUnits
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the BusinessUnits
      tags:
        - SettingsRead
  "/v1/businessunits/{guid}":
    get:
      operationId: BusinessUnits_GetBusinessUnit
      parameters:
        - description: GUID used to get the businessUnit.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: BusinessUnitModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessUnitModel"
          description: BusinessUnit.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get businessUnit by ID.
      tags:
        - SettingsRead
    patch:
      operationId: BusinessUnits_PatchBusinessUnit
      parameters:
        - description: ID of the businessUnit.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: BusinessUnitModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of BusinessUnitModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BusinessUnitModel"
                type: array
          description: List of updated business units.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) an businessUnit or a part of it.
      tags:
        - SettingsWrite
  /v1/communicationtypes:
    get:
      operationId: CommunicationTypes_GetCommunicationTypes
      parameters:
        - description: Filter the communication types. If true/false, only the active/inactive ones are returned. If null, all the communication types are returned.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from communication type name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommunicationTypeModel"
                type: array
          description: Projects.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all communication types.
      tags:
        - SettingsRead
    post:
      operationId: CommunicationTypes_PostCommunicationType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommunicationTypeModel"
              nullable: true
        description: CommunicationTypeModel.
        x-name: communicationTypeModel
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunicationTypeModel"
          description: Created communication type.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a communication type.
      tags:
        - SettingsWrite
  "/v1/communicationtypes/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: CommunicationTypes_DeleteCommunicationType
      parameters:
        - description: GUID used to delete the communication type.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CommunicationTypeModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Deletes a communication type.
      tags:
        - SettingsDelete
    get:
      operationId: CommunicationTypes_GetCommunicationType
      parameters:
        - description: ID used to get the communication type.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CommunicationTypeModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunicationTypeModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get communication type by ID.
      tags:
        - SettingsRead
    patch:
      operationId: CommunicationTypes_PatchCommunicationType
      parameters:
        - description: ID of the communication type.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CommunicationTypeModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of CommunicationTypeModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommunicationTypeModel"
                type: array
          description: Updated communication model.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a communication type or a part of it.
      tags:
        - SettingsWrite
  /v1/contactcommunications:
    get:
      operationId: ContactCommunications_GetCommunications
      parameters:
        - description: If not given, return all contact communications, if given as true return only active contact communications, if given as false returns only inactive contact communications.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from contact communication value."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Get contact communications that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ContactCommunicationModel"
                type: array
          description: All the contact communications.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get all contact communications.
      tags:
        - CustomersRead
    post:
      operationId: ContactCommunications_PostContactCommunication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactCommunicationModel"
              nullable: true
        description: ContactCommunicationModel.
        x-name: contactCommunication
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactCommunicationModel"
          description: Inserted contact communication.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:write
      summary: Insert a communication for a contact.
      tags:
        - CustomersWrite
  "/v1/contactcommunications/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: ContactCommunications_DeleteContactCommunication
      parameters:
        - description: GUID used to delete the contact's communication.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ContactCommunicationModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:delete
      summary: Deletes contact's communication.
      tags:
        - CustomersDelete
    get:
      operationId: ContactCommunications_GetCommunication
      parameters:
        - description: GUID used to get the contact communication.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ContactCommunicationModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactCommunicationModel"
          description: Contact communication.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get contact communication by ID.
      tags:
        - CustomersRead
    patch:
      operationId: ContactCommunications_PatchContactCommunication
      parameters:
        - description: ID of the contact's communication.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ContactCommunicationModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of ContactCommunicationModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactCommunicationModel"
          description: Updated contact communication model.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:write
      summary: Update (Patch) a contact's communication or a part of it.
      tags:
        - CustomersWrite
  /v1/contactpersons:
    get:
      operationId: Contacts_GetContacts
      parameters:
        - description: If not given, return all Contact persons, if given as true return only active Contact persons, if given as false returns only inactive Contact persons.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from contact person's name or communication method (i.e. phone number or email address)."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Search criterias."
          explode: true
          in: query
          name: searchCriterias
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndObject"
            nullable: true
            type: array
          style: form
          x-position: 5
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=FirstName&sortings[0].value=Desc &sortings[1].key=LastName&sortings[1].value=Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
        - description: "Optional: Get contact persons that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 7
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ContactModel"
                type: array
          description: List of contacts for a customer.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get all the contact persons.
      tags:
        - CustomersRead
    post:
      operationId: Contacts_PostContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactModel"
              nullable: true
        description: ContactModel.
        x-name: contact
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactModel"
          description: Inserted contact.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:write
      summary: Insert a contact.
      tags:
        - CustomersWrite
  "/v1/contactpersons/{contactGuid}/addresses":
    get:
      operationId: Addresses_GetContactAddress
      parameters:
        - description: ID for the contact person
          in: path
          name: contactGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ContactModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AddressModel"
                type: array
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get contact person's address
      tags:
        - CustomersRead
  "/v1/contactpersons/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: Contacts_DeleteContact
      parameters:
        - description: GUID used to delete the contact.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ContactModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:delete
      summary: Deletes a contact.
      tags:
        - CustomersDelete
    get:
      operationId: Contacts_GetContact
      parameters:
        - description: GUID used to get the contact.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ContactModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactModel"
          description: Contact.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get contact by ID.
      tags:
        - CustomersRead
    patch:
      operationId: Contacts_PatchContact
      parameters:
        - description: ID of the contact.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ContactModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ContactModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ContactModel"
                type: array
          description: List of updated contact persons.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:write
      summary: Update (Patch) an contact or a part of it.
      tags:
        - CustomersWrite
  /v1/contactroles:
    get:
      operationId: ContactRoles_GetContactRoles
      parameters:
        - description: If not given, return all contact roles, if given as true return only active contact roles, if given as false returns only inactive contact roles.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from contact role name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ContactRoleModel"
                type: array
          description: All the contact roles.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get contact roles.
      tags:
        - SettingsRead
    post:
      operationId: ContactRoles_PostContactRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactRoleModel"
              nullable: true
        description: ContactRoleModel.
        x-name: contactRole
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactRoleModel"
          description: Created contact role.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a contact role.
      tags:
        - SettingsWrite
  "/v1/contactroles/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if contact role can't be found."
      operationId: ContactRoles_DeleteContactRole
      parameters:
        - description: ID for the contact role to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ContactRoleModel
        - description: "Optional: ID of the contact role to which to move usages of this contact role. Default null. If contact role is in use and usages aren't moved the deletion might fail."
          in: query
          name: moveUsagesToGuid
          schema:
            nullable: true
            type: string
          x-position: 2
          x-relation-guid: ContactRoleModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete a contact role.
      tags:
        - SettingsDelete
    get:
      operationId: ContactRoles_GetContactRole
      parameters:
        - description: Id used to get the contact role.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ContactRoleModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactRoleModel"
          description: ContactRoleModel.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get contact role by ID.
      tags:
        - SettingsRead
    patch:
      operationId: ContactRoles_PatchContactRole
      parameters:
        - description: ID of the contact role.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ContactRoleModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ContactRoleModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ContactRoleModel"
                type: array
          description: list of updated contact role.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a contact role or a part of it.
      tags:
        - SettingsWrite
  "/v1/contacts/{contactGuid}/contactcommunications":
    get:
      operationId: ContactCommunications_GetCommunications2
      parameters:
        - description: Whose communications are requested.
          in: path
          name: contactGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ContactModel
        - description: If not given, return all contact communications, if given as true return only active contact communications, if given as false returns only inactive contact communications.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ContactCommunicationModel"
                type: array
          description: All the contact communications.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get all communications for a contact.
      tags:
        - CustomersRead
  "/v1/contacts/{contactGuid}/keywords":
    get:
      operationId: Keywords_GetContactKeywords
      parameters:
        - description: ID of the user whose keywords are requested.
          in: path
          name: contactGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ContactModel
        - description: If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 2
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Keyword&sortings[0].value=Desc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/KeywordModel"
                type: array
          description: Keywords.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get all the keywords for contact.
      tags:
        - CustomersRead
  "/v1/contacts/{contactGuid}/keywords/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if the keyword or the link can't be found."
      operationId: Keywords_DeleteContactKeyword
      parameters:
        - in: path
          name: contactGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ContactModel
        - in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 2
          x-relation-guid: KeywordModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:delete
      summary: Delete a keyword from the contact
      tags:
        - CustomersDelete
    post:
      operationId: Keywords_LinkKeywordToContact
      parameters:
        - in: path
          name: contactGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 2
          x-relation-guid: KeywordModel
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactKeywordModel"
          description: Created contact keyword link.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:write
      summary: Link existing keyword to contact
      tags:
        - CustomersWrite
  /v1/costaccounts:
    get:
      operationId: CostAccounts_GetCostAccounts
      parameters:
        - description: If not given, return all cost accounts, if given as true return only active cost accounts, if given as false returns only inactive cost accounts.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from cost account name or identifier."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc &sortings[1].key=Identifier&sortings[1].value=Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CostAccountModel"
                type: array
          description: All the cost accounts.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get cost accounts.
      tags:
        - SettingsRead
    post:
      operationId: CostAccounts_PostCostAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CostAccountModel"
              nullable: true
        description: CostAccountModel.
        x-name: costAccount
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CostAccountModel"
          description: Created cost account.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a cost account.
      tags:
        - SettingsWrite
  "/v1/costaccounts/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if cost account can't be found."
      operationId: CostAccounts_DeleteCostAccount
      parameters:
        - description: ID for the cost account to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CostAccountModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete a cost account.
      tags:
        - SettingsDelete
    get:
      operationId: CostAccounts_GetCostAccount
      parameters:
        - description: Cost account's guid.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CostAccountModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CostAccountModel"
          description: CostAccountModel.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get cost account by Guid.
      tags:
        - SettingsRead
    patch:
      operationId: CostAccounts_PatchCostAccount
      parameters:
        - description: ID of the cost account.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CostAccountModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of CostAccountModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CostAccountModel"
                type: array
          description: list of updated cost account.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a cost account or a part of it.
      tags:
        - SettingsWrite
  /v1/costcenters:
    get:
      operationId: CostCenters_GetCostCenters
      parameters:
        - description: If not given, return all cost centers, if given as true return only active cost centers, if given as false returns only inactive cost centers.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from cost center name or identifier."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Get cost centers that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 5
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 6
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 7
        - description: "Optional: Identifier of the cost center."
          in: query
          name: identifier
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 8
        - description: "Optional: Name of the cost center."
          in: query
          name: name
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 9
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CostCenterModel"
                type: array
          description: All the cost centers.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get cost centers.
      tags:
        - SettingsRead
    post:
      operationId: CostCenters_PostCostCenter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CostCenterModel"
              nullable: true
        description: CostCenterModel.
        x-name: costCenter
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CostCenterModel"
          description: Created cost center.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a cost center.
      tags:
        - SettingsWrite
  "/v1/costcenters/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if cost center can't be found."
      operationId: CostCenters_DeleteCostCenter
      parameters:
        - description: ID for the cost center to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CostCenterModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete a cost center.
      tags:
        - SettingsDelete
    get:
      operationId: CostCenters_GetCostCenter
      parameters:
        - description: Id used to get the cost center.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CostCenterModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CostCenterModel"
          description: CostCenterModel.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get cost center by ID.
      tags:
        - SettingsRead
    patch:
      operationId: CostCenters_PatchCostCenter
      parameters:
        - description: ID of the cost center.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CostCenterModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of CostCenterModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CostCenterModel"
                type: array
          description: list of updated cost center.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a cost center or a part of it.
      tags:
        - SettingsWrite
  /v1/currencies:
    get:
      operationId: Currencies_GetCurrencies
      parameters:
        - description: If not given, return all Currencies, if given as true return only active Currencies, if given as false returns only inactive Currencies.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text based search applied to the result. Matches currency name and code."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc". Using additional sorting fields "CreatedDate" and / or "LastUpdatedDate" as keys sort currencies without a timestamp provided when sorting with other date fields.'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CurrencyOutputModel"
                type: array
          description: All the Currencies
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the Currencies
      tags:
        - SettingsRead
  "/v1/currencies/{guid}":
    get:
      operationId: Currencies_GetCurrency
      parameters:
        - description: GUID used to get the currency.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CurrencyOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrencyOutputModel"
          description: CurrencyModel.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get currency by ID.
      tags:
        - SettingsRead
    patch:
      operationId: Currencies_PatchCurrency
      parameters:
        - description: ID of the currency.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CurrencyOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of CurrencyModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CurrencyOutputModel"
                type: array
          description: List of updated currencies.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) an currency or a part of it.
      tags:
        - SettingsWrite
  /v1/customercountrysettings:
    post:
      operationId: CustomerCountrySettings_PostCustomerCountrySettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerCountrySettingsInputModel"
              nullable: true
        description: CustomerCountrySettingsModel.
        x-name: model
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerCountrySettingsOutputModel"
          description: Inserted customer country setting.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:write
      summary: Insert a customer country setting.
      tags:
        - CustomersWrite
  "/v1/customercountrysettings/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if customer country setting can't be found."
      operationId: CustomerCountrySettings_DeleteCustomerCountrySetting
      parameters:
        - description: GUID used to delete the customer country setting.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerCountrySettingsOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:delete
      summary: Deletes a customer country setting.
      tags:
        - CustomersDelete
    patch:
      operationId: CustomerCountrySettings_PatchCustomerCountrySettings
      parameters:
        - description: ID of the customer country setting.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerCountrySettingsOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of CustomerCountrySettingsModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerCountrySettingsOutputModel"
                type: array
          description: List of updated customer country settings.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:write
      summary: Update (Patch) a customer country setting.
      tags:
        - CustomersWrite
  /v1/customermarketsegments:
    get:
      operationId: CustomerMarketSegments_GetAllCustomerMarketSegments
      parameters:
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Text to search from customer market segment name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 3
        - description: "Optional: Fetches all children of a parent based on parent market segment guid."
          in: query
          name: parentMarketSegmentGuid
          schema:
            nullable: true
            type: string
          x-position: 4
          x-relation-guid: CustomerMarketSegmentModel
        - description: "Optional: Returns only child segments when false. Has no effect if parentMarketSegmentGuid parameter is defined. Default = true."
          in: query
          name: includeParentLevel
          schema:
            default: true
            type: boolean
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerMarketSegmentModel"
                type: array
          description: List of Customer Market Segments.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get all Customer Market Segments.
      tags:
        - CustomersRead
    post:
      operationId: CustomerMarketSegments_PostCustomerMarketSegment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerMarketSegmentModel"
              nullable: true
        description: CustomerMarketSegmentModel.
        x-name: customerMarketSegment
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerMarketSegmentModel"
          description: Created customer market segment.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:write
      summary: Add a market segment for customer.
      tags:
        - CustomersWrite
  "/v1/customermarketsegments/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if customer market segment can't be found."
      operationId: CustomerMarketSegments_DeleteCustomerMarketSegment
      parameters:
        - description: ID for the customer market segment to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerMarketSegmentModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:delete
      summary: Deletes a customer market segment.
      tags:
        - CustomersDelete
    get:
      operationId: CustomerMarketSegments_GetCustomerMarketSegment
      parameters:
        - description: Customer market segment guid.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerMarketSegmentModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerMarketSegmentModel"
          description: List of Customer Market Segments.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get the customer market segment.
      tags:
        - CustomersRead
  /v1/customers:
    get:
      operationId: Customers_GetCustomers
      parameters:
        - in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: If not given, return all Customers, if given as true return only active Customers, if given as false returns only inactive Customers.
          in: query
          name: isActive
          schema:
            nullable: true
            type: boolean
          x-position: 3
        - description: "Optional: List of customer owner ids to search for. Default all."
          explode: true
          in: query
          name: customerOwnerGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 4
          x-relation-guid: UserOutputModel
        - description: "Optional: When true returns only internal customer"
          in: query
          name: isInternal
          schema:
            nullable: true
            type: boolean
          x-position: 5
        - description: "Optional: List of customer numbers."
          explode: true
          in: query
          name: numbers
          schema:
            items:
              format: int64
              type: integer
            nullable: true
            type: array
          style: form
          x-position: 6
        - description: "Optional: Get customers that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 7
        - description: "Optional: Get customers where email address matches to any provided email address"
          explode: true
          in: query
          name: emailAddresses
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 8
        - description: "Optional: Get customers where customer name matches to any provided customer name"
          explode: true
          in: query
          name: customerNames
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 9
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerModel"
                type: array
          description: All the customers
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get all the customers
      tags:
        - CustomersRead
    post:
      operationId: Customers_PostCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerModel"
              nullable: true
        description: CustomerModel.
        x-name: customer
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerModel"
          description: Inserted customer.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:write
      summary: Insert a customer.
      tags:
        - CustomersWrite
  /v1/customers/customproperties:
    get:
      operationId: CustomerCustomProperties_GetCustomerCustomProperties
      parameters:
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Get only active or inactive customer properties."
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 3
        - description: "Optional: Text to search from custom property name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Is the customer property used in any custom property usage."
          in: query
          name: isInUse
          schema:
            nullable: true
            type: boolean
          x-position: 5
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 6
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 7
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomPropertyModel"
                type: array
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get the customer custom properties.
      tags:
        - SettingsRead
    post:
      operationId: CustomerCustomProperties_PostCustomerCustomProperty
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomPropertyModel"
              nullable: true
        description: CustomerCustomPropertyModel.
        x-name: customProperty
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomPropertyModel"
                type: array
          description: Created customer custom property.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a customer custom property.
      tags:
        - SettingsWrite
  /v1/customers/customproperties/customercustompropertyselectionitems:
    post:
      operationId: CustomerCustomPropertySelectionItems_PostCustomerCustomPropertySelectionItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerCustomPropertySelectionItemInputModel"
              nullable: true
        description: CustomPropertySelectionItemInputModel.
        x-name: customerCustomPropertySelectionItem
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerCustomPropertySelectionItemOutputModel"
          description: Created customer custom property.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a customer custom property selection item.
      tags:
        - SettingsWrite
  "/v1/customers/customproperties/customercustompropertyselectionitems/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: CustomerCustomPropertySelectionItems_DeleteCustomerCustomPropertySelectionItem
      parameters:
        - description: GUID used to delete the customer custom property selection item.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerCustomPropertySelectionItemInputModel
      responses:
        "204":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Deletes a customer custom property selection item.
      tags:
        - SettingsDelete
    get:
      operationId: CustomerCustomPropertySelectionItems_GetCustomerCustomPropertySelectionItem
      parameters:
        - description: Id used to get the customer custom property selection item.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerCustomPropertySelectionItemOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerCustomPropertySelectionItemOutputModel"
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get customer custom property selection item by ID.
      tags:
        - SettingsRead
    patch:
      operationId: CustomerCustomPropertySelectionItems_PatchCustomerCustomPropertySelectionItem
      parameters:
        - description: ID of the customer custom property selection item.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerCustomPropertySelectionItemInputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of CustomerCustomPropertySelectionItemInputModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerCustomPropertySelectionItemOutputModel"
                type: array
          description: List of updated customer custom properties.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a customer custom property selection item or a part of it.
      tags:
        - SettingsWrite
  "/v1/customers/customproperties/{customPropertyGuid}/customercustompropertyselectionitems":
    get:
      operationId: CustomerCustomPropertySelectionItems_GetCustomerCustomPropertySelectionItems
      parameters:
        - description: Custom property id used to get the customer custom property selection items.
          in: path
          name: customPropertyGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomPropertyModel
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Get only active or inactive selection items."
          in: query
          name: isActive
          schema:
            nullable: true
            type: boolean
          x-position: 3
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Get custom property selection items that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerCustomPropertySelectionItemOutputModel"
                type: array
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get the customer custom properties.
      tags:
        - SettingsRead
  "/v1/customers/customproperties/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: CustomerCustomProperties_DeleteCustomerCustomProperty
      parameters:
        - description: GUID used to delete the customer custom property.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomPropertyModel
      responses:
        "204":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Deletes a customer custom property.
      tags:
        - SettingsDelete
    get:
      operationId: CustomerCustomProperties_GetCustomerCustomProperty
      parameters:
        - description: Id used to get the customer custom property.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomPropertyModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomPropertyModel"
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get customer custom property by ID.
      tags:
        - SettingsRead
    patch:
      operationId: CustomerCustomProperties_PatchCustomerCustomProperty
      parameters:
        - description: ID of the customer custom property Can also be comma separate list of IDs to patch multiple customer custom properties with one call. When multiple IDs are given, returns model which has list of succeeded customer custom properties and list of errors.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomPropertyModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of CustomerCustomPropertyModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomPropertyModel"
                type: array
          description: List of updated customer custom properties.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a customer custom property or a part of it.
      tags:
        - SettingsWrite
  /v1/customers/customvalues:
    post:
      operationId: CustomerCustomValues_PostCustomerCustomValue
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerCustomValueModel"
              nullable: true
        description: CustomerCustomValueModel.
        x-name: customerCustomValue
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerCustomValueModel"
                type: array
          description: Created customer custom value.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:write
      summary: Insert a customer custom value.
      tags:
        - CustomersWrite
  "/v1/customers/customvalues/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: CustomerCustomValues_DeleteCustomerCustomValue
      parameters:
        - description: GUID used to delete the customer custom value.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerCustomValueModel
      responses:
        "204":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:delete
      summary: Deletes a customer custom value.
      tags:
        - CustomersDelete
    get:
      operationId: CustomerCustomValues_GetCustomerCustomValue
      parameters:
        - description: Id used to get the customer custom value.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerCustomValueModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerCustomValueModel"
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get customer custom value by ID.
      tags:
        - CustomersRead
    patch:
      operationId: CustomerCustomValues_PatchCustomerCustomValue
      parameters:
        - description: ID of the customer custom value Can also be comma separate list of IDs to patch multiple customer custom values with one call. When multiple IDs are given, returns model which has list of succeeded customer custom values and list of errors.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerCustomValueModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of CustomerCustomValueModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerCustomValueModel"
                type: array
          description: List of updated customer custom values.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:write
      summary: Update (Patch) a customer custom value or a part of it.
      tags:
        - CustomersWrite
  "/v1/customers/{customerGuid}/addresses":
    get:
      operationId: Addresses_GetCustomerAddresses
      parameters:
        - description: ID for the customer.
          in: path
          name: customerGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerModel
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AddressModel"
                type: array
          description: Addresses for the customer
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get customer's addresses
      tags:
        - CustomersRead
    post:
      operationId: Addresses_PostCustomerAddress
      parameters:
        - description: ID of the customer to add the address for.
          in: path
          name: customerGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddressModel"
              nullable: true
        description: AddressModel.
        x-name: address
        x-position: 2
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddressModel"
          description: Created address.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:write
      summary: Insert an address.
      tags:
        - CustomersWrite
  "/v1/customers/{customerGuid}/contactpersons":
    get:
      operationId: Contacts_GetCustomerContacts
      parameters:
        - description: Customer guid used to get the contact persons.
          in: path
          name: customerGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerModel
        - description: If not given, return all Contact persons, if given as true return only active Contact persons, if given as false returns only inactive Contact persons.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 2
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: "Optional: Text to search from contact person's name or communication method (i.e. phone number or email address)."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ContactModel"
                type: array
          description: List of contacts for a customer.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get the contact persons for a customer.
      tags:
        - CustomersRead
  "/v1/customers/{customerGuid}/customercountrysettings":
    get:
      operationId: CustomerCountrySettings_GetCustomerCountrySettings
      parameters:
        - description: GUID of the customer.
          in: path
          name: customerGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerCountrySettingsOutputModel"
                type: array
          description: All the Currencies.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get all the country settings for a customer.
      tags:
        - CustomersRead
  "/v1/customers/{customerGuid}/customermarketsegments":
    get:
      operationId: CustomerMarketSegments_GetCustomerMarketSegments
      parameters:
        - description: ID of the customer.
          in: path
          name: customerGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerModel
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Return also the markets segments that are not in use for the customer."
          in: query
          name: includeMarketSegmentsFromRegistry
          schema:
            default: false
            type: boolean
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerMarketSegmentModel"
                type: array
          description: List of Customer Market Segments.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get the Market Segments for a customer.
      tags:
        - CustomersRead
  "/v1/customers/{customerGuid}/customersalesnotes":
    get:
      operationId: SalesNotes_GetCustomerSalesNotes
      parameters:
        - description: Customer guid used to get the notes.
          in: path
          name: customerGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Get sales notes that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerSalesNoteOutputModel"
                type: array
          description: List of sales notes for a customer.
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get the customer sales notes.
      tags:
        - CustomersRead
  "/v1/customers/{customerGuid}/customvalues":
    get:
      operationId: CustomerCustomValues_GetCustomerCustomValues
      parameters:
        - description: ID of the customer.
          in: path
          name: customerGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerModel
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Get only values of active or inactive customer custom properties."
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 4
        - description: List of target for which to get the values.
          explode: true
          in: query
          name: target
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 5
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 6
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 7
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerCustomValueModel"
                type: array
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get the customer custom values.
      tags:
        - CustomersRead
  "/v1/customers/{customerGuid}/projects":
    get:
      operationId: Projects_GetCustomerProjects
      parameters:
        - description: Id of the customer.
          in: path
          name: customerGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerModel
        - in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: When true fetch projects that have something to bill, when false nothing to bill. Default nothing = all."
          in: query
          name: isBillable
          schema:
            nullable: true
            type: boolean
          x-position: 4
        - explode: true
          in: query
          name: currencyGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 5
        - explode: true
          in: query
          name: projectGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 6
        - explode: true
          in: query
          name: projectKeywordGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 7
        - explode: true
          in: query
          name: projectStatusTypeGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 8
        - explode: true
          in: query
          name: salesPersonGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 9
        - explode: true
          in: query
          name: projectOwnerGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 10
        - explode: true
          in: query
          name: businessUnitGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 11
        - in: query
          name: minimumBillableAmount
          schema:
            format: double
            nullable: true
            type: number
          x-position: 12
        - explode: true
          in: query
          name: customerOwnerGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 13
        - in: query
          name: invoiceableDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 14
        - explode: true
          in: query
          name: marketSegmentationGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 15
        - explode: true
          in: query
          name: salesStatusTypeGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 16
        - in: query
          name: isClosed
          schema:
            nullable: true
            type: boolean
          x-position: 17
        - in: query
          name: hasRecurringFees
          schema:
            nullable: true
            type: boolean
          x-position: 18
        - explode: true
          in: query
          name: companyCurrencyGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 19
        - explode: true
          in: query
          name: projectMemberUserGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 20
        - explode: true
          in: query
          name: numbers
          schema:
            items:
              format: int64
              type: integer
            nullable: true
            type: array
          style: form
          x-position: 21
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectOutputModel"
                type: array
          description: All the projects for the customer
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get customer's projects
      tags:
        - ProjectsRead
  "/v1/customers/{customerGuid}/salesnotes":
    get:
      operationId: SalesNotes_GetAllCustomerSalesNotes
      parameters:
        - description: Customer guid used to get the notes.
          in: path
          name: customerGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Get sales notes that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SalesNoteOutputModel"
                type: array
          description: List of sales notes for a customer.
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
            - customers:read
      summary: Get the sales notes by customer guid.
      tags:
        - ProjectsRead
        - CustomersRead
  "/v1/customers/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: Customers_DeleteCustomer
      parameters:
        - description: GUID used to delete the customer.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:delete
      summary: Deletes a customer.
      tags:
        - CustomersDelete
    get:
      operationId: Customers_GetCustomer
      parameters:
        - description: ID used to get the customer.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get customer by GUID.
      tags:
        - CustomersRead
    patch:
      operationId: Customers_PatchCustomer
      parameters:
        - description: ID of the customer.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of CustomerModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerModel"
                type: array
          description: List of updated customers.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:write
      summary: Update (Patch) an customer or a part of it.
      tags:
        - CustomersWrite
  /v1/customersalesnotes:
    post:
      operationId: SalesNotes_PostCustomerSalesNotes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerSalesNoteInputModel"
              nullable: true
        description: SalesNoteOutputModel
        x-name: salesNote
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerSalesNoteOutputModel"
          description: Created customer sales note.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:write
      summary: Insert a customer sales note.
      tags:
        - CustomersWrite
  "/v1/customersalesnotes/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. OK (200) if note has child notes and can't be deleted. It is marked as IsDeleted = true. Not found (404) if note can't be found."
      operationId: SalesNotes_DeleteCustomerSalesNote
      parameters:
        - description: GUID used to delete the customer sales note.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerSalesNoteOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:delete
      summary: Deletes a customer sales note.
      tags:
        - CustomersDelete
    get:
      operationId: SalesNotes_GetCustomerSalesNote
      parameters:
        - description: GUID used to get the customer sales note.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerSalesNoteOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerSalesNoteOutputModel"
          description: ProjectNote
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:read
      summary: Get customer sales note by ID.
      tags:
        - CustomersRead
    patch:
      operationId: SalesNotes_PatchCustomerSalesNote
      parameters:
        - description: ID of the customer sales note.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomerSalesNoteOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of customer sales note model.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerSalesNoteOutputModel"
                type: array
          description: list of updated sales notes.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - customers:write
      summary: Update (Patch) a customer sales note or a part of it.
      tags:
        - CustomersWrite
  /v1/deletedphasemembers:
    get:
      description: Use root phase to get project members.
      operationId: PhaseMembers_GetAllDeletedPhaseMembers
      parameters:
        - description: "Optional: Get phase members that have been added or changed after this date time (greater or equal)."
          in: query
          name: deletedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: Page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Is the user active. Default nothing = all."
          in: query
          name: isUserActive
          schema:
            nullable: true
            type: boolean
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DeletedPhaseMemberOutputModel"
                type: array
          description: All the phase members
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get all deleted phase members
      tags:
        - ProjectsRead
  /v1/deletedprojectfees:
    get:
      operationId: ProjectFees_GetDeletedProjectFees
      parameters:
        - in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: ID of the project for the deleted project fees to be fetched. If not provided, returns for all projects. Default all."
          explode: true
          in: query
          name: projectGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 3
          x-relation-guid: ProjectOutputModel
        - description: "Optional: ID of the user. If not provided, returns for all users. Default all."
          explode: true
          in: query
          name: userGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 4
          x-relation-guid: UserOutputModel
        - description: "Optional: Get project fees that have been deleted after this date time (greater or equal)."
          in: query
          name: deletedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DeletedProjectFeeModel"
                type: array
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:read
      summary: Get the deleted project fees.
      tags:
        - FeesRead
  /v1/deletedprojecttravelexpenses:
    get:
      operationId: ProjectTravelExpenses_GetDeletedProjectTravelExpenses
      parameters:
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: ID of the project for the deleted project travel expenses to be fetched. If not provided, returns for all projects. Default all."
          explode: true
          in: query
          name: projectGuid
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 3
          x-relation-guid: ProjectOutputModel
        - description: "Optional: ID of the user. If not provided, returns for all users. Default all."
          explode: true
          in: query
          name: userGuid
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 4
          x-relation-guid: UserOutputModel
        - description: "Optional: Get project travel expenses that have been deleted after this date time (greater or equal)."
          in: query
          name: deletedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DeletedProjectTravelExpenseModel"
                type: array
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - travels:read
      summary: Get the deleted project travel expenses.
      tags:
        - TravelsRead
  /v1/deletedworkhours:
    get:
      operationId: WorkHours_GetDeletedWorkHours
      parameters:
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: ID of the project for the deleted work hours to be fetched. If not provided, returns for all projects. Default all."
          explode: true
          in: query
          name: projectGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 3
          x-relation-guid: ProjectOutputModel
        - description: "Optional: ID of the user. If not provided, returns for all users. Default all."
          explode: true
          in: query
          name: userGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 4
          x-relation-guid: UserOutputModel
        - description: "Optional: Get work hours that have been deleted after this date time (greater or equal)."
          in: query
          name: deletedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DeletedWorkHourModel"
                type: array
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - hours:read
      summary: Get the deleted work hours.
      tags:
        - HoursRead
  "/v1/files/{fileGuid}/keywords":
    get:
      operationId: Keywords_GetFileKeywords
      parameters:
        - description: ID of the file for which keywords are requested.
          in: path
          name: fileGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: FileModel
        - description: If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 2
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Keyword&sortings[0].value=Desc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/FileKeywordModel"
                type: array
          description: Keywords.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - files:read
      summary: Get all the keywords for file.
      tags:
        - FilesRead
  "/v1/files/{fileGuid}/keywords/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if the keyword or the link can't be found."
      operationId: Keywords_DeleteFileKeyword
      parameters:
        - in: path
          name: fileGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: FileModel
        - in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 2
          x-relation-guid: KeywordModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - files:delete
      summary: Delete a keyword from the file
      tags:
        - FilesDelete
    post:
      operationId: Keywords_LinkKeywordToFile
      parameters:
        - in: path
          name: fileGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 2
          x-relation-guid: KeywordModel
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileKeywordModel"
          description: Created file keyword link.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - files:write
      summary: Link existing keyword to file
      tags:
        - FilesWrite
  "/v1/files/{guid}":
    get:
      operationId: Files_GetFile
      parameters:
        - description: GUID used to get the file.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: FileModel
        - description: Is data included in response as base64 string.
          in: query
          name: includeDataInResponse
          schema:
            default: false
            type: boolean
          x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileModel"
          description: File.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - files:read
      summary: Get file by ID.
      tags:
        - FilesRead
  "/v1/files/{guid}/filedata":
    get:
      description: Returns binary data, which contains content with type given in Content-Type header.
      operationId: FileData_GetDataForFile
      parameters:
        - description: GUID used to get the file.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: FileModel
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Get file data by ID
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - files:read
      summary: Get file data by ID.
      tags:
        - FilesRead
  /v1/flatrates:
    get:
      operationId: FlatRates_GetAllFlatRates
      parameters:
        - description: "Optional: Page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Get flat rates that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
        - description: "Optional: Get flat rates by invoice guid. Default all."
          in: query
          name: invoiceGuid
          schema:
            nullable: true
            type: string
          x-position: 4
          x-relation-guid: InvoiceOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/FlatRateOutputModel"
                type: array
          description: All the flat rates
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:read
      summary: Get all flat rates
      tags:
        - FeesRead
    post:
      operationId: FlatRates_PostFlatRate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlatRateInputModel"
              nullable: true
        description: FlatRateModel.
        x-name: flatRate
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlatRateOutputModel"
          description: Created flat rate.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:write
      summary: Insert a flat rate.
      tags:
        - FeesWrite
  "/v1/flatrates/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: FlatRates_DeleteFlatRate
      parameters:
        - description: ID of flat rate.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: FlatRateInputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:delete
      summary: Delete a flat rate of a phase.
      tags:
        - FeesDelete
    get:
      operationId: FlatRates_GetFlatrate
      parameters:
        - description: Id of the flat rate.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: FlatRateInputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/FlatRateOutputModel"
                type: array
          description: FlatRateModel.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:read
      summary: Get flat rate.
      tags:
        - FeesRead
    patch:
      operationId: FlatRates_PatchFlatRate
      parameters:
        - description: ID of the flat rate.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: FlatRateInputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of FlatRateModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/FlatRateOutputModel"
                type: array
          description: list of updated flat rates.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:write
      summary: Update (Patch) a flat rate or a part of it.
      tags:
        - FeesWrite
  /v1/flextimeadjustments:
    post:
      operationId: FlextimeAdjustments_PostFlextimeAdjustment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlextimeAdjustmentInputModel"
              nullable: true
        description: FlextimeAdjustmentInputModel.
        x-name: flextimeAdjustment
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlextimeAdjustmentOutputModel"
          description: Inserted FlextimeAdjustment.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:write
      summary: Insert a flextime adjustment.
      tags:
        - UsersWrite
  "/v1/flextimeadjustments/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if flextime adjustment can't be found."
      operationId: FlextimeAdjustments_DeleteFlextimeAdjustment
      parameters:
        - description: ID for the flextime adjustment to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: FlextimeAdjustmentOutputModel
      responses:
        "204":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:write
      summary: Delete an flextime adjustment.
      tags:
        - UsersWrite
    get:
      operationId: FlextimeAdjustments_GetFlextimeAdjustment
      parameters:
        - description: GUID used to get the Flextime Adjustment.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: FlextimeAdjustmentOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlextimeAdjustmentOutputModel"
          description: Flextime Adjustment.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:read
      summary: Get Flextime Adjustment by ID.
      tags:
        - UsersRead
    patch:
      operationId: FlextimeAdjustments_PatchFlextimeAdjustment
      parameters:
        - description: ID of the Flextime Adjustment.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: FlextimeAdjustmentOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of FlextimeAdjustmentInputModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/FlextimeAdjustmentOutputModel"
                type: array
          description: Updated Flextime Adjustment.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:write
      summary: Update (Patch) an Flextime Adjustment or a part of it.
      tags:
        - UsersWrite
  /v1/holidays:
    get:
      operationId: Holidays_GetHolidays
      parameters:
        - description: "Optional: Holidays for this year only. Default: all years."
          in: query
          name: year
          schema:
            format: int32
            maximum: 2075
            minimum: 1900
            nullable: true
            type: integer
          x-position: 1
        - description: "Optional: Holidays for this country only. Default local."
          in: query
          name: countryGuid
          schema:
            nullable: true
            type: string
          x-position: 2
          x-relation-guid: CountryModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/HolidayModel"
                type: array
          description: "List of holidays. "
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get holidays.
      tags:
        - SettingsRead
  /v1/holidaysbytimeperiod:
    get:
      operationId: Holidays_GetHolidaysByTimePeriod
      parameters:
        - description: Start date for holidays.
          in: query
          name: startDate
          schema:
            format: date-time
            type: string
          x-position: 1
        - description: End date for holidays.
          in: query
          name: endDate
          schema:
            format: date-time
            type: string
          x-position: 2
        - description: "Optional: Holidays for this country only. Default local."
          in: query
          name: countryGuid
          schema:
            nullable: true
            type: string
          x-position: 3
          x-relation-guid: CountryModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/HolidayModel"
                type: array
          description: "List of holidays. "
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get holidays with start and end date.
      tags:
        - SettingsRead
  /v1/industries:
    get:
      operationId: Industries_GetIndustries
      parameters:
        - description: If not given, return all industries, if given as true return only active industries, if given as false returns only inactive industries.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from industry name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/IndustryModel"
                type: array
          description: All the industries.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the industries.
      tags:
        - SettingsRead
    post:
      operationId: Industries_PostIndustry
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndustryModel"
              nullable: true
        description: IndustryModel.
        x-name: model
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndustryModel"
          description: Inserted industry.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert an industry.
      tags:
        - SettingsWrite
  "/v1/industries/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if industry can't be found."
      operationId: Industries_DeleteIndustry
      parameters:
        - description: ID for the industry to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: IndustryModel
        - description: "Optional: ID of the industry to which to move usages of this industry. Default null. If industry is in use and usages aren't moved the deletion might fail."
          in: query
          name: moveUsagesToGuid
          schema:
            nullable: true
            type: string
          x-position: 2
          x-relation-guid: IndustryModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete an industry.
      tags:
        - SettingsDelete
    get:
      operationId: Industries_GetIndustry
      parameters:
        - description: GUID used to get the industry.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: IndustryModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndustryModel"
          description: Industry.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get industry by ID.
      tags:
        - SettingsRead
    patch:
      operationId: Industries_PatchIndustry
      parameters:
        - description: ID of the industry.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: IndustryModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of IndustryModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/IndustryModel"
                type: array
          description: list of updated industries.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) an industry or a part of it.
      tags:
        - SettingsWrite
  /v1/integrations/vismafinancials/companyinformation:
    get:
      operationId: Organizations_GetVismaFinancialsCompanyInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VismaFinancialsCompanyModel"
          description: VismaFinancialsCompanyModel.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - organization:read
      summary: Get Visma.net Financials integration company information.
      tags:
        - OrganizationRead
  "/v1/invoicefiles/{guid}":
    get:
      operationId: Files_GetInvoiceFile
      parameters:
        - description: GUID used to get the invoice file.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceFileModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceFileModel"
          description: InvoiceFile.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - files:read
      summary: Get invoice file by ID.
      tags:
        - FilesRead
  /v1/invoicerows:
    get:
      operationId: InvoiceRows_GetInvoiceRows
      parameters:
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Get invoice rows that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/InvoiceRowOutputModel"
                type: array
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get invoice rows
      tags:
        - InvoicesRead
  "/v1/invoicerows/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: InvoiceRows_DeleteInvoiceRow
      parameters:
        - description: GUID used to delete the invoice row.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceRowOutputModel
        - in: query
          name: setAsNonBillable
          schema:
            default: false
            type: boolean
          x-position: 2
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:delete
      summary: Deletes an invoice row
      tags:
        - InvoicesDelete
    get:
      operationId: InvoiceRows_GetInvoiceRow
      parameters:
        - description: GUID of the invoice row.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceRowOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceRowOutputModel"
          description: Invoice row
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get invoice row by ID
      tags:
        - InvoicesRead
    patch:
      description: If CostCenterNumber, SalesAccountNumber or RecurringSalesAccountNumber are changed and the invoice row is related to one or many ProjectFees or ProjectTravelExpenses, the values for those will also be updated.
      operationId: InvoiceRows_PatchInvoiceRow
      parameters:
        - description: ID of the invoice row
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceRowOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of InvoiceRowModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/InvoiceRowOutputModel"
                type: array
          description: List of updated invoice rows
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:write
      summary: Update (Patch) a invoice row or a part of it
      tags:
        - InvoicesWrite
  "/v1/invoicerows/{invoiceRowGuid}/projectfees":
    get:
      operationId: ProjectFees_GetInvoiceRowProjectFees
      parameters:
        - description: ID of the invoice row.
          in: path
          name: invoiceRowGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceRowOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: Number of rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: ProjectFee's product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting"
          in: query
          name: productType
          schema:
            $ref: "#/components/schemas/ProductType"
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectFeeOutputModel"
                type: array
          description: ProjectFees
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get all the project fees on an invoice row
      tags:
        - InvoicesRead
  "/v1/invoicerows/{invoiceRowGuid}/projecttravelexpenses":
    get:
      operationId: ProjectTravelExpenses_GetInvoiceRowProjectTravelExpenses
      parameters:
        - description: ID of the invoice row.
          in: path
          name: invoiceRowGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceRowOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense"
          in: query
          name: expenseClass
          schema:
            $ref: "#/components/schemas/ExpensesClass"
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectTravelExpenseOutputModel"
                type: array
          description: ProjectTravelExpenseOutputModel
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get all the project travel expenses on an invoice row
      tags:
        - InvoicesRead
  "/v1/invoicerows/{invoiceRowGuid}/reimbursedprojectfees":
    get:
      operationId: ReimbursedProjectFees_GetInvoiceRowReimbursedProjectFees
      parameters:
        - description: ID of the invoice row.
          in: path
          name: invoiceRowGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceRowOutputModel
        - description: "Optional: Number of rows to fetch"
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ReimbursedProjectFeeOutputModel"
                type: array
          description: ReimbursedProjectFee
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get all the project fees on an invoice row
      tags:
        - InvoicesRead
  "/v1/invoicerows/{invoiceRowGuid}/reimbursedprojecttravelexpenses":
    get:
      operationId: ReimbursedProjectTravelExpenses_GetInvoiceRowProjectTravelExpenses
      parameters:
        - description: ID of the invoice row.
          in: path
          name: invoiceRowGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceRowOutputModel
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default all."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Searched string: part of name or description."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: Optional. If true, calculates the total count of project fees. Default false.
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ReimbursedProjectTravelExpenseOutputModel"
                type: array
          description: ReimbursedProjectTravelExpenses.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get all the project travel expenses on an invoice row.
      tags:
        - InvoicesRead
  "/v1/invoicerows/{invoiceRowGuid}/reimbursedworkhours":
    get:
      operationId: ReimbursedWorkHours_GetInvoiceRowReimbursedWorkHours
      parameters:
        - description: ID of the invoice row.
          in: path
          name: invoiceRowGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceRowOutputModel
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from description or invoice description."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=DueDate&sortings[0].value=Asc&sortings[1].key=TotalIncludingTax&sortings[1].value=Desc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ReimbursedWorkHourOutputModel"
                type: array
          description: ReimbursedWorkHour.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get all reimbursed hours on an invoice row.
      tags:
        - InvoicesRead
  "/v1/invoicerows/{invoiceRowGuid}/workhours":
    get:
      operationId: WorkHours_GetInvoiceRowWorkHours
      parameters:
        - description: ID of the invoice row.
          in: path
          name: invoiceRowGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceRowOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/WorkHourOutputModel"
                type: array
          description: WorkHours
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get all the work hours on an invoice row
      tags:
        - InvoicesRead
  /v1/invoices:
    get:
      operationId: Invoices_GetInvoices
      parameters:
        - description: "Optional: Number of rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 1
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: Get only invoices paid at this date or later. Default: Get invoices regardless of payment date."
          in: query
          name: paymentDateStart
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
        - description: "Optional: Get invoices with this status only. Default: all statuses."
          explode: true
          in: query
          name: invoiceStatusGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 4
          x-relation-guid: InvoiceStatusModel
        - description: "Optional: ID of the project to get the invoices. If not provided, returns for all projects. Default all."
          explode: true
          in: query
          name: projectGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 5
          x-relation-guid: ProjectOutputModel
        - description: "Optional: ID of the project manager to get the invoices for. If not provided, returns for all project managers. Default all."
          explode: true
          in: query
          name: projectOwnerGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 6
          x-relation-guid: UserOutputModel
        - description: "Optional: ID of the business unit of the project. If not provided, returns for all business units. Default all."
          explode: true
          in: query
          name: projectBusinessUnitGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 7
          x-relation-guid: BusinessUnitModel
        - description: "Optional: List of customer IDs. Get invoices for these customers."
          explode: true
          in: query
          name: customerGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 8
          x-relation-guid: CustomerModel
        - description: "Optional: starting date from which to get the invoices. Default all."
          in: query
          name: startDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 9
        - description: "Optional: end date from which to get the invoices. Default all."
          in: query
          name: endDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 10
        - description: "Optional: specifies minimum value for invoice total in organization currency."
          in: query
          name: minimumTotalExcludingTax
          schema:
            format: double
            nullable: true
            type: number
          x-position: 11
        - description: "Optional: specifies maximum value for invoice total in organization currency."
          in: query
          name: maximumTotalExcludingTax
          schema:
            format: double
            nullable: true
            type: number
          x-position: 12
        - description: "Optional: Invoice reference number. If not provided, returns invoices with any invoice reference number."
          explode: true
          in: query
          name: referenceNumbers
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 13
        - description: "Optional: Invoice number. If not provided, returns invoices with any invoice number."
          explode: true
          in: query
          name: numbers
          schema:
            items:
              format: int32
              type: integer
            nullable: true
            type: array
          style: form
          x-position: 14
        - description: "Optional: Get invoices that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 15
        - description: "Optional: ID of the salesperson to get the invoices for. If not provided, returns for all sales persons."
          explode: true
          in: query
          name: salesPersonGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 16
          x-relation-guid: UserOutputModel
        - description: "Optional: ID of the user who created the invoice. If not provided, returns for all users."
          explode: true
          in: query
          name: createdByUserGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 17
          x-relation-guid: UserOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/InvoiceOutputModel"
                type: array
          description: "List of Invoices "
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get Invoices
      tags:
        - InvoicesRead
    post:
      operationId: Invoices_PostInvoiceCreation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateInvoiceModel"
              nullable: true
        description: CreateInvoiceModel
        x-name: createInvoiceModel
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/InvoiceOutputModel"
                type: array
          description: Created invoice(s)
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:write
      summary: Add an invoice to project(s)
      tags:
        - InvoicesWrite
  "/v1/invoices/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if cost center can't be found."
      operationId: Invoices_DeleteInvoice
      parameters:
        - description: ID for the invoice to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:delete
      summary: Delete an invoice.
      tags:
        - InvoicesDelete
    get:
      operationId: Invoices_GetInvoice
      parameters:
        - description: GUID of the invoice.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceOutputModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get invoice by ID
      tags:
        - InvoicesRead
    patch:
      operationId: Invoices_PatchInvoice
      parameters:
        - description: GUID of the invoice
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of InvoiceInputModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/InvoiceOutputModel"
                type: array
          description: list of invoices
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:write
      summary: Update (Patch) an invoice or a part of it
      tags:
        - InvoicesWrite
  "/v1/invoices/{guid}/pdf":
    get:
      operationId: Pdf_GetInvoicePdf
      parameters:
        - description: The invoice GUID.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
        - description: "Optional: type of invoice."
          in: query
          name: invoiceType
          schema:
            $ref: "#/components/schemas/InvoiceType"
            default: Invoice
          x-position: 2
        - description: "Optional: what to include in the PDF. Defaults to InvoicePdfGetOptions.All."
          in: query
          name: pdfGetOptions
          schema:
            $ref: "#/components/schemas/InvoicePdfGetOptions"
            default: All
          x-position: 3
      responses:
        "200":
          content:
            application/pdf:
              schema:
                format: binary
                type: string
          description: Get an invoice PDF
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - files:read
      summary: Get an invoice PDF.
      tags:
        - FilesRead
  "/v1/invoices/{guid}/projects/{projectGuid}":
    delete:
      operationId: Invoices_DeleteProjectFromInvoice
      parameters:
        - description: The invoice GUID.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
        - description: The project GUID.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 2
          x-relation-guid: ProjectOutputModel
      responses:
        "204":
          description: The updated invoice.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:delete
      summary: Delete a project from invoice.
      tags:
        - InvoicesDelete
  "/v1/invoices/{invoiceGuid}/files":
    get:
      operationId: Files_GetInvoiceFiles
      parameters:
        - description: GUID of the invoice used to get the files.
          in: path
          name: invoiceGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/InvoiceFileModel"
                type: array
          description: InvoiceFile.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - files:read
      summary: Get all files of a invoice by its id.
      tags:
        - FilesRead
  "/v1/invoices/{invoiceGuid}/finvoice":
    get:
      operationId: Finvoices_GetFinvoiceByInvoiceGuid
      parameters:
        - in: path
          name: invoiceGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
      responses:
        "200":
          content:
            application/soap+xml:
              schema:
                format: binary
                type: string
          description: Exports single invoice as Finvoice
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      tags:
        - InvoicesRead
  "/v1/invoices/{invoiceGuid}/invoicerows":
    get:
      operationId: InvoiceRows_GetInvoiceRowsForInvoice
      parameters:
        - description: ID of the invoice.
          in: path
          name: invoiceGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Type of the row. Either Hours or ProjectFees, Default all."
          in: query
          name: rowType
          schema:
            $ref: "#/components/schemas/InvoiceRowType"
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/InvoiceRowOutputModel"
                type: array
          description: "List of Invoice rows "
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get Invoice rows for an invoice.
      tags:
        - InvoicesRead
  "/v1/invoices/{invoiceGuid}/invoicesettings":
    get:
      operationId: InvoiceSettings_GetInvoiceSettings
      parameters:
        - description: Invoice GUID used to get the invoice settings.
          in: path
          name: invoiceGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceSettingsOutputModel"
          description: InvoiceSettingsOutputModel
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get invoice settings by invoice GUID
      tags:
        - InvoicesRead
  "/v1/invoices/{invoiceGuid}/projectfees":
    get:
      operationId: ProjectFees_GetInvoiceProjectFees
      parameters:
        - description: ID of the invoice.
          in: path
          name: invoiceGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: Number of rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: ProjectFee's product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting"
          in: query
          name: productType
          schema:
            $ref: "#/components/schemas/ProductType"
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectFeeOutputModel"
                type: array
          description: ProjectFees
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get all the project fees on an invoice
      tags:
        - InvoicesRead
  "/v1/invoices/{invoiceGuid}/projecttravelexpenses":
    get:
      operationId: ProjectTravelExpenses_GetInvoiceProjectTravelExpenses
      parameters:
        - description: ID of the invoice.
          in: path
          name: invoiceGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense"
          in: query
          name: expenseClass
          schema:
            $ref: "#/components/schemas/ExpensesClass"
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectTravelExpenseOutputModel"
                type: array
          description: ProjectTravelExpenseOutputModel
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get all the project travel expenses on an invoice
      tags:
        - InvoicesRead
  "/v1/invoices/{invoiceGuid}/reimbursedprojectfees":
    get:
      operationId: ReimbursedProjectFees_GetInvoiceReimbursedProjectFees
      parameters:
        - description: ID of the invoice.
          in: path
          name: invoiceGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
        - description: "Optional: Number of rows to fetch"
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ReimbursedProjectFeeOutputModel"
                type: array
          description: ReimbursedProjectFee
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get all the project fees on an invoice
      tags:
        - InvoicesRead
  "/v1/invoices/{invoiceGuid}/reimbursedprojecttravelexpenses":
    get:
      operationId: ReimbursedProjectTravelExpenses_GetInvoiceProjectTravelExpenses
      parameters:
        - description: ID of the invoice.
          in: path
          name: invoiceGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default all."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Searched string: part of name or description."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: Optional. If true, calculates the total count of project fees. Default false.
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ReimbursedProjectTravelExpenseOutputModel"
                type: array
          description: ReimbursedProjectTravelExpenses.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get all the project travel expenses on an invoice.
      tags:
        - InvoicesRead
  "/v1/invoices/{invoiceGuid}/reimbursedworkhours":
    get:
      operationId: ReimbursedWorkHours_GetInvoiceReimbursedWorkHours
      parameters:
        - description: ID of the invoice.
          in: path
          name: invoiceGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from description or invoice description."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=DueDate&sortings[0].value=Asc&sortings[1].key=TotalIncludingTax&sortings[1].value=Desc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ReimbursedWorkHourOutputModel"
                type: array
          description: ReimbursedWorkHour.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get all reimbursed hours on an invoice.
      tags:
        - InvoicesRead
  "/v1/invoices/{invoiceGuid}/uninvoicedprojectfees":
    get:
      operationId: ProjectFees_GetUninvoicedProjectFeesForInvoice
      parameters:
        - description: ID of the invoice.
          in: path
          name: invoiceGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: Number of rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null."
          in: query
          name: isBillable
          schema:
            nullable: true
            type: boolean
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectFeeOutputModel"
                type: array
          description: ProjectFees
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get uninvoiced project fees available for invoice
      tags:
        - InvoicesRead
  "/v1/invoices/{invoiceGuid}/uninvoicedprojecttravelexpenses":
    get:
      operationId: ProjectTravelExpenses_GetUninvoicedProjectTravelExpensesForInvoice
      parameters:
        - description: ID of the invoice.
          in: path
          name: invoiceGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
        - description: "Optional: Filter the travel expenses. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null."
          in: query
          name: isBillable
          schema:
            nullable: true
            type: boolean
          x-position: 2
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 3
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: "Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense"
          in: query
          name: expenseClass
          schema:
            $ref: "#/components/schemas/ExpensesClass"
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectTravelExpenseOutputModel"
                type: array
          description: ProjectTravelExpenseOutputModel
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get uninvoiced project travel expenses available for invoice
      tags:
        - InvoicesRead
  "/v1/invoices/{invoiceGuid}/uninvoicedworkhours":
    get:
      operationId: WorkHours_GetUninvoicedWorkHoursForInvoice
      parameters:
        - description: ID of the invoice.
          in: path
          name: invoiceGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
        - description: "Optional: Filter the work hours. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null."
          in: query
          name: isBillable
          schema:
            nullable: true
            type: boolean
          x-position: 2
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 3
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/WorkHourOutputModel"
                type: array
          description: WorkHours
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get uninvoiced work hours available for invoice
      tags:
        - InvoicesRead
  "/v1/invoices/{invoiceGuid}/workhours":
    get:
      operationId: WorkHours_GetInvoiceWorkHours
      parameters:
        - description: ID of the invoice.
          in: path
          name: invoiceGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/WorkHourOutputModel"
                type: array
          description: WorkHours
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      summary: Get all the work hours on an invoice
      tags:
        - InvoicesRead
  "/v1/invoicesettings/{guid}":
    patch:
      operationId: InvoiceSettings_PatchInvoiceSettings
      parameters:
        - description: ID of the invoice settings
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceSettingsOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of InvoiceSettingsModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceSettingsOutputModel"
          description: InvoiceSettingsOutputModel
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:write
      summary: Update (Patch) invoice setting
      tags:
        - InvoicesWrite
  /v1/invoicestatuses:
    get:
      operationId: InvoiceStatuses_GetInvoiceStatuses
      parameters:
        - description: Filter the invoice statuses. If true/false, only the active/inactive ones are returned. If null, all the invoice statuses are returned.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from invoice status name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/InvoiceStatusModel"
                type: array
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get invoice statuses.
      tags:
        - SettingsRead
    post:
      operationId: InvoiceStatuses_PostInvoiceStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceStatusModel"
              nullable: true
        description: InvoiceStatusModel.
        x-name: model
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceStatusModel"
          description: Inserted invoice status.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a invoice status.
      tags:
        - SettingsWrite
  "/v1/invoicestatuses/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if invoice status can't be found."
      operationId: InvoiceStatuses_DeleteInvoiceStatus
      parameters:
        - description: ID for the invoice status to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceStatusModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete an invoice status.
      tags:
        - SettingsDelete
    get:
      operationId: InvoiceStatuses_GetInvoiceStatus
      parameters:
        - description: GUID used to get the Invoice status.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceStatusModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceStatusModel"
          description: Invoice status.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get Invoice status by ID.
      tags:
        - SettingsRead
    patch:
      operationId: InvoiceStatuses_PatchInvoiceStatus
      parameters:
        - description: ID of the Invoice status.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceStatusModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of InvoiceStatusModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/InvoiceStatusModel"
                type: array
          description: List of updated Invoice statuses.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) an Invoice status or a part of it.
      tags:
        - SettingsWrite
  "/v1/invoicestatuses/{invoiceStatusGuid}/finvoices":
    get:
      operationId: Finvoices_GetFinvoicesByInvoiceStatus
      parameters:
        - in: path
          name: invoiceStatusGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceStatusModel
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Exports all invoices by invoice status as stream of multiple Finvoices
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
      tags:
        - InvoicesRead
  /v1/invoicetemplates:
    get:
      operationId: InvoiceTemplates_GetInvoiceTemplates
      parameters:
        - in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/InvoiceTemplateModel"
                type: array
          description: InvoiceTemplatesModel.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get invoice templates.
      tags:
        - SettingsRead
  "/v1/invoicetemplates/{guid}":
    get:
      operationId: InvoiceTemplates_GetInvoiceTemplate
      parameters:
        - description: ID of the invoice template.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: InvoiceTemplateModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceTemplateModel"
          description: InvoiceTemplatesModel.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get invoice template by ID.
      tags:
        - SettingsRead
  /v1/keywords:
    get:
      operationId: Keywords_GetKeywords
      parameters:
        - description: "Optional: category of the keyword."
          in: query
          name: category
          schema:
            $ref: "#/components/schemas/KeywordCategory"
          x-position: 1
        - description: If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 2
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: "Optional: Text to search from keyword."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 5
        - description: "Optional: Get keywords that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 6
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 7
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 8
        - description: "Optional: Keyword name."
          in: query
          name: keyword
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 9
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/KeywordModel"
                type: array
          description: All the Keywords.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the keywords.
      tags:
        - SettingsRead
    post:
      operationId: Keywords_PostKeyword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeywordModel"
              nullable: true
        description: KeywordModel.
        x-name: keyword
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeywordModel"
          description: Created contact role.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a keyword.
      tags:
        - SettingsWrite
  "/v1/keywords/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: Keywords_DeleteKeyword
      parameters:
        - description: GUID used to get the keyword.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: KeywordModel
        - description: "Optional: ID of the keyword to which to move usages of this keyword. Default null. If keyword is in use and usages aren't moved the deletion might fail."
          in: query
          name: moveUsagesToGuid
          schema:
            nullable: true
            type: string
          x-position: 2
          x-relation-guid: KeywordModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete keyword by ID. It will also be deleted from any entity it is used in (Project, etc.)
      tags:
        - SettingsDelete
    get:
      operationId: Keywords_GetKeyword
      parameters:
        - description: GUID used to get the keyword.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: KeywordModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeywordModel"
          description: Keyword.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get keyword by ID.
      tags:
        - SettingsRead
    patch:
      operationId: Keywords_PatchKeyword
      parameters:
        - description: ID of the keyword.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: KeywordModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/KeywordModel"
                type: array
          description: list of updated keywords.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a keyword or a part of it.
      tags:
        - SettingsWrite
  /v1/kpiformulas:
    get:
      operationId: KpiFormulas_GetKpiFormulas
      parameters:
        - description: "Optional: Category of KPI formula (Project, Invoice, User)."
          in: query
          name: category
          schema:
            $ref: "#/components/schemas/KpiFormulaCategory"
          x-position: 1
        - description: "Optional: return with given active status. Default is to return all."
          in: query
          name: isActive
          schema:
            nullable: true
            type: boolean
          x-position: 2
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: "Optional: Text to search."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 5
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
        - description: "Optional: Include definition to response. Default false."
          in: query
          name: includeDefinition
          schema:
            default: false
            type: boolean
          x-position: 7
        - description: "Optional: Get KPI formulas that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 8
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/KpiFormulaModelBase"
                type: array
          description: KPI formulas.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get saved KPI formulas.
      tags:
        - SettingsRead
  /v1/leadsources:
    get:
      operationId: LeadSources_GetLeadSources
      parameters:
        - description: If not given, return all lead sources, if given as true return only active lead sources, if given as false returns only inactive lead sources.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from lead source name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/LeadSourceModel"
                type: array
          description: List of lead sources.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get the lead sources.
      tags:
        - SettingsRead
    post:
      operationId: LeadSources_PostLeadSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LeadSourceModel"
              nullable: true
        description: LeadSourceModel.
        x-name: model
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeadSourceModel"
          description: Inserted lead source.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a lead source.
      tags:
        - SettingsWrite
  "/v1/leadsources/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if lead source can't be found."
      operationId: LeadSources_DeleteLeadSource
      parameters:
        - description: ID for the lead source to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: LeadSourceModel
        - description: "Optional: ID of the lead source to which to move usages of this lead source. Default null. If industry is in use and usages aren't moved the deletion might fail."
          in: query
          name: moveUsagesToGuid
          schema:
            nullable: true
            type: string
          x-position: 2
          x-relation-guid: LeadSourceModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete a lead source.
      tags:
        - SettingsDelete
    get:
      operationId: LeadSources_GetLeadSource
      parameters:
        - description: GUID used to get the lead source.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: LeadSourceModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeadSourceModel"
          description: lead source.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get lead source by ID.
      tags:
        - SettingsRead
    patch:
      operationId: LeadSources_PatchLeadSource
      parameters:
        - description: ID of the lead source.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: LeadSourceModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of LeadSourceModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/LeadSourceModel"
                type: array
          description: List of updated lead sources.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) an lead source or a part of it.
      tags:
        - SettingsWrite
  /v1/localization/countries:
    get:
      operationId: Countries_GetCountries
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CountryModel"
                type: array
          description: All the Countries.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the Countries.
      tags:
        - SettingsRead
  "/v1/localization/countries/{code2}":
    get:
      operationId: Countries_GetCountryByCode2
      parameters:
        - description: "Optional: ISO Alpha-2 code used to get a country."
          in: path
          name: code2
          required: true
          schema:
            maxLength: 2
            minLength: 2
            type: string
          x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CountryModel"
                type: array
          description: Country
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get a country by ISO Alpha-2 code
      tags:
        - SettingsRead
  "/v1/localization/countries/{code3}":
    get:
      operationId: Countries_GetCountryByCode3
      parameters:
        - description: "Optional: ISO Alpha-3 code used to get a country."
          in: path
          name: code3
          required: true
          schema:
            maxLength: 3
            minLength: 3
            type: string
          x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CountryModel"
                type: array
          description: Country
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get a country by ISO Alpha-3 code
      tags:
        - SettingsRead
  "/v1/localization/countries/{countryGuid}/countryregions":
    get:
      operationId: Countries_GetCountryRegions
      parameters:
        - description: GUID of the country.
          in: path
          name: countryGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CountryModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CountryRegionModel"
                type: array
          description: All the CountryRegions of the country.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the Country regions for a country.
      tags:
        - SettingsRead
  "/v1/localization/countries/{countryName}":
    get:
      operationId: Countries_GetCountryByName
      parameters:
        - description: "Optional: English country name."
          in: path
          name: countryName
          required: true
          schema:
            type: string
          x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CountryModel"
                type: array
          description: Country
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get a country by name
      tags:
        - SettingsRead
  "/v1/localization/countries/{guid}":
    get:
      operationId: Countries_GetCountry
      parameters:
        - description: GUID used to get the country.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CountryModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountryModel"
          description: Country.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get country by ID.
      tags:
        - SettingsRead
  "/v1/localization/countryregions/{guid}":
    get:
      operationId: Countries_GetCountryRegion
      parameters:
        - description: GUID used to get the country region.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CountryRegionModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountryRegionModel"
          description: CountryRegion.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get country region by ID.
      tags:
        - SettingsRead
  /v1/localization/formattingcultures:
    get:
      operationId: FormattingCultures_GetFormattings
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/FormattingCultureModel"
                type: array
          description: All the Formatting Cultures
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the Formatting Cultures
      tags:
        - SettingsRead
  "/v1/localization/formattingcultures/{guid}":
    get:
      operationId: FormattingCultures_GetFormattingCulture
      parameters:
        - description: GUID used to get the formatting culture.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: FormattingCultureModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormattingCultureModel"
          description: Formatting culture.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get formatting culture by ID.
      tags:
        - SettingsRead
  /v1/localization/languages:
    get:
      operationId: Languages_GetLanguages
      parameters:
        - description: "Optional: which languages to fetch. only invoice languages or non invoice languages?, default all."
          in: query
          name: isInvoiceLanguage
          schema:
            nullable: true
            type: boolean
          x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/LanguageModel"
                type: array
          description: All the Languages
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the languages
      tags:
        - SettingsRead
  "/v1/localization/languages/{guid}":
    get:
      operationId: Languages_GetLanguage
      parameters:
        - description: GUID used to get the language.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: LanguageModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageModel"
          description: Language
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get language by ID
      tags:
        - SettingsRead
  /v1/localization/timezones:
    get:
      operationId: Timezones_GetTimezones
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TimezoneModel"
                type: array
          description: All the Timezones.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the timezones.
      tags:
        - SettingsRead
  "/v1/localization/timezones/{guid}":
    get:
      operationId: Timezones_GetTimezone
      parameters:
        - description: GUID used to get the timezone.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TimezoneModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimezoneModel"
          description: Timezone.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get timezone by ID.
      tags:
        - SettingsRead
  /v1/login/oauth/access_token:
    post:
      operationId: PublicBearerAuthentication_GetAccessTokenJson
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessTokenCredentials"
              nullable: true
        description: AccessTokenCredentials model
        x-name: credentials
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicAuthenticationOutputModel"
          description: PublicAuthenticationOutputModel
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2: []
      summary: Get oAuth2 access token.
      tags:
        - NoScope
  /v1/login/oauth/authorize:
    get:
      operationId: PublicBearerAuthentication_GetAuthorizationCode
      parameters:
        - description: code
          in: query
          name: response_type
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: Unguessable random string.
          in: query
          name: state
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: Client id.
          in: query
          name: client_id
          schema:
            nullable: true
            type: string
          x-position: 3
        - description: Url where to redirect after code has been retrieved.
          in: query
          name: redirect_uri
          schema:
            nullable: true
            type: string
          x-position: 4
        - description: Scopes that client requests. If scopes that are not allowed for the client are requested, returns unauthorized.
          in: query
          name: scope
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 5
      responses:
        "302":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2: []
      summary: Get the oAuth2 authorization code flow code.
      tags:
        - NoScope
  /v1/marketsegments:
    get:
      operationId: MarketSegments_GetMarketSegments
      parameters:
        - description: If not given, return all Market Segments, if given as true return only active Market Segments, if given as false returns only inactive Market Segments.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from market segment name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - description: "Optional: Include also child market segments. If false returns only parent segments. Default true."
          in: query
          name: includeChildSegments
          schema:
            default: true
            type: boolean
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MarketSegmentModel"
                type: array
          description: List of Market Segments.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get the Market Segments.
      tags:
        - SettingsRead
    post:
      operationId: MarketSegments_PostMarketSegment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MarketSegmentModel"
              nullable: true
        description: MarketSegmentModel.
        x-name: marketSegment
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MarketSegmentModel"
          description: Created market segment.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a market segment.
      tags:
        - SettingsWrite
  "/v1/marketsegments/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if market segment can't be found."
      operationId: MarketSegments_DeleteMarketSegment
      parameters:
        - description: ID for the market segment to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: MarketSegmentModel
        - description: "Optional: ID of the lead source to which to move usages of this market segment. Default null."
          in: query
          name: moveUsagesToGuid
          schema:
            nullable: true
            type: string
          x-position: 2
          x-relation-guid: MarketSegmentModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete a market segment.
      tags:
        - SettingsDelete
    get:
      operationId: MarketSegments_GetMarketSegment
      parameters:
        - description: GUID used to get the Market Segment.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: MarketSegmentModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MarketSegmentModel"
          description: Market Segment.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get Market Segment by ID.
      tags:
        - SettingsRead
    patch:
      operationId: MarketSegments_PatchMarketSegment
      parameters:
        - description: ID of the Market Segment.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: MarketSegmentModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of MarketSegmentModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MarketSegmentModel"
                type: array
          description: List of updated Market Segments.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) an Market Segment or a part of it.
      tags:
        - SettingsWrite
  /v1/organizationdetails:
    get:
      operationId: OrganizationDetails_GetOrganizationDetails
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationDetailsOutputModel"
          description: Organization
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - organization:read
      summary: Get the details of organization.
      tags:
        - OrganizationRead
    patch:
      operationId: OrganizationDetails_PatchOrganizationDetails
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        x-name: patchDocument
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationDetailsOutputModel"
          description: organization details
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - organization:write
      summary: Update (Patch) a organization details or a part of it
      tags:
        - OrganizationWrite
  /v1/organizationsettings:
    get:
      operationId: OrganizationSettings_GetOrganizationSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationSettingsModel"
          description: Organization.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - organization:read
      summary: Get the settings of organization.
      tags:
        - OrganizationRead
  "/v1/overtimeprices/{guid}":
    get:
      operationId: OvertimePrices_GetOvertimePrice
      parameters:
        - description: Id used to get the overtime price.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: OvertimePriceModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OvertimePriceModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get overtime price by ID.
      tags:
        - SettingsRead
  /v1/overtimes:
    get:
      operationId: Overtimes_GetOvertimes
      parameters:
        - description: If not given, return all overtime definitions, if given as true return only active overtime definitions, if given as false returns only inactive overtime definitions.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default all."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from overtime name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc"".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/OvertimeModel"
                type: array
          description: Overtime definitions.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get overtime definitions.
      tags:
        - SettingsRead
    post:
      operationId: Overtimes_PostOvertime
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OvertimeModel"
              nullable: true
        description: OvertimeModel.
        x-name: overtime
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OvertimeModel"
          description: Created overtime.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert an overtime.
      tags:
        - SettingsWrite
  "/v1/overtimes/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if overtime can't be found."
      operationId: Overtimes_DeleteOvertime
      parameters:
        - description: ID for the overtime to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: OvertimeModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete an overtime.
      tags:
        - SettingsDelete
    get:
      operationId: Overtimes_GetOvertime
      parameters:
        - description: Id used to get the overtime definition.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: OvertimeModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OvertimeModel"
          description: OvertimeModel.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get overtime definition by ID.
      tags:
        - SettingsRead
    patch:
      operationId: Overtimes_PatchOvertime
      parameters:
        - description: ID of the overtime.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: OvertimeModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of OvertimeModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/OvertimeModel"
                type: array
          description: list of overtimes.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) an overtime or a part of it.
      tags:
        - SettingsWrite
  /v1/permissionprofiles:
    get:
      operationId: PermissionProfiles_GetPermissionProfiles
      parameters:
        - description: If not given, return all Permission Profiles, if given as true return only active Permission Profiles, if given as false returns only inactive Permission Profiles.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from permission profile name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc&sortings[1].key=isActive&sortings[1].value=Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PermissionProfileModel"
                type: array
          description: List of Permission Profiles.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get the Permission Profiles.
      tags:
        - SettingsRead
  "/v1/permissionprofiles/{guid}":
    get:
      operationId: PermissionProfiles_GetPermissionProfile
      parameters:
        - description: GUID used to get the Permission Profile.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: PermissionProfileModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionProfileModel"
          description: PermissionProfileModel.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get Permission Profile by ID.
      tags:
        - SettingsRead
  /v1/phasemembers:
    get:
      description: Use root phase to get project members.
      operationId: PhaseMembers_GetAllPhaseMembers
      parameters:
        - description: "Optional: Get phase members that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: Page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Is the user active. Default nothing = all."
          in: query
          name: isUserActive
          schema:
            nullable: true
            type: boolean
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PhaseMemberOutputModel"
                type: array
          description: All the phase members
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get all active phase members
      tags:
        - ProjectsRead
    post:
      description: User is always added as a root phase (project) member also.
      operationId: PhaseMembers_PostPhaseMember
      parameters:
        - description: "Optional: Add member to all sub phases. Default true."
          in: query
          name: addToAllSubPhases
          schema:
            default: true
            type: boolean
          x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhaseMemberModel"
              nullable: true
        description: PhaseMemberModel.
        x-name: memberModel
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhaseMemberModel"
          description: Added member.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Adds a phase member.
      tags:
        - ProjectsWrite
  "/v1/phasemembers/{userGuid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Only one of transferToRoleGuid and transferToUserGuid can be provided. Use root phase to delete a project member."
      operationId: PhaseMembers_DeletePhaseMember
      parameters:
        - description: GUID of the phase member to remove
          in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 2
          x-relation-guid: UserOutputModel
        - description: "Optional: The action to be applied to the user's resource allocations"
          in: query
          name: resourceAllocationAction
          schema:
            $ref: "#/components/schemas/ResourceAllocationAction"
            default: None
          x-position: 3
        - description: "Optional: GUID of the user to whom the resource allocations are transferred."
          in: query
          name: transferToUserGuid
          schema:
            nullable: true
            type: string
          x-position: 4
          x-relation-guid: UserOutputModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhaseMemberModel"
              nullable: true
        x-name: memberModel
        x-position: 1
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:delete
      summary: Deletes a phase member
      tags:
        - ProjectsDelete
  /v1/phasemembersfrombusinessunitusers:
    post:
      description: Users are always added as a root phase (project) member also.
      operationId: PhaseMembers_PostPhaseMembersFromBusinessUnitUsers
      parameters:
        - description: "Optional: Add member to all sub phases. Default true."
          in: query
          name: addToAllSubPhases
          schema:
            default: true
            type: boolean
          x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhaseMembersFromBusinessUnitUsersModel"
              nullable: true
        description: PhaseMemberModel.
        x-name: memberModel
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PhaseMemberModel"
                type: array
          description: List of added members.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Adds business unit users to phase members.
      tags:
        - ProjectsWrite
  /v1/phases:
    get:
      operationId: Phases_GetPhases
      parameters:
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Get phases that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
        - description: "Optional: Code of the phase."
          in: query
          name: code
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: List of project ids."
          explode: true
          in: query
          name: projectGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 5
          x-relation-guid: ProjectOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PhaseOutputModel"
                type: array
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get the phases.
      tags:
        - ProjectsRead
    post:
      operationId: Phases_PostPhase
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhaseInputModel"
              nullable: true
        description: PhaseOutputModel
        x-name: phase
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhaseOutputModel"
          description: Created phase
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Insert a phase
      tags:
        - ProjectsWrite
  "/v1/phases/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: Phases_DeletePhase
      parameters:
        - description: GUID used to delete the phase.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: PhaseOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:delete
      summary: Deletes a phase
      tags:
        - ProjectsDelete
    get:
      operationId: Phases_GetPhase
      parameters:
        - description: Id used to get the phase.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: PhaseOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhaseOutputModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get phase by ID
      tags:
        - ProjectsRead
    patch:
      operationId: Phases_PatchPhase
      parameters:
        - description: ID of the phase
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: PhaseOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of PhaseInputModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PhaseOutputModel"
                type: array
          description: Updated phase
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Update (Patch) a phase or a part of it
      tags:
        - ProjectsWrite
  "/v1/phases/{phaseGuid}/phasemembers":
    get:
      description: Use root phase to get project members.
      operationId: PhaseMembers_GetPhaseMembers
      parameters:
        - description: GUID of the phase.
          in: path
          name: phaseGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: PhaseOutputModel
        - description: "Optional: Page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Is the member active on the phase. Filters only root phase members. Default nothing = all."
          in: query
          name: isActive
          schema:
            nullable: true
            type: boolean
          x-position: 4
        - description: "Optional: Is the user active. Default nothing = all."
          in: query
          name: isUserActive
          schema:
            nullable: true
            type: boolean
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PhaseMemberOutputModel"
                type: array
          description: All the phase members
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get phase members
      tags:
        - ProjectsRead
  "/v1/phases/{phaseGuid}/resourceallocations/allocations":
    get:
      operationId: ResourceAllocations_GetResourceAllocationsByPhaseGuid
      parameters:
        - in: path
          name: phaseGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: PhaseOutputModel
        - description: Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days
          in: query
          name: startDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 2
        - description: Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days
          in: query
          name: endDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
        - description: "Optional: Get resource allocations that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
        - explode: true
          in: query
          name: userLicenseTypes
          schema:
            items:
              $ref: "#/components/schemas/LicenseUserType"
            nullable: true
            type: array
          style: form
          x-position: 5
        - in: query
          name: projectGuid
          schema:
            nullable: true
            type: string
          x-position: 6
          x-relation-guid: ProjectOutputModel
        - in: query
          name: userGuid
          schema:
            nullable: true
            type: string
          x-position: 7
          x-relation-guid: UserOutputModel
        - in: query
          name: projectBusinessUnitGuid
          schema:
            nullable: true
            type: string
          x-position: 8
          x-relation-guid: BusinessUnitModel
        - in: query
          name: userBusinessUnitGuid
          schema:
            nullable: true
            type: string
          x-position: 9
          x-relation-guid: BusinessUnitModel
        - in: query
          name: projectManagerUserGuid
          schema:
            nullable: true
            type: string
          x-position: 10
          x-relation-guid: UserOutputModel
        - in: query
          name: userTagGuid
          schema:
            nullable: true
            type: string
          x-position: 11
          x-relation-guid: UserKeywordModel
        - in: query
          name: useSalesProbability
          schema:
            default: true
            type: boolean
          x-position: 12
        - in: query
          name: projectStatusTypeGuid
          schema:
            nullable: true
            type: string
          x-position: 13
          x-relation-guid: ProjectStatusTypeModel
        - in: query
          name: projectTagGuid
          schema:
            nullable: true
            type: string
          x-position: 14
          x-relation-guid: ProjectKeywordModel
        - in: query
          name: superiorUserGuid
          schema:
            nullable: true
            type: string
          x-position: 15
          x-relation-guid: UserOutputModel
        - in: query
          name: salesStatusTypeGuid
          schema:
            nullable: true
            type: string
          x-position: 16
          x-relation-guid: SalesStatusTypeOutputModel
        - in: query
          name: resourceAllocationGuid
          schema:
            nullable: true
            type: string
          x-position: 17
          x-relation-guid: ResourceAllocationOutputModel
        - in: query
          name: salesProgress
          schema:
            $ref: "#/components/schemas/SalesProgress"
          x-position: 18
        - description: "Optional: Number of rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 19
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAllocationOutputModel"
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - resourceallocations:read
      summary: Get resource allocations for a phase with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
      tags:
        - ResourceallocationsRead
  "/v1/phases/{phaseGuid}/worktypes":
    get:
      description: Only the active work types are included in the list, whether they come from organization settings or project specific work types.
      operationId: WorkTypes_GetPhaseWorkTypes
      parameters:
        - description: Id of the phase.
          in: path
          name: phaseGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: PhaseOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: number of rows to fetch"
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: Id of the user for whom the work types are retrieved. Default is current user.
          in: query
          name: userGuid
          schema:
            nullable: true
            type: string
          x-position: 4
          x-relation-guid: UserOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/WorkTypeOutputModel"
                type: array
          description: All the work types matching search criteria
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get all work types that are available for a phase (for work hour entry)
      tags:
        - ProjectsRead
  /v1/phasestatustypes:
    get:
      operationId: PhaseStatusTypes_GetPhaseStatusTypes
      parameters:
        - description: If not given, return all phase status types, if given as true return only active phase status types, if given as false returns only inactive phase status types
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default all."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PhaseStatusTypeModel"
                type: array
          description: All the phase status types
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get phase status types
      tags:
        - SettingsRead
    post:
      operationId: PhaseStatusTypes_PostPhaseStatusType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhaseStatusTypeModel"
              nullable: true
        description: PhaseStatusTypeModel
        x-name: phaseStatusType
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhaseStatusTypeModel"
          description: Created phase status type
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a phase status type
      tags:
        - SettingsWrite
  "/v1/phasestatustypes/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if phase status type can't be found."
      operationId: PhaseStatusTypes_DeletePhaseStatusType
      parameters:
        - description: ID for the phase status type to delete
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: PhaseStatusTypeModel
        - description: "Optional: ID of the phase status type to which to move usages of this phase status type. Default null. If phase status type is in use and usages aren't moved the deletion might fail."
          in: query
          name: moveUsagesToGuid
          schema:
            nullable: true
            type: string
          x-position: 2
          x-relation-guid: PhaseStatusTypeModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete a phase status type
      tags:
        - SettingsDelete
    get:
      operationId: PhaseStatusTypes_GetPhaseStatusType
      parameters:
        - description: Id used to get the phase status type.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: PhaseStatusTypeModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhaseStatusTypeModel"
          description: PhaseStatusTypeModel
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get phase status type by GUID
      tags:
        - SettingsRead
    patch:
      operationId: PhaseStatusTypes_PatchPhaseStatusType
      parameters:
        - description: ID of the phase status type
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: PhaseStatusTypeModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of TaskStatusTypeModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PhaseStatusTypeModel"
                type: array
          description: list of updated phase status type
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a phase status type or a part of it
      tags:
        - SettingsWrite
  /v1/pricelists:
    get:
      operationId: PriceLists_GetPricelists
      parameters:
        - description: If not given, return all price lists, if given as true return only active price lists, if given as false returns only inactive price lists.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from price list name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: ID of the price list currency."
          in: query
          name: currencyGuid
          schema:
            nullable: true
            type: string
          x-position: 5
          x-relation-guid: CurrencyOutputModel
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 6
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 7
        - description: "Optional: Name of the price list."
          in: query
          name: name
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 8
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PriceListOutputModel"
                type: array
          description: All the price lists.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all price lists.
      tags:
        - SettingsRead
  "/v1/pricelists/{guid}":
    get:
      operationId: PriceLists_GetPriceList
      parameters:
        - description: ID used to get the price list.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: PriceListModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PriceListModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get price list by GUID.
      tags:
        - SettingsRead
  "/v1/pricelists/{pricelistGuid}/pricelistversions":
    get:
      operationId: PriceListVersions_GetPricelistVersionsByPricelist
      parameters:
        - in: path
          name: pricelistGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: PriceListOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PricelistVersionOutputModel"
                type: array
          description: Price list versions.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all price list versions of a price list.
      tags:
        - SettingsRead
  "/v1/pricelistversions/{guid}":
    get:
      operationId: PriceListVersions_GetPricelistVersion
      parameters:
        - in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: PricelistVersionOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PricelistVersionOutputModel"
          description: Price list version.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get a price list version by guid.
      tags:
        - SettingsRead
  "/v1/pricelistversions/{pricelistVersionGuid}/overtimeprices":
    get:
      operationId: OvertimePrices_GetOvertimePrices
      parameters:
        - in: path
          name: pricelistVersionGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: PricelistVersionOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/OvertimePriceModel"
                type: array
          description: Projects.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the overtime prices for a price list version.
      tags:
        - SettingsRead
  "/v1/pricelistversions/{pricelistVersionGuid}/productprices":
    get:
      operationId: ProductPrices_GetProductPrices
      parameters:
        - description: ID of the price list version.
          in: path
          name: pricelistVersionGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: PricelistVersionOutputModel
        - description: If true return only prices from the price list, if false also returns prices from the products. Default is false.
          in: query
          name: fromPricelistOnly
          schema:
            default: false
            type: boolean
          x-position: 2
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: "Optional: Text to search from Product name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 5
        - description: "Optional: Calculate the number of total rows. Default false = total row count is returned as zero."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 6
        - description: "Optional: Absolute search for products with specified product code."
          in: query
          name: productCode
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 7
        - description: "Optional: Search all product price(s) by products guid(s)."
          explode: true
          in: query
          name: productGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 8
          x-relation-guid: ProductOutputModel
        - description: "Optional: If true, return only volume priced products. If false, return all non volume priced products. Default is null, which means return all products."
          in: query
          name: isVolumePriced
          schema:
            nullable: true
            type: boolean
          x-position: 9
        - description: "Optional: Search product prices according to product category / categories by product category guid(s)."
          explode: true
          in: query
          name: productCategoryGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 10
          x-relation-guid: ProductCategoryModel
        - description: "Optional: Search product prices according to product type / types."
          explode: true
          in: query
          name: productTypes
          schema:
            items:
              $ref: "#/components/schemas/ProductType"
            nullable: true
            type: array
          style: form
          x-position: 11
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductPriceOutputModel"
                type: array
          description: Projects.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the product prices for a price list version.
      tags:
        - SettingsRead
  "/v1/pricelistversions/{pricelistVersionGuid}/travelprices":
    get:
      operationId: TravelPrices_GetTravelPrices
      parameters:
        - description: ID of the price list version.
          in: path
          name: pricelistVersionGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: PricelistVersionOutputModel
        - description: If true return only prices from the price list, if false also returns prices from the products. Default is false.
          in: query
          name: fromPricelistOnly
          schema:
            default: false
            type: boolean
          x-position: 2
        - description: "Optional: List of expense classes to search by, defaults to all travel categories."
          explode: true
          in: query
          name: expenseClasses
          schema:
            items:
              $ref: "#/components/schemas/ExpensesClass"
            nullable: true
            type: array
          style: form
          x-position: 3
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 5
        - description: "Optional: Text to search from Product name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 6
        - description: "Optional: Calculate the number of total rows. Default false = total row count is returned as zero."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 7
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TravelPriceOutputModel"
                type: array
          description: TravelPriceModel.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the travel prices for a price list version.
      tags:
        - SettingsRead
  "/v1/pricelistversions/{pricelistVersionGuid}/workhourprices":
    get:
      operationId: WorkHourPrices_GetWorkHourPrices
      parameters:
        - description: Price list version identifier.
          in: path
          name: pricelistVersionGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: PricelistVersionOutputModel
        - description: "Optional: page token to fetch the next page.."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Get prices that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkHourPriceOutputModel"
          description: workHourPrices.
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the workHourPrices for a price list version.
      tags:
        - SettingsRead
  /v1/productcategories:
    get:
      operationId: ProductCategories_GetProductCategories
      parameters:
        - description: If not given, return all Product categories, if given as true return only active Product categories, if given as false returns only inactive Product categories.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default all."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from product category name or code."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Get product categories that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 5
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 6
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: ?sortings[0].key=Name&sortings[0].value=Desc &sortings[1].key=Code&sortings[1].value=Asc.'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 7
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductCategoryModel"
                type: array
          description: Product categories.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get product categories.
      tags:
        - SettingsRead
    post:
      operationId: ProductCategories_PostProductCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductCategoryModel"
              nullable: true
        description: ProductCategoryModel.
        x-name: productCategory
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductCategoryModel"
          description: Created product category.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a product category.
      tags:
        - SettingsWrite
  "/v1/productcategories/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if product category can't be found."
      operationId: ProductCategories_DeleteProductCategory
      parameters:
        - description: ID for the product category to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProductCategoryModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete a product category.
      tags:
        - SettingsDelete
    get:
      operationId: ProductCategories_GetProductCategory
      parameters:
        - description: Id used to get the product category.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProductCategoryModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductCategoryModel"
          description: ProductCategoryModel.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get product category by ID.
      tags:
        - SettingsRead
    patch:
      operationId: ProductCategories_PatchProductCategory
      parameters:
        - description: ID of the product category.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProductCategoryModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ProductCategoryModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductCategoryModel"
                type: array
          description: list of updated product category.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a product category or a part of it.
      tags:
        - SettingsWrite
  /v1/productcountrysettings:
    post:
      operationId: ProductCountrySettings_PostProductCountrySettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductCountrySettingsModel"
              nullable: true
        description: ProductCountrySettingsModel
        x-name: model
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductCountrySettingsModel"
          description: Inserted product country setting
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a product country setting
      tags:
        - SettingsWrite
  "/v1/productcountrysettings/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if product country setting can't be found."
      operationId: ProductCountrySettings_DeleteProductCountrySetting
      parameters:
        - description: GUID used to delete the product country setting.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProductCountrySettingsModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Deletes a product country setting
      tags:
        - SettingsDelete
    patch:
      operationId: ProductCountrySettings_PatchProductCountrySettings
      parameters:
        - description: ID of the product country setting
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProductCountrySettingsModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ProductCountrySettingsModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductCountrySettingsModel"
                type: array
          description: List of updated product country settings
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a product country setting
      tags:
        - SettingsWrite
  "/v1/productprices/{guid}":
    get:
      operationId: ProductPrices_GetProductPrice
      parameters:
        - description: Id used to get the product price.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProductPriceOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductPriceOutputModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get product price by ID.
      tags:
        - SettingsRead
  /v1/products:
    get:
      operationId: Products_GetProducts
      parameters:
        - description: "Optional: Number of rows to fetch"
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 1
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: Product type. if given, it filters the products by the given type.
          in: query
          name: type
          schema:
            $ref: "#/components/schemas/ProductType"
          x-position: 3
        - description: If not given, return all Products, if given as true return only isActive Products, if given as false returns only inactive Products
          in: query
          name: isActive
          schema:
            nullable: true
            type: boolean
          x-position: 4
        - description: "Optional: Code of the product."
          in: query
          name: code
          schema:
            nullable: true
            type: string
          x-position: 5
        - description: "Optional: Get products that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductOutputModel"
                type: array
          description: All the Products
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the Products
      tags:
        - SettingsRead
    post:
      operationId: Products_PostProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInputModel"
              nullable: true
        description: ProductModel.
        x-name: product
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductOutputModel"
          description: Created product.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a product.
      tags:
        - SettingsWrite
  "/v1/products/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if product can't be found."
      operationId: Products_DeleteProduct
      parameters:
        - description: ID for the product to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProductOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete a product.
      tags:
        - SettingsDelete
    get:
      operationId: Products_GetProduct
      parameters:
        - description: GUID used to get the product.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProductOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductOutputModel"
          description: Product.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get product by ID.
      tags:
        - SettingsRead
    patch:
      operationId: Products_PatchProduct
      parameters:
        - description: ID of the product.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProductOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ProductModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductOutputModel"
                type: array
          description: List of updated products.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) an product or a part of it.
      tags:
        - SettingsWrite
  "/v1/products/{productGuid}/productcountrysettings":
    get:
      operationId: ProductCountrySettings_GetProductCountrySettings
      parameters:
        - description: GUID of the product.
          in: path
          name: productGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProductOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductCountrySettingsModel"
                type: array
          description: All the ProductCountrySettings (tax related information)
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the country settings for a product
      tags:
        - SettingsRead
  /v1/projectbillingcustomers:
    post:
      operationId: ProjectBillingCustomers_PostProjectBillingCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectBillingCustomerModel2"
              nullable: true
        description: ProjectBillingCustomerModel.
        x-name: projectBillingCustomer
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectBillingCustomerModel2"
          description: Created billing customer.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a billing customer for a project.
      tags:
        - SettingsWrite
  "/v1/projectbillingcustomers/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: ProjectBillingCustomers_DeleteProjectBillingCustomer
      parameters:
        - description: GUID of the project billing customer to remove.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectBillingCustomerModel2
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Deletes a project billing customer.
      tags:
        - SettingsDelete
    get:
      operationId: ProjectBillingCustomers_GetProjectBillingCustomer
      parameters:
        - description: ID of the project billing customer.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectBillingCustomerModel2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectBillingCustomerModel2"
          description: Project billing customer.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get a project billing customer.
      tags:
        - SettingsRead
    patch:
      operationId: ProjectBillingCustomers_PatchProjectBillingCustomer
      parameters:
        - description: ID of the project billing customer.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectBillingCustomerModel2
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ProjectBillingCustomerModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectBillingCustomerModel2"
                type: array
          description: list of updated project billing customer.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a project billing customer.
      tags:
        - SettingsWrite
  /v1/projectfees:
    get:
      operationId: ProjectFees_GetProjectFeesByToken
      parameters:
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: Number of rows to fetch"
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Get project fees that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectFeeOutputModel"
                type: array
          description: ProjectFee
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:read
      summary: Get the project fees.
      tags:
        - FeesRead
    post:
      operationId: ProjectFees_PostProjectFee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectFeeInputModel"
              nullable: true
        description: ProjectFeeInputModel.
        x-name: projectFee
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectFeeOutputModel"
                type: array
          description: Created project fees.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:write
      summary: Insert a project fee.
      tags:
        - FeesWrite
  "/v1/projectfees/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: ProjectFees_DeleteProjectFree
      parameters:
        - description: GUID used to delete the project fee.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectFeeInputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:delete
      summary: Deletes a project fee.
      tags:
        - FeesDelete
    get:
      operationId: ProjectFees_GetProjectFee
      parameters:
        - description: Id used to get the projectFee.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectFeeOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectFeeOutputModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:read
      summary: Get projectFee by ID.
      tags:
        - FeesRead
    patch:
      operationId: ProjectFees_PatchProjectFee
      parameters:
        - description: ID of the project fee Can also be comma separate list of IDs to patch multiple project fees with one call. When multiple IDs are given, returns model which has list of succeeded project fees and list of errors.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectFeeInputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of ProjectFeeInputModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectFeeOutputModel"
                type: array
          description: List of updated project fees.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:write
      summary: Update (Patch) a projectFee or a part of it.
      tags:
        - FeesWrite
  "/v1/projectfiles/{guid}":
    get:
      operationId: Files_GetProjectFile
      parameters:
        - description: GUID used to get the project file.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectFileModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectFileModel"
          description: ProposalFile.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - files:read
      summary: Get project file by ID.
      tags:
        - FilesRead
  /v1/projectforecasts:
    post:
      operationId: ProjectForecasts_PostForecast
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectForecastInputModel"
              nullable: true
        description: ProjectForecastOutputInputModel
        x-name: projectForecast
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectForecastOutputModel"
          description: Project forecast
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Insert a project forecast
      tags:
        - ProjectsWrite
  "/v1/projectforecasts/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if product can't be found."
      operationId: ProjectForecasts_DeleteForecast
      parameters:
        - description: ID for the project forecast to delete
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectForecastInputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:delete
      summary: Delete a project forecast
      tags:
        - ProjectsDelete
    get:
      operationId: ProjectForecasts_GetForecast
      parameters:
        - description: GUID used to get the project forecast.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectForecastOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectForecastOutputModel"
          description: Project forecast
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get project forecast by ID
      tags:
        - ProjectsRead
    patch:
      operationId: ProjectForecasts_PatchForecast
      parameters:
        - description: ID of the project forecast
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectForecastInputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ProjectForecastInputModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectForecastOutputModel"
                type: array
          description: List of updated Project forecast
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Update (Patch) an project forecast or a part of it
      tags:
        - ProjectsWrite
  /v1/projectinvoicesettings:
    post:
      operationId: ProjectInvoiceSettings_PostProjectInvoiceSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectInvoiceSettingsInputModel"
              nullable: true
        description: Project invoice settings.
        x-name: projectInvoiceSettings
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectInvoiceSettingsOutputModel"
          description: Created project invoice settings.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:write
            - projects:write
      summary: Create a new project invoice settings.
      tags:
        - InvoicesWrite
        - ProjectsWrite
  "/v1/projectinvoicesettings/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if project invoice settings can't be found."
      operationId: ProjectInvoiceSettings_DeleteProjectInvoiceSettings
      parameters:
        - description: ID for the project invoice settings to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectInvoiceSettingsOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:delete
            - projects:delete
      summary: Delete an project invoice settings.
      tags:
        - InvoicesDelete
        - ProjectsDelete
    get:
      operationId: ProjectInvoiceSettings_GetProjectInvoiceSetting
      parameters:
        - description: ID of the project invoice settings.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectInvoiceSettingsOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectInvoiceSettingsOutputModel"
          description: The project invoice settings.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
            - projects:read
      summary: Get project invoice settings by ID.
      tags:
        - InvoicesRead
        - ProjectsRead
    patch:
      operationId: ProjectInvoiceSettings_PatchProjectInvoiceSettings
      parameters:
        - description: ID of the project invoice settings.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectInvoiceSettingsOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ProjectInvoiceSettingsInputModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectInvoiceSettingsOutputModel"
                type: array
          description: The project invoice settings.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:write
            - projects:write
      summary: Update (Patch) project invoice settings.
      tags:
        - InvoicesWrite
        - ProjectsWrite
  /v1/projectlinks:
    post:
      operationId: Files_PostProjectLink
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectFileModel"
              nullable: true
        description: ProjectFileModel.
        x-name: model
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectFileModel"
          description: Created project file.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Add a link to a project.
      tags:
        - ProjectsWrite
  /v1/projectmembercostexceptions:
    post:
      operationId: ProjectMemberCostExceptions_Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectMemberCostExceptionInputModel"
              nullable: true
        description: ProjectMemberCostExceptionModel.
        x-name: model
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectMemberCostExceptionOutputModel"
          description: Inserted link.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Add a cost exception to a project member.
      tags:
        - SettingsWrite
  "/v1/projectmembercostexceptions/{guid}":
    delete:
      description: "Deletes project member cost exception. Returns: No Content (204) if succeeded."
      operationId: ProjectMemberCostExceptions_Delete
      parameters:
        - description: GUID used to delete the project member cost exception.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectMemberCostExceptionInputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Deletes a project member cost exception.
      tags:
        - SettingsDelete
    get:
      operationId: ProjectMemberCostExceptions_GetProjectMemberCostException
      parameters:
        - description: GUID used to get the cost exception.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectMemberCostExceptionInputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectMemberCostExceptionOutputModel"
          description: Link.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get project member cost exception by ID.
      tags:
        - SettingsRead
    patch:
      operationId: ProjectMemberCostExceptions_Patch
      parameters:
        - description: ID of the project member cost exception.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectMemberCostExceptionInputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of ProjectMemberCostExceptionModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectMemberCostExceptionOutputModel"
                type: array
          description: list of updated links.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) project member cost exception.
      tags:
        - SettingsWrite
  /v1/projectproducts:
    post:
      operationId: ProjectProducts_PostProjectProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectProductInputModel"
              nullable: true
        description: projectProductModel
        x-name: projectProductModel
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectProductOutputModel"
          description: Added project product
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Adds a product to a project.
      tags:
        - ProjectsWrite
  "/v1/projectproducts/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: ProjectProducts_DeleteProjectProduct
      parameters:
        - description: GUID of the project product to remove.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectProductInputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:delete
      summary: Deletes a project product.
      tags:
        - ProjectsDelete
  /v1/projectrecurringfeerules:
    get:
      operationId: ProjectRecurringFeeRules_GetProjectRecurringFeeRules
      parameters:
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: projectRecurringFeeRule's product type. if given, it filters the projectRecurringFeeRules by the given type.
          in: query
          name: productType
          schema:
            $ref: "#/components/schemas/ProductType"
          x-position: 3
        - description: "Optional: Get recurring fee rules that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectRecurringFeeRuleOutputModel"
                type: array
          description: List of updated project recurring fee rules
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:read
      summary: Get the recurring fee rules.
      tags:
        - FeesRead
    post:
      operationId: ProjectRecurringFeeRules_PostProjectRecurringFeeRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectRecurringFeeRuleInputModel"
              nullable: true
        description: ProjectRecurringFeeRuleModel.
        x-name: projectRecurringFeeRule
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectRecurringFeeRuleOutputModel"
                type: array
          description: Created ProjectRecurringFeeRules.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:write
      summary: Insert a projectRecurringFeeRule.
      tags:
        - FeesWrite
  "/v1/projectrecurringfeerules/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: ProjectRecurringFeeRules_DeleteProjectRecurringFeeRule
      parameters:
        - description: GUID used to delete the project recurring fee rule.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectRecurringFeeRuleInputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:delete
      summary: Deletes a projectRecurringFeeRule.
      tags:
        - FeesDelete
    get:
      operationId: ProjectRecurringFeeRules_GetProjectRecurringFeeRule
      parameters:
        - description: Id used to get the ProjectRecurringFeeRule.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectRecurringFeeRuleOutputModel
        - description: Indicates the rule should be returned even if it is not active. Default is false.
          in: query
          name: includeInactive
          schema:
            default: false
            type: boolean
          x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectRecurringFeeRuleOutputModel"
          description: List of updated project recurring fee rules.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:read
      summary: Get project's RecurringFeeRule by ID.
      tags:
        - FeesRead
    patch:
      operationId: ProjectRecurringFeeRules_PatchProjectRecurringFeeRule
      parameters:
        - description: ID of the projectRecurringFeeRule.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectRecurringFeeRuleInputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of ProjectRecurringFeeRuleModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectRecurringFeeRuleOutputModel"
                type: array
          description: List of updated projectRecurringFeeRules.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:write
      summary: Update (Patch) a projectRecurringFeeRule or a part of it.
      tags:
        - FeesWrite
  /v1/projects:
    get:
      operationId: Projects_GetProjects
      parameters:
        - in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: ID of project currency."
          in: query
          name: currencyGuid
          schema:
            nullable: true
            type: string
          x-position: 3
          x-relation-guid: CurrencyOutputModel
        - description: "Optional: Get projects that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: When true fetch projects that have something to bill, when false nothing to bill. Default nothing = all."
          in: query
          name: isBillable
          schema:
            nullable: true
            type: boolean
          x-position: 5
        - explode: true
          in: query
          name: customerGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 6
        - explode: true
          in: query
          name: projectGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 7
        - explode: true
          in: query
          name: projectKeywordGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 8
        - explode: true
          in: query
          name: projectStatusTypeGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 9
        - explode: true
          in: query
          name: salesPersonGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 10
        - explode: true
          in: query
          name: projectOwnerGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 11
        - explode: true
          in: query
          name: businessUnitGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 12
        - in: query
          name: minimumBillableAmount
          schema:
            format: double
            nullable: true
            type: number
          x-position: 13
        - explode: true
          in: query
          name: customerOwnerGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 14
        - in: query
          name: invoiceableDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 15
        - explode: true
          in: query
          name: marketSegmentationGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 16
        - explode: true
          in: query
          name: salesStatusTypeGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 17
        - in: query
          name: isClosed
          schema:
            nullable: true
            type: boolean
          x-position: 18
        - in: query
          name: hasRecurringFees
          schema:
            nullable: true
            type: boolean
          x-position: 19
        - explode: true
          in: query
          name: companyCurrencyGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 20
        - explode: true
          in: query
          name: projectMemberUserGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 21
        - explode: true
          in: query
          name: numbers
          schema:
            items:
              format: int64
              type: integer
            nullable: true
            type: array
          style: form
          x-position: 22
        - description: "Optional: Get internal / non-internal projects."
          in: query
          name: internal
          schema:
            nullable: true
            type: boolean
          x-position: 23
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectOutputModel"
                type: array
          description: Projects
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get all the projects
      tags:
        - ProjectsRead
    post:
      description: When creating a new project, the price list property will be ignored, as it is chosen by default.
      operationId: Projects_PostProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectInputModelBase"
              nullable: true
        description: ProjectInputModelBase
        x-name: project
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectOutputModel"
          description: Created project
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Insert a project
      tags:
        - ProjectsWrite
  /v1/projects/customproperties:
    get:
      operationId: ProjectCustomProperties_GetProjectCustomProperties
      parameters:
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Get only active or inactive project properties."
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 3
        - description: "Optional: Text to search from custom property name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Is the customer property used in any custom property usage."
          in: query
          name: isInUse
          schema:
            nullable: true
            type: boolean
          x-position: 5
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 6
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 7
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomPropertyModel"
                type: array
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get the project custom properties.
      tags:
        - SettingsRead
    post:
      operationId: ProjectCustomProperties_PostProjectCustomProperty
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomPropertyModel"
              nullable: true
        description: ProjectCustomPropertyModel.
        x-name: customProperty
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomPropertyModel"
                type: array
          description: Created project custom property.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a project custom property.
      tags:
        - SettingsWrite
  /v1/projects/customproperties/projectcustompropertyselectionitems:
    post:
      operationId: ProjectCustomPropertySelectionItems_PostProjectCustomPropertySelectionItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCustomPropertySelectionItemInputModel"
              nullable: true
        description: CustomPropertySelectionItemInputModel.
        x-name: projectCustomPropertySelectionItem
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectCustomPropertySelectionItemOutputModel"
          description: Created project custom property.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a project custom property selection item.
      tags:
        - SettingsWrite
  "/v1/projects/customproperties/projectcustompropertyselectionitems/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: ProjectCustomPropertySelectionItems_DeleteProjectCustomPropertySelectionItem
      parameters:
        - description: GUID used to delete the project custom property selection item.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectCustomPropertySelectionItemInputModel
      responses:
        "204":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Deletes a project custom property selection item.
      tags:
        - SettingsDelete
    get:
      operationId: ProjectCustomPropertySelectionItems_GetProjectCustomPropertySelectionItem
      parameters:
        - description: Id used to get the project custom property selection item.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectCustomPropertySelectionItemOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectCustomPropertySelectionItemOutputModel"
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get project custom property selection item by ID.
      tags:
        - SettingsRead
    patch:
      operationId: ProjectCustomPropertySelectionItems_PatchProjectCustomPropertySelectionItem
      parameters:
        - description: ID of the project custom property selection item.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectCustomPropertySelectionItemInputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of ProjectCustomPropertySelectionItemInputModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectCustomPropertySelectionItemOutputModel"
                type: array
          description: List of updated project custom properties.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a project custom property selection item or a part of it.
      tags:
        - SettingsWrite
  "/v1/projects/customproperties/{customPropertyGuid}/projectcustompropertyselectionitems":
    get:
      operationId: ProjectCustomPropertySelectionItems_GetProjectCustomPropertySelectionItems
      parameters:
        - description: Custom property id used to get the project custom property selection items.
          in: path
          name: customPropertyGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomPropertyModel
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Get only active or inactive selection items."
          in: query
          name: isActive
          schema:
            nullable: true
            type: boolean
          x-position: 3
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Get custom property selection items that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectCustomPropertySelectionItemOutputModel"
                type: array
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get the project custom properties.
      tags:
        - SettingsRead
  "/v1/projects/customproperties/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: ProjectCustomProperties_DeleteProjectCustomProperty
      parameters:
        - description: GUID used to delete the project custom property.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomPropertyModel
      responses:
        "204":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Deletes a project custom property.
      tags:
        - SettingsDelete
    get:
      operationId: ProjectCustomProperties_GetProjectCustomProperty
      parameters:
        - description: Id used to get the project custom property.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomPropertyModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomPropertyModel"
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get project custom property by ID.
      tags:
        - SettingsRead
    patch:
      operationId: ProjectCustomProperties_PatchProjectCustomProperty
      parameters:
        - description: ID of the project custom property Can also be comma separate list of IDs to patch multiple project custom properties with one call. When multiple IDs are given, returns model which has list of succeeded project custom properties and list of errors.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomPropertyModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of ProjectCustomPropertyModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomPropertyModel"
                type: array
          description: List of updated project custom properties.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a project custom property or a part of it.
      tags:
        - SettingsWrite
  /v1/projects/customvalues:
    post:
      operationId: ProjectCustomValues_PostProjectCustomValue
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCustomValueModel"
              nullable: true
        description: ProjectCustomValueModel.
        x-name: projectCustomValue
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectCustomValueModel"
                type: array
          description: Created project custom value.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Insert a project custom value.
      tags:
        - ProjectsWrite
  "/v1/projects/customvalues/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: ProjectCustomValues_DeleteProjectCustomValue
      parameters:
        - description: GUID used to delete the project custom value.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectCustomValueModel
      responses:
        "204":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:delete
      summary: Deletes a project custom value.
      tags:
        - ProjectsDelete
    get:
      operationId: ProjectCustomValues_GetProjectCustomValue
      parameters:
        - description: Id used to get the project custom value.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectCustomValueModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectCustomValueModel"
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get project custom value by ID.
      tags:
        - ProjectsRead
    patch:
      operationId: ProjectCustomValues_PatchProjectCustomValue
      parameters:
        - description: ID of the project custom value Can also be comma separate list of IDs to patch multiple project custom values with one call. When multiple IDs are given, returns model which has list of succeeded project custom values and list of errors.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectCustomValueModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of ProjectCustomValueModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectCustomValueModel"
                type: array
          description: List of updated project custom values.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Update (Patch) a project custom value or a part of it.
      tags:
        - ProjectsWrite
  "/v1/projects/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if project can't be found."
      operationId: Projects_DeleteProject
      parameters:
        - description: ID for the project to delete
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:delete
      summary: Delete a project
      tags:
        - ProjectsDelete
    get:
      operationId: Projects_GetProject
      parameters:
        - description: Id used to get the project.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectOutputModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get project by ID
      tags:
        - ProjectsRead
    patch:
      description: To update current project status, give ProjectStatusTypeGuid and possibly Description. To update current sales status, give SalesStatusTypeGuid (
      operationId: Projects_PatchProject
      parameters:
        - description: ID of the project
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of ProjectInputModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectOutputModel"
                type: array
          description: List of updated projects
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Update (Patch) a project or a part of it
      tags:
        - ProjectsWrite
  "/v1/projects/{guid}/phaseswithhierarchy":
    get:
      operationId: Phases_GetProjectPhases
      parameters:
        - description: Id of the project.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PhaseModelWithHierarchyInfo"
                type: array
          description: All the phases for the project
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get project's phases as flat list
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/customvalues":
    get:
      operationId: ProjectCustomValues_GetProjectCustomValues
      parameters:
        - description: ID of the project.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Get only values of active or inactive project custom properties."
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 4
        - description: List of target for which to get the values.
          explode: true
          in: query
          name: target
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 5
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 6
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 7
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectCustomValueModel"
                type: array
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get the project custom values.
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/files":
    get:
      operationId: Files_GetProjectFiles
      parameters:
        - description: GUID of the project used to get the files.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectFileModel"
                type: array
          description: File.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - files:read
      summary: Get all files of a project by its id.
      tags:
        - FilesRead
  "/v1/projects/{projectGuid}/flatrates":
    get:
      operationId: FlatRates_GetFlatratesForProject
      parameters:
        - description: Id of the project.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/FlatRateOutputModel"
                type: array
          description: All the flat rates for the project.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:read
      summary: Get project's flat rates.
      tags:
        - FeesRead
  "/v1/projects/{projectGuid}/keywords":
    get:
      operationId: Keywords_GetProjectKeywords
      parameters:
        - description: ID of the project for which keywords are requested.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 2
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Keyword&sortings[0].value=Desc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectKeywordModel"
                type: array
          description: Keywords.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get all the keywords for project.
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/keywords/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if the keyword or the link can't be found."
      operationId: Keywords_DeleteProjectKeyword
      parameters:
        - in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 2
          x-relation-guid: KeywordModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:delete
      summary: Delete a keyword from the project
      tags:
        - ProjectsDelete
    post:
      operationId: Keywords_LinkKeywordToProject
      parameters:
        - in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 2
          x-relation-guid: KeywordModel
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectKeywordModel"
          description: Created project keyword link.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Link existing keyword to project
      tags:
        - ProjectsWrite
  "/v1/projects/{projectGuid}/overtimeprices":
    get:
      operationId: OvertimePrices_GetOvertimePricesForProject
      parameters:
        - in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/OvertimePriceModel"
                type: array
          description: Projects.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get all the overtimePrices for a project.
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/pricelists/custom":
    post:
      operationId: PriceLists_PostCustomPricelist
      parameters:
        - description: ID of the project.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: Get the custom volume pricing price list or regular custom price list. Default is false.
          in: query
          name: isVolumePricing
          schema:
            default: false
            type: boolean
          x-position: 2
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomPriceListOutputModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: |-
        Create custom price list for a project. If project already has a custom price list returns existing price list.
        Creates a new price list if project doesn't have a custom price list.
        Project can only have one custom price list.
        Note that project's price list will be changed to the custom price list created here and
        also existing prices are copied to the new price list.
      tags:
        - ProjectsWrite
  "/v1/projects/{projectGuid}/productprices":
    get:
      operationId: ProductPrices_GetProductPricesForProject
      parameters:
        - description: ID of the project.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: If true return only prices from the price list, if false also returns prices from the products. Default is false.
          in: query
          name: fromPricelistOnly
          schema:
            default: false
            type: boolean
          x-position: 2
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: "Optional: Text to search from Product name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 5
        - description: "Optional: Calculate the number of total rows. Default false = total row count is returned as zero."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 6
        - description: "Optional: If true, returns only prices that are available for the project, false returns price that are not available. Default all."
          in: query
          name: isAvailable
          schema:
            nullable: true
            type: boolean
          x-position: 7
        - description: "Optional: Absolute search for products with specified product code."
          in: query
          name: productCode
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 8
        - description: "Optional: Search all product price(s) by products guid(s)."
          explode: true
          in: query
          name: productGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 9
          x-relation-guid: ProductOutputModel
        - description: "Optional: If true, return only volume priced products. If false, return all non volume priced products. Default is null, which means return all products."
          in: query
          name: isVolumePriced
          schema:
            nullable: true
            type: boolean
          x-position: 10
        - description: "Optional: Search product prices according to product category / categories by product category guid(s)."
          explode: true
          in: query
          name: productCategoryGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 11
          x-relation-guid: ProductCategoryModel
        - description: "Optional: Search product prices according to product type / types."
          explode: true
          in: query
          name: productTypes
          schema:
            items:
              $ref: "#/components/schemas/ProductType"
            nullable: true
            type: array
          style: form
          x-position: 12
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductPriceOutputModel"
                type: array
          description: Projects.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get all the productPrices for a project.
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/productsforproject":
    get:
      operationId: Products_GetSearchedProducts
      parameters:
        - description: Id of the project
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: "Optional: Number of rows to fetch"
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 3
        - description: Product type. if given, it filters the products by the given type
          in: query
          name: type
          schema:
            $ref: "#/components/schemas/ProductType"
          x-position: 4
        - description: "Optional: If true returns all the products from registry with project specific prices. If false returns only products specified for the project with project specific prices. Default false."
          in: query
          name: includeProductsFromRegistry
          schema:
            default: false
            type: boolean
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductForProjectOutputModel"
                type: array
          description: All the Products matching search criteria
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Gets available products for the given project where price information comes from projects price list
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/projectbillingcustomers":
    get:
      operationId: ProjectBillingCustomers_GetWorkHourPricesForProject
      parameters:
        - in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectBillingCustomerModel"
                type: array
          description: Project's billing customers
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get all the billing customers for a project
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/projectfees":
    get:
      operationId: ProjectFees_GetProjectFeesForProject
      parameters:
        - description: ID of the project.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: Number of rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: ProjectFee's product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting"
          in: query
          name: productType
          schema:
            $ref: "#/components/schemas/ProductType"
          x-position: 4
        - description: "Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null."
          in: query
          name: isBillable
          schema:
            nullable: true
            type: boolean
          x-position: 5
        - description: "Optional: Filter the project fees. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null."
          in: query
          name: isBilled
          schema:
            nullable: true
            type: boolean
          x-position: 6
        - description: "Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null."
          in: query
          name: invoiceableDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 7
        - description: "Optional: Also fetches recurring rules along with project fees. Default is false."
          in: query
          name: includeRecurringRules
          schema:
            default: false
            type: boolean
          x-position: 8
        - description: Optional. Filter the project fees. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false.
          in: query
          name: isBillablePeriodInFuture
          schema:
            nullable: true
            type: boolean
          x-position: 9
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectFeeOutputModel"
                type: array
          description: ProjectFees
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:read
      summary: Get all the project fees for a project
      tags:
        - FeesRead
  "/v1/projects/{projectGuid}/projectforecasts":
    delete:
      operationId: ProjectForecasts_DeleteForecasts
      parameters:
        - description: Project for the forecasts to delete
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: Year where to start deleting the forecasts
          in: query
          name: year
          schema:
            format: int32
            maximum: 2075
            minimum: 1900
            type: integer
          x-position: 2
        - description: Month where to start deleting the forecasts
          in: query
          name: month
          schema:
            format: int32
            maximum: 12
            minimum: 1
            type: integer
          x-position: 3
      responses:
        "204":
          description: List of project forecasts.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:delete
      summary: Delete the project forecasts from a month onward, including the given month.
      tags:
        - ProjectsDelete
    get:
      operationId: ProjectForecasts_GetForecasts
      parameters:
        - description: project for the forecasts
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: Start date of the date range for the forecasts
          in: query
          name: startDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 2
        - description: End date of the date range for the forecasts
          in: query
          name: endDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectForecastOutputModel"
                type: array
          description: List of project forecasts.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get the project forecasts
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/projectinvoicesettings":
    get:
      operationId: ProjectInvoiceSettings_GetProjectInvoiceSettings
      parameters:
        - description: ID of the project.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectInvoiceSettingsOutputModel"
                type: array
          description: The project invoice settings.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - invoices:read
            - projects:read
      summary: Get project invoice settings by project ID.
      tags:
        - InvoicesRead
        - ProjectsRead
  "/v1/projects/{projectGuid}/projectmembercostexceptions":
    get:
      operationId: ProjectMemberCostExceptions_GetProjectMemberCostExceptionsForProject
      parameters:
        - description: Guid of the project.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: "Optional: Guid of the user."
          in: query
          name: userGuid
          schema:
            nullable: true
            type: string
          x-position: 2
          x-relation-guid: UserOutputModel
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectMemberCostExceptionOutputModel"
                type: array
          description: All the member cost exceptions for one project.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get all cost exceptions of project members for a project.
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/projectproducts":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: ProjectProducts_DeleteAllProjectProducts
      parameters:
        - description: GUID of the project from where project products to remove.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:delete
      summary: Deletes all project products of a project.
      tags:
        - ProjectsDelete
    get:
      description: This is the same as organization's list of products, unless the project has some specific products and UseProductsFromSetting in project model is set to false.
      operationId: ProjectProducts_GetProjectProducts
      parameters:
        - description: GUID of the project.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: "Optional: Includes products available from product registry"
          in: query
          name: includeProductsFromRegistry
          schema:
            default: false
            type: boolean
          x-position: 2
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 3
        - description: "Optional: How many rows to fetch, Default all."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: Fetch only active
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectProductOutputModel"
                type: array
          description: A list of products for the project.
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get project products
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/projectrecurringfeerules":
    get:
      operationId: ProjectRecurringFeeRules_GetProjectRecurringFeeRulesForProject
      parameters:
        - description: ID of the project to get the recurring fee rules.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: projectRecurringFeeRule's product type. if given, it filters the projectRecurringFeeRules by the given type.
          in: query
          name: productType
          schema:
            $ref: "#/components/schemas/ProductType"
          x-position: 2
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: Optional. Filter the project recurring fee rules. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false.
          in: query
          name: isBillablePeriodInFuture
          schema:
            nullable: true
            type: boolean
          x-position: 5
        - description: the time period for any uninvoiced recurring rules.
          in: query
          name: billableTimePeriod
          schema:
            $ref: "#/components/schemas/BillablePeriod"
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectRecurringFeeRuleOutputModel"
                type: array
          description: List of updated project recurring fee rules
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:read
      summary: Get all the Recurring Fee Rules for a project
      tags:
        - FeesRead
  "/v1/projects/{projectGuid}/projectsalesnotes":
    get:
      operationId: SalesNotes_GetProjectSalesNotes
      parameters:
        - description: Project guid used to get the notes.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Get sales notes that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectSalesNoteOutputModel"
                type: array
          description: List of sales notes for a project.
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get the sales notes of a case.
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/projecttravelexpenses":
    get:
      operationId: ProjectTravelExpenses_GetProjectTravelExpensesForProject
      parameters:
        - description: ID of the project.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: "Optional: Filter the travel expenses. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null."
          in: query
          name: isBillable
          schema:
            nullable: true
            type: boolean
          x-position: 2
        - description: "Optional: Filter the travel expenses. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null."
          in: query
          name: isBilled
          schema:
            nullable: true
            type: boolean
          x-position: 3
        - description: "Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null."
          in: query
          name: invoiceableDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 5
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 6
        - description: Optional. Filter the project travel expenses. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false.
          in: query
          name: isBillablePeriodInFuture
          schema:
            nullable: true
            type: boolean
          x-position: 7
        - description: "Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense"
          in: query
          name: expenseClass
          schema:
            $ref: "#/components/schemas/ExpensesClass"
          x-position: 8
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectTravelExpenseOutputModel"
                type: array
          description: ProjectTravelExpenseOutputModel
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - travels:read
      summary: Get all the project travel expenses for a project
      tags:
        - TravelsRead
  "/v1/projects/{projectGuid}/projectworkhourprices":
    get:
      operationId: ProjectWorkHourPrices_GetWorkHourPricesForProject
      parameters:
        - description: Guid of the project.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: If true return only prices from the price list, if false also returns prices from the products. Default is false.
          in: query
          name: fromPricelistOnly
          schema:
            default: false
            type: boolean
          x-position: 2
        - description: "Optional: If true, returns only prices that are available for the project, false returns price that are not available. Default all."
          in: query
          name: isAvailable
          schema:
            nullable: true
            type: boolean
          x-position: 3
        - description: "Optional: Get project work hour prices that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectWorkHourPriceOutputModel"
                type: array
          description: Projects
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get all the work hour prices for a project
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/projectworktypes":
    get:
      description: This is the same as organization's list of work types, unless the project has some specific work types and "UseWorktypesFromSetting" in project model is set to false.
      operationId: ProjectWorkTypes_GetProjectWorktypes
      parameters:
        - description: GUID of the project.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: Include work types also from registry. If false, returns only project specific work types. Default false.
          in: query
          name: includeWorktypesFromRegistry
          schema:
            default: false
            type: boolean
          x-position: 2
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: If not given, return all work types, if given as true return only active work types, if given as false returns only inactive work types.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 5
        - description: "Optional: Text to search from work type name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 6
        - description: "Optional: Get project work types that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 7
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectWorkTypeModel"
                type: array
          description: A list of work types for the project.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get project work types.
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/proposals":
    get:
      operationId: Proposals_GetProposalsForProject
      parameters:
        - description: Project id for which to get proposals.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default all."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Get proposals that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProposalOutputModel"
                type: array
          description: Proposal
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get all the proposals for a project
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/resourceallocations/allocations":
    get:
      operationId: ResourceAllocations_GetResourceAllocationsByProjectGuid
      parameters:
        - in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days
          in: query
          name: startDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 2
        - description: Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days
          in: query
          name: endDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
        - description: "Optional: Get resource allocations that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
        - explode: true
          in: query
          name: userLicenseTypes
          schema:
            items:
              $ref: "#/components/schemas/LicenseUserType"
            nullable: true
            type: array
          style: form
          x-position: 5
        - in: query
          name: phaseGuid
          schema:
            nullable: true
            type: string
          x-position: 6
          x-relation-guid: PhaseOutputModel
        - in: query
          name: userGuid
          schema:
            nullable: true
            type: string
          x-position: 7
          x-relation-guid: UserOutputModel
        - in: query
          name: projectBusinessUnitGuid
          schema:
            nullable: true
            type: string
          x-position: 8
          x-relation-guid: BusinessUnitModel
        - in: query
          name: userBusinessUnitGuid
          schema:
            nullable: true
            type: string
          x-position: 9
          x-relation-guid: BusinessUnitModel
        - in: query
          name: projectManagerUserGuid
          schema:
            nullable: true
            type: string
          x-position: 10
          x-relation-guid: UserOutputModel
        - in: query
          name: userTagGuid
          schema:
            nullable: true
            type: string
          x-position: 11
          x-relation-guid: UserKeywordModel
        - in: query
          name: useSalesProbability
          schema:
            default: true
            type: boolean
          x-position: 12
        - in: query
          name: projectStatusTypeGuid
          schema:
            nullable: true
            type: string
          x-position: 13
          x-relation-guid: ProjectStatusTypeModel
        - in: query
          name: projectTagGuid
          schema:
            nullable: true
            type: string
          x-position: 14
          x-relation-guid: ProjectKeywordModel
        - in: query
          name: superiorUserGuid
          schema:
            nullable: true
            type: string
          x-position: 15
          x-relation-guid: UserOutputModel
        - in: query
          name: salesStatusTypeGuid
          schema:
            nullable: true
            type: string
          x-position: 16
          x-relation-guid: SalesStatusTypeOutputModel
        - in: query
          name: resourceAllocationGuid
          schema:
            nullable: true
            type: string
          x-position: 17
          x-relation-guid: ResourceAllocationOutputModel
        - in: query
          name: salesProgress
          schema:
            $ref: "#/components/schemas/SalesProgress"
          x-position: 18
        - description: "Optional: Number of rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 19
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAllocationOutputModel"
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - resourceallocations:read
      summary: Get resource allocations for a project with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
      tags:
        - ResourceallocationsRead
  "/v1/projects/{projectGuid}/salesstatushistory":
    get:
      operationId: SalesStatusHistory_GetSalesStatusHistory
      parameters:
        - description: The project for which the sales status history is fetched.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SalesStatusHistoryOutputModel"
                type: array
          description: Sales status history
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get the sales status history for a project
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/teamproductivity":
    get:
      operationId: TeamProductivity_GetTeamProductivity
      parameters:
        - description: GUID of the project.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TeamProductivityOutputModel"
                type: array
          description: List of project members with team productivity information.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get team productivity of a project.
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/travelexpensetypes":
    get:
      operationId: TravelExpenseTypes_GetSearchedTravelExpenseTypes
      parameters:
        - description: Id of the project.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: "Searched string: part of name or code."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: How many rows to fetch, Default all."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: "Optional: Id of the user to fetch travels for."
          in: query
          name: userGuid
          schema:
            nullable: true
            type: string
          x-position: 5
          x-relation-guid: UserOutputModel
        - description: "Optional: Expense class of the travel. Mileage/DailyAllowance/OtherTravelExpense."
          in: query
          name: expenseClass
          schema:
            $ref: "#/components/schemas/ExpensesClass"
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TravelExpenseTypeOutputModel"
                type: array
          description: All the Travel expense types matching search criteria.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Search active travel expense types of project by part of the name or code.
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/travelprices":
    get:
      operationId: TravelPrices_GetTravelPricesForProject
      parameters:
        - description: ID of the project.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: If true return only prices from the price list, if false also returns prices from the settings. Default is false.
          in: query
          name: fromPricelistOnly
          schema:
            default: false
            type: boolean
          x-position: 2
        - description: "Optional: List of expense classes to search by, defaults to all travel categories."
          explode: true
          in: query
          name: expenseClasses
          schema:
            items:
              $ref: "#/components/schemas/ExpensesClass"
            nullable: true
            type: array
          style: form
          x-position: 3
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 5
        - description: "Optional: Text to search from Product name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 6
        - description: "Optional: Calculate the number of total rows. Default false = total row count is returned as zero."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 7
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TravelPriceOutputModel"
                type: array
          description: TravelPriceModel.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get all the travel prices for a project.
      tags:
        - ProjectsRead
  "/v1/projects/{projectGuid}/workhours":
    get:
      operationId: WorkHours_GetProjectWorkHours
      parameters:
        - description: ID of the project.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: "Optional: Filter the work hours. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null."
          in: query
          name: isBillable
          schema:
            nullable: true
            type: boolean
          x-position: 2
        - description: "Optional: Filter the work hours. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null."
          in: query
          name: isBilled
          schema:
            nullable: true
            type: boolean
          x-position: 3
        - description: "Optional: starting date from which to get the hours. Default all."
          in: query
          name: startDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: starting date to which to get the hours. Default all."
          in: query
          name: endDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 5
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 6
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 7
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/WorkHourOutputModel"
                type: array
          description: WorkHours
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - hours:read
      summary: Get all the work hours for phases of a project for invoicing
      tags:
        - HoursRead
  "/v1/projects/{projectGuid}/worktypesforproject":
    get:
      operationId: WorkTypes_GetSearchedWorktypes
      parameters:
        - description: Id of the case to which proposal is connected.
          in: path
          name: projectGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectOutputModel
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Searched string: part of name or code."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/WorktypeForProjectOutputModel"
                type: array
          description: All the work types matching search criteria.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Search active work types by part of the name or code.
      tags:
        - ProjectsRead
  /v1/projectsalesnotes:
    post:
      operationId: SalesNotes_PostProjectSalesNotes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectSalesNoteInputModel"
              nullable: true
        description: SalesNoteOutputModel
        x-name: salesNote
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectSalesNoteOutputModel"
          description: Created project sales note.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Insert a project sales note.
      tags:
        - ProjectsWrite
  "/v1/projectsalesnotes/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. OK (200) if note has child notes and can't be deleted. It is marked as IsDeleted = true. Not found (404) if note can't be found."
      operationId: SalesNotes_DeleteProjectSalesNote
      parameters:
        - description: GUID used to delete the project sales note.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectSalesNoteOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:delete
      summary: Deletes a project sales note.
      tags:
        - ProjectsDelete
    get:
      operationId: SalesNotes_GetProjectSalesNote
      parameters:
        - description: GUID used to get the project sales note.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectSalesNoteOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectSalesNoteOutputModel"
          description: ProjectNote
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get project sales note by ID.
      tags:
        - ProjectsRead
    patch:
      operationId: SalesNotes_PatchProjectSalesNote
      parameters:
        - description: ID of the project sales note.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectSalesNoteOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of project sales note model.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectSalesNoteOutputModel"
                type: array
          description: list of updated sales notes.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Update (Patch) a project sales note or a part of it.
      tags:
        - ProjectsWrite
  /v1/projectstatustypes:
    get:
      operationId: ProjectStatusTypes_GetProjectStatusTypes
      parameters:
        - description: If not given, return all ProjectStatusTypes, if given as true return only active ProjectStatusTypes, if given as false returns only inactive ProjectStatusTypes
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from ProjectStatusType name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc&sortings[1].key=isActive&sortings[1].value=Asc"'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectStatusTypeModel"
                type: array
          description: All the ProjectStatusTypes
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the ProjectStatusTypes
      tags:
        - SettingsRead
    post:
      operationId: ProjectStatusTypes_PostProjectStatusType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectStatusTypeModel"
              nullable: true
        description: ProjectStatusTypeModel
        x-name: projectStatusType
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectStatusTypeModel"
          description: Project status type
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a project status type
      tags:
        - SettingsWrite
  "/v1/projectstatustypes/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if projectStatusType can't be found."
      operationId: ProjectStatusTypes_DeleteProjectStatusType
      parameters:
        - description: ID for the projectStatusType to delete
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectStatusTypeModel
        - description: "Optional: ID of the project status type to which to move usages of this project status type. Default null. If project status type is in use and usages aren't moved the deletion might fail."
          in: query
          name: moveUsagesToGuid
          schema:
            nullable: true
            type: string
          x-position: 2
          x-relation-guid: ProjectStatusTypeModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete a projectStatusType
      tags:
        - SettingsDelete
    get:
      operationId: ProjectStatusTypes_GetProjectStatusType
      parameters:
        - description: GUID used to get the projectStatusType.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectStatusTypeModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectStatusTypeModel"
          description: projectStatusType
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get projectStatusType by ID
      tags:
        - SettingsRead
    patch:
      operationId: ProjectStatusTypes_PatchProjectStatusType
      parameters:
        - description: ID of the projectStatusType
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectStatusTypeModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ProjectStatusTypeModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectStatusTypeModel"
                type: array
          description: List of updated business units
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a projectStatusType or a part of it
      tags:
        - SettingsWrite
  /v1/projecttaskstatuses:
    get:
      operationId: ProjectTaskStatuses_GetProjectTaskStatuses
      parameters:
        - description: If not given, return all project task statuses, if given as true return only active project task statuses, if given as false returns only inactive project task statuses.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from activity type name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectTaskStatusModel"
                type: array
          description: List of Activity Types.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get the project task statuses.
      tags:
        - SettingsRead
    post:
      operationId: ProjectTaskStatuses_PostProjectTaskStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectTaskStatusModel"
              nullable: true
        description: ProjectTaskStatusModel.
        x-name: projectTaskStatus
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectTaskStatusModel"
          description: "Project task status. "
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a project task status.
      tags:
        - SettingsWrite
  "/v1/projecttaskstatuses/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if product can't be found."
      operationId: ProjectTaskStatuses_DeleteProjectTaskStatus
      parameters:
        - description: ID for the project task status to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectTaskStatusModel
        - description: "Optional: ID of the project task status to which to move usages of this project task status. Default null."
          in: query
          name: moveUsagesToGuid
          schema:
            nullable: true
            type: string
          x-position: 2
          x-relation-guid: ProjectTaskStatusModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete a project task status.
      tags:
        - SettingsDelete
    get:
      operationId: ProjectTaskStatuses_GetProjectTaskStatus
      parameters:
        - description: GUID used to get the Project task status.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectTaskStatusModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectTaskStatusModel"
          description: Project task status.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get Project task status by ID.
      tags:
        - SettingsRead
    patch:
      operationId: ProjectTaskStatuses_PatchProjectTaskStatus
      parameters:
        - description: ID of the Project task status.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectTaskStatusModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ProjectTaskStatusModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectTaskStatusModel"
                type: array
          description: List of updated Project task status.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) an Project task status or a part of it.
      tags:
        - SettingsWrite
  "/v1/projecttravelexpensefiles/{guid}":
    get:
      operationId: Files_GetTravelExpenseFile
      parameters:
        - description: GUID used to get the travel expense file.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectTravelExpenseFileModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectTravelExpenseFileModel"
          description: InvoiceFile.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - files:read
      summary: Get travel expense file by ID.
      tags:
        - FilesRead
  /v1/projecttravelexpenses:
    get:
      operationId: ProjectTravelExpenses_GetProjectTravelExpenses
      parameters:
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Get project travel expenses that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectTravelExpenseOutputModel"
                type: array
          description: ProjectTravelExpenseOutputModel
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - travels:read
      summary: Get the project travel expenses.
      tags:
        - TravelsRead
    post:
      operationId: ProjectTravelExpenses_PostProjectTravelExpense
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectTravelExpenseInputModel"
              nullable: true
        description: ProjectTravelExpenseInputModel.
        x-name: projectTravelExpense
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectTravelExpenseOutputModel"
          description: Created project travel expense.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - travels:write
      summary: Insert a project travel expense.
      tags:
        - TravelsWrite
  "/v1/projecttravelexpenses/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: ProjectTravelExpenses_DeleteProjectTravelExpense
      parameters:
        - description: GUID used to delete the project travel expense.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectTravelExpenseInputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - travels:delete
      summary: Deletes a project travel expense.
      tags:
        - TravelsDelete
    get:
      operationId: ProjectTravelExpenses_GetProjectTravelExpense
      parameters:
        - description: Id used to get the project travel expense.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectTravelExpenseOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectTravelExpenseOutputModel"
          description: ProjectTravelExpenseOutputModel.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - travels:read
      summary: Get project travel expense by ID.
      tags:
        - TravelsRead
    patch:
      operationId: ProjectTravelExpenses_PatchProjectTravelExpense
      parameters:
        - description: ID of the project travel expense.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectTravelExpenseInputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of ProjectTravelExpenseInputModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectTravelExpenseOutputModel"
                type: array
          description: List of updated project travel expenses.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - travels:write
      summary: Update (Patch) a project travel expense or a part of it.
      tags:
        - TravelsWrite
  "/v1/projecttravelexpenses/{projectTravelExpenseGuid}/files":
    get:
      operationId: Files_GetTravelExpenseFiles
      parameters:
        - description: GUID of the travel expense used to get the files.
          in: path
          name: projectTravelExpenseGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectTravelExpenseOutputModel
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectTravelExpenseFileModel"
                type: array
          description: TravelExpenseFile.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - files:read
      summary: Get all files of a travel expense by its id.
      tags:
        - FilesRead
  /v1/projectworkhourprices:
    post:
      operationId: ProjectWorkHourPrices_PostProjectWorkHourPrice
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectWorkHourPriceInputModel"
              nullable: true
        description: ProjectWorkHourPriceInputModel
        x-name: workHourPrice
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectWorkHourPriceOutputModel"
          description: Created work hour prices
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Insert a work hour price
      tags:
        - ProjectsWrite
  "/v1/projectworkhourprices/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: ProjectWorkHourPrices_DeleteProjectWorkHourPrice
      parameters:
        - description: GUID used to delete the work hour price.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectWorkHourPriceOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:delete
      summary: Deletes a work hour price
      tags:
        - ProjectsDelete
    get:
      operationId: ProjectWorkHourPrices_GetProjectWorkHourPrice
      parameters:
        - description: Id used to get the work hour price.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectWorkHourPriceOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectWorkHourPriceOutputModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get project work hour price by ID
      tags:
        - ProjectsRead
    patch:
      operationId: ProjectWorkHourPrices_PatchProjectWorkHourPrice
      parameters:
        - description: ID of the work hour price
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectWorkHourPriceOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ProjectWorkHourPriceInputModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectWorkHourPriceOutputModel"
                type: array
          description: list of updated work hour prices
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Update (Patch) a work hour price or a part of it
      tags:
        - ProjectsWrite
  /v1/projectworktypes:
    post:
      description: The "UseWorktypesFromSetting" flag for the Project should be false (the project should not use the organization list of work types).
      operationId: ProjectWorkTypes_PostProjectWorktype
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectWorkTypeModel"
              nullable: true
        description: ProjectWorkTypeModel.
        x-name: projectWorkTypeModel
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectWorkTypeModel"
          description: Added project work type.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Adds a work type to a project.
      tags:
        - ProjectsWrite
  "/v1/projectworktypes/{guid}":
    delete:
      description: 'Returns: No Content (204) if succeeded. The "UseWorktypesFromSetting" flag for the Project should be false (the project should not use the organization list of work types).'
      operationId: ProjectWorkTypes_DeleteProjectWorktype
      parameters:
        - description: GUID of the project work type to remove.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectWorkTypeModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:delete
      summary: Deletes a project work type.
      tags:
        - ProjectsDelete
    patch:
      description: This currently can be used only to change the default work type in a project. The "UseWorktypesFromSetting" flag for the Project should be false (the project should not use the organization list of work types).
      operationId: ProjectWorkTypes_PatchProjectWorktype
      parameters:
        - description: ID of the project work type.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProjectWorkTypeModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ProjectWorkTypeModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectWorkTypeModel"
                type: array
          description: list of updated project work types.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Update (patch) a project work type.
      tags:
        - ProjectsWrite
  /v1/proposalfeerows:
    get:
      operationId: ProposalFees_GetProposalFees
      parameters:
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Get proposal fee rows that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProposalFeeRowOutputModel"
                type: array
          description: Proposal fee rows
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get the proposal fee rows.
      tags:
        - ProjectsRead
    post:
      operationId: ProposalFees_PostProposalFee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProposalFeeRowInputModel"
              nullable: true
        description: ProposalFeeModel
        x-name: proposalFee
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProposalFeeRowOutputModel"
          description: Created proposal fee row.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Insert a proposal fee row.
      tags:
        - ProjectsWrite
  "/v1/proposalfeerows/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if proposal fee row can't be found."
      operationId: ProposalFees_DeleteProposalFee
      parameters:
        - description: ID for the proposal fee row to delete
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalFeeRowInputModel
      responses:
        "204":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:delete
      summary: Delete a proposal fee row
      tags:
        - ProjectsDelete
    get:
      operationId: ProposalFees_GetProposalFee
      parameters:
        - description: proposal fee row id to get
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalFeeRowInputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProposalFeeRowOutputModel"
          description: Proposal fee
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get the proposal fee rows by guid
      tags:
        - ProjectsRead
    patch:
      operationId: ProposalFees_PatchProposalFee
      parameters:
        - description: ID of the proposal fee row
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalFeeRowInputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ProposalFeeModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProposalFeeRowOutputModel"
                type: array
          description: list of updated proposal fee rows
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Update (Patch) a proposal fee row or a part of it
      tags:
        - ProjectsWrite
  /v1/proposals:
    get:
      operationId: Proposals_GetProposals
      parameters:
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Get proposals that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProposalOutputModel"
                type: array
          description: Proposal
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get all the proposals
      tags:
        - ProjectsRead
    post:
      operationId: Proposals_PostProposal
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProposalInputModel"
              nullable: true
        description: ProposalInputModel
        x-name: proposal
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProposalOutputModel"
          description: Created proposal.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Insert a proposal.
      tags:
        - ProjectsWrite
  "/v1/proposals/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if proposal can't be found."
      operationId: Proposals_DeleteProposal
      parameters:
        - description: Guid for the proposal to delete
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:delete
      summary: Delete a proposal
      tags:
        - ProjectsDelete
    get:
      operationId: Proposals_GetProposal
      parameters:
        - description: GUID used to get the Proposal.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProposalOutputModel"
          description: Proposal
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get Proposal by ID
      tags:
        - ProjectsRead
    patch:
      operationId: Proposals_PatchProposal
      parameters:
        - description: Guid of the Proposal
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ProposalInputModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProposalOutputModel"
                type: array
          description: List of updated Proposals
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Update (Patch) a Proposal or a part of it
      tags:
        - ProjectsWrite
  "/v1/proposals/{guid}/proposalsettings":
    get:
      operationId: ProposalSettings_GetProposalSettings
      parameters:
        - description: GUID used to get the Proposal.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProposalSettingsOutputModel"
          description: Proposal
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get settings for a proposal
      tags:
        - ProjectsRead
    patch:
      operationId: ProposalSettings_PatchProposalSettings
      parameters:
        - description: Guid of the Proposal
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ProposalSettingsInputModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProposalSettingsOutputModel"
                type: array
          description: List of updated Proposal settings
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Update (Patch) proposal settings
      tags:
        - ProjectsWrite
  "/v1/proposals/{proposalGuid}/proposalfeerows":
    get:
      operationId: ProposalFees_GetProposalFeesForProposal
      parameters:
        - description: proposal id for which to get proposal fees rows.
          in: path
          name: proposalGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default all."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProposalFeeRowOutputModel"
                type: array
          description: Proposal fee rows
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get all the proposal fee rows for a proposal
      tags:
        - ProjectsRead
  "/v1/proposals/{proposalGuid}/proposalsubtotals":
    get:
      operationId: ProposalSubtotals_GetProposalSubtotalsForProposal
      parameters:
        - description: proposal id for which to get proposal subtotals.
          in: path
          name: proposalGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalOutputModel
        - description: "Optional: Page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default all."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProposalSubtotalOutputModel"
                type: array
          description: Proposal
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get all the proposal subtotals for a proposal
      tags:
        - ProjectsRead
  "/v1/proposals/{proposalGuid}/proposalworkrows":
    get:
      operationId: ProposalWorkhours_GetProposalWorkHoursForProposal
      parameters:
        - description: proposal id for which to get proposal work rows.
          in: path
          name: proposalGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default all."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProposalWorkhourRowOutputModel"
                type: array
          description: Proposal work rows.
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get all the proposal work rows.
      tags:
        - ProjectsRead
  /v1/proposalstatuses:
    get:
      operationId: ProposalStatuses_GetProposalStatuses
      parameters:
        - description: "Optional: If not given, return all proposal statuses, if given as true return only active proposal statuses, if given as false returns only inactive proposal statuses."
          in: query
          name: isActive
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Search by proposal status name."
          in: query
          name: proposalStatusName
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProposalStatusOutputModel"
                type: array
          description: Proposal statuses
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the proposal statuses
      tags:
        - SettingsRead
    post:
      operationId: ProposalStatuses_PostProposalStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProposalStatusInputModel"
              nullable: true
        description: ProposalStatusModel
        x-name: model
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProposalStatusOutputModel"
          description: Inserted proposal status
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a proposal status
      tags:
        - SettingsWrite
  "/v1/proposalstatuses/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if proposal status can't be found."
      operationId: ProposalStatuses_DeleteProposalStatus
      parameters:
        - description: ID for the proposal status to delete
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalStatusInputModel
        - description: "Optional: ID of the proposal status to which to move usages of this proposal status. Default null. If proposal status is in use and usages aren't moved the deletion might fail."
          in: query
          name: moveUsagesToGuid
          schema:
            nullable: true
            type: string
          x-position: 2
          x-relation-guid: ProposalStatusInputModel
      responses:
        "204":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete an proposal status
      tags:
        - SettingsDelete
    get:
      operationId: ProposalStatuses_GetProposalStatus
      parameters:
        - description: GUID used to get the Proposal status.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalStatusInputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProposalStatusOutputModel"
          description: Proposal status
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get Proposal status by ID
      tags:
        - SettingsRead
    patch:
      operationId: ProposalStatuses_PatchProposalStatus
      parameters:
        - description: ID of the Proposal status
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalStatusInputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ProposalStatusModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProposalStatusOutputModel"
                type: array
          description: List of updated Proposal statuses
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) an Proposal status or a part of it
      tags:
        - SettingsWrite
  "/v1/proposalstatuses/{guid}/usage":
    get:
      operationId: ProposalStatuses_GetUsage
      parameters:
        - description: GUID used to get the proposal status.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalStatusInputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/UsageModel2"
                type: array
          description: Usage
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get usage for an proposal status.
      tags:
        - SettingsRead
  /v1/proposalsubtotals:
    get:
      operationId: ProposalSubtotals_GetProposalSubtotals
      parameters:
        - description: "Optional: Page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Get proposal subtotals that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProposalSubtotalOutputModel"
                type: array
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get the proposal subtotals.
      tags:
        - ProjectsRead
    post:
      operationId: ProposalSubtotals_PostProposalSubtotal
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProposalSubtotalInputModel"
              nullable: true
        description: ProposalSubtotalModel
        x-name: proposalSubtotal
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProposalSubtotalOutputModel"
          description: Created proposal subtotal.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Insert a proposal subtotal
      tags:
        - ProjectsWrite
  "/v1/proposalsubtotals/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if proposal subtotal can't be found."
      operationId: ProposalSubtotals_DeleteProposalSubtotal
      parameters:
        - description: ID for the proposal subtotal to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalSubtotalInputModel
      responses:
        "204":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:delete
      summary: Delete a proposal subtotal
      tags:
        - ProjectsDelete
    get:
      operationId: ProposalSubtotals_GetProposalSubtotal
      parameters:
        - description: GUID used to get the Proposal subtotal.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalSubtotalInputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProposalSubtotalOutputModel"
          description: Proposal subtotal
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get Proposal subtotal by ID
      tags:
        - ProjectsRead
    patch:
      description: It is not possible to changed the proposalGuid for an existing proposal subtotal. Also, when a proposal subtotal is connected to a phase, the connection can only be broken if the phase is deleted.
      operationId: ProposalSubtotals_PatchProposalSubtotal
      parameters:
        - description: ID of the Proposal subtotal
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalSubtotalInputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ProposalSubtotalModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProposalSubtotalOutputModel"
                type: array
          description: List of updated Proposal subtotals
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Update (Patch) a Proposal subtotal or a part of it
      tags:
        - ProjectsWrite
  /v1/proposalworkrows:
    get:
      operationId: ProposalWorkhours_GetProposalWorkHours
      parameters:
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Get proposal work rows that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProposalWorkhourRowOutputModel"
                type: array
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get the proposal work rows.
      tags:
        - ProjectsRead
    post:
      operationId: ProposalWorkhours_PostProposalWorkhour
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProposalWorkhourRowInputModel"
              nullable: true
        description: ProposalWorkhourModel
        x-name: proposalWorkhour
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProposalWorkhourRowOutputModel"
          description: Created proposal work row.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Insert a proposal work row.
      tags:
        - ProjectsWrite
  "/v1/proposalworkrows/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if proposal work row can't be found."
      operationId: ProposalWorkhours_DeleteProposalWorkhour
      parameters:
        - description: ID for the proposal work row to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalWorkhourRowOutputModel
      responses:
        "204":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:delete
      summary: Delete a proposal work row.
      tags:
        - ProjectsDelete
    get:
      operationId: ProposalWorkhours_GetProposalWorkhour
      parameters:
        - description: proposal work row id to get.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalWorkhourRowOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProposalWorkhourRowOutputModel"
          description: Proposal work row.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get the proposal work row by guid.
      tags:
        - ProjectsRead
    patch:
      operationId: ProposalWorkhours_PatchProposalWorkhour
      parameters:
        - description: ID of the proposal work row.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ProposalWorkhourRowOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of ProposalWorkhourModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProposalWorkhourRowOutputModel"
                type: array
          description: updated proposal work row.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:write
      summary: Update (Patch) a proposal work row or a part of it.
      tags:
        - ProjectsWrite
  /v1/refreshtoken:
    post:
      operationId: PublicBearerAuthentication_GetAccessTokenTokenFromRefreshToken
      requestBody:
        content:
          application/json:
            schema:
              nullable: true
              type: string
        description: Refresh token.
        x-name: refreshToken
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicAuthenticationOutputModel"
          description: PublicAuthenticationOutputModel
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2: []
      summary: Get new access token using a refresh token.
      tags:
        - NoScope
  /v1/resourceallocations:
    get:
      operationId: ResourceAllocations_GetResourceAllocations
      parameters:
        - description: "Optional: Number of rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 1
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: Get resource allocations that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAllocationOutputModel"
          description: ResourceAllocation
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - resourceallocations:read
      summary: Get resource allocations
      tags:
        - ResourceallocationsRead
    post:
      operationId: ResourceAllocations_PostResourceAllocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceAllocationInputModel"
              nullable: true
        description: ResourceAllocationInputModel
        x-name: resourceAllocation
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAllocationOutputModel"
          description: Created resource allocation
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - resourceallocations:write
      summary: Insert a resource allocation
      tags:
        - ResourceallocationsWrite
  /v1/resourceallocations/allocations:
    post:
      operationId: ResourceAllocations_PostResourceAllocations
      parameters:
        - description: "Optional: Number of rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 3
        - description: "Optional: Get resource allocations that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceAllocationCriteriaModel"
              nullable: true
        description: resourceAllocationCriteriaModel
        x-name: resourceAllocationCriteriaModel
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ResourceAllocationOutputModel"
                type: array
          description: ResourceAllocationModel
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - resourceallocations:read
      summary: Get resource allocations (its POST because of being able to accommodate more filters)
      tags:
        - ResourceallocationsRead
  "/v1/resourceallocations/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if resource allocation can't be found."
      operationId: ResourceAllocations_DeleteResourceAllocation
      parameters:
        - description: ID of the resource allocation to delete
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ResourceAllocationOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - resourceallocations:delete
      summary: Delete an resource allocation
      tags:
        - ResourceallocationsDelete
    get:
      operationId: ResourceAllocations_GetResourceAllocation
      parameters:
        - description: GUID used to get the resource allocation.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ResourceAllocationOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAllocationOutputModel"
          description: ResourceAllocation
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - resourceallocations:read
      summary: Get resource allocation by ID
      tags:
        - ResourceallocationsRead
    patch:
      operationId: ResourceAllocations_PatchResourceAllocation
      parameters:
        - description: ID of the resource allocation
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: ResourceAllocationOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of ResourceAllocationModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ResourceAllocationOutputModel"
                type: array
          description: List of updated activities
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - resourceallocations:write
      summary: Update (Patch) a resource allocation or a part of it
      tags:
        - ResourceallocationsWrite
  /v1/roleallocations:
    get:
      operationId: RoleAllocations_GetRoleAllocations
      parameters:
        - description: Starting date from which to get the role allocations. If end date is not specified on the role allocation then it will be compared with phase end date.
          in: query
          name: startDate
          required: true
          schema:
            format: date-time
            type: string
          x-position: 1
        - description: "Optional: Ending date to which to get the role allocations. If start date is not specified on the role allocation then it will be compared with phase start date."
          in: query
          name: endDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: Page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 3
        - description: "Optional: How many rows to fetch, Default all."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: "Optional: Calculates the hours based on sales probability set for the project. Default is true."
          in: query
          name: useSalesProbability
          schema:
            default: true
            type: boolean
          x-position: 5
        - description: "Optional: Role IDs."
          explode: true
          in: query
          name: roleGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 6
          x-relation-guid: RoleOutputModel
        - description: "Optional: Phase IDs."
          explode: true
          in: query
          name: phaseGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 7
          x-relation-guid: PhaseOutputModel
        - description: "Optional: Project IDs."
          explode: true
          in: query
          name: projectGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 8
          x-relation-guid: ProjectOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/RoleAllocationOutputModel"
                type: array
          description: RoleAllocationModel.
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - resourceallocations:read
      summary: Get role allocations.
      tags:
        - ResourceallocationsRead
    post:
      operationId: RoleAllocations_PostRoleAllocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleAllocationInputModel"
              nullable: true
        description: Role allocation to insert.
        x-name: roleAllocation
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleAllocationOutputModel"
          description: RoleAllocationModel.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - resourceallocations:write
      summary: Insert a role allocation.
      tags:
        - ResourceallocationsWrite
  "/v1/roleallocations/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if role can't be found."
      operationId: RoleAllocations_DeleteRoleAllocation
      parameters:
        - description: ID for the role allocation to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: RoleAllocationOutputModel
      responses:
        "204":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - resourceallocations:delete
      summary: Delete a role allocation.
      tags:
        - ResourceallocationsDelete
    get:
      operationId: RoleAllocations_GetRoleAllocation
      parameters:
        - description: ID used to get the role allocation.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: RoleAllocationOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleAllocationOutputModel"
          description: RoleAllocationModel.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - resourceallocations:read
      summary: Get role allocation by GUID.
      tags:
        - ResourceallocationsRead
    patch:
      operationId: RoleAllocations_PatchRoleAllocation
      parameters:
        - description: ID of the role allocation.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: RoleAllocationOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of RoleAllocationModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/RoleAllocationOutputModel"
                type: array
          description: RoleAllocationModel.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - resourceallocations:write
      summary: Update (Patch) a role allocation.
      tags:
        - ResourceallocationsWrite
  /v1/roles:
    get:
      operationId: Roles_GetRoles
      parameters:
        - description: If not given, return all roles, if given as true return only active roles, if given as false returns only inactive roles.
          in: query
          name: isActive
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: Page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default all."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Get roles that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/RoleOutputModel"
                type: array
          description: All the roles.
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get roles.
      tags:
        - SettingsRead
    post:
      operationId: Roles_PostRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleInputModel"
              nullable: true
        description: RoleInputModel.
        x-name: role
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleOutputModel"
          description: Created role.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a role.
      tags:
        - SettingsWrite
  "/v1/roles/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if role can't be found."
      operationId: Roles_DeleteRole
      parameters:
        - description: ID for the role to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: RoleOutputModel
      responses:
        "204":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete a role.
      tags:
        - SettingsDelete
    get:
      operationId: Roles_GetRole
      parameters:
        - description: Id used to get the role.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: RoleOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleOutputModel"
          description: RoleOutputModel.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get role by GUID.
      tags:
        - SettingsRead
    patch:
      operationId: Roles_PatchRole
      parameters:
        - description: ID of the role.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: RoleOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of RoleInputModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/RoleOutputModel"
                type: array
          description: list of updated roles.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a role or a part of it.
      tags:
        - SettingsWrite
  /v1/rootphaseswithhierarchy:
    get:
      operationId: Phases_GetRootPhases
      parameters:
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - explode: true
          in: query
          name: customerGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 3
        - explode: true
          in: query
          name: projectGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 4
        - explode: true
          in: query
          name: projectKeywordGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 5
        - explode: true
          in: query
          name: projectStatusTypeGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 6
        - explode: true
          in: query
          name: salesPersonGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 7
        - explode: true
          in: query
          name: projectOwnerGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 8
        - explode: true
          in: query
          name: businessUnitGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 9
        - explode: true
          in: query
          name: customerOwnerGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 10
        - explode: true
          in: query
          name: salesStatusTypeGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 11
        - in: query
          name: openProjects
          schema:
            nullable: true
            type: boolean
          x-position: 12
        - explode: true
          in: query
          name: projectMemberUserGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 13
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PhaseOutputModel"
                type: array
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Get a list of root phases with information about hierarchy.
      tags:
        - ProjectsRead
  /v1/salesaccounts:
    get:
      operationId: SalesAccounts_GetSalesAccounts
      parameters:
        - description: If not given, return all Sales accounts, if given as true return only active Sales accounts, if given as false returns only inactive Sales accounts.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from cost account name or identifier."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc &sortings[1].key=Identifier&sortings[1].value=Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SalesAccountModel"
                type: array
          description: All the sales accounts.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get sales accounts.
      tags:
        - SettingsRead
    post:
      operationId: SalesAccounts_PostSalesAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SalesAccountModel"
              nullable: true
        description: SalesAccountModel.
        x-name: salesAccount
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SalesAccountModel"
          description: Created sales account.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a sales account.
      tags:
        - SettingsWrite
  "/v1/salesaccounts/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if sales account can't be found."
      operationId: SalesAccounts_DeleteSalesAccount
      parameters:
        - description: ID for the sales account to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: SalesAccountModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete a sales account.
      tags:
        - SettingsDelete
    get:
      operationId: SalesAccounts_GetSalesAccount
      parameters:
        - description: Id used to get the sales account.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: SalesAccountModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SalesAccountModel"
          description: SalesAccountModel.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get sales account by ID.
      tags:
        - SettingsRead
    patch:
      operationId: SalesAccounts_PatchSalesAccount
      parameters:
        - description: ID of the sales account.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: SalesAccountModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of SalesAccountModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SalesAccountModel"
                type: array
          description: list of updated sales account.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a sales account or a part of it.
      tags:
        - SettingsWrite
  /v1/salescases:
    get:
      operationId: Projects_GetSalesCases
      parameters:
        - in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - explode: true
          in: query
          name: customerGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 3
        - explode: true
          in: query
          name: currencyGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 4
        - explode: true
          in: query
          name: projectGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 5
        - explode: true
          in: query
          name: projectKeywordGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 6
        - explode: true
          in: query
          name: projectStatusTypeGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 7
        - explode: true
          in: query
          name: salesPersonGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 8
        - explode: true
          in: query
          name: projectOwnerGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 9
        - explode: true
          in: query
          name: businessUnitGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 10
        - in: query
          name: minimumBillableAmount
          schema:
            format: double
            nullable: true
            type: number
          x-position: 11
        - explode: true
          in: query
          name: customerOwnerGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 12
        - in: query
          name: invoiceableDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 13
        - explode: true
          in: query
          name: marketSegmentationGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 14
        - explode: true
          in: query
          name: salesStatusTypeGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 15
        - in: query
          name: isClosed
          schema:
            nullable: true
            type: boolean
          x-position: 16
        - in: query
          name: hasRecurringFees
          schema:
            nullable: true
            type: boolean
          x-position: 17
        - explode: true
          in: query
          name: companyCurrencyGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 18
        - explode: true
          in: query
          name: projectMemberUserGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 19
        - explode: true
          in: query
          name: numbers
          schema:
            items:
              format: int64
              type: integer
            nullable: true
            type: array
          style: form
          x-position: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectOutputModel"
                type: array
          description: Projects
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - projects:read
      summary: Gets the sales cases (sales status is in progress)
      tags:
        - ProjectsRead
  /v1/salesstatustypes:
    get:
      operationId: SalesStatusTypes_GetSalesStatusTypes
      parameters:
        - description: If not given, return all sales status types, if given as true return only active sales status types, if given as false returns only inactive sales status types
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: Get sales status types of the sales state."
          in: query
          name: salesState
          schema:
            $ref: "#/components/schemas/SalesStatusType"
          x-position: 2
        - description: "Optional: First row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: "Optional: Text to search from sales status type name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 5
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 6
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc &sortings[1].key=Code&sortings[1].value=Asc"'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 7
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SalesStatusTypeOutputModel"
                type: array
          description: Sales status types
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the sales status types
      tags:
        - SettingsRead
    post:
      operationId: SalesStatusTypes_PostSalesStatusType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SalesStatusTypeInputModel"
              nullable: true
        description: salesStatusType
        x-name: salesStatusType
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SalesStatusTypeOutputModel"
          description: Sales status type
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a sales status type
      tags:
        - SettingsWrite
  "/v1/salesstatustypes/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if sales status type can't be found."
      operationId: SalesStatusTypes_DeleteSalesStatusType
      parameters:
        - description: ID for the sales status type to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: SalesStatusTypeOutputModel
        - description: "Optional: ID of the sales status type to which to move usages of this sales status type. Default null. If sales status type is in use and usages aren't moved the deletion might fail."
          in: query
          name: moveUsagesToGuid
          schema:
            nullable: true
            type: string
          x-position: 2
          x-relation-guid: SalesStatusTypeOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete an sales status type.
      tags:
        - SettingsDelete
    get:
      operationId: SalesStatusTypes_GetSalesStatusType
      parameters:
        - description: GUID used to get the sales status type.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: SalesStatusTypeOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SalesStatusTypeOutputModel"
          description: Sales status type
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get sales status type by ID
      tags:
        - SettingsRead
    patch:
      operationId: SalesStatusTypes_PatchSalesStatusType
      parameters:
        - description: ID of the sales status type
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: SalesStatusTypeOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of salesStatusType
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SalesStatusTypeOutputModel"
                type: array
          description: List of updated sales status types
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) an sales status type or a part of it
      tags:
        - SettingsWrite
  /v1/signout:
    post:
      operationId: PublicBearerAuthentication_Logout
      requestBody:
        content:
          application/json:
            schema:
              nullable: true
              type: string
        x-name: refreshToken
        x-position: 1
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2: []
      summary: Logout. Invalidates refresh token. Access token will be invalid when it expires.
      tags:
        - NoScope
  /v1/timeentries:
    get:
      operationId: TimeEntries_GetTimeEntries
      parameters:
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 1
        - description: "Optional: Filters time entries for given phases."
          explode: true
          in: query
          name: phaseGuid
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 2
          x-relation-guid: PhaseOutputModel
        - description: "Optional: Filters time entries for given time entry types."
          explode: true
          in: query
          name: timeEntryTypeGuid
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 3
          x-relation-guid: TimeEntryTypeModel
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: "Optional: Get time entries that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TimeEntryModel"
                type: array
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - hours:read
      summary: Get the time entries.
      tags:
        - HoursRead
    post:
      operationId: TimeEntries_PostTimeEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimeEntryModel"
              nullable: true
        description: TimeEntryModel.
        x-name: timeEntry
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TimeEntryModel"
                type: array
          description: Created time entry.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - hours:write
      summary: Insert a time entry.
      tags:
        - HoursWrite
  "/v1/timeentries/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: TimeEntries_DeleteTimeEntry
      parameters:
        - description: GUID used to delete the time entry.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TimeEntryModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - hours:delete
      summary: Deletes a time entry.
      tags:
        - HoursDelete
    get:
      operationId: TimeEntries_GetTimeEntry
      parameters:
        - description: Id used to get the time entry.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TimeEntryModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeEntryModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - hours:read
      summary: Get time entry by ID.
      tags:
        - HoursRead
    patch:
      operationId: TimeEntries_PatchTimeEntry
      parameters:
        - description: ID of the time entry.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TimeEntryModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of TimeEntryModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TimeEntryModel"
                type: array
          description: List of updated time entries.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - hours:write
      summary: Update (Patch) a time entry or a part of it.
      tags:
        - HoursWrite
  /v1/timeentrytypes:
    get:
      operationId: TimeEntryTypes_GetTimeEntryTypes
      parameters:
        - description: Filter the time entry types. If true/false, only the active/inactive ones are returned. If null, all the time entry types are returned.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from time entry type name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Calculates the total row count."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TimeEntryTypeModel"
                type: array
          description: Projects.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all time entry types.
      tags:
        - SettingsRead
    post:
      operationId: TimeEntryTypes_PostTimeEntryType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimeEntryTypeModel"
              nullable: true
        description: TimeEntryTypeModel.
        x-name: timeEntryTypeModel
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeEntryTypeModel"
          description: Created time entry type.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a time entry type.
      tags:
        - SettingsWrite
  "/v1/timeentrytypes/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: TimeEntryTypes_DeleteTimeEntryType
      parameters:
        - description: GUID used to delete the time entry type.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TimeEntryTypeModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Deletes a time entry type.
      tags:
        - SettingsDelete
    get:
      operationId: TimeEntryTypes_GetTimeEntryType
      parameters:
        - description: ID used to get the time entry type.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TimeEntryTypeModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeEntryTypeModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get time entry type by ID.
      tags:
        - SettingsRead
    patch:
      operationId: TimeEntryTypes_PatchTimeEntryType
      parameters:
        - description: ID of the time entry type.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TimeEntryTypeModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of TimeEntryTypeModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TimeEntryTypeModel"
                type: array
          description: Updated time entry type model.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a time entry type or a part of it.
      tags:
        - SettingsWrite
  /v1/token:
    post:
      operationId: PublicBearerAuthentication_GetLoginToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientCredentials"
              nullable: true
        description: ClientCredentials of the client.
        x-name: credentials
        x-position: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicAuthenticationOutputModel"
          description: PublicAuthenticationOutputModel
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2: []
      summary: Can be used to get the login information and access token for the api client.
      tags:
        - NoScope
  /v1/travelexpensetypecountrysettings:
    post:
      operationId: TravelExpenseTypeCountrySettings_PostTravelExpenseTypeCountrySettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TravelExpenseTypeCountrySettingsModel"
              nullable: true
        description: Travel expense type country setting model
        x-name: model
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TravelExpenseTypeCountrySettingsModel"
          description: Added travel expense type country setting
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a travel expense type country setting
      tags:
        - SettingsWrite
  "/v1/travelexpensetypecountrysettings/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if travel expense type country setting can't be found."
      operationId: TravelExpenseTypeCountrySettings_DeleteTravelExpenseTypeCountrySetting
      parameters:
        - description: GUID used to delete the travel expense type country setting.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TravelExpenseTypeCountrySettingsModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Deletes a travel expense type country setting
      tags:
        - SettingsDelete
    patch:
      operationId: TravelExpenseTypeCountrySettings_PatchTravelExpenseTypeCountrySettings
      parameters:
        - description: ID of the travel expense type country setting
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TravelExpenseTypeCountrySettingsModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of TravelExpenseTypeCountrySettingsModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TravelExpenseTypeCountrySettingsModel"
                type: array
          description: List of updated travel expense type country settings
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a travel expense type country setting
      tags:
        - SettingsWrite
  /v1/travelexpensetypes:
    get:
      operationId: TravelExpenseTypes_GetTravelExpenseTypes
      parameters:
        - description: If not given, return all travel expense types, if given as true return only active travel expense types, if given as false returns only inactive travel expense types.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default all."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Searched string: part of name or code."
          in: query
          name: textToSearch
          schema:
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Code of the travel expense type."
          in: query
          name: code
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 5
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 6
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=IsActive&sortings[0].value=Asc&sortings[1].key=Name&sortings[1].value=Desc.'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 7
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TravelExpenseTypeOutputModel"
                type: array
          description: All the travel expense types.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all the travel expense types.
      tags:
        - SettingsRead
    post:
      operationId: TravelExpenseTypes_PostTravelExpenseType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TravelExpenseTypeInputModel"
              nullable: true
        description: TravelExpenseTypeInputModel.
        x-name: travelExpenseType
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TravelExpenseTypeOutputModel"
          description: Created travel expense type.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a new travel expense type.
      tags:
        - SettingsWrite
  "/v1/travelexpensetypes/{guid}":
    delete:
      operationId: TravelExpenseTypes_DeleteTravelExpenseType
      parameters:
        - description: Guid for the travel expense type to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TravelExpenseTypeOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Deletes a travel expense type.
      tags:
        - SettingsDelete
    get:
      operationId: TravelExpenseTypes_GetTravelExpenseType
      parameters:
        - description: GUID used to get the travel expense type.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TravelExpenseTypeOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TravelExpenseTypeOutputModel"
          description: Travel expense type.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get travel expense type by guid.
      tags:
        - SettingsRead
    patch:
      operationId: TravelExpenseTypes_PatchTravelExpenseType
      parameters:
        - description: Guid of the travel expense type.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TravelExpenseTypeOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of TravelExpenseTypeInputModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TravelExpenseTypeOutputModel"
                type: array
          description: List of updated travel expense types.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) an travel expense type or a part of it.
      tags:
        - SettingsWrite
  "/v1/travelexpensetypes/{travelExpenseTypeGuid}/travelexpensetypecountrysettings":
    get:
      operationId: TravelExpenseTypeCountrySettings_GetTravelExpenseTypeCountrySettings
      parameters:
        - description: Guid of the travel expense type.
          in: path
          name: travelExpenseTypeGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TravelExpenseTypeOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TravelExpenseTypeCountrySettingsModel"
                type: array
          description: All the TravelExpenseCountrySettings (tax related information)
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all country settings for a travel expense type
      tags:
        - SettingsRead
  "/v1/travelprices/{guid}":
    get:
      operationId: TravelPrices_GetTravelPrice
      parameters:
        - description: Id used to get the travel price.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TravelPriceOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TravelPriceOutputModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get travel price by ID.
      tags:
        - SettingsRead
  /v1/travelreimbursements:
    get:
      operationId: TravelReimbursements_GetTravelReimbursements
      parameters:
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Get travel reimbursements that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
        - description: "Optional: List of travel reimbursement status ids."
          explode: true
          in: query
          name: travelReimbursementStatusGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 4
          x-relation-guid: TravelReimbursementStatusModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TravelReimbursementOutputModel"
                type: array
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - travels:read
      summary: Get travel reimbursements.
      tags:
        - TravelsRead
    post:
      operationId: TravelReimbursements_PostTravelReimbursement
      parameters:
        - description: "Optional: Add all of user's unreimbursed travel expenses to reimbursement. Default is true. If TravelExpenseReimbursementStartDate is given in organization settings, travel expenses are added from that date onwards. If value is false then expenses from includedProjectTravelExpenses list are added."
          in: query
          name: addAllUnreimbursedTravelExpenses
          schema:
            default: true
            type: boolean
          x-position: 2
        - description: "Optional: A list of included projectTravelExpense GUIDs belonging to the user. If addAllUnreimbursedTravelExpenses is true then this list is ignored."
          explode: true
          in: query
          name: includedProjectTravelExpenses
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TravelReimbursementInputModel"
              nullable: true
        description: TravelReimbursementModel
        x-name: model
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TravelReimbursementOutputModel"
          description: Added travel reimbursement
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - travels:write
      summary: Add a travel reimbursement
      tags:
        - TravelsWrite
  "/v1/travelreimbursements/{guid}":
    delete:
      operationId: TravelReimbursements_DeleteTravelReimbursement
      parameters:
        - description: GUID of travel reimbursement
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TravelReimbursementOutputModel
      responses:
        "204":
          description: No Content (204) if succeeded.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - travels:delete
      summary: Delete a travel reimbursement
      tags:
        - TravelsDelete
    get:
      operationId: TravelReimbursements_GetTravelReimbursement
      parameters:
        - description: ID of travel reimbursement
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TravelReimbursementOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TravelReimbursementOutputModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - travels:read
      summary: Get travel reimbursement by ID
      tags:
        - TravelsRead
    patch:
      operationId: TravelReimbursements_PatchTravelReimbursement
      parameters:
        - description: ID of the travel reimbursement
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TravelReimbursementOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TravelReimbursementOutputModel"
                type: array
          description: Updated travel reimbursement
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - travels:write
      summary: Update (Patch) a travel reimbursement
      tags:
        - TravelsWrite
  "/v1/travelreimbursements/{guid}/pdf":
    get:
      operationId: Pdf_GetTravelReimbursementPdf
      parameters:
        - description: The travel reimbursement GUID.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TravelReimbursementOutputModel
      responses:
        "200":
          content:
            application/pdf:
              schema:
                format: binary
                type: string
          description: Get a travel reimbursement PDF
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - files:read
      summary: Get a travel reimbursement PDF.
      tags:
        - FilesRead
  "/v1/travelreimbursements/{travelReimbursementGuid}/projecttravelexpenses":
    get:
      operationId: ProjectTravelExpenses_GetProjectTravelExpensesForTravelReimbursement
      parameters:
        - description: "Optional: ID of the travel reimbursement"
          in: path
          name: travelReimbursementGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TravelReimbursementOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense"
          in: query
          name: expenseClass
          schema:
            $ref: "#/components/schemas/ExpensesClass"
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectTravelExpenseOutputModel"
                type: array
          description: ProjectTravelExpenseOutputModel
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - travels:read
      summary: Get all the project travel expenses for a travel reimbursement
      tags:
        - TravelsRead
  /v1/travelreimbursementstatuses:
    get:
      operationId: TravelReimbursementStatus_GetTravelReimbursementStatuses
      parameters:
        - description: "Optional: Filter the travel reimbursement statuses. If true/false, only the active/inactive ones are returned. If null, all the travel reimbursement statuses are returned."
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Text to search from travel reimbursement name."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 5
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TravelReimbursementStatusModel"
                type: array
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get the travel reimbursement statuses.
      tags:
        - SettingsRead
    post:
      operationId: TravelReimbursementStatus_PostTravelReimbursementStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TravelReimbursementStatusModel"
              nullable: true
        description: TravelReimbursementStatusModel.
        x-name: travelReimbursementStatus
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TravelReimbursementStatusModel"
          description: Created travel reimbursement status.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a travel reimbursement status.
      tags:
        - SettingsWrite
  "/v1/travelreimbursementstatuses/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if travel reimbursement status can't be found."
      operationId: TravelReimbursementStatus_DeleteTravelReimbursementStatus
      parameters:
        - description: ID for the travel reimbursement status to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TravelReimbursementStatusModel
        - description: "Optional: ID of the travel reimbursement status to which to move usages of this travel reimbursement status. Default null. If travel reimbursement status is in use and usages aren't moved the deletion might fail."
          in: query
          name: moveUsagesToGuid
          schema:
            nullable: true
            type: string
          x-position: 2
          x-relation-guid: TravelReimbursementStatusModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete a travel reimbursement status.
      tags:
        - SettingsDelete
    get:
      operationId: TravelReimbursementStatus_GetTravelReimbursementStatus
      parameters:
        - description: reimbursement status id to get.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TravelReimbursementStatusModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TravelReimbursementStatusModel"
          description: TravelReimbursementStatusModel.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get the travel reimbursement statuses by guid.
      tags:
        - SettingsRead
    patch:
      operationId: TravelReimbursementStatus_PatchTravelReimbursementStatus
      parameters:
        - description: ID of the travel reimbursement status.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: TravelReimbursementStatusModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of TravelReimbursementStatusModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TravelReimbursementStatusModel"
                type: array
          description: list of updated travel reimbursement statuses.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a travel reimbursement status or a part of it.
      tags:
        - SettingsWrite
  /v1/users:
    get:
      operationId: Users_GetUsers
      parameters:
        - in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: If not given, return all users, if given as true return only active users, if given as false returns only inactive users
          in: query
          name: isActive
          schema:
            nullable: true
            type: boolean
          x-position: 3
        - description: "Optional: ID of the business unit of the user. If not provided, returns for all business units. Default all."
          explode: true
          in: query
          name: businessUnitGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 4
          x-relation-guid: BusinessUnitModel
        - description: "Optional: ID of the keyword of the user. If not provided, returns for all keywords. Default all."
          explode: true
          in: query
          name: keywordGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 5
          x-relation-guid: UserKeywordModel
        - description: "Optional: Get users that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 6
        - description: "Optional: ID of the supervisor to get subordinates for."
          explode: true
          in: query
          name: supervisorUserGuids
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 7
          x-relation-guid: UserOutputModel
        - description: "Optional: Code of the user."
          in: query
          name: code
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 8
        - description: "Optional: Email address of the user."
          in: query
          name: email
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 9
        - description: "Optional: Filter users by purpose."
          in: query
          name: purpose
          schema:
            $ref: "#/components/schemas/GetUsersPurpose"
          x-position: 10
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/UserOutputModel"
                type: array
          description: All the users
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:read
      summary: Get users
      tags:
        - UsersRead
    post:
      operationId: Users_PostUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInputModel"
              nullable: true
        description: UserModel.
        x-name: user
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOutputModel"
          description: Created user.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:write
      summary: Insert an user.
      tags:
        - UsersWrite
  /v1/users/customproperties:
    get:
      operationId: UserCustomProperties_GetUserCustomProperties
      parameters:
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Get only active or inactive user custom properties."
          in: query
          name: isActive
          schema:
            nullable: true
            type: boolean
          x-position: 3
        - description: "Optional: Is the customer property used in any custom property usage."
          in: query
          name: isInUse
          schema:
            nullable: true
            type: boolean
          x-position: 4
        - description: "Optional: Get custom properties that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/UserCustomPropertyOutputModel"
                type: array
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get the user custom properties.
      tags:
        - SettingsRead
    post:
      operationId: UserCustomProperties_PostUserCustomProperty
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCustomPropertyInputModel"
              nullable: true
        description: UserCustomPropertyModel.
        x-name: customProperty
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCustomPropertyOutputModel"
          description: Created user custom property.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a user custom property.
      tags:
        - SettingsWrite
  /v1/users/customproperties/usercustompropertyselectionitems:
    post:
      operationId: UserCustomPropertySelectionItems_PostUserCustomPropertySelectionItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCustomPropertySelectionItemInputModel"
              nullable: true
        description: UserPropertySelectionItemInputModel.
        x-name: userCustomPropertySelectionItem
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCustomPropertySelectionItemOutputModel"
          description: Created user custom property.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a user custom property selection item.
      tags:
        - SettingsWrite
  "/v1/users/customproperties/usercustompropertyselectionitems/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: UserCustomPropertySelectionItems_DeleteUserCustomPropertySelectionItem
      parameters:
        - description: GUID used to delete the user custom property selection item.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserCustomPropertySelectionItemInputModel
      responses:
        "204":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Deletes a user custom property selection item.
      tags:
        - SettingsDelete
    get:
      operationId: UserCustomPropertySelectionItems_GetUserCustomPropertySelectionItem
      parameters:
        - description: Id used to get the user custom property selection item.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserCustomPropertySelectionItemOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCustomPropertySelectionItemOutputModel"
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get user custom property selection item by ID.
      tags:
        - SettingsRead
    patch:
      operationId: UserCustomPropertySelectionItems_PatchUserCustomPropertySelectionItem
      parameters:
        - description: ID of the user custom property selection item.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserCustomPropertySelectionItemInputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of UserCustomPropertySelectionItemInputModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/UserCustomPropertySelectionItemOutputModel"
                type: array
          description: List of updated user custom properties.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a user custom property selection item or a part of it.
      tags:
        - SettingsWrite
  "/v1/users/customproperties/{customPropertyGuid}/usercustompropertyselectionitems":
    get:
      operationId: UserCustomPropertySelectionItems_GetUserCustomPropertySelectionItems
      parameters:
        - description: Custom property id used to get the user custom property selection items.
          in: path
          name: customPropertyGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: CustomPropertyModel
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Get only active or inactive selection items."
          in: query
          name: isActive
          schema:
            nullable: true
            type: boolean
          x-position: 3
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: Get custom property selection items that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/UserCustomPropertySelectionItemOutputModel"
                type: array
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get the user custom properties.
      tags:
        - SettingsRead
  "/v1/users/customproperties/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: UserCustomProperties_DeleteUserCustomProperty
      parameters:
        - description: GUID used to delete the user custom property.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserCustomPropertyOutputModel
      responses:
        "204":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Deletes a user custom property.
      tags:
        - SettingsDelete
    get:
      operationId: UserCustomProperties_GetUserCustomProperty
      parameters:
        - description: Id used to get the user custom property.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserCustomPropertyOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCustomPropertyOutputModel"
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get user custom property by ID.
      tags:
        - SettingsRead
    patch:
      operationId: UserCustomProperties_PatchUserCustomProperty
      parameters:
        - description: ID of the user custom property Can also be comma separate list of IDs to patch multiple user custom properties with one call. When multiple IDs are given, returns model which has list of succeeded user custom properties and list of errors.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserCustomPropertyOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of UserCustomPropertyModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/UserCustomPropertyOutputModel"
                type: array
          description: List of updated user custom properties.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a user custom property or a part of it.
      tags:
        - SettingsWrite
  /v1/users/customvalues:
    post:
      operationId: UserCustomValues_PostUserCustomValue
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCustomValueInputModel"
              nullable: true
        description: UserCustomValueModel.
        x-name: userCustomValue
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/UserCustomValueOutputModel"
                type: array
          description: Created user custom value.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:write
      summary: Insert a user custom value.
      tags:
        - UsersWrite
  "/v1/users/customvalues/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: UserCustomValues_DeleteUserCustomValue
      parameters:
        - description: GUID used to delete the user custom value.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserCustomValueOutputModel
      responses:
        "204":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:delete
      summary: Deletes a user custom value.
      tags:
        - UsersDelete
    get:
      operationId: UserCustomValues_GetUserCustomValue
      parameters:
        - description: Id used to get the user custom value.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserCustomValueOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCustomValueOutputModel"
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:read
      summary: Get user custom value by ID.
      tags:
        - UsersRead
    patch:
      operationId: UserCustomValues_PatchUserCustomValue
      parameters:
        - description: ID of the user custom value Can also be comma separate list of IDs to patch multiple user custom values with one call. When multiple IDs are given, returns model which has list of succeeded user custom values and list of errors.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserCustomValueOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of UserCustomValueModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/UserCustomValueOutputModel"
                type: array
          description: List of updated user custom values.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:write
      summary: Update (Patch) a user custom value or a part of it.
      tags:
        - UsersWrite
  "/v1/users/{guid}":
    delete:
      description: No Content (204) if succeeded. Bad Request (400) if user can't be deleted. Not Found (404) if the user can't be found.
      operationId: Users_DeleteUser
      parameters:
        - description: ID of the user.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:delete
      summary: Delete an user.
      tags:
        - UsersDelete
    get:
      operationId: Users_GetUser
      parameters:
        - description: GUID used to get the user.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOutputModel"
          description: User.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:read
      summary: Get user by ID.
      tags:
        - UsersRead
    patch:
      operationId: Users_PatchUser
      parameters:
        - description: ID of the user.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of UserModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/UserOutputModel"
                type: array
          description: List of updated users.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:write
      summary: Update (Patch) an user or a part of it.
      tags:
        - UsersWrite
  "/v1/users/{userGuid}/customvalues":
    get:
      operationId: UserCustomValues_GetUserCustomValues
      parameters:
        - description: ID of the user.
          in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Get only values of active or inactive user custom properties."
          in: query
          name: isActive
          schema:
            nullable: true
            type: boolean
          x-position: 4
        - description: "Optional: List of target for which to get the values."
          explode: true
          in: query
          name: targets
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 5
        - description: "Optional: Get user custom values that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/UserCustomValueOutputModel"
                type: array
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:read
      summary: Get the user custom values.
      tags:
        - UsersRead
  "/v1/users/{userGuid}/flextime":
    get:
      operationId: Flextime_GetFlextime
      parameters:
        - description: Id of the user.
          in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - description: Date for which to get the balance. Max 12 months into the future.
          in: query
          name: eventDate
          schema:
            format: date-time
            type: string
          x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlextimeModel"
          description: FlextimeModel.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:read
      summary: |-
        Get the flextime balance for a user for a specified date. Total balance is returned for the given date. Month balance is the balance for the month of the given date.
        Values are returned only if the advanced time tracking add-on is active.
      tags:
        - UsersRead
  "/v1/users/{userGuid}/flextimeadjustments":
    get:
      operationId: FlextimeAdjustments_GetFlextimeAdjustments
      parameters:
        - description: ID of the user for whom to get the adjustments.
          in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/FlextimeAdjustmentOutputModel"
                type: array
          description: List of Flextime Adjustments.
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Addon required
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:read
      summary: Get the Flextime Adjustments.
      tags:
        - UsersRead
  "/v1/users/{userGuid}/keywords":
    get:
      operationId: Keywords_GetUserKeywords
      parameters:
        - description: ID of the user for who keywords are requested.
          in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - description: If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 2
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Keyword&sortings[0].value=Desc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/UserKeywordModel"
                type: array
          description: Keywords.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:read
      summary: Get all the keywords for user.
      tags:
        - UsersRead
  "/v1/users/{userGuid}/keywords/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if the keyword or the link can't be found."
      operationId: Keywords_DeleteUserKeyword
      parameters:
        - in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 2
          x-relation-guid: KeywordModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:delete
      summary: Delete a keyword from the user
      tags:
        - UsersDelete
    post:
      operationId: Keywords_LinkKeywordToUser
      parameters:
        - in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 2
          x-relation-guid: KeywordModel
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserKeywordModel"
          description: Created user keyword link.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:write
      summary: Link existing keyword to user
      tags:
        - UsersWrite
  "/v1/users/{userGuid}/projectfees":
    get:
      operationId: ProjectFees_GetUserProjectFees
      parameters:
        - description: ID of the user.
          in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: Number of rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: ProjectFee's product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting."
          in: query
          name: productType
          schema:
            $ref: "#/components/schemas/ProductType"
          x-position: 4
        - description: "Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null."
          in: query
          name: isBillable
          schema:
            nullable: true
            type: boolean
          x-position: 5
        - description: "Optional: Filter the project fees. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null."
          in: query
          name: isBilled
          schema:
            nullable: true
            type: boolean
          x-position: 6
        - description: "Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null."
          in: query
          name: invoiceableDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 7
        - description: "Optional: Filter the project fees. If true/false, only the ones are connected/not-connected to a phase are returned. If null, all are returned. Default is null."
          in: query
          name: hasPhase
          schema:
            nullable: true
            type: boolean
          x-position: 8
        - description: Start date search criteria. Only get project fees that have event date from this date.
          in: query
          name: startDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 9
        - description: End date search criteria. Only get project fees that have event date until this date.
          in: query
          name: endDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 10
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectFeeOutputModel"
                type: array
          description: ProjectFees
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - fees:read
      summary: Get all the projectFees for a user
      tags:
        - FeesRead
  "/v1/users/{userGuid}/projectmembercostexceptions":
    get:
      operationId: ProjectMemberCostExceptions_GetProjectMemberCostExceptionsForUser
      parameters:
        - description: Guid of the user.
          in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - description: Search only for open or closed projects. Default all projects.
          in: query
          name: isProjectClosed
          schema:
            nullable: true
            type: boolean
          x-position: 2
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 4
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectMemberCostExceptionOutputModel"
                type: array
          description: All the member cost exceptions for one project.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:read
      summary: Get all cost exceptions of project members for user.
      tags:
        - UsersRead
  "/v1/users/{userGuid}/projecttravelexpenses":
    get:
      operationId: ProjectTravelExpenses_GetProjectTravelExpensesForUser
      parameters:
        - description: ID of the user.
          in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - description: "Optional: starting date from which to get the travel expenses. Default all."
          in: query
          name: startDate
          schema:
            format: date
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: starting date to which to get the travel expenses. Default all."
          in: query
          name: endDate
          schema:
            format: date
            nullable: true
            type: string
          x-position: 3
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 5
        - description: "Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense"
          in: query
          name: expenseClass
          schema:
            $ref: "#/components/schemas/ExpensesClass"
          x-position: 6
        - description: Optional. Filter the project travel expenses. If true/false, only the ones that are reimbursed are returned. If null, all are returned. Default is null.
          in: query
          name: isReimbursed
          schema:
            nullable: true
            type: boolean
          x-position: 7
        - description: "Optional: Filter the project travel expenses by whether or not the reimbursement is required. Default all."
          in: query
          name: isTravelReimbursementRequired
          schema:
            nullable: true
            type: boolean
          x-position: 8
        - description: "Optional: ID of the travel reimbursement"
          in: query
          name: travelReimbursementGuid
          schema:
            nullable: true
            type: string
          x-position: 9
          x-relation-guid: TravelReimbursementOutputModel
        - description: "Optional: ID of the cost currency."
          in: query
          name: costCurrencyGuid
          schema:
            nullable: true
            type: string
          x-position: 10
          x-relation-guid: CurrencyOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectTravelExpenseOutputModel"
                type: array
          description: ProjectTravelExpenseOutputModel
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - travels:read
      summary: Get all the project travel expenses for a user
      tags:
        - TravelsRead
  "/v1/users/{userGuid}/resourceallocations/allocations":
    get:
      operationId: ResourceAllocations_GetResourceAllocationsByUserGuid
      parameters:
        - in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - description: Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days
          in: query
          name: startDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 2
        - description: Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days
          in: query
          name: endDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
        - description: "Optional: Get resource allocations that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
        - explode: true
          in: query
          name: userLicenseTypes
          schema:
            items:
              $ref: "#/components/schemas/LicenseUserType"
            nullable: true
            type: array
          style: form
          x-position: 5
        - in: query
          name: phaseGuid
          schema:
            nullable: true
            type: string
          x-position: 6
          x-relation-guid: PhaseOutputModel
        - in: query
          name: projectGuid
          schema:
            nullable: true
            type: string
          x-position: 7
          x-relation-guid: ProjectOutputModel
        - in: query
          name: projectBusinessUnitGuid
          schema:
            nullable: true
            type: string
          x-position: 8
          x-relation-guid: BusinessUnitModel
        - in: query
          name: userBusinessUnitGuid
          schema:
            nullable: true
            type: string
          x-position: 9
          x-relation-guid: BusinessUnitModel
        - in: query
          name: projectManagerUserGuid
          schema:
            nullable: true
            type: string
          x-position: 10
          x-relation-guid: UserOutputModel
        - in: query
          name: userTagGuid
          schema:
            nullable: true
            type: string
          x-position: 11
          x-relation-guid: UserKeywordModel
        - in: query
          name: useSalesProbability
          schema:
            default: true
            type: boolean
          x-position: 12
        - in: query
          name: projectStatusTypeGuid
          schema:
            nullable: true
            type: string
          x-position: 13
          x-relation-guid: ProjectStatusTypeModel
        - in: query
          name: projectTagGuid
          schema:
            nullable: true
            type: string
          x-position: 14
          x-relation-guid: ProjectKeywordModel
        - in: query
          name: superiorUserGuid
          schema:
            nullable: true
            type: string
          x-position: 15
          x-relation-guid: UserOutputModel
        - in: query
          name: salesStatusTypeGuid
          schema:
            nullable: true
            type: string
          x-position: 16
          x-relation-guid: SalesStatusTypeOutputModel
        - in: query
          name: resourceAllocationGuid
          schema:
            nullable: true
            type: string
          x-position: 17
          x-relation-guid: ResourceAllocationOutputModel
        - in: query
          name: salesProgress
          schema:
            $ref: "#/components/schemas/SalesProgress"
          x-position: 18
        - description: "Optional: Number of rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 19
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAllocationOutputModel"
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - resourceallocations:read
      summary: Get resource allocations for a user with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
      tags:
        - ResourceallocationsRead
  "/v1/users/{userGuid}/timeentries":
    get:
      operationId: TimeEntries_GetTimeEntriesForUser
      parameters:
        - description: ID of the user.
          in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - description: "Optional: starting date from which to get the time entries. Default all."
          in: query
          name: startDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: starting date to which to get the time entries. Default all."
          in: query
          name: endDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
        - description: "Optional: Filters time entries for given phases."
          explode: true
          in: query
          name: phaseGuid
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 4
          x-relation-guid: PhaseOutputModel
        - description: "Optional: Filters time entries for given time entry types."
          explode: true
          in: query
          name: timeEntryTypeGuid
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 5
          x-relation-guid: TimeEntryTypeModel
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 6
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 7
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TimeEntryModel"
                type: array
          description: TimeEntries.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - hours:read
      summary: Get all the time entries for a user.
      tags:
        - HoursRead
  "/v1/users/{userGuid}/travelexpensesfiles":
    get:
      operationId: Files_GetUsersTravelExpensesFiles
      parameters:
        - description: GUID of the user used to get the files attached to travel expenses.
          in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: How many rows to fetch."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: Start date to from which to check travel expenses."
          in: query
          name: startDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 4
        - description: "Optional: End date to check for availability until travel expenses."
          in: query
          name: endDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 5
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProjectTravelExpenseFileModel"
                type: array
          description: TravelExpenseFile.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - files:read
      summary: Get all files of all travel expenses of the user.
      tags:
        - FilesRead
  "/v1/users/{userGuid}/workcontracts":
    get:
      operationId: WorkContracts_GetWorkContractsForUser
      parameters:
        - description: Id of the user.
          in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/WorkContractOutputModel"
                type: array
          description: Work contracts.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:read
      summary: Get all the work contracts for the user.
      tags:
        - UsersRead
  "/v1/users/{userGuid}/workcontracts/current":
    get:
      operationId: WorkContracts_GetCurrentWorkContractForUser
      parameters:
        - description: Id of the user
          in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkContractOutputModel"
          description: Work contracts
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:read
      summary: Gets current work contract for the user
      tags:
        - UsersRead
  "/v1/users/{userGuid}/workdays":
    get:
      operationId: Workdays_GetWorkdays
      parameters:
        - description: ID of the user.
          in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - description: Start date of the workdays.
          in: query
          name: startDate
          required: true
          schema:
            format: date-time
            type: string
          x-position: 2
        - description: End date of the workdays.
          in: query
          name: endDate
          required: true
          schema:
            format: date-time
            type: string
          x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/WorkdayModel"
                type: array
          description: User's workdays.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:read
      summary: Get workdays for a user.
      tags:
        - UsersRead
  "/v1/users/{userGuid}/workdays/{date}":
    patch:
      operationId: Workdays_PatchWorkDay
      parameters:
        - description: ID of the user.
          in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - description: Date of the workday..
          in: path
          name: date
          required: true
          schema:
            format: date-time
            type: string
          x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of WorkdayModel
        x-name: patchDocument
        x-position: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/WorkdayModel"
                type: array
          description: list of updated workdays
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - users:write
      summary: Update (Patch) a workday or a part of it
      tags:
        - UsersWrite
  "/v1/users/{userGuid}/workhours":
    get:
      operationId: WorkHours_GetWorkHoursForUser
      parameters:
        - description: ID of the user.
          in: path
          name: userGuid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: UserOutputModel
        - description: "Optional: starting date from which to get the hours. Default all."
          in: query
          name: startDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 2
        - description: "Optional: starting date to which to get the hours. Default all."
          in: query
          name: endDate
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
        - description: "Optional: ID of the phase to get the hours for. Default all."
          explode: true
          in: query
          name: phaseGuid
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 4
          x-relation-guid: PhaseOutputModel
        - description: "Optional: ID of the work type. Default all."
          explode: true
          in: query
          name: workTypeGuid
          schema:
            items:
              type: string
            nullable: true
            type: array
          style: form
          x-position: 5
          x-relation-guid: WorkTypeOutputModel
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 6
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 7
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/WorkHourOutputModel"
                type: array
          description: WorkHours
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - hours:read
      summary: Get all the work hours for a user
      tags:
        - HoursRead
  /v1/vatrates:
    get:
      operationId: VatRates_GetVatRates
      parameters:
        - description: If not given, return all vat rates in organizations country. If given return only for that country.
          in: query
          name: countryGuid
          schema:
            nullable: true
            type: string
          x-position: 1
          x-relation-guid: CountryModel
        - description: If not given, return all vat rates, if given as true return only active ones, if given as false returns only inactive ones.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/VatRateOutputModel"
                type: array
          description: Vat rates
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all organization vat rates
      tags:
        - SettingsRead
    post:
      operationId: VatRates_PostVatRate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VatRateInputModel"
              nullable: true
        description: VatRateInputModel
        x-name: model
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VatRateOutputModel"
          description: Inserted vat rate
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a vat rate
      tags:
        - SettingsWrite
  "/v1/vatrates/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Bad Request (400) if vat rate is the default one. Not Found (404) if vat rate can't be found."
      operationId: VatRates_DeleteVatRate
      parameters:
        - description: GUID for the vat rate to delete
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: VatRateOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Delete a vat rate
      tags:
        - SettingsDelete
    get:
      operationId: VatRates_GetVatRate
      parameters:
        - description: GUID used to get the vat rate.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: VatRateOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VatRateOutputModel"
          description: Vat rate
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get a vat rate by GUID
      tags:
        - SettingsRead
    patch:
      operationId: VatRates_PatchVatRate
      parameters:
        - description: GUID of the vat rate
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: VatRateOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of ValueAddedTaxModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/VatRateOutputModel"
                type: array
          description: list of updated vat rates
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a vat rate or a part of it
      tags:
        - SettingsWrite
  /v1/workcontracts:
    post:
      operationId: WorkContracts_PostWorkContract
      parameters:
        - description: Optional. Reset flextime to zero when new work contract starts or keep the flextime value. Default true = reset flextime.
          in: query
          name: resetFlextime
          schema:
            default: true
            type: boolean
          x-position: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkContractInputModel"
              nullable: true
        description: WorkContractOutputModel.
        x-name: workContract
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkContractOutputModel"
          description: Created work contract.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
        - ClientIdAuth: []
          OAuth2:
            - users:write
      summary: Insert a work contract.
      tags:
        - SettingsWrite
        - UsersWrite
  "/v1/workcontracts/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded. Not found (404) if work contract can't be found."
      operationId: WorkContracts_DeleteWorkContract
      parameters:
        - description: ID for the work contract to delete.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: WorkContractOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
        - ClientIdAuth: []
          OAuth2:
            - users:delete
      summary: Delete a work contract.
      tags:
        - SettingsDelete
        - UsersDelete
    get:
      operationId: WorkContracts_GetWorkContract
      parameters:
        - description: Id used to get the work contract.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: WorkContractOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkContractOutputModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
        - ClientIdAuth: []
          OAuth2:
            - users:read
      summary: Get work contract by ID.
      tags:
        - SettingsRead
        - UsersRead
    patch:
      operationId: WorkContracts_PatchWorkContract
      parameters:
        - description: ID of the work contract.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: WorkContractOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON patch document of WorkContractOutputModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/WorkContractOutputModel"
                type: array
          description: list of updated work contract.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
        - ClientIdAuth: []
          OAuth2:
            - users:write
      summary: Update (Patch) a work contract or a part of it.
      tags:
        - SettingsWrite
        - UsersWrite
  "/v1/workhourprices/{guid}":
    get:
      operationId: WorkHourPrices_GetWorkHourPrice
      parameters:
        - description: Id used to get the work hour price.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: WorkHourPriceOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkHourPriceOutputModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get work hour price by ID.
      tags:
        - SettingsRead
  /v1/workhours:
    get:
      operationId: WorkHours_GetWorkHours
      parameters:
        - description: "Optional: page token to fetch the next page."
          in: query
          name: pageToken
          schema:
            nullable: true
            type: string
          x-position: 1
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 2
        - description: "Optional: Get work hours that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 3
        - description: Billable status type
          in: query
          name: billableStatus
          schema:
            $ref: "#/components/schemas/BillableStatusType"
          x-position: 4
        - description: "Optional: Get work hours that have event date after this date time (greater or equal)."
          in: query
          name: eventDateStart
          schema:
            format: date
            nullable: true
            type: string
          x-position: 5
        - description: "Optional: Get work hours that have event date before this date time (less or equal)."
          in: query
          name: eventDateEnd
          schema:
            format: date
            nullable: true
            type: string
          x-position: 6
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/WorkHourOutputModel"
                type: array
          description: ""
          headers:
            NextPageToken:
              description: Page token to fetch the next page
              schema:
                type: string
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - hours:read
      summary: Get the work hours.
      tags:
        - HoursRead
    post:
      operationId: WorkHours_PostWorkHour
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkHourInputModel"
              nullable: true
        description: WorkHourInputModel
        x-name: workHour
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkHourOutputModel"
          description: Created work hour
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - hours:write
      summary: Insert a work hour
      tags:
        - HoursWrite
  "/v1/workhours/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: WorkHours_DeleteWorkHour
      parameters:
        - description: GUID used to delete the work hour.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: WorkHourInputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - hours:delete
      summary: Deletes a work hour.
      tags:
        - HoursDelete
    get:
      operationId: WorkHours_GetWorkHour
      parameters:
        - description: Id used to get the work hour.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: WorkHourOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkHourOutputModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - hours:read
      summary: Get work hour by ID
      tags:
        - HoursRead
    patch:
      operationId: WorkHours_PatchWorkHour
      parameters:
        - description: ID of the work hour. Can also be comma separate list of IDs to patch multiple work hours with one call. When multiple IDs are given, returns model which has list of succeeded work hours and list of errors.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: WorkHourInputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of WorkHourInputModel
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/WorkHourOutputModel"
                type: array
          description: List of updated work hours
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - hours:write
      summary: Update (Patch) a work hour or a part of it
      tags:
        - HoursWrite
  /v1/worktypes:
    get:
      operationId: WorkTypes_GetWorkTypes
      parameters:
        - description: Filter the work types. If true/false, only the active/inactive ones are returned. If null, all the work types are returned.
          in: query
          name: active
          schema:
            nullable: true
            type: boolean
          x-position: 1
        - description: Filter the work types. If true/false, only the productive/non-productive ones are returned. If null, all the work types are returned.
          in: query
          name: productive
          schema:
            nullable: true
            type: boolean
          x-position: 2
        - description: "Optional: first row to fetch. Default 0 = first row."
          in: query
          name: firstRow
          schema:
            default: 0
            format: int32
            nullable: true
            type: integer
          x-position: 3
        - description: "Optional: How many rows to fetch, Default 20, maximum 100."
          in: query
          name: rowCount
          schema:
            format: int32
            nullable: true
            type: integer
          x-position: 4
        - description: "Optional: Text to search from work type name or code."
          in: query
          name: textToSearch
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 5
        - description: "Optional: Code of the work type."
          in: query
          name: code
          schema:
            default: ""
            nullable: true
            type: string
          x-position: 6
        - description: "Optional: Get work types that have been added or changed after this date time (greater or equal)."
          in: query
          name: changedSince
          schema:
            format: date-time
            nullable: true
            type: string
          x-position: 7
        - description: "Optional: Calculate total number of rows."
          in: query
          name: calculateRowCount
          schema:
            default: false
            type: boolean
          x-position: 8
        - description: 'Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc".'
          explode: true
          in: query
          name: sortings
          schema:
            items:
              $ref: "#/components/schemas/KeyValuePairOfStringAndSortDirection"
            nullable: true
            type: array
          style: form
          x-position: 9
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/WorkTypeOutputModel"
                type: array
          description: All the work types matching search criteria.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get all work types.
      tags:
        - SettingsRead
    post:
      operationId: WorkTypes_PostWorkType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkTypeInputModel"
              nullable: true
        description: WorkTypeModel.
        x-name: workTypeModel
        x-position: 1
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkTypeOutputModel"
          description: Created work type.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Insert a work type.
      tags:
        - SettingsWrite
  "/v1/worktypes/{guid}":
    delete:
      description: "Returns: No Content (204) if succeeded."
      operationId: WorkTypes_DeleteWorkType
      parameters:
        - description: GUID used to delete the work type.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: WorkTypeOutputModel
        - description: "Optional: ID of the work type to which to move usages of this work type. Default null. If work type is in use and usages aren't moved the deletion might fail."
          in: query
          name: moveUsagesToGuid
          schema:
            nullable: true
            type: string
          x-position: 2
          x-relation-guid: WorkTypeOutputModel
      responses:
        "204":
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:delete
      summary: Deletes a work type.
      tags:
        - SettingsDelete
    get:
      operationId: WorkTypes_GetWorkType
      parameters:
        - description: Id used to get the work type.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: WorkTypeOutputModel
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkTypeOutputModel"
          description: ""
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:read
      summary: Get work type by ID.
      tags:
        - SettingsRead
    patch:
      operationId: WorkTypes_PatchWorkType
      parameters:
        - description: ID of the work type.
          in: path
          name: guid
          required: true
          schema:
            type: string
          x-position: 1
          x-relation-guid: WorkTypeOutputModel
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/PatchOperation"
              nullable: true
              type: array
        description: JSON Patch document of WorkTypeModel.
        x-name: patchDocument
        x-position: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/WorkTypeOutputModel"
                type: array
          description: List of updated work types.
        "404":
          description: Resource not found
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionModel"
          description: Default error response
      security:
        - ClientIdAuth: []
          OAuth2:
            - settings:write
      summary: Update (Patch) a work type or a part of it.
      tags:
        - SettingsWrite
components:
  schemas:
    AccessTokenCredentials:
      properties:
        client_id:
          nullable: true
          type: string
        client_secret:
          nullable: true
          type: string
        code:
          nullable: true
          type: string
        grant_type:
          $ref: "#/components/schemas/GrantType"
        redirect_uri:
          nullable: true
          type: string
        refresh_token:
          nullable: true
          type: string
        scope:
          nullable: true
          type: string
        state:
          nullable: true
          type: string
      type: object
    ActivityActivityType:
      properties:
        category:
          $ref: "#/components/schemas/ActivityCategory"
          readOnly: true
        guid:
          minLength: 1
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
      required:
        - guid
      type: object
    ActivityCategory:
      description: ""
      enum:
        - Personal
        - Absences
        - CalendarEntry
        - SalesEvent
        - Task
      type: string
      x-enumNames:
        - Personal
        - Absences
        - CalendarEntry
        - SalesEvent
        - Task
    ActivityCustomer:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        number:
          format: int64
          nullable: true
          readOnly: true
          type: integer
      type: object
    ActivityModel:
      properties:
        activityType:
          $ref: "#/components/schemas/ActivityActivityType"
          x-relation: ActivityTypeModel
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/ActivityCustomer"
          nullable: true
          x-relation: CustomerModel
        endDateTime:
          format: date-time
          nullable: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        hasDuration:
          type: boolean
        hasHours:
          readOnly: true
          type: boolean
        isAllDay:
          type: boolean
        isClosed:
          type: boolean
        isUnassigned:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        location:
          maxLength: 1000
          minLength: 0
          nullable: true
          type: string
        name:
          minLength: 1
          type: string
        notes:
          nullable: true
          type: string
        ownerUser:
          $ref: "#/components/schemas/ActivityOwnerModel"
          x-relation: UserOutputModel
        phase:
          $ref: "#/components/schemas/ActivityPhase"
          nullable: true
          x-relation: PhaseOutputModel
        projectTaskStatus:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: ProjectTaskStatusModel
        recurrence:
          $ref: "#/components/schemas/ActivityRecurrenceModel"
          nullable: true
        recurrenceParentActivityGuid:
          nullable: true
          type: string
          x-relation-guid: ActivityModel
        recurrenceRule:
          nullable: true
          readOnly: true
          type: string
        recurrenceType:
          $ref: "#/components/schemas/RecurrenceType"
          readOnly: true
        startDateTime:
          format: date-time
          type: string
      required:
        - startDateTime
        - activityType
        - ownerUser
        - name
      type: object
    ActivityOwnerKeyword:
      properties:
        guid:
          nullable: true
          type: string
        value:
          nullable: true
          type: string
      type: object
    ActivityOwnerModel:
      properties:
        code:
          nullable: true
          readOnly: true
          type: string
        guid:
          minLength: 1
          type: string
        keywords:
          items:
            $ref: "#/components/schemas/ActivityOwnerKeyword"
          nullable: true
          readOnly: true
          type: array
        name:
          nullable: true
          readOnly: true
          type: string
      required:
        - guid
      type: object
    ActivityParticipantModel:
      properties:
        activityGuid:
          minLength: 1
          type: string
          x-relation-guid: ActivityModel
        email:
          nullable: true
          readOnly: true
          type: string
        guid:
          nullable: true
          type: string
        isActive:
          readOnly: true
          type: boolean
        mobilePhone:
          nullable: true
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
        participantGuid:
          minLength: 1
          type: string
          x-relation-guid: UserOutputModel
        phone:
          nullable: true
          type: string
        status:
          $ref: "#/components/schemas/MemberStatus"
        type:
          $ref: "#/components/schemas/ParticipantType"
      required:
        - participantGuid
        - activityGuid
      type: object
    ActivityPhase:
      properties:
        guid:
          nullable: true
          type: string
        isLocked:
          readOnly: true
          type: boolean
        name:
          nullable: true
          type: string
        projectGuid:
          nullable: true
          readOnly: true
          type: string
          x-relation-guid: ProjectOutputModel
        projectName:
          nullable: true
          readOnly: true
          type: string
        projectNumber:
          format: int64
          nullable: true
          readOnly: true
          type: integer
        projectOwnerGuid:
          nullable: true
          readOnly: true
          type: string
          x-relation-guid: UserOutputModel
      type: object
    ActivityRecurrenceModel:
      properties:
        exceptions:
          items:
            format: date-time
            type: string
          nullable: true
          readOnly: true
          type: array
        frequency:
          $ref: "#/components/schemas/RecurrenceFrequency"
        lastOccurrenceDateTime:
          format: date-time
          nullable: true
          type: string
        pattern:
          $ref: "#/components/schemas/RecurrencePattern"
          nullable: true
        range:
          $ref: "#/components/schemas/RecurrenceRange"
          nullable: true
      required:
        - frequency
      type: object
      x-relation: null
    ActivityTypeModel:
      properties:
        category:
          $ref: "#/components/schemas/ActivityCategory"
        code:
          nullable: true
          type: string
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        isDefault:
          type: boolean
        isPaidLeave:
          nullable: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
      required:
        - category
        - name
      type: object
    AddressCountry:
      properties:
        englishName:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        hasRegions:
          $ref: "#/components/schemas/CountryRegionsStatus"
          readOnly: true
        name:
          nullable: true
          type: string
      type: object
    AddressCustomer:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        number:
          format: int64
          nullable: true
          readOnly: true
          type: integer
      type: object
    AddressModel:
      properties:
        addressline:
          nullable: true
          type: string
        city:
          nullable: true
          type: string
        contacts:
          items:
            $ref: "#/components/schemas/ModelWithName"
          nullable: true
          type: array
          x-relation: ContactModel
        country:
          $ref: "#/components/schemas/AddressCountry"
          nullable: true
          x-relation: CountryModel
        countryRegion:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: CountryRegionModel
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/AddressCustomer"
          nullable: true
          x-relation: CustomerModel
        fax:
          nullable: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isBillingAddress:
          type: boolean
        isPostalAddress:
          type: boolean
        isVisitAddress:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        phone:
          nullable: true
          type: string
        postalCode:
          nullable: true
          type: string
      type: object
    BankAccountFormat:
      description: ""
      enum:
        - Iban
        - Bankgiro
      type: string
      x-enumNames:
        - Iban
        - Bankgiro
    BankAccountOutputModel:
      properties:
        accountNumber:
          minLength: 1
          type: string
        accountNumberFormat:
          $ref: "#/components/schemas/BankAccountFormat"
          default: Iban
        bankName:
          minLength: 1
          type: string
        bic:
          nullable: true
          type: string
        businessUnit:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: BusinessUnitModel
        company:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          readOnly: true
          x-relation: CompanyModel
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
      required:
        - bankName
        - accountNumber
      type: object
    BillablePeriod:
      description: ""
      enum:
        - Any
        - Past
        - Future
        - NowAndPast
        - NowAndFuture
      type: string
      x-enumNames:
        - Any
        - Past
        - Future
        - NowAndPast
        - NowAndFuture
    BillableStatusType:
      description: ""
      enum:
        - Billable
        - NotBillable
        - RemovedFromInvoice
      type: string
      x-enumNames:
        - Billable
        - NotBillable
        - RemovedFromInvoice
    BillingAddressModel:
      properties:
        addressline:
          nullable: true
          readOnly: true
          type: string
        city:
          nullable: true
          readOnly: true
          type: string
        country:
          nullable: true
          readOnly: true
          type: string
        guid:
          nullable: true
          type: string
        postalCode:
          nullable: true
          readOnly: true
          type: string
      type: object
    BillingCustomerModel:
      properties:
        eInvoiceAddress:
          nullable: true
          readOnly: true
          type: string
        eInvoiceOperator:
          nullable: true
          readOnly: true
          type: string
        guid:
          minLength: 1
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
      required:
        - guid
      type: object
    BillingScheduleType:
      description: ""
      enum:
        - Immediately
        - WhenPhaseCompleted
        - OnDate
      type: string
      x-enumNames:
        - Immediately
        - WhenPhaseCompleted
        - OnDate
    BusinessUnitCostCenterModel:
      properties:
        guid:
          minLength: 1
          type: string
        identifier:
          nullable: true
          readOnly: true
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
      required:
        - guid
      type: object
    BusinessUnitModel:
      properties:
        code:
          nullable: true
          type: string
        companyBusinessUnitGuid:
          nullable: true
          readOnly: true
          type: string
          x-relation-guid: BusinessUnitModel
        companyCountryGuid:
          nullable: true
          readOnly: true
          type: string
          x-relation-guid: CountryModel
        companyCurrencyGuid:
          nullable: true
          readOnly: true
          type: string
          x-relation-guid: CurrencyOutputModel
        companyGuid:
          nullable: true
          readOnly: true
          type: string
          x-relation-guid: CompanyModel
        companyName:
          nullable: true
          readOnly: true
          type: string
        costCenter:
          $ref: "#/components/schemas/BusinessUnitCostCenterModel"
          nullable: true
          readOnly: true
          x-relation: CostCenterModel
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        kvkNumber:
          maxLength: 25
          minLength: 0
          nullable: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        parentGuid:
          nullable: true
          type: string
          x-relation-guid: BusinessUnitModel
        vatNumber:
          nullable: true
          type: string
      required:
        - name
      type: object
    BusinessUnitSubModel:
      properties:
        code:
          nullable: true
          type: string
        companyBusinessUnitGuid:
          nullable: true
          type: string
          x-relation-guid: BusinessUnitModel
        companyCountryGuid:
          nullable: true
          type: string
          x-relation-guid: CountryModel
        companyCurrencyGuid:
          nullable: true
          type: string
          x-relation-guid: CurrencyOutputModel
        companyGuid:
          nullable: true
          type: string
          x-relation-guid: CompanyModel
        companyName:
          nullable: true
          type: string
        guid:
          minLength: 1
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
      required:
        - guid
      type: object
    ClientCredentials:
      properties:
        client_id:
          minLength: 1
          type: string
        client_secret:
          minLength: 1
          type: string
        scope:
          nullable: true
          type: string
      required:
        - client_id
        - client_secret
      type: object
    CommunicationMethodType:
      description: ""
      enum:
        - Phone
        - Fax
        - MobilePhone
        - IPPhone
        - InstantMessenger
        - EmailAddress
      type: string
      x-enumNames:
        - Phone
        - Fax
        - MobilePhone
        - IPPhone
        - InstantMessenger
        - EmailAddress
    CommunicationTypeModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        type:
          $ref: "#/components/schemas/CommunicationMethodType"
      required:
        - name
      type: object
    CommunicationTypeSubModel:
      properties:
        guid:
          minLength: 1
          type: string
        isActive:
          default: true
          type: boolean
        name:
          nullable: true
          readOnly: true
          type: string
        type:
          $ref: "#/components/schemas/CommunicationMethodType"
      required:
        - guid
      type: object
    CompanyCountry:
      properties:
        code3:
          nullable: true
          readOnly: true
          type: string
        englishName:
          nullable: true
          readOnly: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    CompanyModel:
      properties:
        country:
          $ref: "#/components/schemas/CompanyCountry"
          nullable: true
          readOnly: true
          x-relation: CountryModel
        currencyCode:
          nullable: true
          readOnly: true
          type: string
        currencyGuid:
          nullable: true
          readOnly: true
          type: string
          x-relation-guid: CurrencyOutputModel
        currencyRate:
          format: double
          readOnly: true
          type: number
        currencySymbol:
          nullable: true
          readOnly: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        rootBusinessUnitGuid:
          nullable: true
          readOnly: true
          type: string
          x-relation-guid: BusinessUnitModel
      type: object
    ContactCommunicationModel:
      properties:
        communicationType:
          $ref: "#/components/schemas/CommunicationTypeSubModel"
          x-relation: CommunicationTypeModel
        contact:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          x-relation: ContactModel
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isForbiddenToUse:
          default: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        value:
          minLength: 1
          type: string
      required:
        - value
        - contact
        - communicationType
      type: object
    ContactCustomer:
      properties:
        guid:
          minLength: 1
          type: string
          x-relation-guid: CustomerModel
        name:
          nullable: true
          readOnly: true
          type: string
        number:
          format: int64
          nullable: true
          readOnly: true
          type: integer
      required:
        - guid
      type: object
    ContactKeywordModel:
      properties:
        category:
          $ref: "#/components/schemas/KeywordCategory"
          default: Contact
          readOnly: true
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        keyword:
          minLength: 1
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
      required:
        - keyword
      type: object
    ContactModel:
      properties:
        addressGuid:
          nullable: true
          type: string
          x-relation-guid: AddressModel
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/ContactCustomer"
          x-relation: CustomerModel
        dateOfBirth:
          format: date
          nullable: true
          type: string
        description:
          nullable: true
          type: string
        emails:
          items:
            type: string
          nullable: true
          readOnly: true
          type: array
        firstName:
          minLength: 1
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        isDeleted:
          readOnly: true
          type: boolean
        isEmailAllowed:
          default: false
          type: boolean
        jobTitle:
          nullable: true
          type: string
        language:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: LanguageModel
        lastName:
          minLength: 1
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
        phoneNumbers:
          items:
            type: string
          nullable: true
          readOnly: true
          type: array
        role:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: ContactRoleModel
        salutation:
          $ref: "#/components/schemas/SalutationType"
          nullable: true
        satisfactionLevel:
          $ref: "#/components/schemas/SatisfactionLevelType"
          nullable: true
        timeZone:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: TimezoneModel
      required:
        - firstName
        - lastName
        - customer
      type: object
    ContactRoleModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
      required:
        - name
      type: object
    CostAccountModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        isTravelTypeDefault:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        number:
          minLength: 1
          type: string
      required:
        - name
        - number
      type: object
    CostCenterModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        identifier:
          minLength: 1
          type: string
        isActive:
          default: true
          type: boolean
        isDefault:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
      required:
        - name
        - identifier
      type: object
    CountryLanguage:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    CountryModel:
      properties:
        code2:
          nullable: true
          type: string
        code3:
          nullable: true
          type: string
        companyRegisterUrl:
          nullable: true
          type: string
        currency:
          $ref: "#/components/schemas/CurrencyBaseModel"
          nullable: true
          x-relation: CurrencyOutputModel
        defaultCulture:
          nullable: true
          type: string
        defaultLanguage:
          $ref: "#/components/schemas/CountryLanguage"
          nullable: true
          x-relation: LanguageModel
        englishName:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        hasRegions:
          $ref: "#/components/schemas/CountryRegionsStatus"
        isInEU:
          type: boolean
        isRegistrationCountry:
          type: boolean
        name:
          nullable: true
          type: string
        timezone:
          $ref: "#/components/schemas/CountryTimezone"
          nullable: true
          x-relation: TimezoneModel
      type: object
    CountryRegionModel:
      properties:
        code:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        timezone:
          $ref: "#/components/schemas/CountryRegionTimezoneModel"
          nullable: true
          x-relation: TimezoneModel
      type: object
    CountryRegionTimezoneModel:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    CountryRegionsStatus:
      description: ""
      enum:
        - NoRegion
        - Unknown
        - HasRegions
      type: string
      x-enumNames:
        - NoRegion
        - Unknown
        - HasRegions
    CountryTimezone:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    CreateInvoiceModel:
      properties:
        billingCustomerGuid:
          nullable: true
          type: string
          x-relation-guid: CustomerModel
        date:
          format: date
          nullable: true
          type: string
        groupProjects:
          type: boolean
        invoiceStatusGuid:
          nullable: true
          type: string
          x-relation-guid: InvoiceStatusModel
        projects:
          items:
            $ref: "#/components/schemas/CreateInvoiceProjectModel"
          type: array
      required:
        - projects
      type: object
    CreateInvoiceProjectModel:
      properties:
        guid:
          minLength: 1
          type: string
          x-relation-guid: ProjectOutputModel
      required:
        - guid
      type: object
    CurrencyBaseModel:
      properties:
        code:
          nullable: true
          readOnly: true
          type: string
        guid:
          minLength: 1
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
        symbol:
          nullable: true
          readOnly: true
          type: string
      required:
        - guid
      type: object
      x-relation: null
    CurrencyOutputModel:
      properties:
        code:
          nullable: true
          type: string
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          type: string
        isActive:
          default: true
          type: boolean
        isOrganizationCurrency:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          nullable: true
          type: string
        rate:
          format: double
          type: number
        symbol:
          nullable: true
          type: string
      type: object
    CurrencyPurpose:
      description: ""
      enum:
        - ProjectPrice
        - ProjectCost
        - UserCost
        - ExpenseCost
      type: string
      x-enumFlags: true
      x-enumNames:
        - ProjectPrice
        - ProjectCost
        - UserCost
        - ExpenseCost
    CurrencySubModel:
      properties:
        code:
          nullable: true
          type: string
        guid:
          minLength: 1
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
        symbol:
          nullable: true
          type: string
      required:
        - guid
      type: object
    CurrencySubModel2:
      properties:
        code:
          nullable: true
          type: string
        guid:
          minLength: 1
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
        symbol:
          nullable: true
          type: string
      required:
        - guid
      type: object
    CustomPriceListOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        currency:
          $ref: "#/components/schemas/PriceListCurrency3"
          x-relation: CurrencyOutputModel
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          type: boolean
        isCustom:
          type: boolean
        isDefault:
          type: boolean
        isVolumePricing:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
      required:
        - name
        - currency
      type: object
    CustomPropertyModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        parameters:
          nullable: true
          type: string
        type:
          $ref: "#/components/schemas/CustomPropertyType"
        usageCount:
          format: int32
          readOnly: true
          type: integer
      required:
        - name
        - type
      type: object
    CustomPropertyShortModel:
      properties:
        guid:
          minLength: 1
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
        parameters:
          nullable: true
          readOnly: true
          type: string
        type:
          $ref: "#/components/schemas/CustomPropertyType"
          readOnly: true
      required:
        - guid
      type: object
    CustomPropertyType:
      description: ""
      enum:
        - Numeric
        - Money
        - String
        - Date
        - Selection
      type: string
      x-enumNames:
        - Numeric
        - Money
        - String
        - Date
        - Selection
    CustomerContactPersonSubModel:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    CustomerContactSubModel:
      properties:
        firstName:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        isDeleted:
          type: boolean
        lastName:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    CustomerCountry:
      properties:
        englishName:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    CustomerCountrySettingsInputModel:
      properties:
        country:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: CountryModel
        customer:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: CustomerModel
        isTaxFree:
          type: boolean
        taxFreeDescription:
          nullable: true
          type: string
        valueAddedTax:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: VatRateOutputModel
        zeroVatCategoryCodeEn16931:
          nullable: true
          type: string
      required:
        - customer
        - country
      type: object
    CustomerCountrySettingsOutputModel:
      properties:
        country:
          $ref: "#/components/schemas/CustomerCountry"
          nullable: true
          x-relation: CountryModel
        customer:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: CustomerModel
        guid:
          nullable: true
          type: string
        isTaxFree:
          type: boolean
        taxFreeDescription:
          nullable: true
          type: string
        valueAddedTax:
          $ref: "#/components/schemas/ValueAddedTaxSubModel"
          nullable: true
          x-relation: VatRateOutputModel
        zeroVatCategoryCodeEn16931:
          nullable: true
          type: string
      type: object
    CustomerCurrency:
      properties:
        code:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        symbol:
          nullable: true
          type: string
      type: object
    CustomerCustomPropertySelectionItemInputModel:
      properties:
        customerCustomProperty:
          $ref: "#/components/schemas/SimpleInputModel"
          x-relation: CustomPropertyModel
        isActive:
          default: true
          type: boolean
        name:
          nullable: true
          type: string
        sortOrder:
          format: int32
          nullable: true
          type: integer
      required:
        - customerCustomProperty
      type: object
    CustomerCustomPropertySelectionItemOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customerCustomProperty:
          $ref: "#/components/schemas/CustomPropertyShortModel"
          nullable: true
          x-relation: CustomPropertyModel
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        sortOrder:
          format: int32
          nullable: true
          type: integer
      required:
        - name
      type: object
    CustomerCustomValueModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customProperty:
          $ref: "#/components/schemas/CustomPropertyShortModel"
          x-relation: CustomPropertyModel
        customerGuid:
          nullable: true
          type: string
          x-relation-guid: CustomerModel
        guid:
          nullable: true
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        value:
          nullable: true
          type: string
      required:
        - customProperty
      type: object
    CustomerHeadquarterAddress:
      properties:
        addressline:
          nullable: true
          readOnly: true
          type: string
        city:
          nullable: true
          readOnly: true
          type: string
        country:
          nullable: true
          readOnly: true
          type: string
        guid:
          nullable: true
          type: string
        postalCode:
          nullable: true
          readOnly: true
          type: string
      type: object
    CustomerInvoicingVat:
      properties:
        code:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        percentage:
          format: double
          type: number
      type: object
    CustomerLanguage:
      properties:
        code:
          nullable: true
          readOnly: true
          type: string
        englishName:
          nullable: true
          readOnly: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    CustomerMarketSegmentModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: CustomerModel
        guid:
          nullable: true
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        marketSegment:
          $ref: "#/components/schemas/MarketSegmentSubModel"
          nullable: true
          x-relation: MarketSegmentModel
        parentMarketSegment:
          $ref: "#/components/schemas/MarketSegmentSubModel"
          nullable: true
          readOnly: true
          x-relation: MarketSegmentModel
      type: object
    CustomerModel:
      properties:
        annualRevenue:
          format: int64
          nullable: true
          type: integer
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        currency:
          $ref: "#/components/schemas/CustomerCurrency"
          nullable: true
          x-relation: CurrencyOutputModel
        eInvoiceAddress:
          nullable: true
          type: string
        eInvoiceOperator:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        headquarterAddress:
          $ref: "#/components/schemas/CustomerHeadquarterAddress"
          nullable: true
          x-relation: AddressModel
        industry:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: IndustryModel
        invoiceTemplate:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: InvoiceTemplateModel
        invoicingVat:
          $ref: "#/components/schemas/CustomerInvoicingVat"
          nullable: true
          x-relation: VatRateOutputModel
        isActive:
          default: true
          type: boolean
        isInternal:
          readOnly: true
          type: boolean
        kvkNumber:
          maxLength: 25
          minLength: 0
          nullable: true
          type: string
        language:
          $ref: "#/components/schemas/CustomerLanguage"
          nullable: true
          x-relation: LanguageModel
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        notes:
          nullable: true
          type: string
        number:
          format: int64
          nullable: true
          type: integer
        numberOfEmployees:
          format: int32
          nullable: true
          type: integer
        overdueInterest:
          format: double
          nullable: true
          type: number
        owner:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          x-relation: UserOutputModel
        paymentTerm:
          format: int32
          nullable: true
          type: integer
        pricelist:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: PriceListModel
        timezone:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: TimezoneModel
        vatNumber:
          nullable: true
          type: string
        website:
          nullable: true
          type: string
      required:
        - name
      type: object
    CustomerSalesNoteInputModel:
      properties:
        customer:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: CustomerModel
        note:
          nullable: true
          type: string
        user:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: UserOutputModel
      required:
        - user
        - customer
      type: object
    CustomerSalesNoteOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: CustomerModel
        guid:
          nullable: true
          readOnly: true
          type: string
        isDeleted:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        note:
          nullable: true
          type: string
        user:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: UserOutputModel
      type: object
    DailyModel:
      properties:
        everyWeekday:
          type: boolean
        interval:
          format: int32
          nullable: true
          type: integer
      type: object
    DayOrdinal:
      description: ""
      enum:
        - First
        - Second
        - Third
        - Fourth
        - Last
      type: string
      x-enumNames:
        - First
        - Second
        - Third
        - Fourth
        - Last
    DayOrdinalOption:
      description: ""
      enum:
        - Sunday
        - Monday
        - Tuesday
        - Wednesday
        - Thursday
        - Friday
        - WeekDay
        - Saturday
        - WeekendDay
        - Day
      type: string
      x-enumNames:
        - Sunday
        - Monday
        - Tuesday
        - Wednesday
        - Thursday
        - Friday
        - WeekDay
        - Saturday
        - WeekendDay
        - Day
    DeletedPhaseMemberOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        currentWorkContractTitle:
          nullable: true
          type: string
        deletedDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        phase:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: PhaseOutputModel
        user:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          x-relation: UserOutputModel
      type: object
    DeletedProjectFeeModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: CustomerModel
        deletedDateTime:
          format: date-time
          readOnly: true
          type: string
        eventDate:
          format: date
          nullable: true
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        measurementUnit:
          nullable: true
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
        phase:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: PhaseOutputModel
        product:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: ProductOutputModel
        project:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: ProjectOutputModel
        quantity:
          format: double
          nullable: true
          readOnly: true
          type: number
        user:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
      type: object
    DeletedProjectTravelExpenseModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: CustomerModel
        deletedDateTime:
          format: date-time
          readOnly: true
          type: string
        description:
          nullable: true
          readOnly: true
          type: string
        eventDate:
          format: date
          nullable: true
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        measurementUnit:
          nullable: true
          readOnly: true
          type: string
        phase:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: PhaseOutputModel
        project:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: ProjectOutputModel
        quantity:
          format: double
          nullable: true
          readOnly: true
          type: number
        travelEndTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        travelExpense:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: TravelExpenseTypeOutputModel
        travelStartTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        user:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
      type: object
    DeletedWorkHourModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: CustomerModel
        deletedDateTime:
          format: date-time
          readOnly: true
          type: string
        endTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        eventDate:
          format: date
          nullable: true
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        phase:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: PhaseOutputModel
        plannedInvoiceQuantity:
          format: double
          nullable: true
          readOnly: true
          type: number
        project:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: ProjectOutputModel
        quantity:
          format: double
          nullable: true
          readOnly: true
          type: number
        startTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        user:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        workType:
          $ref: "#/components/schemas/ModelBaseReadOnly"
          nullable: true
          readOnly: true
          x-relation: WorkTypeOutputModel
      type: object
    EntryFormat:
      description: ""
      enum:
        - StartTimeEndTime
        - Quantity
      type: string
      x-enumNames:
        - StartTimeEndTime
        - Quantity
    ErrorModel:
      properties:
        details:
          items:
            $ref: "#/components/schemas/ExceptionDetailModel"
          nullable: true
          type: array
        httpStatusCode:
          format: int32
          type: integer
        stack:
          nullable: true
          type: string
        type:
          $ref: "#/components/schemas/ExceptionTypeEnum"
      type: object
    ExceptionDetailModel:
      properties:
        location:
          $ref: "#/components/schemas/ExceptionLocationModel"
          nullable: true
        message:
          nullable: true
          type: string
        url:
          nullable: true
          type: string
      type: object
    ExceptionLocationModel:
      properties:
        identifier:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        type:
          $ref: "#/components/schemas/ExceptionLocationTypeEnum"
      type: object
    ExceptionLocationTypeEnum:
      description: ""
      enum:
        - PathParameter
        - RequestBody
        - RequestHeader
        - UriParameter
      type: string
      x-enumNames:
        - PathParameter
        - RequestBody
        - RequestHeader
        - UriParameter
    ExceptionModel:
      properties:
        error:
          $ref: "#/components/schemas/ErrorModel"
          nullable: true
      type: object
    ExceptionTypeEnum:
      description: ""
      enum:
        - InternalSystemError
        - AuthenticationRequired
        - AddonMissing
        - FeatureIsNotEnabled
        - InvalidParameter
        - InvalidOperation
        - InvalidRequest
        - InsufficientApiScope
        - InvalidApiVersion
        - ConfigurationError
        - UserLicenseType
        - TermsOfServiceNotApproved
        - HttpsRequired
        - OrganizationNotActive
        - PermissionDenied
        - TrialExpired
        - NotAvailableInTrial
        - InvalidRecaptcha
        - AddonMissingTermsOfServiceApproval
      type: string
      x-enumNames:
        - InternalSystemError
        - AuthenticationRequired
        - AddonMissing
        - FeatureIsNotEnabled
        - InvalidParameter
        - InvalidOperation
        - InvalidRequest
        - InsufficientApiScope
        - InvalidApiVersion
        - ConfigurationError
        - UserLicenseType
        - TermsOfServiceNotApproved
        - HttpsRequired
        - OrganizationNotActive
        - PermissionDenied
        - TrialExpired
        - NotAvailableInTrial
        - InvalidRecaptcha
        - AddonMissingTermsOfServiceApproval
    ExpensesClass:
      description: ""
      enum:
        - Mileage
        - DailyAllowance
        - OtherTravelExpense
      type: string
      x-enumNames:
        - Mileage
        - DailyAllowance
        - OtherTravelExpense
    FileCategory:
      description: ""
      enum:
        - Misc
        - Application
        - Projects
        - Proposal
        - ProjectFees
        - Invoice
        - Users
        - ProjectTravelExpense
        - Customer
      type: string
      x-enumNames:
        - Misc
        - Application
        - Projects
        - Proposal
        - ProjectFees
        - Invoice
        - Users
        - ProjectTravelExpense
        - Customer
    FileKeywordModel:
      properties:
        category:
          $ref: "#/components/schemas/KeywordCategory"
          default: File
          readOnly: true
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        keyword:
          minLength: 1
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
      required:
        - keyword
      type: object
    FileModel:
      properties:
        category:
          $ref: "#/components/schemas/FileCategory"
          readOnly: true
        contentType:
          nullable: true
          readOnly: true
          type: string
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        description:
          nullable: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isInternal:
          nullable: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        size:
          format: double
          nullable: true
          readOnly: true
          type: number
      required:
        - name
      type: object
    FlatRateInputModel:
      properties:
        billAdditionalHours:
          default: true
          nullable: true
          type: boolean
        billingSchedule:
          $ref: "#/components/schemas/BillingScheduleType"
        includesHours:
          default: 0
          format: double
          nullable: true
          type: number
        phase:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: PhaseOutputModel
        plannedBillingDate:
          format: date
          nullable: true
          type: string
        price:
          $ref: "#/components/schemas/MoneyInputModelWithNullableAmount"
          nullable: true
        pricePerAdditionalHour:
          $ref: "#/components/schemas/MoneyInputModelWithNullableAmount"
          nullable: true
      required:
        - phase
        - billingSchedule
      type: object
    FlatRateOutputModel:
      properties:
        billAdditionalHours:
          default: true
          nullable: true
          type: boolean
        billingSchedule:
          $ref: "#/components/schemas/BillingScheduleType"
          nullable: true
        guid:
          nullable: true
          type: string
        includesHours:
          default: 0
          format: double
          nullable: true
          type: number
        invoiceGuid:
          nullable: true
          type: string
          x-relation-guid: PhaseOutputModel
        phase:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          nullable: true
          x-relation: PhaseOutputModel
        plannedBillingDate:
          format: date
          nullable: true
          type: string
        price:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        pricePerAdditionalHour:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        project:
          $ref: "#/components/schemas/FlatrateProjectSubModel"
          nullable: true
          x-relation: ProjectOutputModel
      type: object
    FlatrateProjectSubModel:
      properties:
        guid:
          nullable: true
          readOnly: true
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
        number:
          format: int64
          nullable: true
          readOnly: true
          type: integer
      type: object
    FlextimeAdjustmentInputModel:
      properties:
        adjustmentDate:
          format: date
          type: string
        amount:
          format: double
          type: number
        notes:
          nullable: true
          type: string
        user:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: UserOutputModel
      required:
        - user
        - adjustmentDate
        - amount
      type: object
    FlextimeAdjustmentOutputModel:
      properties:
        adjustmentDate:
          format: date
          nullable: true
          type: string
        amount:
          format: double
          nullable: true
          type: number
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        notes:
          nullable: true
          type: string
        user:
          $ref: "#/components/schemas/UserWithFirstNameLastNamePhotoFileModelAndRequiredGuid"
          nullable: true
          x-relation: UserOutputModel
      type: object
    FlextimeModel:
      properties:
        monthFlextimeBalance:
          format: double
          nullable: true
          type: number
        totalFlextimeBalance:
          format: double
          nullable: true
          type: number
      type: object
    FormattingCultureModel:
      properties:
        code:
          nullable: true
          type: string
        englishName:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        isActive:
          default: true
          nullable: true
          type: boolean
        name:
          nullable: true
          type: string
      type: object
    FormattingCultureSubModel:
      properties:
        code:
          nullable: true
          type: string
        englishName:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    FormattingCultureSubModel2:
      properties:
        code:
          nullable: true
          readOnly: true
          type: string
        englishName:
          nullable: true
          readOnly: true
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
      type: object
    FreeTextInputModel:
      properties:
        value:
          nullable: true
          type: string
      type: object
      x-relation: null
    FreeTextModel:
      properties:
        allowTags:
          nullable: true
          readOnly: true
          type: boolean
        tagContext:
          nullable: true
          readOnly: true
          type: string
        text:
          nullable: true
          readOnly: true
          type: string
        value:
          nullable: true
          type: string
      type: object
      x-relation: null
    FreeTextModel2:
      properties:
        allowTags:
          readOnly: true
          type: boolean
        plainText:
          nullable: true
          readOnly: true
          type: string
        tagContext:
          nullable: true
          readOnly: true
          type: string
        text:
          nullable: true
          readOnly: true
          type: string
        value:
          nullable: true
          type: string
      type: object
      x-relation: null
    GetUsersPurpose:
      description: Purpose used for getting the users.
      enum:
        - AbsenceOwner
        - AccountOwner
        - ActivityOwner
        - ActivityParticipant
        - BillingContact
        - ProjectManager
        - SalesPerson
        - SuperiorUser
        - TermsOfServiceApprover
      type: string
      x-enumNames:
        - AbsenceOwner
        - AccountOwner
        - ActivityOwner
        - ActivityParticipant
        - BillingContact
        - ProjectManager
        - SalesPerson
        - SuperiorUser
        - TermsOfServiceApprover
    GrantType:
      description: ""
      enum:
        - client_credentials
        - authorization_code
        - refresh_token
      type: string
      x-enumNames:
        - ClientCredentials
        - AuthorizationCode
        - RefreshToken
    GroupByType:
      description: ""
      enum:
        - None
        - Date
        - Category
        - Project
      type: string
      x-enumNames:
        - None
        - Date
        - Category
        - Project
    HolidayModel:
      properties:
        countryGuid:
          minLength: 1
          type: string
          x-relation-guid: CountryModel
        date:
          format: date
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        isPublicHoliday:
          readOnly: true
          type: boolean
        isRecurringYearly:
          type: boolean
        name:
          minLength: 1
          type: string
        recurringEndYear:
          format: int32
          maximum: 2075
          minimum: 1900
          nullable: true
          type: integer
      required:
        - name
        - date
        - countryGuid
      type: object
    IndustryModel:
      properties:
        code:
          nullable: true
          type: string
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
      required:
        - name
      type: object
    InvoiceCustomerSubModel:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        number:
          format: int64
          nullable: true
          type: integer
      type: object
    InvoiceFileModel:
      properties:
        category:
          $ref: "#/components/schemas/FileCategory"
          readOnly: true
        contentType:
          nullable: true
          readOnly: true
          type: string
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        description:
          nullable: true
          type: string
        fileGuid:
          nullable: true
          readOnly: true
          type: string
          x-relation-guid: FileModel
        guid:
          nullable: true
          readOnly: true
          type: string
        invoiceGuid:
          nullable: true
          readOnly: true
          type: string
          x-relation-guid: InvoiceOutputModel
        isInternal:
          nullable: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        size:
          format: double
          nullable: true
          readOnly: true
          type: number
        sortOrder:
          format: int32
          nullable: true
          type: integer
      required:
        - name
      type: object
    InvoiceGrouping:
      description: ""
      enum:
        - OneByOne
        - Group
        - Group+Attachment
      type: string
      x-enumNames:
        - OneByOne
        - Group
        - GroupWithAttachment
    InvoiceLanguageSubModel:
      properties:
        code:
          nullable: true
          type: string
        englishName:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    InvoiceOutputModel:
      properties:
        billingCustomer:
          $ref: "#/components/schemas/InvoiceCustomerSubModel"
          nullable: true
          x-relation: CustomerModel
        canBeDeleted:
          type: boolean
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        creditNoteInvoice:
          $ref: "#/components/schemas/RelatedInvoiceSubModel"
          nullable: true
          x-relation: InvoiceOutputModel
        culture:
          $ref: "#/components/schemas/FormattingCultureSubModel2"
          nullable: true
          x-relation: FormattingCultureModel
        currency:
          $ref: "#/components/schemas/CurrencySubModel"
          nullable: true
          x-relation: CurrencyOutputModel
        currencyRate:
          format: double
          type: number
        customer:
          $ref: "#/components/schemas/InvoiceCustomerSubModel"
          nullable: true
          x-relation: CustomerModel
        date:
          format: date
          type: string
        dueDate:
          format: date
          type: string
        entryDate:
          format: date
          nullable: true
          type: string
        flatRatesTotalExcludingTax:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        freeText1:
          $ref: "#/components/schemas/FreeTextModel2"
          nullable: true
        freeText2:
          $ref: "#/components/schemas/FreeTextModel2"
          nullable: true
        guid:
          nullable: true
          readOnly: true
          type: string
        invoiceNumberBusinessUnitGuid:
          nullable: true
          type: string
          x-relation-guid: BusinessUnitModel
        invoiceTemplate:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: InvoiceTemplateModel
        isCreditNote:
          type: boolean
        language:
          $ref: "#/components/schemas/InvoiceLanguageSubModel"
          nullable: true
          x-relation: LanguageModel
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        notes:
          nullable: true
          type: string
        number:
          format: int32
          nullable: true
          type: integer
        orderNumber:
          nullable: true
          type: string
        ourReference:
          nullable: true
          type: string
        overdueInterest:
          format: double
          type: number
        paymentDate:
          format: date
          nullable: true
          type: string
        paymentTerm:
          format: int32
          type: integer
        projectFeesTotalExcludingTax:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        projectTravelExpensesTotalExcludingTax:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        projects:
          items:
            $ref: "#/components/schemas/InvoiceProjectSubModel"
          nullable: true
          type: array
          x-relation: ProjectOutputModel
        receiverAddress:
          $ref: "#/components/schemas/InvoiceReceiverAddressSubModel"
          nullable: true
        receiverContactEmail:
          nullable: true
          type: string
        receiverContactGuid:
          nullable: true
          type: string
          x-relation-guid: ContactModel
        receiverContactName:
          nullable: true
          type: string
        receiverCustomerName:
          nullable: true
          type: string
        receiverKvkNumber:
          nullable: true
          type: string
        receiverVatNumber:
          nullable: true
          type: string
        referenceNumber:
          nullable: true
          type: string
        reimburseInvoice:
          $ref: "#/components/schemas/RelatedInvoiceSubModel"
          nullable: true
          x-relation: InvoiceOutputModel
        senderAddress:
          $ref: "#/components/schemas/InvoiceSenderAddressSubModel"
          nullable: true
        senderContactGuid:
          nullable: true
          type: string
          x-relation-guid: ContactModel
        senderContactName:
          nullable: true
          type: string
        senderKvkNumber:
          nullable: true
          type: string
        senderName:
          nullable: true
          type: string
        senderVatNumber:
          nullable: true
          type: string
        status:
          $ref: "#/components/schemas/InvoiceStatusSubModel"
          nullable: true
          x-relation: InvoiceStatusModel
        totalExcludingTax:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        totalIncludingTax:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        totalTax:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        workHourValueAddedTax:
          format: double
          nullable: true
          type: number
        workHoursQuantity:
          format: double
          type: number
        workHoursTotalExcludingTax:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        yourReference:
          nullable: true
          type: string
      type: object
    InvoicePdfGetOptions:
      description: ""
      enum:
        - All
        - InvoiceOnly
        - AttachmentAndBreakdown
      type: string
      x-enumNames:
        - All
        - InvoiceOnly
        - AttachmentAndBreakdown
    InvoiceProjectSubModel:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        number:
          format: int64
          nullable: true
          type: integer
      type: object
    InvoiceReceiverAddressSubModel:
      properties:
        addressline:
          nullable: true
          type: string
        city:
          nullable: true
          type: string
        country:
          nullable: true
          type: string
        postalCode:
          nullable: true
          type: string
        state:
          nullable: true
          type: string
      type: object
    InvoiceRowAccountingSubModel:
      properties:
        name:
          nullable: true
          type: string
        number:
          nullable: true
          type: string
      type: object
    InvoiceRowCategory:
      description: ""
      enum:
        - Hours
        - ProjectFees
        - Travels
      type: string
      x-enumNames:
        - Hours
        - ProjectFees
        - Travels
    InvoiceRowOutputModel:
      properties:
        category:
          $ref: "#/components/schemas/InvoiceRowCategory"
        code:
          items:
            type: string
          nullable: true
          type: array
        costCenter:
          $ref: "#/components/schemas/InvoiceRowAccountingSubModel"
          nullable: true
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        description:
          nullable: true
          type: string
        flatRateGuid:
          nullable: true
          type: string
          x-relation-guid: FlatRateOutputModel
        guid:
          nullable: true
          readOnly: true
          type: string
        hasInvoiceComment:
          type: boolean
        invoiceGuid:
          nullable: true
          type: string
          x-relation-guid: InvoiceOutputModel
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        measurementUnit:
          nullable: true
          type: string
        quantity:
          format: double
          type: number
        recurringSalesAccount:
          $ref: "#/components/schemas/InvoiceRowAccountingSubModel"
          nullable: true
        rowType:
          $ref: "#/components/schemas/InvoiceRowType"
        salesAccount:
          $ref: "#/components/schemas/InvoiceRowAccountingSubModel"
          nullable: true
        salesReceivableAccount:
          $ref: "#/components/schemas/InvoiceRowAccountingSubModel"
          nullable: true
        sortOrder:
          format: int32
          type: integer
        unitPrice:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        vatAccount:
          $ref: "#/components/schemas/InvoiceRowAccountingSubModel"
          nullable: true
        vatRate:
          format: double
          nullable: true
          type: number
      type: object
    InvoiceRowType:
      description: ""
      enum:
        - FlatRate
        - Hours
        - ProjectFees
        - TravelExpenses
      type: string
      x-enumNames:
        - FlatRate
        - Hours
        - ProjectFees
        - TravelExpenses
    InvoiceSenderAddressSubModel:
      properties:
        addressline:
          nullable: true
          type: string
        city:
          nullable: true
          type: string
        country:
          nullable: true
          type: string
        postalCode:
          nullable: true
          type: string
        state:
          nullable: true
          type: string
      type: object
    InvoiceSettingsOutputModel:
      properties:
        categorySortOrder:
          nullable: true
          type: string
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        entryDate:
          format: date
          nullable: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isReverseCharged:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        paymentDate:
          format: date
          nullable: true
          type: string
        projectFeeDescriptionFormat:
          default: ""
          nullable: true
          type: string
        projectFeeGrouping:
          $ref: "#/components/schemas/InvoiceGrouping"
        projectFeePrimaryGroupBy:
          nullable: true
          type: string
        projectFeeSecondaryGroupBy:
          nullable: true
          type: string
        projectTravelExpenseDescriptionFormat:
          default: ""
          nullable: true
          type: string
        projectTravelExpenseGrouping:
          $ref: "#/components/schemas/InvoiceGrouping"
        projectTravelExpensePrimaryGroupBy:
          nullable: true
          type: string
        projectTravelExpenseSecondaryGroupBy:
          nullable: true
          type: string
        reverseChargeDescription:
          nullable: true
          type: string
        showAttachmentPriceExcludingValueAddedTax:
          type: boolean
        showAttachmentQuantity:
          readOnly: true
          type: boolean
        showAttachmentUnit:
          type: boolean
        showAttachmentUnitPrice:
          type: boolean
        showAttachmentValueAddedTax:
          type: boolean
        showCategories:
          default: true
          type: boolean
        showFooter:
          type: boolean
        showLogoAndTitle:
          type: boolean
        showPriceExcludingValueAddedTax:
          readOnly: true
          type: boolean
        showQuantity:
          type: boolean
        showReferenceNumber:
          default: true
          type: boolean
        showUnit:
          type: boolean
        showUnitPrice:
          type: boolean
        showValueAddedTax:
          type: boolean
        style:
          $ref: "#/components/schemas/InvoiceSkin"
          nullable: true
        workHourDescriptionFormat:
          default: ""
          nullable: true
          type: string
        workHourGrouping:
          $ref: "#/components/schemas/InvoiceGrouping"
        workHourPrimaryGroupBy:
          nullable: true
          type: string
        workHourSecondaryGroupBy:
          nullable: true
          type: string
      type: object
    InvoiceSkin:
      description: ""
      enum:
        - BlackAndWhite
        - Blue
        - Cyan
        - Green
        - Lilac
        - Orange
        - Plain
        - Red
        - Yellow
      type: string
      x-enumNames:
        - BlackAndWhite
        - Blue
        - Cyan
        - Green
        - Lilac
        - Orange
        - Plain
        - Red
        - Yellow
    InvoiceStatusModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        hasInvoiceNumber:
          type: boolean
        isActive:
          default: true
          type: boolean
        isDefault:
          type: boolean
        isDefaultForCreditNote:
          type: boolean
        isPaid:
          type: boolean
        isReadOnly:
          type: boolean
        isSent:
          type: boolean
        isWaitingPayment:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        sortOrder:
          format: int32
          type: integer
      required:
        - name
      type: object
    InvoiceStatusSubModel:
      properties:
        guid:
          minLength: 1
          type: string
        isPaid:
          type: boolean
        isSent:
          type: boolean
        isWaitingPayment:
          type: boolean
        name:
          nullable: true
          readOnly: true
          type: string
      required:
        - guid
      type: object
    InvoiceSubModel:
      properties:
        date:
          format: date
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        number:
          format: int32
          nullable: true
          type: integer
      type: object
    InvoiceTemplateModel:
      properties:
        canDelete:
          readOnly: true
          type: boolean
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        isDefault:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        title:
          minLength: 1
          type: string
      required:
        - title
      type: object
    InvoiceTemplateSubModel:
      properties:
        guid:
          nullable: true
          type: string
          x-relation-guid: InvoiceTemplateModel
        templateInvoiceGuid:
          deprecated: true
          nullable: true
          type: string
          x-deprecatedMessage: Not in use anymore.
          x-relation-guid: InvoiceTemplateModel
      type: object
    InvoiceType:
      description: ""
      enum:
        - Invoice
        - Reminder
      type: string
      x-enumNames:
        - Invoice
        - Reminder
    KeyValuePairOfStringAndObject:
      properties:
        key:
          type: string
        value:
          nullable: true
          type: string
      type: object
    KeyValuePairOfStringAndSortDirection:
      properties:
        key:
          type: string
        value:
          $ref: "#/components/schemas/SortDirection"
      type: object
    KeywordCategory:
      description: ""
      enum:
        - Project
        - Contact
        - User
        - File
      type: string
      x-enumNames:
        - Case
        - Contact
        - User
        - File
    KeywordModel:
      properties:
        category:
          $ref: "#/components/schemas/KeywordCategory"
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        keyword:
          minLength: 1
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
      required:
        - keyword
        - category
      type: object
    KpiFormulaCategory:
      description: ""
      enum:
        - Unknown
        - Functions
        - Project
        - User
        - Invoice
      type: string
      x-enumNames:
        - Unknown
        - Functions
        - Project
        - User
        - Invoice
    KpiFormulaModelBase:
      properties:
        category:
          $ref: "#/components/schemas/KpiFormulaCategory"
          readOnly: true
        dataType:
          $ref: "#/components/schemas/SearchFieldDataType"
          nullable: true
        guid:
          nullable: true
          type: string
        isActive:
          default: true
          type: boolean
        name:
          nullable: true
          type: string
        unit:
          nullable: true
          type: string
      type: object
    LanguageModel:
      properties:
        code:
          nullable: true
          type: string
        englishName:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        isInvoiceLanguage:
          type: boolean
        name:
          nullable: true
          type: string
      type: object
    LeadSourceModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
      required:
        - name
      type: object
    LicenseUserType:
      description: ""
      enum:
        - FullUser
        - Employee
        - RestrictedEmployee
        - Subcontractor
      type: string
      x-enumNames:
        - FullUser
        - Employee
        - RestrictedEmployee
        - Subcontractor
    MarketSegmentModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        parentMarketSegment:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: MarketSegmentModel
      required:
        - name
      type: object
    MarketSegmentSubModel:
      properties:
        guid:
          nullable: true
          type: string
        isActive:
          nullable: true
          readOnly: true
          type: boolean
        name:
          nullable: true
          type: string
      type: object
    MemberStatus:
      description: ""
      enum:
        - Unknown
        - Invited
        - Accepted
        - Tentative
        - Declined
      type: string
      x-enumNames:
        - Unknown
        - Invited
        - Accepted
        - Tentative
        - Declined
    ModelBase:
      properties:
        guid:
          nullable: true
          type: string
      type: object
    ModelBaseReadOnly:
      properties:
        guid:
          nullable: true
          readOnly: true
          type: string
      type: object
    ModelBaseWithRequiredGuid:
      properties:
        guid:
          minLength: 1
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
      required:
        - guid
      type: object
    ModelWithName:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    MoneyInputModel:
      properties:
        amount:
          format: double
          type: number
        currencyCode:
          minLength: 1
          type: string
      required:
        - amount
        - currencyCode
      type: object
      x-relation: null
    MoneyInputModelWithNotNegativeAmount:
      properties:
        amount:
          format: double
          nullable: true
          type: number
        currencyCode:
          minLength: 1
          type: string
      required:
        - currencyCode
      type: object
      x-relation: null
    MoneyInputModelWithNullableAmount:
      properties:
        amount:
          format: double
          nullable: true
          type: number
        currencyCode:
          minLength: 1
          type: string
      required:
        - currencyCode
      type: object
      x-relation: null
    MoneyOutputModel:
      properties:
        amount:
          format: double
          nullable: true
          type: number
        currencyCode:
          nullable: true
          type: string
        multiCurrencyInfo:
          items:
            $ref: "#/components/schemas/MultiCurrencyInfoModel"
          nullable: true
          type: array
      type: object
      x-relation: null
    MonthlyModel:
      properties:
        dayOfMonth:
          format: int32
          nullable: true
          type: integer
        dayOrdinal:
          $ref: "#/components/schemas/DayOrdinal"
          nullable: true
        dayOrdinalOption:
          $ref: "#/components/schemas/DayOrdinalOption"
          nullable: true
        interval:
          format: int32
          type: integer
      type: object
    Months:
      description: ""
      enum:
        - January
        - February
        - March
        - April
        - May
        - June
        - July
        - August
        - September
        - October
        - November
        - December
      type: string
      x-enumNames:
        - January
        - February
        - March
        - April
        - May
        - June
        - July
        - August
        - September
        - October
        - November
        - December
    MultiCurrencyInfoModel:
      properties:
        amount:
          format: double
          nullable: true
          type: number
        currencyCode:
          nullable: true
          type: string
        purpose:
          items:
            $ref: "#/components/schemas/CurrencyPurpose"
            nullable: false
          nullable: false
          type: array
      type: object
    OrganizationDetailsCountrySubModel:
      properties:
        code:
          nullable: true
          type: string
        englishName:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    OrganizationDetailsFormattingSubModel:
      properties:
        code:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    OrganizationDetailsLanguageSubModel:
      properties:
        code:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    OrganizationDetailsOutputModel:
      properties:
        activeAddons:
          items:
            type: string
          nullable: true
          type: array
        activeCompanies:
          items:
            $ref: "#/components/schemas/CompanyModel"
          nullable: true
          type: array
        address:
          nullable: true
          type: string
        city:
          nullable: true
          type: string
        country:
          $ref: "#/components/schemas/OrganizationDetailsCountrySubModel"
          nullable: true
          x-relation: CountryModel
        currency:
          $ref: "#/components/schemas/CurrencyBaseModel"
          nullable: true
          x-relation: CurrencyOutputModel
        eInvoiceAddress:
          nullable: true
          type: string
        eInvoiceOperatorCode:
          nullable: true
          type: string
        fax:
          nullable: true
          type: string
        formatting:
          $ref: "#/components/schemas/OrganizationDetailsFormattingSubModel"
          nullable: true
          x-relation: FormattingCultureModel
        guid:
          nullable: true
          type: string
        isVatRegistered:
          type: boolean
        kvkNumber:
          maxLength: 25
          minLength: 0
          nullable: true
          type: string
        language:
          $ref: "#/components/schemas/OrganizationDetailsLanguageSubModel"
          nullable: true
          x-relation: LanguageModel
        name:
          nullable: true
          type: string
        odpCompany:
          nullable: true
          type: string
        phone:
          nullable: true
          type: string
        postalCode:
          nullable: true
          type: string
        registeredOffice:
          nullable: true
          type: string
        termsOfServiceApprover:
          $ref: "#/components/schemas/UserWithNameAndPhotoFileModel"
          nullable: true
          x-relation: UserOutputModel
        timezone:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: TimezoneModel
        vatNumber:
          nullable: true
          type: string
      type: object
    OrganizationSettingsModel:
      properties:
        currencyRoundingType:
          $ref: "#/components/schemas/TotalRoundingType"
        defaultFooterColumn1:
          $ref: "#/components/schemas/FreeTextModel"
          nullable: true
        defaultFooterColumn2:
          $ref: "#/components/schemas/FreeTextModel"
          nullable: true
        defaultFooterColumn3:
          $ref: "#/components/schemas/FreeTextModel"
          nullable: true
        displayProjectNumber:
          type: boolean
        flextimeCalculationStartDate:
          format: date
          nullable: true
          type: string
        isAddingNewKeywordsFromProjectAllowed:
          type: boolean
        isCustomerSearchAllowed:
          type: boolean
        isEnteringHourPlannedInvoiceQuantityAllowed:
          default: false
          type: boolean
        isIdenticalPhaseCodesAllowed:
          default: false
          type: boolean
        isTravelExpenseImmediatelyInvoiceable:
          nullable: true
          type: boolean
        isWorkHourDescriptionMandatory:
          default: false
          type: boolean
        lastCustomerNumber:
          format: int64
          readOnly: true
          type: integer
        lastFlextimeCalculationEndTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        lastFlextimeCalculationUser:
          $ref: "#/components/schemas/UserWithFirstNameLastNameModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastInvoiceNumber:
          format: int64
          nullable: true
          readOnly: true
          type: integer
        lastProjectNumber:
          format: int64
          nullable: true
          readOnly: true
          type: integer
        lastPurchaseOrderNumber:
          format: int64
          nullable: true
          readOnly: true
          type: integer
        lastTravelReimbursementNumber:
          format: int64
          nullable: true
          readOnly: true
          type: integer
        maxFlextimeBalanceLimit:
          format: double
          maximum: 1000
          minimum: 0
          nullable: true
          type: number
        minFlextimeBalanceLimit:
          format: double
          maximum: 0
          minimum: -1000
          nullable: true
          type: number
        nextCustomerNumber:
          format: int64
          type: integer
        nextInvoiceNumber:
          format: int32
          type: integer
        nextProjectNumber:
          format: int64
          type: integer
        nextPurchaseOrderNumber:
          format: int32
          nullable: true
          type: integer
        nextTravelReimbursementNumber:
          format: int32
          type: integer
        overdueInterest:
          format: double
          nullable: true
          type: number
        paymentReferenceNumberDisplaySetting:
          $ref: "#/components/schemas/ReferenceNumberDisplay"
        paymentTerm:
          format: int32
          nullable: true
          readOnly: true
          type: integer
        projectNameDisplayFormatSetting:
          $ref: "#/components/schemas/ProjectNameDisplayFormatOptions"
        projectNameDisplaySetting:
          $ref: "#/components/schemas/ProjectNameDisplayOptions"
        purchaseOrderNumberPrefix:
          maxLength: 20
          minLength: 0
          nullable: true
          type: string
        quickSearchSetting:
          $ref: "#/components/schemas/QuickSearchOptions"
        setCreditNoteInvoiceNumber:
          type: boolean
        travelEntryClosingDate:
          format: date
          nullable: true
          type: string
        travelExpenseReimbursementStartDate:
          format: date
          nullable: true
          type: string
        travelReimbursementInstructions:
          nullable: true
          readOnly: true
          type: string
        uniqueIdentifierForProductsAndWorktypes:
          type: boolean
        workHourApprovalMode:
          $ref: "#/components/schemas/WorkHourApprovalMode"
          nullable: true
        workHourEntryFormat:
          $ref: "#/components/schemas/EntryFormat"
        workWeek:
          items:
            $ref: "#/components/schemas/Workweek"
            nullable: false
          type: array
        worktimeEntryClosingDate:
          format: date
          nullable: true
          type: string
      required:
        - workWeek
      type: object
    OvertimeModel:
      properties:
        code:
          minLength: 1
          type: string
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        includeInFlextime:
          nullable: true
          type: boolean
        isActive:
          default: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        multipliesUnitCost:
          default: false
          type: boolean
        name:
          minLength: 1
          type: string
        percentage:
          format: double
          type: number
      required:
        - name
        - code
      type: object
    OvertimePriceModel:
      properties:
        guid:
          nullable: true
          type: string
        overtime:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          x-relation: OvertimeModel
        priceSource:
          $ref: "#/components/schemas/PriceSource"
          readOnly: true
        pricelistVersionGuid:
          nullable: true
          type: string
          x-relation-guid: PricelistVersionOutputModel
        pricingMultiplier:
          format: double
          nullable: true
          type: number
        projectGuid:
          nullable: true
          type: string
          x-relation-guid: ProjectOutputModel
      required:
        - overtime
      type: object
    ParticipantType:
      description: ""
      enum:
        - User
        - Contact
        - Resource
        - Other
      type: string
      x-enumNames:
        - User
        - Contact
        - Resource
        - Other
    PatchOperation:
      properties:
        from:
          nullable: true
          type: string
        op:
          $ref: "#/components/schemas/PatchOperationType"
        path:
          nullable: true
          type: string
        value:
          nullable: true
          type: string
      required:
        - op
      type: object
    PatchOperationType:
      description: ""
      enum:
        - Add
        - Copy
        - Move
        - Remove
        - Replace
      type: string
      x-enumNames:
        - Add
        - Copy
        - Move
        - Remove
        - Replace
    PermissionLevel:
      description: ""
      enum:
        - View
        - Edit
      type: string
      x-enumNames:
        - View
        - Edit
    PermissionProfileModel:
      properties:
        guid:
          nullable: true
          readOnly: true
          type: string
        isAccessible:
          nullable: true
          readOnly: true
          type: boolean
        isActive:
          default: true
          type: boolean
        isDefault:
          type: boolean
        name:
          minLength: 1
          type: string
      required:
        - name
      type: object
    PhaseCustomerSubModel:
      properties:
        guid:
          nullable: true
          type: string
        isInternal:
          type: boolean
        name:
          nullable: true
          type: string
        number:
          format: int64
          nullable: true
          type: integer
      type: object
    PhaseInputModel:
      properties:
        code:
          nullable: true
          type: string
        deadline:
          format: date
          nullable: true
          type: string
        defaultWorkType:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: WorkTypeOutputModel
        isClosed:
          default: false
          type: boolean
        isCompleted:
          default: false
          type: boolean
        isLocked:
          default: false
          type: boolean
        name:
          minLength: 1
          type: string
        originalDeadline:
          format: date
          nullable: true
          type: string
        originalStartDate:
          format: date
          nullable: true
          type: string
        originalWorkHoursEstimate:
          format: double
          nullable: true
          type: number
        parentPhase:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          x-relation: PhaseOutputModel
        phaseStatus:
          $ref: "#/components/schemas/PhaseStatusInputModel"
          nullable: true
        project:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          nullable: true
          x-relation: ProjectOutputModel
        sortOrder:
          format: int32
          nullable: true
          type: integer
        startDate:
          format: date
          nullable: true
          type: string
        workHoursEstimate:
          format: double
          nullable: true
          type: number
      required:
        - name
        - parentPhase
      type: object
    PhaseMemberModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        currentWorkcontractTitle:
          nullable: true
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          readOnly: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        phaseGuid:
          minLength: 1
          type: string
          x-relation-guid: PhaseOutputModel
        user:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          x-relation: UserOutputModel
        workHours:
          format: double
          readOnly: true
          type: number
        workHoursIncludingChildPhases:
          format: double
          readOnly: true
          type: number
      required:
        - phaseGuid
      type: object
    PhaseMemberOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        currentWorkContractTitle:
          nullable: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        phase:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: PhaseOutputModel
        user:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          x-relation: UserOutputModel
      type: object
    PhaseMembersFromBusinessUnitUsersModel:
      properties:
        businessUnitGuid:
          minLength: 1
          type: string
          x-relation-guid: BusinessUnitModel
        phaseGuid:
          minLength: 1
          type: string
          x-relation-guid: PhaseOutputModel
      required:
        - phaseGuid
        - businessUnitGuid
      type: object
    PhaseModelWithHierarchyInfo:
      properties:
        code:
          nullable: true
          type: string
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        currencyCode:
          $ref: "#/components/schemas/CurrencyBaseModel"
          nullable: true
        customer:
          $ref: "#/components/schemas/PhaseCustomerSubModel"
          nullable: true
          readOnly: true
          x-relation: CustomerModel
        deadline:
          format: date
          nullable: true
          type: string
        defaultWorkType:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: WorkTypeOutputModel
        guid:
          nullable: true
          readOnly: true
          type: string
        hasChildren:
          type: boolean
        isCompleted:
          default: false
          type: boolean
        isLocked:
          default: false
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        level:
          format: int32
          type: integer
        name:
          minLength: 1
          type: string
        originalDeadline:
          format: date
          nullable: true
          type: string
        originalStartDate:
          format: date
          nullable: true
          type: string
        originalWorkHoursEstimate:
          format: double
          nullable: true
          type: number
        parentPhase:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          nullable: true
          x-relation: PhaseOutputModel
        phaseStatus:
          $ref: "#/components/schemas/PhaseStatusOutputModel"
          nullable: true
        project:
          $ref: "#/components/schemas/PhaseProjectSubModel"
          nullable: true
          x-relation: ProjectOutputModel
        sortOrder:
          format: int32
          nullable: true
          type: integer
        startDate:
          format: date
          nullable: true
          type: string
        workHoursEstimate:
          format: double
          nullable: true
          type: number
      required:
        - name
      type: object
    PhaseOutputModel:
      properties:
        code:
          nullable: true
          type: string
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        currencyCode:
          $ref: "#/components/schemas/CurrencyBaseModel"
          nullable: true
        deadline:
          format: date
          nullable: true
          type: string
        defaultWorkType:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: WorkTypeOutputModel
        guid:
          nullable: true
          readOnly: true
          type: string
        isCompleted:
          default: false
          type: boolean
        isLocked:
          default: false
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        originalDeadline:
          format: date
          nullable: true
          type: string
        originalStartDate:
          format: date
          nullable: true
          type: string
        originalWorkHoursEstimate:
          format: double
          nullable: true
          type: number
        parentPhase:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          nullable: true
          x-relation: PhaseOutputModel
        phaseStatus:
          $ref: "#/components/schemas/PhaseStatusOutputModel"
          nullable: true
        project:
          $ref: "#/components/schemas/PhaseProjectSubModel"
          nullable: true
          x-relation: ProjectOutputModel
        sortOrder:
          format: int32
          nullable: true
          type: integer
        startDate:
          format: date
          nullable: true
          type: string
        workHoursEstimate:
          format: double
          nullable: true
          type: number
      required:
        - name
      type: object
    PhaseProjectSubModel:
      properties:
        guid:
          minLength: 1
          type: string
        isClosed:
          readOnly: true
          type: boolean
        isInternal:
          readOnly: true
          type: boolean
        name:
          nullable: true
          readOnly: true
          type: string
        number:
          format: int64
          nullable: true
          readOnly: true
          type: integer
      required:
        - guid
      type: object
    PhaseStatusInputModel:
      properties:
        description:
          nullable: true
          type: string
        phaseStatusTypeGuid:
          nullable: true
          type: string
          x-relation-guid: PhaseStatusTypeModel
      type: object
      x-relation: null
    PhaseStatusOutputModel:
      properties:
        description:
          nullable: true
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
        phaseStatusTypeGuid:
          nullable: true
          type: string
          x-relation-guid: PhaseStatusTypeModel
      type: object
      x-relation: null
    PhaseStatusTypeModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          nullable: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        sortOrder:
          format: int32
          type: integer
      required:
        - name
      type: object
    PhaseSubModel:
      properties:
        endDate:
          format: date
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        startDate:
          format: date
          nullable: true
          type: string
      type: object
    PriceListCurrency:
      properties:
        code:
          nullable: true
          type: string
        guid:
          minLength: 1
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
        symbol:
          nullable: true
          type: string
      required:
        - guid
      type: object
    PriceListCurrency2:
      properties:
        code:
          nullable: true
          type: string
        guid:
          minLength: 1
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
        symbol:
          nullable: true
          type: string
      required:
        - guid
      type: object
    PriceListCurrency3:
      properties:
        code:
          nullable: true
          type: string
        guid:
          minLength: 1
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
        symbol:
          nullable: true
          type: string
      required:
        - guid
      type: object
    PriceListModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        currency:
          $ref: "#/components/schemas/PriceListCurrency"
          x-relation: CurrencyOutputModel
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        isCustom:
          readOnly: true
          type: boolean
        isDefault:
          type: boolean
        isVolumePricing:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
      required:
        - name
        - currency
      type: object
    PriceListOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        currency:
          $ref: "#/components/schemas/PriceListCurrency2"
          x-relation: CurrencyOutputModel
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          type: boolean
        isCustom:
          type: boolean
        isDefault:
          type: boolean
        isVolumePricing:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
      required:
        - name
        - currency
      type: object
    PriceModelBase:
      properties:
        guid:
          nullable: true
          type: string
        price:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        priceSource:
          $ref: "#/components/schemas/PriceSource"
        pricelistVersionGuid:
          nullable: true
          type: string
          x-relation-guid: PricelistVersionOutputModel
        projectGuid:
          nullable: true
          type: string
          x-relation-guid: ProjectOutputModel
      type: object
    PriceSource:
      description: ""
      enum:
        - ProductRegistry
        - Pricelist
        - Project
      type: string
      x-enumNames:
        - ProductRegistry
        - Pricelist
        - Project
    PricelistVersionOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        pricelistGuid:
          nullable: true
          type: string
          x-relation-guid: PriceListOutputModel
        startDate:
          format: date
          nullable: true
          type: string
      type: object
    PrintToPdf:
      description: ""
      enum:
        - DoNotPrintToProposal
        - PrintToProposalBottom
        - PrintToProposalBoth
      type: string
      x-enumNames:
        - DoNotPrintToProposal
        - PrintToProposalBottom
        - PrintToProposalBoth
    ProductCategoryModel:
      properties:
        code:
          nullable: true
          type: string
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        isDefault:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
      required:
        - name
      type: object
    ProductCountrySettingsModel:
      properties:
        country:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          x-relation: CountryModel
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        product:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          x-relation: ProductOutputModel
        vatRate:
          format: double
          nullable: true
          type: number
      required:
        - country
        - product
      type: object
    ProductForProjectOutputModel:
      properties:
        isVolumePriced:
          nullable: true
          type: boolean
        product:
          $ref: "#/components/schemas/ProductOutputModel"
          nullable: true
      type: object
    ProductInputModel:
      properties:
        code:
          nullable: true
          type: string
        isActive:
          default: true
          nullable: true
          type: boolean
        measurementUnit:
          nullable: true
          type: string
        name:
          minLength: 1
          type: string
        productCategory:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: ProductCategoryModel
        proposalDescription:
          nullable: true
          type: string
        salesAccount:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: SalesAccountModel
        type:
          $ref: "#/components/schemas/ProductType"
          nullable: true
        unitCost:
          $ref: "#/components/schemas/MoneyInputModelWithNullableAmount"
          nullable: true
        unitPrice:
          $ref: "#/components/schemas/MoneyInputModelWithNullableAmount"
          nullable: true
        vatRate:
          format: double
          nullable: true
          type: number
      required:
        - name
      type: object
    ProductOutputModel:
      properties:
        code:
          nullable: true
          type: string
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          nullable: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        measurementUnit:
          nullable: true
          type: string
        name:
          minLength: 1
          type: string
        productCategory:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: ProductCategoryModel
        proposalDescription:
          nullable: true
          type: string
        salesAccount:
          $ref: "#/components/schemas/ProductSalesAccountSubModel"
          nullable: true
          x-relation: SalesAccountModel
        type:
          $ref: "#/components/schemas/ProductType"
          nullable: true
        unitCost:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        unitPrice:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        vatRate:
          format: double
          nullable: true
          type: number
      required:
        - name
      type: object
    ProductPriceModel:
      properties:
        guid:
          nullable: true
          type: string
        price:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        priceSource:
          $ref: "#/components/schemas/PriceSource"
        pricelistVersionGuid:
          nullable: true
          type: string
          x-relation-guid: PricelistVersionOutputModel
        projectGuid:
          nullable: true
          type: string
          x-relation-guid: ProjectOutputModel
        quantity:
          format: double
          nullable: true
          type: number
      type: object
    ProductPriceOutputModel:
      properties:
        isAvailable:
          type: boolean
        isVolumePriced:
          type: boolean
        prices:
          items:
            $ref: "#/components/schemas/ProductPriceModel"
          nullable: true
          type: array
        product:
          $ref: "#/components/schemas/ProductPriceProductOutputSubModel"
          nullable: true
          x-relation: ProductOutputModel
      type: object
    ProductPriceProductOutputSubModel:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        productCategory:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: ProductCategoryModel
        productCode:
          nullable: true
          readOnly: true
          type: string
        productType:
          $ref: "#/components/schemas/ProductType"
          nullable: true
          readOnly: true
      type: object
    ProductSalesAccountSubModel:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        number:
          nullable: true
          type: string
      type: object
    ProductSalesAccountSubModel2:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        number:
          nullable: true
          type: string
      type: object
    ProductType:
      description: ""
      enum:
        - FixedFees
        - Materials
        - Subcontracting
      type: string
      x-enumNames:
        - OwnWork
        - Products
        - Subcontracting
    ProjectBillingCustomerModel:
      properties:
        billingCustomer:
          $ref: "#/components/schemas/BillingCustomerModel"
          x-relation: CustomerModel
        canBeDeleted:
          readOnly: true
          type: boolean
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isDefault:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        project:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          x-relation: ProjectOutputModel
      required:
        - project
        - billingCustomer
      type: object
    ProjectBillingCustomerModel2:
      properties:
        billingAddress:
          $ref: "#/components/schemas/BillingAddressModel"
          nullable: true
          x-relation: AddressModel
        billingContact:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: ContactModel
        billingCustomer:
          $ref: "#/components/schemas/BillingCustomerModel"
          x-relation: CustomerModel
        canBeDeleted:
          readOnly: true
          type: boolean
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isDefault:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        project:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          x-relation: ProjectOutputModel
      required:
        - project
        - billingCustomer
      type: object
    ProjectCostCenterSubModel:
      properties:
        guid:
          nullable: true
          type: string
        identifier:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    ProjectCustomPropertySelectionItemInputModel:
      properties:
        isActive:
          default: true
          type: boolean
        name:
          nullable: true
          type: string
        projectCustomProperty:
          $ref: "#/components/schemas/SimpleInputModel"
          x-relation: CustomPropertyModel
        sortOrder:
          format: int32
          nullable: true
          type: integer
      required:
        - projectCustomProperty
      type: object
    ProjectCustomPropertySelectionItemOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        projectCustomProperty:
          $ref: "#/components/schemas/CustomPropertyShortModel"
          nullable: true
          x-relation: CustomPropertyModel
        sortOrder:
          format: int32
          nullable: true
          type: integer
      required:
        - name
      type: object
    ProjectCustomValueModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customProperty:
          $ref: "#/components/schemas/CustomPropertyShortModel"
          x-relation: CustomPropertyModel
        guid:
          nullable: true
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        projectGuid:
          nullable: true
          type: string
          x-relation-guid: ProjectOutputModel
        value:
          nullable: true
          type: string
      required:
        - customProperty
      type: object
    ProjectCustomerSubModel:
      properties:
        guid:
          minLength: 1
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
        number:
          format: int64
          nullable: true
          type: integer
      required:
        - guid
      type: object
    ProjectFeeBillingScheduleType:
      description: ""
      enum:
        - Immediately
        - OnDate
        - WhenPhaseCompleted
        - Recurring
      type: string
      x-enumNames:
        - Immediately
        - OnDate
        - WhenTaskIsCompleted
        - Recurring
    ProjectFeeCustomerSubModel:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        number:
          format: int64
          nullable: true
          type: integer
      type: object
    ProjectFeeInputModel:
      properties:
        billingDependencyPhase:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: PhaseOutputModel
        billingSchedule:
          $ref: "#/components/schemas/ProjectFeeBillingScheduleType"
          nullable: true
        costCenter:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: CostCenterModel
        description:
          nullable: true
          type: string
        displayPeriodStartDate:
          format: date
          nullable: true
          type: string
        eventDate:
          format: date
          nullable: true
          type: string
        hasVolumePricing:
          type: boolean
        invoice:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: PhaseOutputModel
        invoiceQuantity:
          format: double
          nullable: true
          type: number
        invoiceRowComment:
          nullable: true
          type: string
        invoiceRowDescription:
          nullable: true
          type: string
        isBillable:
          nullable: true
          type: boolean
        measurementUnit:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        phase:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: PhaseOutputModel
        plannedBillingDate:
          format: date
          nullable: true
          type: string
        product:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: ProductOutputModel
        productType:
          $ref: "#/components/schemas/ProductType"
          nullable: true
        project:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: ProjectOutputModel
        quantity:
          format: double
          type: number
        salesAccount:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: SalesAccountModel
        unitCost:
          $ref: "#/components/schemas/MoneyInputModelWithNullableAmount"
          nullable: true
        unitPrice:
          $ref: "#/components/schemas/MoneyInputModelWithNullableAmount"
          nullable: true
        user:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: UserOutputModel
        vatRate:
          format: double
          nullable: true
          type: number
      required:
        - project
      type: object
    ProjectFeeInvoiceSubModel:
      properties:
        date:
          format: date
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        number:
          format: int32
          nullable: true
          type: integer
      type: object
    ProjectFeeOutputModel:
      properties:
        billingDependencyPhase:
          $ref: "#/components/schemas/ProjectFeePhaseSubModel"
          nullable: true
          x-relation: PhaseOutputModel
        billingSchedule:
          $ref: "#/components/schemas/ProjectFeeBillingScheduleType"
          nullable: true
        costCenter:
          $ref: "#/components/schemas/ProjectCostCenterSubModel"
          nullable: true
          x-relation: CostCenterModel
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/ProjectFeeCustomerSubModel"
          nullable: true
          x-relation: CustomerModel
        description:
          nullable: true
          type: string
        displayPeriodStartDate:
          format: date
          nullable: true
          type: string
        eventDate:
          format: date
          nullable: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        hasVolumePricing:
          type: boolean
        invoice:
          $ref: "#/components/schemas/ProjectFeeInvoiceSubModel"
          nullable: true
          x-relation: PhaseOutputModel
        invoiceQuantity:
          format: double
          nullable: true
          type: number
        invoiceRowComment:
          nullable: true
          type: string
        invoiceRowDescription:
          nullable: true
          type: string
        invoiceRowGuid:
          nullable: true
          type: string
          x-relation-guid: InvoiceRowOutputModel
        isBillable:
          nullable: true
          type: boolean
        isRecurrenceRule:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        measurementUnit:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        phase:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: PhaseOutputModel
        plannedBillingDate:
          format: date
          nullable: true
          type: string
        product:
          $ref: "#/components/schemas/ProjectFeeProductSubModel"
          nullable: true
          x-relation: ProductOutputModel
        productType:
          $ref: "#/components/schemas/ProductType"
          nullable: true
        project:
          $ref: "#/components/schemas/ProjectFeeProjectSubModel"
          nullable: true
          x-relation: ProjectOutputModel
        quantity:
          format: double
          type: number
        recurrenceRuleGuid:
          nullable: true
          type: string
          x-relation-guid: ActivityRecurrenceModel
        salesAccount:
          $ref: "#/components/schemas/ProjectSalesAccountSubModel"
          nullable: true
          x-relation: SalesAccountModel
        unitCost:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        unitPrice:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        user:
          $ref: "#/components/schemas/UserSubModel"
          nullable: true
          x-relation: UserOutputModel
        vatRate:
          format: double
          nullable: true
          type: number
      type: object
    ProjectFeePhaseSubModel:
      properties:
        guid:
          nullable: true
          type: string
        isCompleted:
          type: boolean
        name:
          nullable: true
          type: string
      type: object
    ProjectFeeProductSubModel:
      properties:
        code:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    ProjectFeeProjectSubModel:
      properties:
        companyGuid:
          nullable: true
          type: string
          x-relation-guid: CompanyModel
        guid:
          minLength: 1
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
      required:
        - guid
      type: object
    ProjectFileModel:
      properties:
        category:
          $ref: "#/components/schemas/FileCategory"
          readOnly: true
        contentType:
          nullable: true
          readOnly: true
          type: string
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        description:
          nullable: true
          type: string
        fileGuid:
          nullable: true
          type: string
          x-relation-guid: FileModel
        guid:
          nullable: true
          readOnly: true
          type: string
        isInternal:
          nullable: true
          type: boolean
        isReadOnly:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        projectGuid:
          minLength: 1
          readOnly: true
          type: string
          x-relation-guid: ProjectOutputModel
        size:
          format: double
          nullable: true
          readOnly: true
          type: number
        usages:
          items:
            $ref: "#/components/schemas/UsageModel"
          nullable: true
          type: array
      required:
        - name
        - projectGuid
      type: object
    ProjectForecastInputModel:
      properties:
        billingForecast:
          $ref: "#/components/schemas/MoneyInputModelWithNullableAmount"
          nullable: true
        billingForecastNotes:
          nullable: true
          type: string
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        expenseForecast:
          $ref: "#/components/schemas/MoneyInputModelWithNullableAmount"
          nullable: true
        expenseForecastNotes:
          nullable: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        laborExpenseForecast:
          $ref: "#/components/schemas/MoneyInputModelWithNullableAmount"
          nullable: true
        laborExpenseForecastNotes:
          nullable: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        month:
          format: int32
          maximum: 12
          minimum: 1
          type: integer
        project:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: ProjectOutputModel
        revenueForecast:
          $ref: "#/components/schemas/MoneyInputModelWithNullableAmount"
          nullable: true
        revenueForecastNotes:
          nullable: true
          type: string
        year:
          format: int32
          maximum: 2075
          minimum: 1900
          type: integer
      required:
        - project
        - month
        - year
      type: object
    ProjectForecastOutputModel:
      properties:
        billingForecast:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        billingForecastNotes:
          nullable: true
          type: string
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          nullable: true
          type: string
        expenseForecast:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        expenseForecastNotes:
          nullable: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        laborExpenseForecast:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        laborExpenseForecastNotes:
          nullable: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        month:
          format: int32
          nullable: true
          type: integer
        project:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          nullable: true
          x-relation: ProjectOutputModel
        revenueForecast:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        revenueForecastNotes:
          nullable: true
          type: string
        year:
          format: int32
          nullable: true
          type: integer
      type: object
    ProjectInputModelBase:
      properties:
        billingContact:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: ContactModel
        businessUnit:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          nullable: true
          x-relation: BusinessUnitModel
        completionEstimatePercentage:
          format: int32
          nullable: true
          type: integer
        costCenter:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: CostCenterModel
        currency:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          nullable: true
          x-relation: CurrencyOutputModel
        customer:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: CustomerModel
        customerContact:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: ContactModel
        deadline:
          format: date
          nullable: true
          type: string
        description:
          nullable: true
          type: string
        expectedOrderDate:
          format: date
          nullable: true
          type: string
        expectedValue:
          $ref: "#/components/schemas/MoneyInputModelWithNullableAmount"
          nullable: true
        internalName:
          nullable: true
          type: string
        invoiceNotes:
          nullable: true
          type: string
        invoiceTemplate:
          $ref: "#/components/schemas/InvoiceTemplateSubModel"
          nullable: true
          x-relation: InvoiceTemplateModel
        isClosed:
          type: boolean
        isInternal:
          type: boolean
        isJoiningAllowed:
          default: true
          type: boolean
        leadSource:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: LeadSourceModel
        name:
          minLength: 1
          type: string
        number:
          format: int64
          nullable: true
          type: integer
        orderNumber:
          nullable: true
          type: string
        ourReference:
          nullable: true
          type: string
        paymentTerm:
          format: int32
          nullable: true
          type: integer
        probability:
          format: int32
          nullable: true
          type: integer
        projectOwner:
          $ref: "#/components/schemas/SimpleInputModel"
          x-relation: UserOutputModel
        projectStatus:
          $ref: "#/components/schemas/SimpleProjectStatusInputModel"
          nullable: true
        salesPerson:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: UserOutputModel
        salesStatus:
          $ref: "#/components/schemas/SimpleSalesStatusInputModel"
          nullable: true
        startDate:
          format: date
          nullable: true
          type: string
        useOvertimeMultipliers:
          default: true
          type: boolean
        useProductsFromSetting:
          default: true
          type: boolean
        useWorktypesFromSetting:
          default: true
          type: boolean
        yourReference:
          nullable: true
          type: string
      required:
        - name
        - customer
        - projectOwner
      type: object
    ProjectInvoiceSettingsInputModel:
      properties:
        freeText1:
          $ref: "#/components/schemas/TemplateFreeTextModel"
          nullable: true
        freeText2:
          $ref: "#/components/schemas/TemplateFreeTextModel"
          nullable: true
        htmlText1:
          $ref: "#/components/schemas/TemplateFreeTextModel"
          nullable: true
        htmlText2:
          $ref: "#/components/schemas/TemplateFreeTextModel"
          nullable: true
        project:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: ProjectOutputModel
        projectFeeDescriptionFormat:
          nullable: true
          type: string
        projectFeeGrouping:
          $ref: "#/components/schemas/InvoiceGrouping"
          nullable: true
        projectFeePrimaryGroupBy:
          nullable: true
          type: string
        projectFeeSecondaryGroupBy:
          nullable: true
          type: string
        projectTravelExpenseDescriptionFormat:
          nullable: true
          type: string
        projectTravelExpenseGrouping:
          $ref: "#/components/schemas/InvoiceGrouping"
          nullable: true
        projectTravelExpensePrimaryGroupBy:
          nullable: true
          type: string
        projectTravelExpenseSecondaryGroupBy:
          nullable: true
          type: string
        showAttachmentPriceExcludingValueAddedTax:
          nullable: true
          type: boolean
        showAttachmentUnit:
          nullable: true
          type: boolean
        showAttachmentUnitPrice:
          nullable: true
          type: boolean
        showAttachmentValueAddedTax:
          nullable: true
          type: boolean
        showCategories:
          nullable: true
          type: boolean
        showFooter:
          nullable: true
          type: boolean
        showLogoAndTitle:
          nullable: true
          type: boolean
        showPriceExcludingValueAddedTax:
          nullable: true
          type: boolean
        showQuantity:
          nullable: true
          type: boolean
        showReferenceNumber:
          nullable: true
          type: boolean
        showUnit:
          nullable: true
          type: boolean
        showUnitPrice:
          nullable: true
          type: boolean
        showValueAddedTax:
          nullable: true
          type: boolean
        style:
          $ref: "#/components/schemas/InvoiceSkin"
          nullable: true
        workHourDescriptionFormat:
          nullable: true
          type: string
        workHourGrouping:
          $ref: "#/components/schemas/InvoiceGrouping"
          nullable: true
        workHourPrimaryGroupBy:
          nullable: true
          type: string
        workHourSecondaryGroupBy:
          nullable: true
          type: string
      required:
        - project
      type: object
    ProjectInvoiceSettingsOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        freeText1:
          $ref: "#/components/schemas/TemplateFreeTextModel"
          nullable: true
        freeText2:
          $ref: "#/components/schemas/TemplateFreeTextModel"
          nullable: true
        guid:
          nullable: true
          readOnly: true
          type: string
        htmlText1:
          $ref: "#/components/schemas/TemplateFreeTextModel"
          nullable: true
        htmlText2:
          $ref: "#/components/schemas/TemplateFreeTextModel"
          nullable: true
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        project:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: ProjectOutputModel
        projectFeeDescriptionFormat:
          nullable: true
          type: string
        projectFeeGrouping:
          $ref: "#/components/schemas/InvoiceGrouping"
          nullable: true
        projectFeePrimaryGroupBy:
          nullable: true
          type: string
        projectFeeSecondaryGroupBy:
          nullable: true
          type: string
        projectTravelExpenseDescriptionFormat:
          nullable: true
          type: string
        projectTravelExpenseGrouping:
          $ref: "#/components/schemas/InvoiceGrouping"
          nullable: true
        projectTravelExpensePrimaryGroupBy:
          nullable: true
          type: string
        projectTravelExpenseSecondaryGroupBy:
          nullable: true
          type: string
        showAttachmentPriceExcludingValueAddedTax:
          nullable: true
          type: boolean
        showAttachmentUnit:
          nullable: true
          type: boolean
        showAttachmentUnitPrice:
          nullable: true
          type: boolean
        showAttachmentValueAddedTax:
          nullable: true
          type: boolean
        showCategories:
          nullable: true
          type: boolean
        showFooter:
          nullable: true
          type: boolean
        showLogoAndTitle:
          nullable: true
          type: boolean
        showPriceExcludingValueAddedTax:
          nullable: true
          type: boolean
        showQuantity:
          nullable: true
          type: boolean
        showReferenceNumber:
          nullable: true
          type: boolean
        showUnit:
          nullable: true
          type: boolean
        showUnitPrice:
          nullable: true
          type: boolean
        showValueAddedTax:
          nullable: true
          type: boolean
        style:
          $ref: "#/components/schemas/InvoiceSkin"
          nullable: true
        workHourDescriptionFormat:
          nullable: true
          type: string
        workHourGrouping:
          $ref: "#/components/schemas/InvoiceGrouping"
          nullable: true
        workHourPrimaryGroupBy:
          nullable: true
          type: string
        workHourSecondaryGroupBy:
          nullable: true
          type: string
      type: object
    ProjectInvoiceTemplateSubModel:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        templateInvoiceGuid:
          deprecated: true
          nullable: true
          type: string
          x-deprecatedMessage: Not in use anymore.
          x-relation-guid: InvoiceTemplateModel
      type: object
    ProjectKeywordModel:
      properties:
        category:
          $ref: "#/components/schemas/KeywordCategory"
          default: Case
          readOnly: true
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        keyword:
          minLength: 1
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
      required:
        - keyword
      type: object
    ProjectMemberCostExceptionInputModel:
      properties:
        cost:
          $ref: "#/components/schemas/MoneyInputModelWithNullableAmount"
          nullable: true
        project:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: ProjectOutputModel
        user:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: UserOutputModel
      required:
        - user
        - project
      type: object
    ProjectMemberCostExceptionOutputModel:
      properties:
        cost:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/ProjectMemberCostExceptionProjectCustomerSubModel"
          nullable: true
          x-relation: CustomerModel
        guid:
          nullable: true
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        project:
          $ref: "#/components/schemas/ProjectMemberCostExceptionProjectSubModel"
          nullable: true
          x-relation: ProjectOutputModel
        user:
          $ref: "#/components/schemas/UserWithFirstNameLastNamePhotoFileModelAndRequiredGuid"
          nullable: true
          x-relation: UserOutputModel
      type: object
    ProjectMemberCostExceptionProjectCustomerSubModel:
      properties:
        guid:
          minLength: 1
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
        number:
          format: int64
          nullable: true
          type: integer
      required:
        - guid
      type: object
    ProjectMemberCostExceptionProjectSubModel:
      properties:
        guid:
          minLength: 1
          type: string
        isClosed:
          type: boolean
        name:
          nullable: true
          readOnly: true
          type: string
        number:
          format: int64
          nullable: true
          type: integer
      required:
        - guid
      type: object
    ProjectNameDisplayFormatOptions:
      description: ""
      enum:
        - ProjectNamePhaseName
        - CustomerNameProjectNamePhaseName
      type: string
      x-enumNames:
        - ProjectNamePhaseName
        - CustomerNameProjectNamePhaseName
    ProjectNameDisplayOptions:
      description: ""
      enum:
        - ShowProjectLongName
        - ShowProjectShortName
      type: string
      x-enumNames:
        - ShowProjectLongName
        - ShowProjectShortName
    ProjectOutputModel:
      properties:
        billingContact:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          x-relation: ContactModel
        businessUnit:
          $ref: "#/components/schemas/BusinessUnitSubModel"
          nullable: true
          x-relation: BusinessUnitModel
        calculatedCompletionPercentage:
          format: int32
          nullable: true
          type: integer
        closedDate:
          format: date
          nullable: true
          type: string
        completionEstimatePercentage:
          format: int32
          nullable: true
          type: integer
        costCenter:
          $ref: "#/components/schemas/ProjectCostCenterSubModel"
          nullable: true
          x-relation: CostCenterModel
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        currency:
          $ref: "#/components/schemas/CurrencySubModel2"
          nullable: true
          x-relation: CurrencyOutputModel
        customer:
          $ref: "#/components/schemas/ProjectCustomerSubModel"
          nullable: true
          x-relation: CustomerModel
        customerContact:
          $ref: "#/components/schemas/CustomerContactSubModel"
          nullable: true
          x-relation: ContactModel
        deadline:
          format: date
          nullable: true
          type: string
        defaultWorkType:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: WorkTypeOutputModel
        description:
          nullable: true
          type: string
        expectedOrderDate:
          format: date
          nullable: true
          type: string
        expectedValue:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        guid:
          nullable: true
          readOnly: true
          type: string
        internalName:
          nullable: true
          type: string
        invoiceNotes:
          nullable: true
          type: string
        invoiceTemplate:
          $ref: "#/components/schemas/ProjectInvoiceTemplateSubModel"
          nullable: true
          x-relation: InvoiceTemplateModel
        isClosed:
          type: boolean
        isDailyAllowanceBillable:
          type: boolean
        isInternal:
          type: boolean
        isJoiningAllowed:
          default: true
          type: boolean
        isMileageBillable:
          type: boolean
        isOtherTravelExpensesBillable:
          type: boolean
        keywords:
          items:
            $ref: "#/components/schemas/ModelWithName"
          nullable: true
          type: array
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        leadSource:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: LeadSourceModel
        name:
          minLength: 1
          type: string
        number:
          format: int64
          nullable: true
          type: integer
        orderNumber:
          nullable: true
          type: string
        ourReference:
          nullable: true
          type: string
        paymentTerm:
          format: int32
          nullable: true
          type: integer
        pricelist:
          $ref: "#/components/schemas/ProjectPricelistSubModel"
          nullable: true
          x-relation: PriceListOutputModel
        probability:
          format: int32
          nullable: true
          type: integer
        projectOwner:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          x-relation: UserOutputModel
        projectStatus:
          $ref: "#/components/schemas/ProjectStatusSubModel"
          nullable: true
        rootPhase:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: PhaseOutputModel
        salesPerson:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          x-relation: UserOutputModel
        salesStatus:
          $ref: "#/components/schemas/SalesStatusSubModel"
          nullable: true
        startDate:
          format: date
          nullable: true
          type: string
        useOvertimeMultipliers:
          default: true
          type: boolean
        useProductsFromSetting:
          default: true
          type: boolean
        useWorkTypesFromSetting:
          default: true
          type: boolean
        yourReference:
          nullable: true
          type: string
      required:
        - name
      type: object
    ProjectPricelistSubModel:
      properties:
        guid:
          nullable: true
          type: string
        isCustom:
          type: boolean
        isVolumePricing:
          type: boolean
        name:
          nullable: true
          type: string
      type: object
    ProjectProductInputModel:
      properties:
        guid:
          nullable: true
          type: string
        product:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: ProductOutputModel
        project:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: ProjectOutputModel
      required:
        - project
        - product
      type: object
    ProjectProductOutputModel:
      properties:
        guid:
          nullable: true
          type: string
        product:
          $ref: "#/components/schemas/ProjectProductSubModel"
          x-relation: ProductOutputModel
        project:
          $ref: "#/components/schemas/ProjectSubModel"
          nullable: true
          x-relation: ProjectOutputModel
      required:
        - product
      type: object
    ProjectProductSubModel:
      properties:
        guid:
          minLength: 1
          type: string
        isActive:
          readOnly: true
          type: boolean
        name:
          nullable: true
          readOnly: true
          type: string
        productCategory:
          nullable: true
          readOnly: true
          type: string
        productCode:
          nullable: true
          type: string
        productType:
          $ref: "#/components/schemas/TypeOfProduct"
          readOnly: true
      required:
        - guid
      type: object
    ProjectRecurringFeeRuleInputModel:
      properties:
        costCenter:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: CostCenterModel
        description:
          nullable: true
          type: string
        displayPeriodStartDate:
          format: date
          nullable: true
          type: string
        frequency:
          format: int32
          type: integer
        hasVolumePricing:
          type: boolean
        isActive:
          default: true
          type: boolean
        measurementUnit:
          nullable: true
          type: string
        phase:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: PhaseOutputModel
        product:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: ProductOutputModel
        productType:
          $ref: "#/components/schemas/ProductType"
          nullable: true
        project:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: ProjectOutputModel
        quantity:
          format: double
          type: number
        recurrenceEndDate:
          format: date
          nullable: true
          type: string
        recurrenceEndType:
          $ref: "#/components/schemas/RecurrenceEndTypes"
          nullable: true
        recurrenceStartDate:
          format: date
          nullable: true
          type: string
        recurrenceTimes:
          format: int32
          nullable: true
          type: integer
        recurringSalesAccount:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: SalesAccountModel
        salesAccount:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: SalesAccountModel
        unitCost:
          $ref: "#/components/schemas/MoneyInputModelWithNullableAmount"
          nullable: true
        unitPrice:
          $ref: "#/components/schemas/MoneyInputModelWithNullableAmount"
          nullable: true
        user:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: UserOutputModel
        vatRate:
          format: double
          nullable: true
          type: number
      required:
        - frequency
        - project
      type: object
    ProjectRecurringFeeRuleOutputModel:
      properties:
        costCenter:
          $ref: "#/components/schemas/ProjectCostCenterSubModel"
          nullable: true
          x-relation: CostCenterModel
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/ProjectFeeCustomerSubModel"
          nullable: true
          x-relation: CustomerModel
        description:
          nullable: true
          type: string
        displayPeriodStartDate:
          format: date
          nullable: true
          type: string
        frequency:
          format: int32
          nullable: true
          type: integer
        generatedTimes:
          format: int32
          type: integer
        guid:
          nullable: true
          readOnly: true
          type: string
        hasVolumePricing:
          type: boolean
        isActive:
          default: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        measurementUnit:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        phase:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: PhaseOutputModel
        product:
          $ref: "#/components/schemas/ProjectFeeProductSubModel"
          nullable: true
          x-relation: ProductOutputModel
        productType:
          $ref: "#/components/schemas/ProductType"
          nullable: true
        project:
          $ref: "#/components/schemas/ProjectFeeProjectSubModel"
          nullable: true
          x-relation: ProjectOutputModel
        quantity:
          format: double
          type: number
        recurrenceEndDate:
          format: date
          nullable: true
          type: string
        recurrenceEndType:
          $ref: "#/components/schemas/RecurrenceEndTypes"
          nullable: true
        recurrenceStartDate:
          format: date
          nullable: true
          type: string
        recurrenceTimes:
          format: int32
          nullable: true
          type: integer
        recurringSalesAccount:
          $ref: "#/components/schemas/ProjectSalesAccountSubModel"
          nullable: true
          x-relation: SalesAccountModel
        salesAccount:
          $ref: "#/components/schemas/ProjectSalesAccountSubModel"
          nullable: true
          x-relation: SalesAccountModel
        unitCost:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        unitPrice:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        user:
          $ref: "#/components/schemas/UserSubModel"
          nullable: true
          x-relation: UserOutputModel
        vatRate:
          format: double
          nullable: true
          type: number
      type: object
    ProjectSalesAccountSubModel:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        number:
          nullable: true
          type: string
      type: object
    ProjectSalesNoteInputModel:
      properties:
        note:
          nullable: true
          type: string
        project:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: ProjectOutputModel
        user:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: UserOutputModel
      required:
        - user
        - project
      type: object
    ProjectSalesNoteOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isDeleted:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        note:
          nullable: true
          type: string
        project:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: ProjectOutputModel
        user:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: UserOutputModel
      type: object
    ProjectStatusSubModel:
      properties:
        description:
          nullable: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        name:
          nullable: true
          type: string
        projectStatusTypeGuid:
          nullable: true
          type: string
          x-relation-guid: PhaseStatusTypeModel
      type: object
      x-relation: null
    ProjectStatusTypeModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        sortOrder:
          format: int32
          type: integer
      required:
        - name
      type: object
    ProjectSubModel:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        number:
          format: int64
          nullable: true
          type: integer
      type: object
    ProjectTaskStatusModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        isDefault:
          type: boolean
        isDone:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        sortOrder:
          format: int32
          type: integer
      required:
        - name
      type: object
    ProjectTravelExpenseBillingScheduleType:
      description: ""
      enum:
        - Immediately
        - WhenPhaseCompleted
        - OnDate
      type: string
      x-enumNames:
        - Immediately
        - WhenPhaseCompleted
        - OnDate
    ProjectTravelExpenseFileModel:
      properties:
        category:
          $ref: "#/components/schemas/FileCategory"
          readOnly: true
        contentType:
          nullable: true
          readOnly: true
          type: string
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        description:
          nullable: true
          type: string
        fileGuid:
          nullable: true
          readOnly: true
          type: string
          x-relation-guid: FileModel
        guid:
          nullable: true
          readOnly: true
          type: string
        isInternal:
          nullable: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        size:
          format: double
          nullable: true
          readOnly: true
          type: number
        source:
          $ref: "#/components/schemas/TravelReimbursementAttachmentSource"
          readOnly: true
        travelExpenseGuid:
          nullable: true
          readOnly: true
          type: string
          x-relation-guid: ProjectTravelExpenseOutputModel
      required:
        - name
      type: object
    ProjectTravelExpenseInputModel:
      properties:
        billingDependencyPhase:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: PhaseOutputModel
        billingSchedule:
          $ref: "#/components/schemas/ProjectTravelExpenseBillingScheduleType"
          nullable: true
        costAccount:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: CostAccountModel
        costCenter:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: CostCenterModel
        description:
          nullable: true
          type: string
        eventDate:
          format: date
          nullable: true
          type: string
        invoice:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: PhaseOutputModel
        invoiceQuantity:
          format: double
          nullable: true
          type: number
        invoiceRowComment:
          nullable: true
          type: string
        invoiceRowDescription:
          nullable: true
          type: string
        isBillable:
          nullable: true
          type: boolean
        measurementUnit:
          nullable: true
          type: string
        phase:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: PhaseOutputModel
        plannedBillingDate:
          format: date
          nullable: true
          type: string
        project:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: ProjectOutputModel
        purchaseVatRate:
          format: double
          nullable: true
          type: number
        quantity:
          format: double
          type: number
        salesAccount:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: SalesAccountModel
        travelEndTime:
          format: date-time
          nullable: true
          type: string
        travelExpense:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: TravelExpenseTypeOutputModel
        travelReimbursement:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: TravelReimbursementOutputModel
        travelReimbursementRequired:
          default: true
          type: boolean
        travelStartTime:
          format: date-time
          nullable: true
          type: string
        unitCost:
          $ref: "#/components/schemas/MoneyInputModel"
          nullable: true
        unitPrice:
          $ref: "#/components/schemas/MoneyInputModel"
          nullable: true
        user:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: UserOutputModel
        vatRate:
          format: double
          nullable: true
          type: number
      required:
        - phase
        - project
        - quantity
        - travelExpense
        - user
      type: object
    ProjectTravelExpenseOutputModel:
      properties:
        attachmentCount:
          format: int32
          type: integer
        billingDependencyPhase:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: PhaseOutputModel
        billingSchedule:
          $ref: "#/components/schemas/ProjectTravelExpenseBillingScheduleType"
          nullable: true
        costAccount:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: CostAccountModel
        costCenter:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: CostCenterModel
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: CustomerModel
        description:
          nullable: true
          type: string
        eventDate:
          format: date
          nullable: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        invoice:
          $ref: "#/components/schemas/InvoiceSubModel"
          nullable: true
          x-relation: InvoiceSubModel
        invoiceQuantity:
          format: double
          nullable: true
          type: number
        invoiceRowComment:
          nullable: true
          type: string
        invoiceRowDescription:
          nullable: true
          type: string
        invoiceRowGuid:
          nullable: true
          type: string
          x-relation-guid: InvoiceRowOutputModel
        isBillable:
          nullable: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        measurementUnit:
          nullable: true
          type: string
        phase:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          nullable: true
          x-relation: PhaseOutputModel
        plannedBillingDate:
          format: date
          nullable: true
          type: string
        project:
          $ref: "#/components/schemas/ProjectTravelExpenseProjectSubModel"
          nullable: true
          x-relation: ProjectOutputModel
        purchaseVatRate:
          format: double
          nullable: true
          type: number
        quantity:
          format: double
          nullable: true
          type: number
        salesAccount:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: SalesAccountModel
        travelEndTime:
          format: date-time
          nullable: true
          type: string
        travelExpense:
          $ref: "#/components/schemas/TravelExpenseSubModel"
          nullable: true
          x-relation: TravelExpenseTypeOutputModel
        travelReimbursement:
          $ref: "#/components/schemas/TravelReimbursementSubModel"
          nullable: true
          x-relation: TravelReimbursementSubModel
        travelReimbursementRequired:
          default: true
          type: boolean
        travelStartTime:
          format: date-time
          nullable: true
          type: string
        unitCost:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        unitCostExcludingPurchaseVat:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        unitPrice:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        user:
          $ref: "#/components/schemas/UserRequiredSubModel"
          nullable: true
          x-relation: UserOutputModel
        vatRate:
          format: double
          nullable: true
          type: number
      type: object
    ProjectTravelExpenseProjectSubModel:
      properties:
        companyGuid:
          nullable: true
          type: string
          x-relation-guid: CompanyModel
        guid:
          minLength: 1
          type: string
        isInternal:
          type: boolean
        name:
          nullable: true
          readOnly: true
          type: string
        number:
          format: int64
          nullable: true
          type: integer
      required:
        - guid
      type: object
    ProjectWorkHourPriceInputModel:
      properties:
        isBillable:
          default: true
          nullable: true
          type: boolean
        phase:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          nullable: true
          x-relation: PhaseOutputModel
        project:
          $ref: "#/components/schemas/SimpleInputModel"
          x-relation: ProjectOutputModel
        unitPrice:
          $ref: "#/components/schemas/MoneyInputModel"
        user:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: UserOutputModel
        workType:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: WorkTypeOutputModel
      required:
        - unitPrice
        - project
      type: object
    ProjectWorkHourPriceOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isAvailable:
          type: boolean
        isBillable:
          nullable: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        phase:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          nullable: true
          x-relation: PhaseOutputModel
        project:
          $ref: "#/components/schemas/ProjectSubModel"
          nullable: true
          x-relation: ProjectOutputModel
        unitPrice:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        user:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: UserOutputModel
        workType:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: WorkTypeOutputModel
      type: object
    ProjectWorkTypeModel:
      properties:
        guid:
          nullable: true
          type: string
        isDefault:
          type: boolean
        projectGuid:
          minLength: 1
          type: string
          x-relation-guid: ProjectOutputModel
        worktype:
          $ref: "#/components/schemas/WorkTypeSubModel"
          x-relation: WorkTypeOutputModel
      required:
        - projectGuid
        - worktype
      type: object
    ProposalBillingAddressSubModel:
      properties:
        addressline:
          nullable: true
          type: string
        city:
          nullable: true
          type: string
        country:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        postalCode:
          nullable: true
          type: string
      type: object
    ProposalCustomerSubModel:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        number:
          format: int64
          nullable: true
          type: integer
      type: object
    ProposalFeeRowInputModel:
      properties:
        description:
          nullable: true
          type: string
        isShownOnProposal:
          default: true
          type: boolean
        measurementUnit:
          nullable: true
          type: string
        name:
          maxLength: 200
          minLength: 0
          type: string
        product:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: ProductOutputModel
        projectFee:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          readOnly: true
          x-relation: ProjectFeeOutputModel
        proposal:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: ProposalOutputModel
        quantity:
          format: double
          type: number
        sortOrder:
          format: int32
          nullable: true
          type: integer
        subtotal:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: ProposalSubtotalOutputModel
        unitCost:
          $ref: "#/components/schemas/MoneyInputModel"
          nullable: true
        unitPrice:
          $ref: "#/components/schemas/MoneyInputModel"
          nullable: true
        vatRate:
          format: double
          nullable: true
          type: number
      required:
        - name
        - proposal
        - quantity
      type: object
    ProposalFeeRowOutputModel:
      properties:
        description:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        isShownOnProposal:
          type: boolean
        measurementUnit:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        product:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: ProductOutputModel
        projectFee:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          readOnly: true
          x-relation: ProjectFeeOutputModel
        proposal:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: ProposalOutputModel
        quantity:
          format: double
          nullable: true
          type: number
        sortOrder:
          format: int32
          nullable: true
          type: integer
        subtotal:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: ProposalSubtotalOutputModel
        unitCost:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        unitPrice:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        vatRate:
          format: double
          nullable: true
          type: number
      type: object
    ProposalInputModel:
      properties:
        billingAddress:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: AddressModel
        culture:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: FormattingCultureModel
        customerContactPerson:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: ContactModel
        freeText1:
          $ref: "#/components/schemas/FreeTextInputModel"
          nullable: true
        freeText2:
          $ref: "#/components/schemas/FreeTextInputModel"
          nullable: true
        language:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: LanguageModel
        name:
          maxLength: 50
          minLength: 0
          type: string
        project:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: ProjectOutputModel
        proposalDate:
          format: date
          nullable: true
          type: string
        proposalStatus:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: ProposalStatusOutputModel
      required:
        - name
        - project
      type: object
    ProposalLanguageSubModel:
      properties:
        code:
          nullable: true
          type: string
        englishName:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    ProposalOutputModel:
      properties:
        billingAddress:
          $ref: "#/components/schemas/ProposalBillingAddressSubModel"
          nullable: true
          x-relation: AddressModel
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        culture:
          $ref: "#/components/schemas/FormattingCultureSubModel"
          nullable: true
          x-relation: FormattingCultureModel
        customer:
          $ref: "#/components/schemas/ProposalCustomerSubModel"
          nullable: true
          x-relation: CustomerModel
        customerContactPerson:
          $ref: "#/components/schemas/CustomerContactPersonSubModel"
          nullable: true
          x-relation: ContactModel
        freeText1:
          $ref: "#/components/schemas/FreeTextModel2"
          nullable: true
        freeText2:
          $ref: "#/components/schemas/FreeTextModel2"
          nullable: true
        guid:
          nullable: true
          readOnly: true
          type: string
        language:
          $ref: "#/components/schemas/ProposalLanguageSubModel"
          nullable: true
          x-relation: LanguageModel
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          nullable: true
          type: string
        number:
          nullable: true
          type: string
        pricelist:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: PriceListOutputModel
        project:
          $ref: "#/components/schemas/ProposalProjectSubModel"
          nullable: true
          x-relation: ProjectOutputModel
        proposalDate:
          format: date
          nullable: true
          type: string
        proposalStatus:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: ProposalStatusOutputModel
        totalExcludingVat:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        totalIncludingVat:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
      type: object
    ProposalProjectSubModel:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        number:
          format: int64
          nullable: true
          type: integer
      type: object
    ProposalSettingsOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isTaxFree:
          default: false
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        printTotalInPdf:
          $ref: "#/components/schemas/PrintToPdf"
          default: PrintToProposalBoth
        showBillingContact:
          default: false
          type: boolean
        showBillingDetails:
          default: false
          deprecated: true
          type: boolean
          x-deprecatedMessage: Obsolete
        showGanttChart:
          default: false
          deprecated: true
          type: boolean
          x-deprecatedMessage: Obsolete
        showOrderNumber:
          default: false
          type: boolean
        showOurReference:
          default: false
          type: boolean
        showPaymentTerms:
          default: false
          type: boolean
        showProjectMembers:
          default: false
          type: boolean
        showProjectPlan:
          default: false
          type: boolean
        showQuantity:
          default: true
          type: boolean
        showTotalPrice:
          default: true
          type: boolean
        showTreeview:
          default: false
          deprecated: true
          type: boolean
          x-deprecatedMessage: Obsolete
        showUnit:
          default: true
          type: boolean
        showUnitPrice:
          default: true
          type: boolean
        showYourReference:
          default: false
          type: boolean
        style:
          $ref: "#/components/schemas/InvoiceSkin"
          nullable: true
      type: object
    ProposalStatusInputModel:
      properties:
        isActive:
          default: true
          type: boolean
        isDefault:
          type: boolean
        isLost:
          type: boolean
        isWon:
          type: boolean
        name:
          maxLength: 200
          minLength: 0
          type: string
        sortOrder:
          format: int32
          type: integer
      required:
        - name
      type: object
    ProposalStatusOutputModel:
      properties:
        guid:
          nullable: true
          type: string
        isActive:
          type: boolean
        isDefault:
          type: boolean
        isLost:
          type: boolean
        isWon:
          type: boolean
        name:
          nullable: true
          type: string
        sortOrder:
          format: int32
          type: integer
      type: object
    ProposalSubtotalInputModel:
      properties:
        description:
          nullable: true
          type: string
        isShownOnProposal:
          default: true
          type: boolean
        name:
          maxLength: 200
          minLength: 0
          type: string
        phase:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          readOnly: true
          x-relation: PhaseOutputModel
        proposal:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: ProposalOutputModel
        sortOrder:
          format: int32
          nullable: true
          type: integer
      required:
        - name
        - proposal
      type: object
    ProposalSubtotalOutputModel:
      properties:
        description:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        isShownOnProposal:
          type: boolean
        name:
          nullable: true
          type: string
        phase:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: PhaseOutputModel
        projectFee:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: ProjectFeeOutputModel
        proposal:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: ProposalOutputModel
        sortOrder:
          format: int32
          nullable: true
          type: integer
      type: object
    ProposalWorkhourRowInputModel:
      properties:
        description:
          nullable: true
          type: string
        isShownOnProposal:
          default: true
          type: boolean
        name:
          maxLength: 200
          minLength: 0
          type: string
        phase:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: PhaseOutputModel
        proposal:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: ProposalOutputModel
        quantity:
          format: double
          type: number
        sortOrder:
          format: int32
          nullable: true
          type: integer
        subtotal:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: ProposalSubtotalOutputModel
        workType:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: WorkTypeOutputModel
      required:
        - name
        - quantity
        - workType
        - proposal
      type: object
    ProposalWorkhourRowOutputModel:
      properties:
        description:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        isShownOnProposal:
          default: true
          type: boolean
        name:
          nullable: true
          type: string
        phase:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: PhaseOutputModel
        projectFee:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: ProjectFeeOutputModel
        proposal:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: ProposalOutputModel
        quantity:
          format: double
          nullable: true
          type: number
        sortOrder:
          format: int32
          nullable: true
          type: integer
        subtotal:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: ProposalSubtotalOutputModel
        unitCost:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        unitPrice:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        workType:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: WorkTypeOutputModel
      type: object
    PublicAuthenticationOutputModel:
      properties:
        access_token:
          type: string
        access_token_expires_in:
          format: int64
          type: integer
        access_token_expires_utc:
          format: date-time
          type: string
        access_token_type:
          type: string
        refresh_token:
          type: string
        refresh_token_expires_in:
          format: int64
          type: integer
        refresh_token_expires_utc:
          format: date-time
          type: string
        scope:
          type: string
      type: object
    QuickSearchOptions:
      description: ""
      enum:
        - ShowOpenProjectsSalesCasesAndCustomers
        - ShowOpenAndClosedProjectsSalesCasesAndCustomers
      type: string
      x-enumNames:
        - ShowOpenProjectsSalesCasesAndCustomers
        - ShowOpenAndClosedProjectsSalesCasesAndCustomers
    RecurrenceEndTypes:
      description: ""
      enum:
        - Never
        - AfterNumberOfTimes
        - OnDate
      type: string
      x-enumNames:
        - Never
        - AfterNumberOfTimes
        - OnDate
    RecurrenceFrequency:
      description: ""
      enum:
        - Daily
        - Weekly
        - Monthly
        - Yearly
      type: string
      x-enumNames:
        - Daily
        - Weekly
        - Monthly
        - Yearly
    RecurrencePattern:
      properties:
        daily:
          $ref: "#/components/schemas/DailyModel"
          nullable: true
        monthly:
          $ref: "#/components/schemas/MonthlyModel"
          nullable: true
        weekly:
          $ref: "#/components/schemas/WeeklyModel"
          nullable: true
        yearly:
          $ref: "#/components/schemas/YearlyModel"
          nullable: true
      type: object
      x-relation: null
    RecurrenceRange:
      properties:
        maxOccurrences:
          format: int32
          nullable: true
          type: integer
        recursUntilDate:
          format: date
          nullable: true
          type: string
      type: object
      x-relation: null
    RecurrenceType:
      description: ""
      enum:
        - None
        - Occurrence
        - Exception
        - Series
      type: string
      x-enumNames:
        - None
        - Occurrence
        - Exception
        - Series
    ReferenceNumberDisplay:
      description: ""
      enum:
        - ReferenceNumber
        - Kid
      type: string
      x-enumNames:
        - ReferenceNumber
        - Kid
    ReferenceType:
      description: ""
      enum:
        - Invoice
        - Proposal
        - InvoiceTemplate
        - Other
      type: string
      x-enumNames:
        - Invoice
        - Proposal
        - InvoiceTemplate
        - Other
    ReimbursedProjectFeeOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        description:
          nullable: true
          type: string
        eventDate:
          format: date
          nullable: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        invoiceGuid:
          nullable: true
          type: string
          x-relation-guid: PhaseOutputModel
        invoiceQuantity:
          format: double
          nullable: true
          type: number
        invoiceRowDescription:
          nullable: true
          type: string
        invoiceRowGuid:
          nullable: true
          type: string
          x-relation-guid: InvoiceRowOutputModel
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        measurementUnit:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        phase:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: PhaseOutputModel
        product:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: ProductOutputModel
        productType:
          $ref: "#/components/schemas/ProductType"
          nullable: true
        project:
          $ref: "#/components/schemas/ReimbursedProjectFeeProjectSubModel"
          nullable: true
          x-relation: ProjectOutputModel
        quantity:
          format: double
          type: number
        unitCost:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        unitPrice:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        user:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: UserOutputModel
        vatRate:
          format: double
          nullable: true
          type: number
      type: object
    ReimbursedProjectFeeProjectSubModel:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        number:
          nullable: true
          type: string
      type: object
    ReimbursedProjectTravelExpenseOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        description:
          nullable: true
          type: string
        eventDate:
          format: date
          nullable: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        invoiceGuid:
          nullable: true
          type: string
          x-relation-guid: PhaseOutputModel
        invoiceQuantity:
          format: double
          nullable: true
          type: number
        invoiceRowDescription:
          nullable: true
          type: string
        invoiceRowGuid:
          nullable: true
          type: string
          x-relation-guid: InvoiceRowOutputModel
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        measurementUnit:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        phase:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: PhaseOutputModel
        product:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: ProductOutputModel
        project:
          $ref: "#/components/schemas/ReimbursedProjectFeeProjectSubModel"
          nullable: true
          x-relation: ProjectOutputModel
        quantity:
          format: double
          type: number
        travelEndTime:
          format: date-time
          nullable: true
          type: string
        travelStartTime:
          format: date-time
          nullable: true
          type: string
        unitCost:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        unitPrice:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        user:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: UserOutputModel
        vatRate:
          format: double
          nullable: true
          type: number
      type: object
    ReimbursedWorkHourOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: CustomerModel
        description:
          nullable: true
          type: string
        endTime:
          format: date-time
          nullable: true
          type: string
        eventDate:
          format: date
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        invoiceGuid:
          nullable: true
          type: string
          x-relation-guid: PhaseOutputModel
        invoiceQuantity:
          format: double
          nullable: true
          type: number
        invoiceRowComment:
          nullable: true
          type: string
        invoiceRowDescription:
          nullable: true
          type: string
        invoiceRowGuid:
          nullable: true
          type: string
          x-relation-guid: InvoiceRowOutputModel
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        overtime:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: OvertimeModel
        phase:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: PhaseOutputModel
        plannedInvoiceQuantity:
          format: double
          nullable: true
          type: number
        project:
          $ref: "#/components/schemas/ReimbursedWorkHourProjectSubModel"
          nullable: true
          x-relation: ProjectOutputModel
        quantity:
          format: double
          nullable: true
          type: number
        startTime:
          format: date-time
          nullable: true
          type: string
        unitCost:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        unitPrice:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        user:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: UserOutputModel
        workType:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: WorkTypeOutputModel
      type: object
    ReimbursedWorkHourProjectSubModel:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        number:
          format: int64
          nullable: true
          type: integer
      type: object
    RelatedInvoiceSubModel:
      properties:
        guid:
          nullable: true
          type: string
        number:
          format: int32
          nullable: true
          type: integer
      type: object
    ResourceAllocationAction:
      description: ""
      enum:
        - None
        - Delete
        - Transfer
      type: string
      x-enumNames:
        - None
        - Delete
        - Transfer
    ResourceAllocationCriteriaModel:
      properties:
        endDate:
          format: date-time
          nullable: true
          type: string
        includeAbsences:
          type: boolean
        phaseGuids:
          items:
            type: string
          nullable: true
          type: array
          x-relation-guid: PhaseOutputModel
        projectBusinessUnitGuids:
          items:
            type: string
          nullable: true
          type: array
          x-relation-guid: BusinessUnitModel
        projectGuids:
          items:
            type: string
          nullable: true
          type: array
          x-relation-guid: ProjectOutputModel
        projectManagerUserGuids:
          items:
            type: string
          nullable: true
          type: array
          x-relation-guid: UserOutputModel
        projectStatusTypeGuids:
          items:
            type: string
          nullable: true
          type: array
          x-relation-guid: ProjectStatusTypeModel
        projectTagGuids:
          items:
            type: string
          nullable: true
          type: array
          x-relation-guid: ProjectKeywordModel
        resourceAllocationGuids:
          items:
            type: string
          nullable: true
          type: array
          x-relation-guid: ResourceAllocationOutputModel
        salesProgresses:
          items:
            $ref: "#/components/schemas/SalesProgress"
            nullable: true
          nullable: true
          type: array
        salesStatusTypeGuids:
          items:
            type: string
          nullable: true
          type: array
          x-relation-guid: SalesStatusTypeOutputModel
        startDate:
          format: date-time
          nullable: true
          type: string
        superiorUserGuids:
          items:
            type: string
          nullable: true
          type: array
          x-relation-guid: UserOutputModel
        useSalesProbability:
          default: true
          type: boolean
        userBusinessUnitGuids:
          items:
            type: string
          nullable: true
          type: array
          x-relation-guid: BusinessUnitModel
        userGuids:
          items:
            type: string
          nullable: true
          type: array
          x-relation-guid: UserOutputModel
        userLicenseTypes:
          items:
            $ref: "#/components/schemas/LicenseUserType"
          nullable: true
          type: array
        userTagGuids:
          items:
            type: string
          nullable: true
          type: array
          x-relation-guid: UserKeywordModel
      type: object
    ResourceAllocationInputModel:
      properties:
        allocationHours:
          format: double
          nullable: true
          type: number
        allocationPercentage:
          format: int32
          nullable: true
          type: integer
        endDate:
          format: date
          nullable: true
          type: string
        phase:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: PhaseOutputModel
        project:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: ProjectOutputModel
        startDate:
          format: date
          nullable: true
          type: string
        user:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: UserOutputModel
      required:
        - user
        - project
      type: object
    ResourceAllocationOutputModel:
      properties:
        allocationHours:
          format: double
          nullable: true
          type: number
        allocationPercentage:
          format: int32
          nullable: true
          type: integer
        calculatedAllocationHours:
          format: double
          nullable: true
          type: number
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: CustomerModel
        derivedEndDate:
          format: date
          nullable: true
          type: string
        derivedStartDate:
          format: date
          nullable: true
          type: string
        endDate:
          format: date
          nullable: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        phase:
          $ref: "#/components/schemas/ResourceAllocationPhaseSubModel"
          nullable: true
          x-relation: PhaseOutputModel
        project:
          $ref: "#/components/schemas/ResourceAllocationProjectSubModel"
          nullable: true
          x-relation: ProjectOutputModel
        projectMemberGuid:
          nullable: true
          type: string
          x-relation-guid: PhaseMemberModel
        startDate:
          format: date
          nullable: true
          type: string
        user:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          x-relation: UserOutputModel
      type: object
    ResourceAllocationPhaseSubModel:
      properties:
        endDate:
          format: date
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        startDate:
          format: date
          nullable: true
          type: string
      type: object
    ResourceAllocationProjectSubModel:
      properties:
        guid:
          nullable: true
          type: string
        isInternal:
          type: boolean
        name:
          nullable: true
          type: string
        number:
          format: int64
          nullable: true
          type: integer
      type: object
    RoleAllocationInputModel:
      properties:
        allocationHours:
          format: double
          type: number
        endDate:
          format: date
          nullable: true
          type: string
        phase:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: PhaseOutputModel
        project:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: ProjectOutputModel
        role:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: RoleOutputModel
        startDate:
          format: date
          nullable: true
          type: string
      required:
        - role
        - allocationHours
        - project
      type: object
    RoleAllocationOutputModel:
      properties:
        allocationHours:
          format: double
          nullable: true
          type: number
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: CustomerModel
        endDate:
          format: date
          nullable: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        phase:
          $ref: "#/components/schemas/PhaseSubModel"
          nullable: true
          x-relation: PhaseOutputModel
        project:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: ProjectOutputModel
        role:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: RoleOutputModel
        startDate:
          format: date
          nullable: true
          type: string
      type: object
    RoleInputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
      required:
        - name
      type: object
    RoleOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    SalesAccountModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        isProductDefault:
          type: boolean
        isTravelTypeDefault:
          type: boolean
        isWorkTypeDefault:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        number:
          minLength: 1
          type: string
      required:
        - name
        - number
      type: object
    SalesNoteOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: CustomerModel
        guid:
          nullable: true
          readOnly: true
          type: string
        isDeleted:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        note:
          nullable: true
          type: string
        project:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: ProjectOutputModel
        user:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: UserOutputModel
      type: object
    SalesProgress:
      description: ""
      enum:
        - None
        - InProgress
        - Won
        - Lost
      type: string
      x-enumNames:
        - None
        - InProgress
        - Won
        - Lost
    SalesStatusHistoryOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        project:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          readOnly: true
          x-relation: ProjectOutputModel
        salesStatusType:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          readOnly: true
          x-relation: SalesStatusTypeOutputModel
        timeStamp:
          format: date-time
          type: string
      type: object
    SalesStatusSubModel:
      properties:
        guid:
          nullable: true
          readOnly: true
          type: string
        name:
          nullable: true
          type: string
        salesStatusTypeGuid:
          nullable: true
          type: string
          x-relation-guid: SalesStatusTypeOutputModel
      type: object
      x-relation: null
    SalesStatusType:
      description: ""
      enum:
        - InProgress
        - Won
        - Lost
      type: string
      x-enumNames:
        - InProgress
        - Won
        - Lost
    SalesStatusTypeInputModel:
      properties:
        defaultProbability:
          format: int32
          nullable: true
          type: integer
        isActive:
          default: true
          type: boolean
        isProposalDefault:
          default: false
          nullable: true
          type: boolean
        name:
          minLength: 1
          type: string
        salesState:
          $ref: "#/components/schemas/SalesStatusType"
      required:
        - name
        - salesState
      type: object
    SalesStatusTypeOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        defaultProbability:
          format: int32
          nullable: true
          type: integer
        guid:
          nullable: false
          type: string
        isActive:
          type: boolean
        isProposalDefault:
          nullable: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          nullable: false
          type: string
        salesState:
          $ref: "#/components/schemas/SalesStatusType"
      type: object
    SalutationType:
      description: ""
      enum:
        - Mr.
        - Mrs.
        - Ms.
      type: string
      x-enumNames:
        - Mr
        - Mrs
        - Ms
    SatisfactionLevelType:
      description: ""
      enum:
        - Unsatisfied
        - Neutral
        - Satisfied
        - Unknown
      type: string
      x-enumNames:
        - Unsatisfied
        - Neutral
        - Satisfied
        - Unknown
    SearchFieldDataType:
      description: ""
      enum:
        - String
        - Boolean
        - Integer
        - Percentage
        - Numeric
        - Money
        - Date
        - DateTime
        - Time
        - Object
        - ObjectCollection
        - IpAddress
      type: string
      x-enumNames:
        - String
        - Boolean
        - Integer
        - Percentage
        - Numeric
        - Money
        - Date
        - DateTime
        - Time
        - Object
        - ObjectCollection
        - IpAddress
    SimpleInputModel:
      properties:
        guid:
          nullable: true
          type: string
      type: object
    SimpleInputRequiredModel:
      properties:
        guid:
          minLength: 1
          type: string
      required:
        - guid
      type: object
    SimpleProjectStatusInputModel:
      properties:
        description:
          nullable: true
          type: string
        projectStatusTypeGuid:
          nullable: true
          type: string
          x-relation-guid: ProjectStatusTypeModel
      type: object
    SimpleSalesStatusInputModel:
      properties:
        salesStatusTypeGuid:
          nullable: true
          type: string
          x-relation-guid: SalesStatusTypeOutputModel
      type: object
    SortDirection:
      description: ""
      enum:
        - Asc
        - Desc
        - AscNullsFirst
        - AscNullsLast
        - DescNullsFirst
        - DescNullsLast
      type: string
      x-enumNames:
        - Asc
        - Desc
        - AscNullsFirst
        - AscNullsLast
        - DescNullsFirst
        - DescNullsLast
    TeamProductivityOutputModel:
      properties:
        adjustedShareOfBilling:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        adjustedShareOfBillingPercentage:
          format: double
          nullable: true
          type: number
        billableHoursPercentage:
          format: double
          nullable: true
          type: number
        calculatedShareOfBilling:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        calculatedShareOfBillingPercentage:
          format: double
          type: number
        guid:
          nullable: true
          type: string
        projectGuid:
          nullable: true
          type: string
          x-relation-guid: ProjectOutputModel
        user:
          $ref: "#/components/schemas/UserWithNameAndPhotoFileModel"
          nullable: true
          x-relation: UserOutputModel
        workHours:
          format: double
          type: number
        workHoursBillable:
          format: double
          type: number
        workHoursCost:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        workHoursValue:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
      type: object
    TemplateFreeTextModel:
      properties:
        allowTags:
          nullable: true
          type: boolean
        tagContext:
          nullable: true
          readOnly: true
          type: string
        value:
          nullable: true
          type: string
      type: object
      x-relation: null
    TimeEntryModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          readOnly: true
          x-relation: CustomerModel
        description:
          nullable: true
          type: string
        endTime:
          format: date-time
          nullable: true
          type: string
        eventDate:
          format: date
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        phase:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          x-relation: PhaseOutputModel
        project:
          $ref: "#/components/schemas/TimeEntryProject"
          nullable: true
          readOnly: true
          x-relation: ProjectOutputModel
        quantity:
          format: double
          nullable: true
          type: number
        startTime:
          format: date-time
          nullable: true
          type: string
        timeEntryType:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          x-relation: TimeEntryTypeModel
        user:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          x-relation: UserOutputModel
      required:
        - user
        - phase
        - timeEntryType
        - eventDate
      type: object
    TimeEntryProject:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        number:
          format: int64
          nullable: true
          type: integer
      type: object
    TimeEntryTypeModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        identifier:
          nullable: true
          type: string
        isActive:
          default: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
      required:
        - name
      type: object
    TimezoneModel:
      properties:
        guid:
          nullable: true
          type: string
        ianaName:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        systemName:
          nullable: true
          type: string
      type: object
    TotalRoundingType:
      description: ""
      enum:
        - AwayFromZero
        - NearestInteger
      type: string
      x-enumNames:
        - AwayFromZero
        - NearestInteger
    TravelExpenseCostAccountSubModel:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        number:
          nullable: true
          type: string
      type: object
    TravelExpenseSubModel:
      properties:
        code:
          nullable: true
          type: string
        expenseClass:
          $ref: "#/components/schemas/ExpensesClass"
        guid:
          minLength: 1
          type: string
        includeTime:
          type: boolean
        name:
          nullable: true
          readOnly: true
          type: string
      required:
        - guid
      type: object
    TravelExpenseTypeCountrySettingsModel:
      properties:
        country:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          x-relation: CountryModel
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        product:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          x-relation: ProductOutputModel
        purchaseVatRate:
          format: double
          nullable: true
          type: number
        vatRate:
          format: double
          nullable: true
          type: number
      required:
        - country
        - product
      type: object
    TravelExpenseTypeInputModel:
      properties:
        code:
          nullable: true
          type: string
        costAccount:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: CostAccountModel
        expenseClass:
          $ref: "#/components/schemas/ExpensesClass"
        includeTime:
          default: true
          type: boolean
        isActive:
          default: true
          nullable: true
          type: boolean
        measurementUnit:
          nullable: true
          type: string
        name:
          minLength: 1
          type: string
        productCategory:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: ProductCategoryModel
        purchaseVatRate:
          format: double
          nullable: true
          type: number
        salesAccount:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: SalesAccountModel
        unitCost:
          $ref: "#/components/schemas/MoneyInputModelWithNullableAmount"
        vatRate:
          format: double
          nullable: true
          type: number
      required:
        - name
        - expenseClass
        - unitCost
      type: object
    TravelExpenseTypeOutputModel:
      properties:
        code:
          nullable: true
          type: string
        costAccount:
          $ref: "#/components/schemas/TravelExpenseCostAccountSubModel"
          nullable: true
          x-relation: CostAccountModel
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        expenseClass:
          $ref: "#/components/schemas/ExpensesClass"
          nullable: true
        guid:
          nullable: true
          readOnly: true
          type: string
        includeTime:
          type: boolean
        isActive:
          default: true
          nullable: true
          type: boolean
        isDailyAllowance:
          type: boolean
        isMileage:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        measurementUnit:
          nullable: true
          type: string
        name:
          minLength: 1
          type: string
        productCategory:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: ProductCategoryModel
        purchaseVatRate:
          format: double
          nullable: true
          type: number
        salesAccount:
          $ref: "#/components/schemas/ProductSalesAccountSubModel2"
          nullable: true
          x-relation: SalesAccountModel
        unitCost:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        vatRate:
          format: double
          nullable: true
          type: number
      required:
        - name
      type: object
    TravelPriceOutputModel:
      properties:
        prices:
          items:
            $ref: "#/components/schemas/PriceModelBase"
          nullable: true
          type: array
        product:
          $ref: "#/components/schemas/TravelPriceProductSubModel"
          nullable: true
          x-relation: ProductOutputModel
      type: object
    TravelPriceProductSubModel:
      properties:
        expenseClass:
          $ref: "#/components/schemas/ExpensesClass"
          nullable: true
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        productCode:
          nullable: true
          readOnly: true
          type: string
      type: object
    TravelReimbursementAttachmentSource:
      description: ""
      enum:
        - Severa
        - VismaScanner
        - Google
      type: string
      x-enumNames:
        - Severa
        - VismaScanner
        - Google
    TravelReimbursementInputModel:
      properties:
        advancePayment:
          $ref: "#/components/schemas/MoneyInputModelWithNullableAmount"
          nullable: true
        groupBy:
          $ref: "#/components/schemas/GroupByType"
        title:
          nullable: true
          type: string
        travelReimbursementStatus:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: TravelReimbursementStatusModel
        user:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          x-relation: UserOutputModel
      required:
        - user
      type: object
    TravelReimbursementOutputModel:
      properties:
        advancePayment:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        approvalDate:
          format: date-time
          nullable: true
          type: string
        approvedByUser:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: UserOutputModel
        canChangeApproval:
          type: boolean
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        date:
          format: date-time
          type: string
        groupBy:
          $ref: "#/components/schemas/GroupByType"
        guid:
          nullable: true
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        number:
          format: int32
          nullable: true
          type: integer
        title:
          nullable: true
          type: string
        total:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        totalExpenses:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        travelReimbursementStatus:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: TravelReimbursementStatusModel
        user:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: UserOutputModel
      type: object
    TravelReimbursementStatusModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        isApproved:
          default: false
          type: boolean
        isDefault:
          type: boolean
        isLocked:
          default: false
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        sortOrder:
          format: int32
          type: integer
      required:
        - name
      type: object
    TravelReimbursementSubModel:
      properties:
        guid:
          nullable: true
          type: string
        isApproved:
          type: boolean
        isLocked:
          type: boolean
        status:
          nullable: true
          type: string
      type: object
    TypeOfProduct:
      description: ""
      enum:
        - OwnWork
        - Products
        - Subcontracting
        - Travels
      type: string
      x-enumNames:
        - OwnWork
        - Products
        - Subcontracting
        - Travels
    UsageModel:
      properties:
        guid:
          nullable: true
          type: string
        isReadOnly:
          type: boolean
        name:
          nullable: true
          type: string
        type:
          $ref: "#/components/schemas/ReferenceType"
      type: object
    UsageModel2:
      properties:
        context:
          nullable: true
          type: string
        count:
          format: int32
          nullable: true
          readOnly: true
          type: integer
      type: object
    UserCountrySubModel:
      properties:
        code3:
          nullable: true
          type: string
        englishName:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        hasRegions:
          $ref: "#/components/schemas/CountryRegionsStatus"
        name:
          nullable: true
          type: string
      type: object
    UserCultureSubModel:
      properties:
        code:
          nullable: true
          type: string
        englishName:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    UserCustomPropertyInputModel:
      properties:
        isActive:
          default: true
          type: boolean
        name:
          minLength: 1
          type: string
        parameters:
          nullable: true
          type: string
        permission:
          $ref: "#/components/schemas/PermissionLevel"
          default: View
        type:
          $ref: "#/components/schemas/CustomPropertyType"
      required:
        - name
        - type
      type: object
    UserCustomPropertyOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          nullable: true
          type: string
        parameters:
          nullable: true
          type: string
        permission:
          $ref: "#/components/schemas/PermissionLevel"
        type:
          $ref: "#/components/schemas/CustomPropertyType"
        usageCount:
          format: int32
          type: integer
      type: object
    UserCustomPropertySelectionItemInputModel:
      properties:
        isActive:
          default: true
          type: boolean
        name:
          nullable: true
          type: string
        sortOrder:
          format: int32
          nullable: true
          type: integer
        userCustomProperty:
          $ref: "#/components/schemas/SimpleInputModel"
          x-relation: CustomPropertyModel
      required:
        - userCustomProperty
      type: object
    UserCustomPropertySelectionItemOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        sortOrder:
          format: int32
          nullable: true
          type: integer
        userCustomProperty:
          $ref: "#/components/schemas/CustomPropertyShortModel"
          nullable: true
          x-relation: CustomPropertyModel
      required:
        - name
      type: object
    UserCustomValueInputModel:
      properties:
        customProperty:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: CustomPropertyModel
        user:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: UserOutputModel
        value:
          nullable: true
          type: string
      required:
        - customProperty
        - user
      type: object
    UserCustomValueOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customProperty:
          $ref: "#/components/schemas/CustomPropertyShortModel"
          nullable: true
          x-relation: CustomPropertyModel
        guid:
          nullable: true
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        user:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: UserOutputModel
        value:
          nullable: true
          type: string
      type: object
    UserInputModel:
      properties:
        address:
          nullable: true
          type: string
        bankAccountNumber:
          nullable: true
          type: string
        birthDate:
          format: date-time
          nullable: true
          type: string
        businessUnit:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          nullable: true
          x-relation: BusinessUnitModel
        city:
          nullable: true
          type: string
        code:
          nullable: true
          type: string
        country:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: CountryModel
        countryRegion:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: CountryRegionModel
        createDefaultWorkContract:
          default: true
          type: boolean
        culture:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: FormattingCultureModel
        defaultActivityType:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: ActivityTypeModel
        email:
          nullable: true
          type: string
        firstName:
          maxLength: 100
          minLength: 1
          type: string
        isActive:
          default: true
          type: boolean
        language:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: LanguageModel
        lastName:
          maxLength: 100
          minLength: 1
          type: string
        notes:
          nullable: true
          type: string
        permissionProfile:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: PermissionProfileModel
        phone:
          nullable: true
          type: string
        postalCode:
          nullable: true
          type: string
        salutation:
          $ref: "#/components/schemas/SalutationType"
          nullable: true
        satisfaction:
          $ref: "#/components/schemas/SatisfactionLevelType"
          nullable: true
        socialSecurityNumber:
          nullable: true
          type: string
        superiorUser:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          nullable: true
          x-relation: UserOutputModel
        timezone:
          $ref: "#/components/schemas/TimezoneModel"
          nullable: true
        userType:
          $ref: "#/components/schemas/LicenseUserType"
          nullable: true
        workType:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          nullable: true
          x-relation: WorkTypeOutputModel
      required:
        - firstName
        - lastName
      type: object
    UserKeywordModel:
      properties:
        category:
          $ref: "#/components/schemas/KeywordCategory"
          default: User
          readOnly: true
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        keyword:
          minLength: 1
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        userGuid:
          nullable: true
          readOnly: true
          type: string
          x-relation-guid: UserOutputModel
      required:
        - keyword
      type: object
    UserKeywordSubModel:
      properties:
        value:
          nullable: true
          type: string
      type: object
    UserLanguageSubModel:
      properties:
        code:
          nullable: true
          type: string
        englishName:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    UserOutputModel:
      properties:
        address:
          nullable: true
          type: string
        bankAccountNumber:
          nullable: true
          type: string
        birthDate:
          format: date-time
          nullable: true
          type: string
        businessUnit:
          $ref: "#/components/schemas/BusinessUnitSubModel"
          nullable: true
          x-relation: BusinessUnitModel
        city:
          nullable: true
          type: string
        code:
          nullable: true
          type: string
        country:
          $ref: "#/components/schemas/UserCountrySubModel"
          nullable: true
          x-relation: CountryModel
        countryRegion:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: CountryRegionModel
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        culture:
          $ref: "#/components/schemas/UserCultureSubModel"
          nullable: true
          x-relation: FormattingCultureModel
        defaultActivityType:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: ActivityTypeModel
        email:
          nullable: true
          type: string
        firstName:
          minLength: 1
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        keywords:
          items:
            $ref: "#/components/schemas/UserKeywordSubModel"
          nullable: true
          type: array
        language:
          $ref: "#/components/schemas/UserLanguageSubModel"
          nullable: true
          x-relation: LanguageModel
        lastLogin:
          format: date-time
          nullable: true
          type: string
        lastName:
          minLength: 1
          type: string
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        notes:
          nullable: true
          type: string
        permissionProfile:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: PermissionProfileModel
        phone:
          nullable: true
          type: string
        postalCode:
          nullable: true
          type: string
        salutation:
          $ref: "#/components/schemas/SalutationType"
          nullable: true
        satisfaction:
          $ref: "#/components/schemas/SatisfactionLevelType"
          nullable: true
        socialSecurityNumber:
          nullable: true
          type: string
        superiorUser:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          nullable: true
          x-relation: UserOutputModel
        timezone:
          $ref: "#/components/schemas/TimezoneModel"
          nullable: true
        title:
          nullable: true
          type: string
        userType:
          $ref: "#/components/schemas/LicenseUserType"
          nullable: true
        workContract:
          $ref: "#/components/schemas/UserWorkContractSubModel"
          nullable: true
          x-relation: WorkContractOutputModel
        workType:
          $ref: "#/components/schemas/ModelBaseWithRequiredGuid"
          nullable: true
          x-relation: WorkTypeOutputModel
      required:
        - firstName
        - lastName
      type: object
    UserRequiredSubModel:
      properties:
        code:
          nullable: true
          readOnly: true
          type: string
        companyGuid:
          nullable: true
          type: string
          x-relation-guid: CompanyModel
        guid:
          minLength: 1
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
      required:
        - guid
      type: object
    UserSubModel:
      properties:
        code:
          nullable: true
          readOnly: true
          type: string
        companyGuid:
          nullable: true
          type: string
          x-relation-guid: CompanyModel
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    UserWithFirstNameLastNameAndPhotoFileModel:
      properties:
        code:
          nullable: true
          readOnly: true
          type: string
        firstName:
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        lastName:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    UserWithFirstNameLastNameModel:
      properties:
        firstName:
          nullable: true
          type: string
        guid:
          minLength: 1
          type: string
        lastName:
          nullable: true
          type: string
      required:
        - guid
      type: object
    UserWithFirstNameLastNamePhotoFileModelAndRequiredGuid:
      properties:
        code:
          nullable: true
          readOnly: true
          type: string
        firstName:
          nullable: true
          type: string
        guid:
          minLength: 1
          type: string
        lastName:
          nullable: true
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
      required:
        - guid
      type: object
    UserWithNameAndPhotoFileModel:
      properties:
        code:
          nullable: true
          readOnly: true
          type: string
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
      type: object
    UserWithPhotoFileModelAndRequiredGuid:
      properties:
        code:
          nullable: true
          readOnly: true
          type: string
        guid:
          minLength: 1
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
      required:
        - guid
      type: object
    UserWorkContractSubModel:
      properties:
        dailyHours:
          format: double
          type: number
        endDate:
          format: date
          nullable: true
          type: string
        flextimeLimitPerDay:
          format: double
          nullable: true
          type: number
        guid:
          nullable: true
          readOnly: true
          type: string
        hourCost:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        isFlextimeActive:
          default: true
          type: boolean
        isOvertimeAllowed:
          type: boolean
        startDate:
          format: date
          type: string
        title:
          minLength: 1
          type: string
        workWeek:
          items:
            $ref: "#/components/schemas/Workweek"
            nullable: false
          nullable: true
          type: array
      required:
        - title
        - startDate
      type: object
    ValueAddedTaxSubModel:
      properties:
        guid:
          nullable: true
          type: string
        percentage:
          format: double
          readOnly: true
          type: number
      type: object
    VatRateInputModel:
      properties:
        code:
          maxLength: 10
          minLength: 0
          nullable: true
          type: string
        countryGuid:
          nullable: true
          type: string
          x-relation-guid: CountryModel
        isActive:
          default: true
          type: boolean
        isDefault:
          type: boolean
        percentage:
          format: double
          type: number
      required:
        - percentage
      type: object
    VatRateOutputModel:
      properties:
        code:
          maxLength: 10
          minLength: 0
          nullable: true
          type: string
        countryGuid:
          nullable: true
          type: string
          x-relation-guid: CountryModel
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isActive:
          default: true
          type: boolean
        isDefault:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        percentage:
          format: double
          type: number
      type: object
    VismaFinancialsCompanyModel:
      properties:
        id:
          format: int64
          nullable: true
          readOnly: true
          type: integer
        name:
          nullable: true
          type: string
      type: object
    WeeklyModel:
      properties:
        friday:
          type: boolean
        interval:
          format: int32
          type: integer
        monday:
          type: boolean
        saturday:
          type: boolean
        sunday:
          type: boolean
        thursday:
          type: boolean
        tuesday:
          type: boolean
        wednesday:
          type: boolean
      type: object
    WorkContractInputModel:
      properties:
        dailyHours:
          format: double
          type: number
        endDate:
          format: date
          nullable: true
          type: string
        flextimeLimitPerDay:
          format: double
          nullable: true
          type: number
        hourCost:
          $ref: "#/components/schemas/MoneyInputModelWithNotNegativeAmount"
        isFlextimeActive:
          default: true
          type: boolean
        isOvertimeAllowed:
          type: boolean
        role:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: RoleOutputModel
        startDate:
          format: date
          type: string
        title:
          minLength: 1
          type: string
        user:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: UserOutputModel
        workWeek:
          items:
            $ref: "#/components/schemas/Workweek"
            nullable: false
          nullable: true
          type: array
      required:
        - title
        - startDate
        - hourCost
        - user
      type: object
    WorkContractOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        dailyHours:
          format: double
          type: number
        endDate:
          format: date
          nullable: true
          type: string
        flextimeLimitPerDay:
          format: double
          nullable: true
          type: number
        guid:
          nullable: true
          readOnly: true
          type: string
        hourCost:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        isFlextimeActive:
          default: true
          type: boolean
        isOvertimeAllowed:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        role:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: RoleOutputModel
        startDate:
          format: date
          type: string
        title:
          minLength: 1
          type: string
        user:
          $ref: "#/components/schemas/UserWithPhotoFileModelAndRequiredGuid"
          nullable: true
          x-relation: UserOutputModel
        workWeek:
          items:
            $ref: "#/components/schemas/Workweek"
            nullable: false
          nullable: true
          type: array
      required:
        - title
        - startDate
      type: object
    WorkHourApprovalMode:
      description: ""
      enum:
        - None
        - RequiredForInvoicing
        - InvoicableAlways
      type: string
      x-enumNames:
        - None
        - RequiredForInvoicing
        - InvoicableAlways
    WorkHourCustomerSubModel:
      properties:
        guid:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        number:
          format: int64
          nullable: true
          type: integer
      type: object
    WorkHourInputModel:
      properties:
        description:
          nullable: true
          type: string
        endTime:
          format: date-time
          nullable: true
          type: string
        eventDate:
          format: date
          type: string
        invoice:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: PhaseOutputModel
        invoiceQuantity:
          format: double
          nullable: true
          type: number
        invoiceRowComment:
          nullable: true
          type: string
        invoiceRowDescription:
          nullable: true
          type: string
        isApproved:
          nullable: true
          type: boolean
        isBillable:
          nullable: true
          type: boolean
        overtime:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: OvertimeModel
        phase:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: PhaseOutputModel
        plannedInvoiceQuantity:
          format: double
          nullable: true
          type: number
        quantity:
          format: double
          nullable: true
          type: number
        startTime:
          format: date-time
          nullable: true
          type: string
        unitPrice:
          $ref: "#/components/schemas/MoneyInputModel"
          nullable: true
        user:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: UserOutputModel
        workType:
          $ref: "#/components/schemas/SimpleInputRequiredModel"
          x-relation: WorkTypeOutputModel
      required:
        - eventDate
        - phase
        - user
        - workType
      type: object
    WorkHourInvoiceSubModel:
      properties:
        date:
          format: date
          nullable: true
          type: string
        guid:
          nullable: true
          type: string
        number:
          format: int32
          nullable: true
          type: integer
      type: object
    WorkHourOutputModel:
      properties:
        billableStatus:
          $ref: "#/components/schemas/BillableStatusType"
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        customer:
          $ref: "#/components/schemas/WorkHourCustomerSubModel"
          nullable: true
          x-relation: CustomerModel
        description:
          nullable: true
          type: string
        endTime:
          format: date-time
          nullable: true
          type: string
        eventDate:
          format: date
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        invoice:
          $ref: "#/components/schemas/WorkHourInvoiceSubModel"
          nullable: true
          x-relation: InvoiceOutputModel
        invoiceQuantity:
          format: double
          nullable: true
          type: number
        invoiceRowComment:
          nullable: true
          type: string
        invoiceRowDescription:
          nullable: true
          type: string
        invoiceRowGuid:
          nullable: true
          type: string
          x-relation-guid: InvoiceRowOutputModel
        isApproved:
          nullable: true
          type: boolean
        isBillable:
          nullable: true
          type: boolean
        isModifiable:
          type: boolean
        isProductive:
          nullable: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        overtime:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: OvertimeModel
        phase:
          $ref: "#/components/schemas/WorkHourPhaseSubModel"
          nullable: true
          x-relation: PhaseOutputModel
        plannedInvoiceQuantity:
          format: double
          nullable: true
          type: number
        project:
          $ref: "#/components/schemas/WorkHourProjectSubModel"
          nullable: true
          x-relation: ProjectOutputModel
        quantity:
          format: double
          nullable: true
          type: number
        startTime:
          format: date-time
          nullable: true
          type: string
        unitCost:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        unitPrice:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        user:
          $ref: "#/components/schemas/UserWithFirstNameLastNamePhotoFileModelAndRequiredGuid"
          nullable: true
          x-relation: UserOutputModel
        workType:
          $ref: "#/components/schemas/WorkHourWorkTypeSubModel"
          nullable: true
          x-relation: WorkTypeOutputModel
      required:
        - eventDate
      type: object
    WorkHourPhaseSubModel:
      properties:
        guid:
          minLength: 1
          type: string
        isCompleted:
          type: boolean
        isLocked:
          type: boolean
        name:
          nullable: true
          readOnly: true
          type: string
      required:
        - guid
      type: object
    WorkHourPriceOutputModel:
      properties:
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        isBillable:
          nullable: true
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        pricelistVersion:
          $ref: "#/components/schemas/ModelBase"
          nullable: true
          x-relation: PricelistVersionOutputModel
        unitPrice:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        user:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: UserOutputModel
        workType:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: WorkTypeOutputModel
      type: object
    WorkHourProjectSubModel:
      properties:
        companyGuid:
          nullable: true
          type: string
          x-relation-guid: CompanyModel
        guid:
          nullable: true
          type: string
        isClosed:
          type: boolean
        name:
          nullable: true
          type: string
        number:
          format: int64
          nullable: true
          type: integer
      type: object
    WorkHourWorkTypeSubModel:
      properties:
        code:
          nullable: true
          type: string
        guid:
          minLength: 1
          type: string
        name:
          nullable: true
          readOnly: true
          type: string
      required:
        - guid
      type: object
    WorkTypeInputModel:
      properties:
        code:
          nullable: true
          type: string
        hourCost:
          $ref: "#/components/schemas/MoneyInputModelWithNullableAmount"
          nullable: true
        isActive:
          default: true
          type: boolean
        isDefault:
          type: boolean
        isProductive:
          type: boolean
        name:
          minLength: 1
          type: string
        salesAccount:
          $ref: "#/components/schemas/SimpleInputModel"
          nullable: true
          x-relation: SalesAccountModel
      required:
        - name
      type: object
    WorkTypeOutputModel:
      properties:
        code:
          nullable: true
          type: string
        createdBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        createdDateTime:
          format: date-time
          readOnly: true
          type: string
        guid:
          nullable: true
          readOnly: true
          type: string
        hourCost:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        isActive:
          default: true
          type: boolean
        isDefault:
          type: boolean
        isProductive:
          type: boolean
        lastUpdatedBy:
          $ref: "#/components/schemas/UserWithFirstNameLastNameAndPhotoFileModel"
          nullable: true
          readOnly: true
          x-relation: UserOutputModel
        lastUpdatedDateTime:
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          minLength: 1
          type: string
        salesAccount:
          $ref: "#/components/schemas/ModelWithName"
          nullable: true
          x-relation: SalesAccountModel
      required:
        - name
      type: object
    WorkTypeSubModel:
      properties:
        code:
          nullable: true
          readOnly: true
          type: string
        guid:
          minLength: 1
          type: string
        isActive:
          default: true
          readOnly: true
          type: boolean
        isProductive:
          readOnly: true
          type: boolean
        name:
          nullable: true
          readOnly: true
          type: string
      required:
        - guid
      type: object
    WorkdayModel:
      properties:
        absenceHours:
          format: double
          type: number
        date:
          format: date
          type: string
        enteredHours:
          format: double
          type: number
        enteredTimeEntries:
          format: double
          type: number
        expectedHours:
          format: double
          readOnly: true
          type: number
        flextimeLimitPerDay:
          format: double
          nullable: true
          type: number
        holidayName:
          nullable: true
          type: string
        incompleteTimingMinutes:
          format: int32
          type: integer
        isCompleted:
          type: boolean
        isHoliday:
          type: boolean
        isOvertimeAllowed:
          type: boolean
        isReadOnly:
          type: boolean
        userGuid:
          nullable: true
          type: string
          x-relation-guid: UserOutputModel
      type: object
    WorktypeForProjectOutputModel:
      properties:
        hourPrice:
          $ref: "#/components/schemas/MoneyOutputModel"
          nullable: true
        worktype:
          $ref: "#/components/schemas/WorkTypeOutputModel"
          nullable: true
      type: object
    Workweek:
      description: ""
      enum:
        - Monday
        - Tuesday
        - Wednesday
        - Thursday
        - Friday
        - Saturday
        - Sunday
      type: string
      x-enumFlags: true
      x-enumNames:
        - Monday
        - Tuesday
        - Wednesday
        - Thursday
        - Friday
        - Saturday
        - Sunday
    YearlyModel:
      properties:
        dayOfMonth:
          format: int32
          nullable: true
          type: integer
        dayOrdinal:
          $ref: "#/components/schemas/DayOrdinal"
          nullable: true
        dayOrdinalOption:
          $ref: "#/components/schemas/DayOrdinalOption"
          nullable: true
        month:
          $ref: "#/components/schemas/Months"
      type: object
  securitySchemes:
    ClientIdAuth:
      description: Client_Id header
      in: header
      name: Client_Id
      type: apiKey
    OAuth2:
      description: This API uses OAuth 2 with the Client Credentials flow
      flows:
        clientCredentials:
          refreshUrl: /refreshtoken
          scopes:
            activities:delete: Delete access to activity resources
            activities:read: Read-only access to activity resources
            activities:write: Write access to activity resources
            customers:delete: Delete access to customer resources
            customers:read: Read-only access to customer resources
            customers:write: Write access to customer resources
            fees:delete: Delete access to project fee related resources
            fees:read: Read-only access to project fee related resources
            fees:write: Write access to project fee related resources
            files:delete: Delete access to files
            files:read: Read-only access to files
            files:write: Write access to files
            hours:delete: Delete access to work hour resources
            hours:read: Read-only access to work hour resources
            hours:write: Write access to work hour resources
            invoices:delete: Delete access to invoice resources
            invoices:read: Read-only access to invoice resources
            invoices:write: Write access to invoice resources
            organization:read: Read-only access to organization-level resources
            organization:write: Write access to organization-level resources
            projects:delete: Delete access to project resources
            projects:read: Read-only access to project resources
            projects:write: Write access to project resources
            resourceallocations:delete: Delete access to resource allocations
            resourceallocations:read: Read-only access to resource allocations
            resourceallocations:write: Write access to resource allocations
            settings:delete: Delete access to settings resources
            settings:read: Read-only access to settings resources
            settings:write: Write access to settings resources
            travels:delete: Delete access to travel expense related resources
            travels:read: Read-only access to travel expense related resources
            travels:write: Write access to travel expense related resources
            users:delete: Delete access to user resources
            users:read: Read-only access to user resources
            users:write: Write access to user resources
          tokenUrl: /token
      type: oauth2
