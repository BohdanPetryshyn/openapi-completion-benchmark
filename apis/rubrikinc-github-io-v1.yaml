openapi: 3.0.0
servers:
  - url: /api/v1
info:
  description: |
    
    Copyright © 2017-2021 Rubrik Inc. [Legal](#section/Legal)

    # Introduction

    Welcome to the Rubrik™ REST API documentation.

    The Rubrik REST API provides a RESTful interface for working with Rubrik clusters and Rubrik Edge virtual appliances. The Rubrik REST API can be used to query, configure, and control nearly all of the operations of the Rubrik software.

    Through authenticated and encrypted interaction with the Rubrik REST API server, perform any of the operations that are available through the Rubrik web UI and many bulk-type operations that might otherwise be difficult or impossible to perform.

    This documentation provides reference information and examples of typical workflows for the Rubrik REST API. For more detailed information about working with Rubrik clusters and Rubrik Edge virtual appliances refer to the *Rubrik User Guide*.

    A quick way to become familiar with the Rubrik REST API, is to use the Rubrik REST API Explorer. [OpenAPI](#section/OpenAPI) describes this tool.

    Refer to the [changelog](#section/Changelog) to see information about changes within this version of the Rubrik REST API.

    # Changelog

     Revisions are listed with the most recent revision first.

     ### Changes to V1 API in Rubrik Version 6.0.0
     ## Feature additions/improvements:
     * Added optional fields: id(type: string) and networkType(type:
       VmwareNetworkType Enum) to VmwareNetworkInfo, which is used by:
       `Get /vmware/vm/{id}/snapshot`
       `Get /vmware/config/recovery/networks`
     * Added new optional field `maxLocalRetentionLimit` to
       `CloudOutForecastSlaParameters`.
     * Added following new endpoints for health monitor:
       `POST /health_monitor/run_policy`
       `GET /health_monitor/policies`
       `GET /health_monitor/policy_status`
     * Added new endpoints `POST /sap_hana/db/{id}/configure_restore` and
       `/sap_hana/db/{id}/unconfigure_restore` to configure and unconfigure
       system copy restore on the target SAP HANA database.
     * Added new endpoint `POST /sla_domain/assign_to_downloaded_snapshots` to
       assign retention SLA only to snapshots at downloaded locations.
     * Copied the following endpoints from the internal Rubrik REST API listing
       to the v1 listing:
       `GET /oracle/db`
       `GET /oracle/db/{id}`
       `PATCH /oracle/db/{id}`
       Added a new optional parameter `is_data_guard_group` to `GET /oracle/db`.
     * Added new optional fields `advancedRecoveryConfigMap`, `preScriptPath`,
       `postScriptPath`, and `shouldStopRecoveryOnPreScriptFailure` to
       `ExportOracleDbConfig` and `MountOracleDbConfig` which specify the
       Advanced Cloning Options (ACO) map, pre script path, post script path,
       and whether to stop the recovery on pre-script failure, respectively.
     * Added new endpoint `POST /oracle/validate_aco_file` to validate the given
       Advanced Cloning Options (ACO) file and retrieve the validation results.
     * Added new endpoint `GET /oracle/aco_parameter_list` to fetch the list of
       supported Advanced Cloning Options (ACO) parameter names.
     * Added new endpoint `PATCH /oracle/data_guard_group/{id}` to update the SLA
       and user settings for a Data Guard group.
     * Added new endpoints to get and change hostnames of nodes in a Rubrik cluster.
       'GET /cluster/{id}/node_hostname',
       'POST /cluster/{id}/node_hostname'.
     * Added a new object `NodeHostnameInfo` used by
       `GET /cluster/{id}/node_hostname` and `POST /cluster/{id}/node_hostname`.
     * Added new endpoint to get Rubrik Backup Service details for a host.
       `GET /host/rbs`
     * Added new endpoint to install Rubrik Backup Service on a host.
       `POST /host/rbs/install`
     * Added new endpoint to uninstall Rubrik Backup Service from a host.
       `POST /host/rbs/uninstall`
     * Added new endpoint to upgrade Rubrik Backup Service on a host.
       `POST /host/rbs/upgrade`
     * Added new endpoints for user-defined tags management
       `GET /user_defined_tag`
       `POST /user_defined_tag`
       `DELETE /user_defined_tag`
       `GET /user_defined_tag/{id}`
       `PATCH /user_defined_tag/{id}`
       `DELETE /user_defined_tag/{id}`
     * Added new optional field 'numChannels' to 'OracleValidateConfig' object.
       This field specifies the number of channels used when validating Oracle
       backups.
     * Added new endpoint for batch VM snpshots query.
       `POST /vmware/vm/snapshots`
     * Added new endpoints for SQL Server host configuration.
       `GET /mssql/host/configuration`,
       `POST /mssql/host/configuration`,
       `GET /mssql/host/configuration/{host_id}`,
       `PATCH /mssql/host/configuration/{host_id}`,
       `DELETE /mssql/host/configuration/{host_id}`
     * Added new optional field `dataRetrievalCostInUSD` to
       `CloudOutStorageForecastSummary`.
     * Added `POST /cloud_utilization/cloud_out_forecast` endpoint to forecast cloud
       utilization for archival use case.
     * Changed `lastUpdatedTime` to be required in
     * Changed `retryStatus` to be required in
       `JobMonitoringInfo` which is used in endpoints `GET /job_monitoring`
       and `GET /polaris/job_monitoring`.
     * Changed `lastUpdatedTime` to be required in
       `JobMonitoringInfo` which is used in endpoints `GET /job_monitoring`
       and `GET /polaris/job_monitoring`.
     * Added a new endpoint to bulk tier existing snapshots
       `POST /unmanaged_object/snapshot/bulk_archive_tier`
     * Added new field `snapshotVerificationInfo` to
       `VerificationResponse` to include event information
       about snapshots.
     * Added new optional fields `errorInfo` and
       `retryStatus` to `JobMonitoringInfo` to include backup
       failure remediation status.
     * Added new optional fields `snapMirrorLabelForFullBackup` and
       `snapMirrorLabelForIncrementalBackup` to `FilesetSummary`, `FilesetUpdate`
       and `FilesetCreate` to support SnapMirror destination volume
       backup.
       `FilesetSummary` is used by endpoints:
        `GET /v1/fileset`,
        `GET /v1/fileset/{id}`.
       `FilesetUpdate` is used by endpoints:
        `PATCH /v1/fileset/{id}`.
       `FilesetCreate` is used by endpoints:
        `POST /internal/fileset/bulk`,
        `POST /v1/fileset`.
     * Added new values of `IoFilterStatus` and `HostUiFilterStatus`
       to help distinguish cluster and ESXi host states when there is
       a mismatch between the installed IO filter and ESXi host versions,
       instead of defaulting to Unsupported.
     * Added new endpoints `GET /cluster/{id}/security/totp/setting` and
       `PUT /cluster/{id}/security/totp/setting` for retreiving and
       updating the 2-Step Verification global setting, respectively.
     * Added new optional field `computeVisibilityFilter` to
       `GET /vmware/vcenter/{id}`, `POST /vmware/vcenter` and `PUT /vmware/vcenter`
        to specify compute resource visibility.
     ## New features:
     * Added new endpoint for querying LDAP domain names.
       `GET /ldap_service/domain_name`
     * Added new endpoints for supporting truststores
       `GET /v1/cluster/{id}/security/truststore`
       `DELETE /v1/cluster/{id}/security/truststore`
       `PATCH /v1/cluster/{id}/security/truststore`
     * Added new field `isOnSnapMirrorDestVolume` to HostHierarchyObjectSummary
       returned by `GET /host/hierarchy/{id}/children`.
     * Added new endpoint, `GET /volume_group/{id}/request/force_full_snapshot`.
       This endpoint retrieves the configuration used to force a full snapshot
       of a Volume Group.
     * Added new endpoint, `POST /volume_group/{id}/request/force_full_snapshot`.
       This endpoint requests to force a full snapshot of a Volume Group.
     * Added new endpoint, `POST /archive/location/{id}/owner/disable` to disable
       archival location.
     * Added new endpoint, `POST /archive/location/{id}/owner/enable` to enable
       archival location.
     * Added new optional field `dataPathSpec` to `SapHanaSystemConfig` include
       details of SAP HANA system data path
     * Copied the following endpoints from the internal Rubrik REST API listing
      to the v1 listings:
         * `GET /vcd/hierarchy/{id}` to get summary of a vCD hierarchy object.
         * `GET /vcd/hierarchy/{id}/children` to get immediate descendant objects.
         * `GET /vcd/hierarchy/{id}/descendants` to get list of descendant objects.
         * `GET /vcd/cluster` to get summary for all vCD Clusters.
         * `POST /vcd/cluster` to add a vCD Cluster.
         * `GET /vcd/cluster/{id}/vimserver` to get VimServers of a vCD Cluster.
         * `POST /vcd/cluster/{id}/refresh` to refresh a vCD Cluster.
         * `GET /vcd/cluster/{id}` to get vCD Cluster details.
         * `PATCH /vcd/cluster/{id}` to modify the hostname and credentials of a
          specified vCD Cluster object.
         * `DELETE /vcd/cluster/{id}` to remove vCD Cluster.
         * `GET /vcd/cluster/request/{id}` to get vCD Cluster job status.
         * `GET /vcd/vapp` to get summary for vApps.
         * `GET /vcd/vapp/{id}` to get vApp details.
         * `PATCH /vcd/vapp/{id}` to make changes to the parameters of a
          specified vApp object.
         * `GET /vcd/vapp/{id}/snapshot` to retrieve summary information for each
          of the snapshot objects of a specified vApp object.
         * `POST /vcd/vapp/{id}/snapshot` to start an asynchronous job to create
          an on-demand snapshot for a specified vApp object.
         * `DELETE /vcd/vapp/{id}/snapshot` to delete all snapshots of vApp.
         * `GET /vcd/vapp/snapshot/{id}` to get vApp snapshot details.
         * `DELETE /vcd/vapp/snapshot/{id}` to delete vApp snapshot.
         * `GET /vcd/vapp/{id}/missed_snapshot` to get details about missed
          snapshots for a vApp.
         * `GET /vcd/vapp/snapshot/{snapshot_id}/export/options` to get
          exportable network configurations.
         * `POST /vcd/vapp/snapshot/{snapshot_id}/export` to export vApp snapshot.
         * `POST /vcd/vapp/snapshot/{snapshot_id}/instant_recover` to instant
          Recovery of vApp virtual machines.
         * `GET /vcd/vapp/snapshot/{snapshot_id}/instant_recover/options` to get
          Instant Recovery information.
         * `GET /vcd/vapp/request/{id}` to retrieve the details of a specified
          asynchronous job for a vApp.
         * `GET /vcd/vapp/{id}/search` to search for a file from a vApp.
         * `POST /vcd/vapp/snapshot/{id}/download` to download snapshot from
          archive.
     * Added new endpoint, `GET /hyperv/vm/{id}/request/force_full_snapshot`.
       This endpoint retrieves the configuration used to force a full snapshot
       of a Hyper-V virtual machine.
     * Added new endpoint, `POST /hyperv/vm/{id}/request/force_full_snapshot`.
       This endpoint requests to force a full snapshot of a Hyper-V virtual machine.
     * Added new endpoint, `GET /vmware/vm/{id}/request/force_full_snapshot`.
      This endpoint retrieves the configuration used to force a full snapshot
      of a VMware virtual machine.
     * Added new endpoint `POST /vmware/vm/{id}/request/force_full_snapshot`.
      This endpoint requests to force a full snapshot of a VMware virtual machine.
    ### Changes to V1 API in Rubrik Version 5.3.2
     ## Feature additions/improvements:
     * Modified instanceName field in the `GET /mssql/db` endpoint by adding
       the network name for SQL Server databases belonging to a cluster
       instance.

     ### Changes to V1 API in Rubrik Version 5.3.1
     ## Feature additions/improvements:
     * Added `GET /exclusion_pattern`
       endpoint to get all exclusion patterns.
     * Added `GET /exclusion_pattern/{id}`
       endpoint to get a exclusion pattern by id.
     * Added `POST /exclusion_pattern`
       endpoint to create a new exclusion pattern.
     * Added `POST /exclusion_pattern/bulk`
       endpoint to bulk create new exclusion patterns.
     * Added `PATCH /exclusion_pattern/{id}`
       endpoint to update a exclusion pattern.
     * Added `DELETE /exclusion_pattern/{id}`
       endpoint to delete a exclusion pattern.
     * Added `DELETE /exclusion_pattern/bulk`
       endpoint to bulk delete exclusion patterns.
     * Added new optional field `keyProtection` to `EncryptionStatus`
       to support returning key protection status via v1 API
       `GET /cluster/{id}/security/encryption`.
     * Added `Post /vmware/vm/snapshot/{id}/export_with_download` endpoint to export
       a vm snapshot from an archival location.
     * Added new field `index` to `JobMonitoringObjectsCountByType`, which contains
       the total count of all Index jobs.
     * Added `Index` to `JobMonitoringTaskType`.
     * Added new optional field `isTotpEnforced` to `LdapServiceInfo`,
       `LdapServiceSummary`, and `LdapServiceInfoUpdate` to support
       TOTP enforcement for LDAP services in followin APIs.
       `POST /v1/ldap_service`
       `GET /v1/ldap_service`
       `GET /v1/ldap_service/{id}`
       `PATCH /v1/ldap_service/{id}`
       `PUT /v1/ldap_service/{id}`
     * Added new optional field `isTotpEnabled` as a query param in API
       `GET /v1/principal` for fetch users with TOTP enabled.
     * Added new optional fields `mfaServerName`, `isTotpEnabled`, and
       `isTotpEnforced` to `PrincipalSummaryV1` as part of response from
       API `GET /v1/principal` for rendering principals' MFA status.
     * Modified `AgentConnectStatus` enum to add value SecondaryCluster for
       multicluster Rubrik Backup Service support. This will be the status on a
       cluster that is not the primary.
     * Added new endpoint and optional fields for VMware network selection.
        GET /vmware/config/recovery/networks for getting recovery networks.

     ## New features:
     * Added new endpoints for supporting TOTP configuration.
       `GET /user/{id}/totp/status`
       `PUT /user/{id}/totp/config`
       `DELETE /user/{id}/totp/config`
       `POST /user/{id}/totp/new_secret`
     * Added new endpoints for supporting multicluster Rubrik Backup Service.
       `POST /vmware/vm/make_primary`
       `POST /host/make_primary`
     * Added new endpoints for managing multicluster Rubrik Backup Service
       certificates.
       `GET /certificate/agent`
       `POST /certificate/agent`
       `DELETE /certificate/agent/{id}`

     ### Changes to V1 API in Rubrik Version 5.3.0
     ## Deprecation:
     * Deprecated `SnapshotCloudStorageTier` enum value Cold. It will be left,
       but will be mapped internally to the new value, AzureArchive,
       which is recommended as a replacement.
     * Removed signature and sigAlg return fields from `SamlSsoAuthnRequestDetail`,
       which were wrongly introduced in 5.1.
     * Removed `GET /vmware/resource_pool` endpoint, which doesn't have backend implementation.
     * Removed `GET /vmware/resource_pool/{id}` endpoint, which doesn't have backend implementation.
     ## New features:
     * Added `Deleted` as new failover cluster node connection status in
       FailoverClusterNodeConnectionStatus. The FailoverClusterNodeConnectionStatus
       is in FailoverClusterNode object and is used by
       `GET /failover_cluster`,
       `GET /failover_cluster/{id}`,
       `GET /failover_cluster/hierarchy/{id}`,
       `GET /failover_cluster/hierarchy/{id}/children`,
       `GET /failover_cluster/hierarchy/{id}/descendants` endpoints.
     * Added `POST /cluster/{id}/manual_discover_ll_ipv4` endpoint to allow discovery of new
       nodes over link local ipv4 network.
     * Added new optional field `groupMaxLevel` to `AdvancedLdapConfiguration`
       included in `LdapServiceSummary`, `LdapServiceInfo` and `LdapServiceInfoUpdate`
       objects used by endpoints:
       `GET /ldap_service`,
       `POST /ldap_service`,
       `GET /ldap_service/{id}`,
       `PUT /ldap_service/{id}`,
       `PATCH /ldap_service/{id}`.
     * Added `is_on_demand` as an optional parameter to `GET /job_monitoring`
     * Added `GET /cluster/{id}/syslog_msg_mib_link` and
       `GET /cluster/{id}/syslog_tc_mib_link` endpoints to allow downloading syslog
       SNMP MIB files.
     * Added `POST /vmware/vm/missed_recoverable_range` endpoint to get missed recoverable
       ranges for a list of virtual machines.
     * Added `GET /backup/retry/{id}` endpoint to get status of reschedule
       operation.
     * Added `POST /backup/retry` endpoint to reschedule unsuccessful backup tasks.
     * Added `POST /vmware/vm/recoverable_range` endpoint to get recoverable ranges
       for a list of virtual machines.
     * Added endpoint `POST /hierarchy/bulk_sla_conflicts`. Bulk get the list of
       descendant objects with SLA conflicts.
     * Added endpoint `GET /snapshot/{id}/storage/stats`. Returns storage stats
       for a snapshot.
     * Added optional query parameter `include_expired` to `GET /certificate`
       endpoint, excluded expired certs by default after the change.
     * Added endpoint
       `GET /job_monitoring/subscription`. Gets all subscriptions to
       monitoring page.
     * Modified `SnapshotCloudStorageTier`, enum adding values AzureArchive, Glacier,
       and GlacierDeepArchive.
     * Added endpoint
       `GET /backup/verify/{id}`. Get asynchronous request
       details for a Backup Verification job.
     * Added new optional field `privateKey` to `CertificateImportRequest`
       object sent to `POST /certificate`. Using this field will fail the request
       if the provided private key is not successfully parsed.
     * Added endpoint
       `DELETE /job_monitoring/subscription/{subscription_id}`. Delete a
       monitoring page email subscription.
     * Added endpoint
       `PATCH /job_monitoring/subscription/{subscription_id}`. Update a
       monitoring email subscription.
     * Added endpoint
       `GET /job_monitoring/subscription/{subscription_id}`. Get a
       specific monitoring email subscription by id.
     * Added endpoint
       `POST /job_monitoring/subscription`. Create an email subscription
       to the job monitoring page.
     * Added new endpoint `POST /backup/verify`
        Verifies the validity of a snapshot.
     * Added endpoint `PATCH /organization/{id}/envoy/bulk`. Update a list of
       Rubrik Envoy objects.
     * Added new field `isGpsLoginEnabled` to `SamlSsoStatus` returned by
       `GET /saml/sso_status`
     * Added endpoint `GET /oracle/aco_example_download_link`. Get a download link
       for an example Advanced Recovery Options file.
     * Added endpoint `POST /organization/{id}/envoy/bulk`. Create a list of Rubrik
       Envoy objects.
     * Added endpoint `Delete /organization/{id}/envoy/bulk`. Remove a list of
       Rubrik Envoy objects.
     * Added organization ID parameter to the response object
       IdProviderAuthDomainSummary.
     * Added endpoint `GET /vmware/vcenter/hotadd/vm`. Gets details about
        all HotAdd proxy virtual machines.
     * Added endpoint `POST /sap_hana/system/{id}/refresh`. Initiates an
        asynchronous job to refresh SAP HANA system metadata.
     * Added new field `vcenterName` to `VritualMachineDetail` returned by
       `GET /vmware/vm/{id}`.
     * Added endpoint `DELETE /sap_hana/system/{id}`. Initiates an asynchronous
        job to delete a SAP HANA system object.
     * Added endpoint `GET /sap_hana/system/request/{id}`. Gets details about
        a SAP HANA system related asynchronous request.
     * Added endpoint `POST /sap_hana/db/{id}/snapshot`. Initiates a job to
        take an on-demand full snapshot of a SAP HANA database.
     * Added endpoint `GET /sap_hana/db/request/{id}`. Gets details about
        a SAP HANA database related request.
     * Added endpoint `GET /sap_hana/db/{id}/snapshot`. Returns a list of
        summary of snapshots of a SAP HANA database.
     * Added endpoint `GET /sap_hana/db/snapshot/{id}`. Gets details about
        a SAP HANA database snapshot.
     * Added the `POST /oracle/db/{id}/validate` to trigger an validation job on Oracle backups.
     * Added new values `RetentionSlaDomainName` , `ObjectType`, `SnapshotCount`,
       `AutoSnapshotCount` and  `ManualSnapshotCount` to
       `UnmanagedObjectSortAttribute` field of the
       `GET /unmanaged_object/reader_object` endpont.
     * Added new values `RetentionSlaDomainName` , `ObjectType`, `SnapshotCount`,
       `AutoSnapshotCount` and  `ManualSnapshotCount` to
       `UnmanagedObjectSortAttribute` field of the `GET /unmanaged_object` endpont.
     * Added the `POST /replication/location_pause/disable` to
        resume replication from source cluster(s).
     * Added the `POST /replication/location_pause/enable` to
        pause replication from source cluster(s).
     * Added endpoint `POST /sap_hana/system`. Adds new entry for SAP HANA system
        and stores in database.
     * Added endpoint `GET /sap_hana/db`. Returns summary of all discovered
        SAP HANA databases.
     * Added endpoint `GET /sap_hana/db/{id}` Returns summary of SAP HANA database
        with given ID.
     * Added `AggregateSapHanaDb`, `SapHanaDb` and `SapHanaSystem` to the
        `object_type` filtering field of the `GET /event/latest` endpoint.
     * Added the new optional field `failoverClusterAppName` to FilesetSummary
        returned by `GET /fileset` and `GET /fileset/{id}`.
     * Added the `GET /user/lockout` endpoint to
        get the status of local user account lockout.
     * Added the `PATCH /user/lockout` endpoint to
        update the local user account lockout config.
     * Added the `POST /user/{id}/unlock` endpoint to unlock local user.
     * Added the `GET /cluster/{id}/upgrade/precheck_status` endpoint to
        get the result of the latest run of periodic upgrade prechecks.
     * Added the `POST /cluster/{id}/upgrade/precheck_status` endpoint to
        start an on-demand run of the periodic upgrade prechecks.
     * Added the `GET /cluster/{id}/rubrik_support_portal_credentials`
        endpoint to check if the cluster already has credentials
        for the Rubrik support portal.
     * Added the `POST /cluster/{id}/rubrik_support_portal_credentials`
        endpoint to update Rubrik support portal credentials for
        the cluster.
     * Added the `GET /vmware/vcenter/{id}/networks` endpoint to get the
        networks in a vCenter.
     * Added new field `isOracleHost` to HostDetail
       returned by `GET /host/{id}`.
     * Added the `POST /vmware/vcenter/{id}/hotadd/network` endpoint to set
       the network for a HotAdd proxy virtual machine.
     * Added new endpoint `GET /host/{id}/nas_share_discover`. Returns all
       shares on the NAS host specified by 'id'.
     * Added new endpoint `POST /host/share/bulk` to allow adding NAS
       shares in bulk without validating their share credentials.
     * Added `GET /volume_group` to retrieve a current list of Volume Groups.
     * Added `GET /volume_group/{id}` to retrieve the details of a Volume Group.
     * Added `PATCH /volume_group/{id}` to modify the details of a Volume Group.
     * Added `GET /volume_group/{id}/snapshot` to retrieve the details of all
       snapshots of a Volume Group.
     * Added `POST /volume_group/{id}/snapshot` to create an on-demand snapshot
       of a Volume Group.
     * Added `GET /volume_group/snapshot/{id}` to get the details of a Volume
       Group snapshot.
     * Added `GET /volume_group/snapshot/mount` to retrieve summary information
       of all Volume Group mounts.
     * Added `GET /volume_group/snapshot/mount/{id}` to retrieve summary
       information of one Volume Group mount.
     * Added `GET /host/{id}/volume` to retrieve a list of all volumes on a
       Volume Group host.
     * Made field `restoreScriptSmbPath` optional in `VolumeGroupMountSummary`.
       This change affects the endpoints `/volume_group/snapshot/mount` and
       `/volume_group/snapshot/mount/{id}`.
     * Added endpoint `GET /mfa/rsa/server` to get all MFA servers.
     * Added endpoint `POST /mfa/rsa/server` to create a new MFA server.
     * Added endpoint `GET /mfa/rsa/server/{id}` to get a specific MFA server.
     * Added endpoint `PATCH /mfa/rsa/server/{id}` to update an MFA server.
     * Added endpoint `DELETE /mfa/rsa/server/{id}` to delete an MFA server.
     * Added endpoint `PUT /cluster/{id}/security/web_signed_cert`
        to set the web server certificate.
     * Added endpoint `DELETE /cluster/{id}/security/web_signed_cert`
        to use the default, self-signed web server certificate.
     * Added endpoint `PUT /cluster/{id}/security/kmip/client` to configure
        the KMIP client on Rubrik.
     * Added endpoint `GET /cluster/{id}/security/kmip/client` to get
        the KMIP client configuration.
     * Added endpoint `GET /cluster/{id}/security/kmip/server` to get the
        KMIP server configurations.
     * Added endpoint `PUT /cluster/{id}/security/kmip/server` to configure a
        KMIP server.
     * Added endpoint `DELETE /cluster/{id}/security/kmip/server` to delete a
        configured KMIP server.
     * Added endpoint `GET /database/log_report` to retrieve the database log
        report summary.
     * Added endpoint `POST /unmanaged_object/assign_retention_sla` to assign
        a retention SLA to unmanaged objects asynchronously.
     * Added endpoint `GET /sap_hana/db/{id}/recoverable_range`. Gets details
        about recoverable ranges of a SAP HANA database.
     * Added new  field `legalHoldDownloadConfig` to `MssqlBackupSelection` and
       `DownloadMssqlBackupFilesByIdJobConfig`. An optional Boolean that specifies
       whether the download is in response to a Legal Hold. This change affects
       endpoints `/mssql/db/{id}/download_files_by_id`,
       `/mssql/db/{id}/download_files` and `/mssql/db/{id}/browse`.
     * Added new field `canUnmount` to `VolumeGroupMountSummary`, an optional
       boolean value that indicates if the logged-in user has the authority
       to remove the specified mount.
     * Added `GET /vmware/vcenter/{id}/hotadd/needed` endpoint to get the
        number of HotAdd proxies needed for a vCenter.
     * Added endpoint `DELETE /sap_hana/db/snapshot/{id}`. Initiates a request
       to delete a full snapshot of a SAP HANA database.
     * Added new field `needsMigration` to `VolumeGroupSummary`. This change
       affects the endpoints `GET /volume_group` and `GET /volume_group/{id}`.
     * Added new fields `usedFastVhdx` and `fileSizeInBytes` to
       `VolumeGroupSnapshotSummary`. This change affects the endpoints
       `GET /volume_group/{id}/snapshot` and `GET /volume_group/snapshot/{id}`.
     * Added endpoint `GET /cluster/me/upgrade/monitor_events` to get notifications
       about events occurring at CDM.
     * Added endpoint `GET /volume_group/{id}/latest_snapshot` to retrieve summary
       information of the latest snapshot of a Volume Group.
     * Added `GET /vmware/vcenter/{id}/hotadd/bandwidth` endpoint to get the
       HotAdd bandwidth limits for a vCenter.
     * Added `POST /vmware/vcenter/{id}/hotadd/bandwidth` endpoint to set the
       HotAdd bandwidth limits for a vCenter.
     * Added field `isVmc` returned by `GET /vmware/vcenter` to retrieve summary
       information of a vCenter.
     * Added new optional field `unreadable` to `BrowseResponse`, which is used by
       `GET /browse`.
     * Added new endpoint `GET /config/history/list_updates` Returns a list of
       filtered configuration updates.
     * Added new endpoint `GET /config/history/ondate` Returns a list of
       configurations and their values on a given date.
     * Added new field `dataToTransfer` to `EventSeriesSummaryV1`, an optional
       integer value that represents the amount of data that needs to be
       transferred by the job corresponding to the event.
     * Added new field `estimatedTimeRemaining` to `EventSeriesSummaryV1`, an
       optional string value that represents the estimated time remaining until
       the job corresponding to the event has completed. The estimated time has
       millisecond granularity.
     * Added endpoint `GET /sap_hana/db/{id}/missed_snapshot` Returns a list of
        summary information for the missed snapshots of a SAP HANA database.
     * Added new field `forceFull` to `VolumeGroupSummary`. This change
       affects the endpoints `GET /volume_group` and `GET /volume_group/{id}`.
     * Modified afterId in response of `GET /event/latest` and `GET /event`
       to point to each individual event in the list response instead of having
       all afterId values in the list response point to the last event in the
       list.
     * Copied `GET /mssql/availability_group` endpoint from internal to v1 to get
       all SQL Server availability groups.
     * Copied `GET /mssql/availability_group/{id}` endpoint from internal to v1 to
       get details of a SQL Server availability group.
     * Copied `PATCH /mssql/availability_group/{id}` endpoint from internal to
       v1 to update a SQL Server availability group.
     * Copied `PATCH /mssql/db/bulk` endpoint from internal to v1 to update multiple
       SQL Server databases.
     * Copied `POST /mssql/db/bulk/snapshot` endpoint from internal to v1 to take on
       demand snapshot of multiple SQL Server databases.
     * Copied `GET /mssql/db/bulk/snapshot/{id}` endpoint from internal to v1 to get
       details of on demand snapshot of multiple SQL Server databases.
     * Copied `GET /mssql/db/count` endpoint from internal to v1 to get the count of
       SQL Server databases.
     * Copied `GET /mssql/instance/count` endpoint from internal to v1 to get the
       count of SQL Server instances.
     * Copied `DELETE /mssql/db/{id}/recoverable_range/download` endpoint from
       internal to v1 to delete downloaded recoverable ranges of a SQL Server
       database.
     * Copied `GET /mssql/db/recoverable_range/download/{id}` endpoint from
       internal to v1 to get the status of delete downloaded recoverable range job.
     * Copied `GET /mssql/db/{id}/compatible_instance` endpoint from internal to v1
       to get compatible instances for the recovery of a SQL Server database.
     * Copied `GET /mssql/db/{id}/restore_estimate` endpoint from internal to v1 to
       get size estimate for restore or export of a SQL Server database.
     * Copied `GET /mssql/db/{id}/restore_files` endpoint from internal to v1 to get
       all data files to be restored for an export or restore operation on a SQL
       Server database.
     * Copied `GET /mssql/db/{id}/snappable_id` endpoint from internal to v1 to get
       the snappable id of a SQL Server database.
     * Copied `GET /mssql/db/defaults` endpoint from internal to v1 to get the
       default properties for SQL Server databases.
     * Copied `PATCH /mssql/db/defaults` endpoint from internal to v1 to update the
     * Added new field `instanceChildrenInfo` to the response from the v1 endpoint
       `GET /mssql/hierarchy/root/children`. The new field is an array of type
       `MssqlInstanceShortSummary` that contains the managed identifier, the name and
       active node for a Windows Failover Cluster instance.
     * Added enums for the `sort_by` parameter in `GET /mssql/db`.
     * Added `POST /cluster/{id}/manual_discover_ipv4` endpoint to allow discovery of new
       nodes over IPv4 network.
     ## Breaking changes:
     * Added new field `nodeName` in FailoverClusterNodeOrder object used by
       `PATCH /failover_cluster/failover_cluster_app/{id}` and
       `POST /failover_cluster/failover_cluster_app` endpoints.
       The `nodeName` is the name of the failover cluster node.
     * Renamed the field `vips` in FailoverClusterAppSource object to
       `virtualIps`. The FailoverClusterAppSource is used by
       `GET /failover_cluster/failover_cluster_app`,
       `GET /failover_cluster/failover_cluster_app/{id}`,
       `GET /failover_cluster/hierarchy/{id}`,
       `GET /failover_cluster/hierarchy/{id}/children`,
       `GET /failover_cluster/hierarchy/{id}/descendants`,
       `PATCH /failover_cluster/failover_cluster_app/{id}` and
       `POST /failover_cluster/failover_cluster_app` endpoints.
     * Removed `POST /cluster/{id}/manual_discover_ll_ipv4`

    ### Changes to V1 API in Rubrik Version 5.2.2
     ## New features:
     * Added optional field isOnDemand to `EventSeriesSummaryV1`.
       The parameter indicates if the job associated with the event
       series is a on demand job.

     ### Changes to V1 API in Rubrik Version 5.2.1
     ## New features:
     * Added optional query parameters limit and offset to support pagination for
       GET /role endpoint.

     ### Changes to V1 API in Rubrik Version 5.2.0
     ## Deprecation:
     * Deprecating `slaId` field returned by `GET /mssql/db/{id}/snapshot`.
        See **snapshotRetentionInfo** to track retention for
        snapshots.
     * Deprecating `slaId` field returned by `GET /mssql/db/snapshot/{id}`.
        See **snapshotRetentionInfo** to track retention for
        snapshots.
     * Deprecating `slaId` field returned by `GET /vmware/vm/{id}/snapshot`.
        See **snapshotRetentionInfo** to track retention for
        snapshots.
     * Deprecating `slaId` field returned by `GET /vmware/vm/{id}`.
        See **snapshotRetentionInfo** to track retention for
        snapshots.
     * Deprecating `slaId` field returned by `GET /vmware/vm/snapshot/{id}`.
        See **snapshotRetentionInfo** to track retention for
        snapshots.
     * Deprecating `slaId` field returned by `GET /hdfs/snapshot/{id}`.
        See **snapshotRetentionInfo** to track retention for
        snapshots.
     * Deprecating `slaId` field returned by `GET /hdfs`.
        See **snapshotRetentionInfo** to track retention for
        snapshots.
     * Deprecating `slaId` field returned by `POST /hdfs`.
        See **snapshotRetentionInfo** to track retention for
        snapshots.
     * Deprecating `slaId` field returned by `GET /hdfs/{id}`.
        See **snapshotRetentionInfo** to track retention for
        snapshots.
     * Deprecating `slaId` field returned by `PATCH /hdfs/{id}`.
        See **snapshotRetentionInfo** to track retention for
        snapshots.
     * Deprecating `slaId` field returned by `GET /fileset/snapshot/{id}`.
        See **snapshotRetentionInfo** to track retention for
        snapshots.
     * Deprecating `slaId` field returned by `GET /fileset`.
        See **snapshotRetentionInfo** to track retention for
        snapshots.
     * Deprecating `slaId` field returned by `POST /fileset`.
        See **snapshotRetentionInfo** to track retention for
        snapshots.
     * Deprecating `slaId` field returned by `GET /fileset/{id}`.
        See **snapshotRetentionInfo** to track retention for
        snapshots.
     * Deprecating `slaId` field returned by `PATCH /fileset/{id}`.
        See **snapshotRetentionInfo** to track retention for
        snapshots.
     * Deprecating `slaId` field returned by `GET /failover_cluster/
        failover_cluster_app/{id}`.
        See **snapshotRetentionInfo** to track retention for
        snapshots.
     ## New features:
     * Added new endpoint
      `GET /data_source/{id}/expired_custom_retention_snapshots`.
       Get all expired snapshots which were explicitly assigned a SLA domain.
     * Added new field `parentSnapshotId` to FilesetSnapshotDetail returned by
       `GET /fileset/snapshot/{id}`.
     * Added new field `parentSnapshotId` to HdfsSnapshotDetail returned by
       `GET /hdfs/snapshot/{id}`.
     * Added new field `parentSnapshotId` to MssqlDbSnapshotSummary returned by
       `GET /mssql/db/{id}/snapshot`.
     * Added new field `parentSnapshotId` to MssqlDbSnapshotDetail returned by
       `GET /mssql/db/snapshot/{id}`.
     * Added new field `parentSnapshotId` to VmSnapshotSummary returned by
       `GET /vmware/vm/{id}/snapshot`.
     * Added new field `parentSnapshotId` to VmSnapshotDetail returned by
       `GET /vmware/vm/snapshot/{id}`.
     * Added new field `retentionSlaDomanId` to MssqlHierarchyObjectSummary
       returned by `GET /mssql/hierarchy/{id}`.
     * Added new field `retentionSlaDomanId` to MssqlHierarchyObjectSummary
       returned by `GET /mssql/hierarchy/{id}/descendants`.
     * Added new field `retentionSlaDomanId` to MssqlHierarchyObjectSummary
       returned by `GET /mssql/hierarchy/{id}/children`.
     * Added new field `retentionSlaDomanId` to MssqlDbDetail
       returned by `GET /mssql/db/{id}`.
     * Added new field `retentionSlaDomanId` to MssqlDbDetail
       returned by `PATCH /mssql/db/{id}`.
     * Added new field `retentionSlaDomanId` to MssqlDbDetail
       returned by `PATCH /mssql/db/bulk`.
     * Added new field `retentionSlaDomanId` to MssqlDbSnapshotDetail
       returned by `GET /mssql/db/snapshot/{id}`.
     * Added new field `retentionSlaDomanId` to MssqlDbSummary
       returned by `GET /mssql/db`.
     * Added new field `retentionSlaDomainId` to ComputeClusterDetail
       returned by `PATCH /vmware/compute_cluster/{id}`.
     * Added new field `retentionSlaDomainId` to VmwareHostDetail
       returned by `PATCH /vmware/host/{id}`.
     * Added new field `retentionSlaDomainId` to VmwareVmMountDetailV1
       returned by `PATCH /vmware/vm/snapshot/mount/{id}`.
     * Added new field `retentionSlaDomainId` to VmwareVmMountSummary
       returned by `GET /vmware/vm/snapshot/mount`.
     * Added new field `retentionSlaDomainId` to BulkOracleDbDetails
       returned by `PATCH /oracle/db/bulk`.
     * Added new field `retentionSlaDomainId` to ComputeClusterDetail
       returned by `GET /vmware/compute_cluster/{id}`.
     * Added new field `retentionSlaDomainId` to UnmanagedObjectDetails
       returned by `GET /unmanaged_object`.
     * Added new field `retentionSlaDomainId` to UnmanagedObjectSummary
       returned by `GET /unmanaged_object/reader_object`.
     * Added new field `retentionSlaDomainId` to VirtualMachineDetail
       returned by `GET /vmware/vm/{id}`.
     * Added new field `retentionSlaDomainId` to VirtualMachineDetail
       returned by `PATCH /vmware/vm/{id}`.
     * Added new field `retentionSlaDomainId` to VirtualMachineSummary
       returned by `GET /vmware/vm`.
     * Added new field `retentionSlaDomainId` to VmSnapshotDetail
       returned by `GET /vmware/vm/snapshot/{id}`.
     * Added new field `retentionSlaDomainId` to VmwareHostDetail
       returned by `GET /vmware/host/{id}`.
     * Added new field `retentionSlaDomainId` to VmwareVmMountDetailV1
       returned by `GET /vmware/vm/snapshot/mount/{id}`.
     * Added new field `retentionSlaDomainId` to UnmanagedObjectSummary
       returned by `GET /unmanaged_object`.
     * Added new endpoint `GET /report/compliance_summary_sla`. Returns the
       compliance summary information for all protected objects based on a
       SLA Domain-based requirement of whether the last expected snapshot was taken.
       Currently behind flag, will not return correct information
       until flag is flipped.
     * Added endpoint `GET /cluster/{id}/upgrade/available_version` which
          retrieves a list of Rubrik CDM versions available to upgrade the Rubrik
          cluster.
     * Added endpoint `GET /cluster/{id}/upgrade/request/${request_id}` to
       query the status of an asynchronous upgrade related request.
     * Added endpoint `POST /cluster/{id}/upgrade/stage_cdm_software` which
       allows staging CDM software for upgrades on the cluster.
     * Added new field `hasSnapshotsWithPolicy` to UnmanagedObjectDetails returned
       by GET `/unmanaged_object`.
     * Added new field `hasSnapshotsWithPolicy` to UnmanagedObjectSummary returned
       by GET `/unmanaged_object`.
     * Added new field `hasSnapshotsWithPolicy` to UnmanagedObjectSummary returned
       by GET `/unmanaged_object/reader_object`
     * Added new field `slaLastUpdateTime` to BulkOracleDbDetails
       returned by `PATCH /oracle/db/bulk`.
     * Added new field `slaLastUpdateTime` to BulkOracleHostDetails
       returned by `PATCH /oracle/host/bulk`.
     * Added new field `slaLastUpdateTime` to BulkOracleRacDetails
       returned by `PATCH /oracle/rac/bulk`.
     * Added new field `slaLastUpdateTime` to ComputeClusterDetail
       returned by `GET /vmware/compute_cluster/{id}`.
     * Added new field `slaLastUpdateTime` to ComputeClusterDetail
       returned by `PATCH /vmware/compute_cluster/{id}`.
     * Added new field `slaLastUpdateTime` to ComputeClusterSummary
       returned by `GET /vmware/compute_cluster`.
     * Added new field `slaLastUpdateTime` to FailoverClusterAppDetail
       returned by `GET /failover_cluster/failover_cluster_app/{id}`.
     * Added new field `slaLastUpdateTime` to FailoverClusterAppSummary
       returned by `GET /failover_cluster/failover_cluster_app`.
     * Added new field `slaLastUpdateTime` to FailoverClusterAppSummary
       returned by POST `/failover_cluster/failover_cluster_app`.
     * Added new field `slaLastUpdateTime` to FailoverClusterAppSummary
       returned by `PATCH /failover_cluster/failover_cluster_app/{id}`.
     * Added new field `slaLastUpdateTime` to FailoverClusterDetail
       returned by POST `/failover_cluster`.
     * Added new field `slaLastUpdateTime` to FailoverClusterDetail
       returned by `GET /failover_cluster/{id}`.
     * Added new field `slaLastUpdateTime` to FailoverClusterDetail
       returned by `PATCH /failover_cluster/{id}`.
     * Added new field `slaLastUpdateTime` to FailoverClusterHierarchyObjectSummary
       returned by `GET /failover_cluster/hierarchy/{id}`.
     * Added new field `slaLastUpdateTime` to FailoverClusterHierarchyObjectSummary
       returned by `GET /failover_cluster/hierarchy/{id}/children`.
     * Added new field `slaLastUpdateTime` to FailoverClusterHierarchyObjectSummary
       returned by `GET /failover_cluster/hierarchy/{id}/descendants`.
     * Added new field `slaLastUpdateTime` to FailoverClusterSummary
       returned by `GET /failover_cluster`.
     * Added new field `slaLastUpdateTime` to FilesetDetail
       returned by `POST /fileset`.
     * Added new field `slaLastUpdateTime` to FilesetDetail
       returned by `GET /fileset/{id}`.
     * Added new field `slaLastUpdateTime` to FilesetDetail
       returned by `PATCH /fileset/{id}`.
     * Added new field `slaLastUpdateTime` to FilesetSummary
       returned by `GET /fileset`.
     * Added new field `slaLastUpdateTime` to HdfsDetail
       returned by `POST /hdfs`.
     * Added new field `slaLastUpdateTime` to HdfsDetail
       returned by `GET /hdfs/{id}`.
     * Added new field `slaLastUpdateTime` to HdfsDetail
       returned by `PATCH /hdfs/{id}`.
     * Added new field `slaLastUpdateTime` to HdfsSummary
       returned by `GET /hdfs`.
     * Added new field `slaLastUpdateTime` to HostHierarchyObjectSummary
       returned by `GET /host/hierarchy/{id}`.
     * Added new field `slaLastUpdateTime` to HostHierarchyObjectSummary
       returned by `GET /host/hierarchy/{id}/children`.
     * Added new field `slaLastUpdateTime` to VcenterDetail
       returned by `GET /vmware/vcenter/{id}`.
     * Added new field `slaLastUpdateTime` to VcenterSummary
       returned by `GET /vmware/vcenter`.
     * Added new field `slaLastUpdateTime` to VcenterSummary
       returned by `PATCH /vmware/vcenter/{id}`.
     * Added new field `slaLastUpdateTime` to VcenterSummary
       returned by `PUT /vmware/vcenter/{id}`.
     * Added new field `slaLastUpdateTime` to VirtualMachineDetail
     * Added `PATCH /host/share/bulk` endpoint to update multiple network shares.
     * Added new field `isCustomRetentionApplied` to SnapshotSummary returned by
       `GET /unmanaged_object/{id}/snapshot`.
     * Added new field `slaLastUpdateTime` to VirtualMachineDetail
       returned by `GET /vmware/vm/{id}`.
     * Added new field `slaLastUpdateTime` to VirtualMachineDetail
       returned by `PATCH /vmware/vm/{id}`.
     * Added new field `slaLastUpdateTime` to VirtualMachineSummary
       returned by `GET /vmware/vm`.
     * Added new field `slaLastUpdateTime` to VmSnapshotDetail
       returned by `GET /vmware/vm/snapshot/{id}`.
     * Added new field `slaLastUpdateTime` to VmwareHostDetail
       returned by `GET /vmware/host/{id}`.
     * Added new field `slaLastUpdateTime` to VmwareHostDetail
       returned by `PATCH /vmware/host/{id}`.
     * Added new field `slaLastUpdateTime` to VmwareHostSummary
       returned by `GET /vmware/host`.
     * Added new field `slaLastUpdateTime` to VmwareVmMountDetailV1
       returned by `GET /vmware/vm/snapshot/mount/{id}`.
     * Added new field `slaLastUpdateTime` to VmwareVmMountDetailV1
       returned by `PATCH /vmware/vm/snapshot/mount/{id}`.
     * Added new field `slaLastUpdateTime` to VmwareVmMountSummary
       returned by `GET /vmware/vm/snapshot/mount`.
     * Added new field `isCustomRetentionApplied` to SnapshotSummary returned by
       `GET /unmanaged_object/{id}/snapshot`.
     * Added new Field `configuredSlaDomainType` to BulkOracleDbDetails returned by
      `PATCH /oracle/db/bulk`.
     * Added new Field `configuredSlaDomainType` to BulkOracleHostDetails returned
       by `PATCH /oracle/host/bulk`.
     * Added new Field `configuredSlaDomainType` to BulkOracleRacDetails returned by
      `PATCH /oracle/rac/bulk`.
     * Added new Field `configuredSlaDomainType` to ComputeClusterDetail returned by
      `GET /vmware/compute_cluster/{id}`.
     * Added new Field `configuredSlaDomainType` to ComputeClusterDetail returned by
      `PATCH /vmware/compute_cluster/{id}`.
     * Added new Field `configuredSlaDomainType` to ComputeClusterSummary returned
       by `GET /vmware/compute_cluster`.
     * Added new Field `configuredSlaDomainType` to FailoverClusterAppDetail
       returned by `GET /failover_cluster/failover_cluster_app/{id}`.
     * Added new Field `configuredSlaDomainType` to FailoverClusterAppSummary
       returned by `GET /failover_cluster/failover_cluster_app`.
     * Added new Field `configuredSlaDomainType` to FailoverClusterAppSummary
       returned by `POST /failover_cluster/failover_cluster_app`.
     * Added new Field `configuredSlaDomainType` to FailoverClusterAppSummary
       returned by `PATCH /failover_cluster/failover_cluster_app/{id}`.
     * Added new Field `configuredSlaDomainType` to FailoverClusterDetail returned
       by `POST /failover_cluster`.
     * Added new Field `configuredSlaDomainType` to FailoverClusterDetail returned
       by `GET /failover_cluster/{id}`.
     * Added new Field `configuredSlaDomainType` to FailoverClusterDetail returned
       by `PATCH /failover_cluster/{id}`.
     * Added new Field `configuredSlaDomainType` to
       FailoverClusterHierarchyObjectSummary returned by
       `GET /failover_cluster/hierarchy/{id}`.
     * Added new Field `configuredSlaDomainType` to
       FailoverClusterHierarchyObjectSummary returned by
       `GET /failover_cluster/hierarchy/{id}/children`.
     * Added new Field `configuredSlaDomainType` to
       FailoverClusterHierarchyObjectSummary returned by
       `GET /failover_cluster/hierarchy/{id}/descendants`.
     * Added new Field `configuredSlaDomainType` to  FailoverClusterSummary returned
       by `GET /failover_cluster`.
     * Added new Field `configuredSlaDomainType` to FilesetDetail returned by
      `POST /fileset`.
     * Added new Field `configuredSlaDomainType` to FilesetDetail returned by
      `GET /fileset/{id}`.
     * Added new Field `configuredSlaDomainType` to FilesetDetail returned by
      `PATCH /fileset/{id}`.
     * Added new Field `configuredSlaDomainType` to FilesetSummary returned by
      `GET /fileset`.
     * Added new Field `configuredSlaDomainType` to HdfsDetail returned by
      `POST /hdfs`.
     * Added new Field `configuredSlaDomainType` to HdfsDetail returned by
      `GET /hdfs/{id}`.
     * Added new Field `configuredSlaDomainType` to HdfsDetail returned by
      `PATCH /hdfs/{id}`.
     * Added new Field `configuredSlaDomainType` to HdfsSummary returned by
      `GET /hdfs`.
     * Added new Field `configuredSlaDomainType` to HostHierarchyObjectSummary
       returned by `GET /host/hierarchy/{id}`.
     * Added new Field `configuredSlaDomainType` to HostHierarchyObjectSummary
       returned by `GET /host/hierarchy/{id}/children`.
     * Added new Field `configuredSlaDomainType` to UnmanagedObjectDetails returned
       by `GET /unmanaged_object`.
     * Added new Field `configuredSlaDomainType` to UnmanagedObjectSummary returned
       by `GET /unmanaged_object`.
     * Added new Field `configuredSlaDomainType` to UnmanagedObjectSummary returned
       by `GET /unmanaged_object/reader_object`.
     * Added new Field `configuredSlaDomainType` to VcenterDetail returned by
       `GET /vmware/vcenter/{id}`.
     * Added new Field `configuredSlaDomainType` to VcenterSummary returned by
       `GET /vmware/vcenter`.
     * Added new Field `configuredSlaDomainType` to VcenterSummary returned by
       `PATCH /vmware/vcenter/{id}`.
     * Added new Field `configuredSlaDomainType` to VcenterSummary returned by
       `PUT /vmware/vcenter/{id}`.
     * Added new Field `configuredSlaDomainType` to VirtualMachineDetail returned by
       `GET /vmware/vm/{id}`.
     * Added new Field `configuredSlaDomainType` to VirtualMachineDetail returned by
      `PATCH /vmware/vm/{id}`.
     * Added new Field `configuredSlaDomainType` to VirtualMachineSummary returned
       by `GET /vmware/vm`.
     * Added new Field `configuredSlaDomainType` to VmSnapshotDetail returned by
      `GET /vmware/vm/snapshot/{id}`.
     * Added new Field `configuredSlaDomainType` to VmwareHostDetail returned by
      `GET /vmware/host/{id}`.
     * Added new Field `configuredSlaDomainType` to VmwareHostDetail returned by
      `PATCH /vmware/host/{id}`.
     * Added new Field `configuredSlaDomainType` to VmwareHostSummary returned by
      `GET /vmware/host`.
     * Added new Field `configuredSlaDomainType` to VmwareVmMountDetailV1 returned
       by `GET /vmware/vm/snapshot/mount/{id}`.
     * Added new Field `configuredSlaDomainType` to VmwareVmMountDetailV1 returned
       by `PATCH /vmware/vm/snapshot/mount/{id}`.
     * Added new Field `configuredSlaDomainType` to VmwareVmMountSummary returned by
      `GET /vmware/vm/snapshot/mount`.
     * Added new field `isCustomRetentionApplied` to FilesetSnapshotDetail returned
       by `GET /fileset/snapshot/{id}`.
     * Added new field `isCustomRetentionApplied` to HdfsSnapshotDetail returned by
       `GET /hdfs/snapshot/{id}`.
     * Added new field `isCustomRetentionApplied` to MssqlDbSnapshotSummary returned
       by `GET /mssql/db/{id}/snapshot`.
     * Added new field `isCustomRetentionApplied` to MssqlDbSnapshotDetail returned
       by `GET /mssql/db/snapshot/{id}`.
     * Added new field `isCustomRetentionApplied` to VmSnapshotSummary returned by
       `GET /vmware/vm/{id}/snapshot`.
     * Added new field `isCustomRetentionApplied` to VmSnapshotDetail returned by
       `GET /vmware/vm/snapshot/{id}`.
     * Added endpoint `POST /cluster/{id}/manual_discover`, which allows
       the customer to manually input data that would be learned using
       mDNS discovery. Returns same output as the `discover` endpoint.
     * Added new endpoint `POST /data_source/{id}/snapshot/bulk_delete`.
        Delete given snapshots for an object.
     * Added new endpoint `POST /data_source/snapshot/bulk_delete`.
        Delete all snapshots for given objects.
     * Added new field `snapshotFrequency` to `snapshotLocationRetentionInfo` field
       of `SnapshotRetentionInfo` field of FilesetSnapshotDetail returned by
       `GET /fileset/snapshot/{id}`.
     * Added new field `snapshotFrequency` to `snapshotLocationRetentionInfo` field
       of `SnapshotRetentionInfo` field of HdfsSnapshotDetail returned by
       `GET/hdfs/snapshot/{id}`.
     * Added new field `snapshotFrequency` to `snapshotLocationRetentionInfo` field
       of `SnapshotRetentionInfo` field of MssqlDbSnapshotSummary returned by
       `GET /mssql/db/{id}/snapshot`.
     * Added new field `snapshotFrequency` to `snapshotLocationRetentionInfo` field
       of `SnapshotRetentionInfo` field of MssqlDbSnapshotDetail returned by
       `GET /mssql/db/snapshot/{id}`.
     * Added new field `snapshotFrequency` to `snapshotLocationRetentionInfo` field
       of `SnapshotRetentionInfo` field of VmSnapshotSummary returned by
       `GET /vmware/vm/{id}/snapshot`.
     * Added new field `snapshotFrequency` to `snapshotLocationRetentionInfo` field
       of `SnapshotRetentionInfo` field of VmSnapshotDetail returned by
       `GET /vmware/vm/snapshot/{id}`.
     * Added new field `SnapshotRetentionInfo` to FilesetSnapshotDetail returned by
       `GET /fileset/snapshot/{id}`.
     * Added new field `SnapshotRetentionInfo` to HdfsSnapshotDetail returned by
       `GET /hdfs/snapshot/{id}`.
     * Added new field `SnapshotRetentionInfo` to MssqlDbSnapshotSummary returned by
       `GET /mssql/db/{id}/snapshot`.
     * Added new field `SnapshotRetentionInfo` to MssqlDbSnapshotDetail returned by
       `GET /mssql/db/snapshot/{id}`.
     * Added new field `SnapshotRetentionInfo` to VmSnapshotSummary returned by
       `GET /vmware/vm/{id}/snapshot`.
     * Added new field `SnapshotRetentionInfo` to VmSnapshotDetail returned by
       `GET /vmware/vm/snapshot/{id}`.
     * Added new endpoint `GET /unmanaged_object/{id}/snapshot`. Returns summary
       of all the snapshots for a given object.
     * Added new endpoint `GET /unmanaged_object`. Returns the summary of all the
       objects with unmanaged snapshots.
     * Added new endpoint `GET /report/compliance_summary`. Returns the summary of
       snapshot compliance based on a time-based requirement of at least one
       snapshot in each 24 hour report period for each protected object.
       This endpoint ignores the policies assigned to protected objects through SLA
       Domains.
     * Added new endpoint `GET /cluster/{id}/node_id`. Returns the IDs of the
       nodes in the cluster.
     * Added new endpoint `GET /role`. Returns role metadata for all roles in an
       organization.
     * Added new endpoint `POST /role`. Create a new role.
     * Added new endpoint `GET /role/{id}`. Get role metadata and the list of
       principals assigned to a specific role.
     * Added new endpoint `PATCH /role/{id}`. Update metadata for a specific role.
     * Added new endpoint `DELETE /role/{id}`. Delete a role.
     * Added new endpoint `GET /principal`. Get principals.
     * Added new endpoint `GET /principal/role`. Get list of roles assigned to
       principals.
     * Added new endpoint `POST /principal/role`. Assign roles to principals.
     * Added new endpoint `POST /principal/role/bulk_revoke`. Revoke roles from
       principals.
     * Added `DELETE /certificate/{id}` endpoint to delete a certificate.
     * Added `PATCH /cluster/{id}/security/cors` endpoint to update the current CORS
       support configuration for a web server.
     * Added `GET /cluster/{id}/security/cors` endpoint to get the current CORS
       support configuration for a web server.
     * Added new optional field `failoverClusterAppId` to FilesetSummary and
       FilesetCreate in `POST /fileset`, `GET /fileset` and `PATCH /fileset/{id}`
       endpoints to enable clustered fileset backup.
     * Added `GET /unmanaged_object/reader_object` endpoint to get all
       unmanaged objects that are recovered from reader archival locations.
     * Added `GET /failover_cluster` endpoint to get all failover clusters.
     * Added `POST /failover_cluster` endpoint to create a failover cluster.
     * Added `GET /failover_cluster/{id}` endpoint to retrieve a failover
       cluster by id.
     * Added `PATCH /failover_cluster/{id}` endpoint to update a failover cluster.
     * Added `DELETE /failover_cluster/{id}` endpoint to delete a failover cluster.
     * Added `GET /failover_cluster/failover_cluster_app` endpoint to get all
       failover cluster apps.
     * Added `POST /failover_cluster/failover_cluster_app` endpoint to create a
       failover cluster app.
     * Added `GET /failover_cluster/failover_cluster_app/{id}` endpoint to retrieve
       a failover cluster app by ID.
     * Added `PATCH /failover_cluster/failover_cluster_app/{id}` endpoint to update
       a failover cluster app.
     * Added `DELETE /failover_cluster/failover_cluster_app/{id}` endpoint to delete
       a failover cluster app.
     * Added `GET /legal_hold/snapshot` endpoint to get snapshots under legal hold.
     * Added `POST /legal_hold/snapshot` endpoint to apply legal hold on a snapshot.
     * Added `GET /legal_hold/object` endpoint to get all objects with snasphot
       under legal hold.
     * Added `POST /legal_hold/snapshot/dissolve` to dissolve legal hold from
       snapshots.
     * Added optional field `shouldUseAgent` to `RestoreFileJobConfig`.
       in `POST /vmware/vm/snapshot/{id}/restore_file` to specify
       whether to use Rubrik Backup Service to restore file. Default value is true.
     * Added `America/Costa_Rica`and `America/St_Johns` as supported cluster time
       zones.
     * Added `GET /failover_cluster/hierarchy/{id}` to get summary of a
       failover cluster hierarchy object.
     * Added `GET /failover_cluster/hierarchy/{id}/children` to get list of
       immediate descendant objects.
     * Added `GET /failover_cluster/hierarchy/{id}/descendants` to get list of
       descendant objects.
     * Added `GET /job_monitoring` to get job summary information, with options
       to filter and sort the results for protection and recovery jobs that are
       currently running, scheduled to run or completed in the past 24 hours.
     * Added `GET /job_monitoring/summary_by_job_type` to get job summary
       information separated by job type for all jobs that are currently running,
       scheduled to run or completed in the past 24 hours.
     * Added `GET /job_monitoring/summary_by_job_state` to get job summary
       information separated by job state for all running jobs, jobs that have
       been scheduled and jobs that are complete, for protection and recovery
       jobs in the past 24 hours.
     * Added `GET /job_monitoring/csv_download_link` which returns a link to
       download job summary information with the same filters as the
       `GET /job_monitoring` API.
     * Added optional field 'legalHoldDownloadConfig' to
       'FilesetDownloadFileJobConfig', 'DownloadFileJobConfig'.
       This is an optional argument containing a Boolean parameter to depict if
       the download is being triggered for Legal Hold use case.
     * Added optional field isPlacedOnLegalHold to BaseSnapshotSummary.
       The Boolean parameter specifies whether the snapshot is placed under a
       Legal Hold.
     * Added `POST /mssql/db/{id}/browse` endpoint to list backups, which includes
       both snapshots and logs.
     * Added `POST /mssql/db/{id}/download_files` endpoint to download a list of
       backup files specified by time range or point in time.
     * Added `POST /mssql/db/{id}/download_files_by_id` endpoint to download a list
       of backup files specified by ID.
     * Added `PATCH /report/config` to set the number of days for which the report
       job instances for log jobs are retained.
     * Added ISO8601 format date as a way of specifying time in MssqlRecoveryPoint.
     * Added primaryDatabaseLogBackupFrequency parameter to the response objects
       MssqlLogShippingSummary and MssqlLogShippingDetail.
     * Added targetInstanceName parameter to MssqlMountSummary
     * Added `POST /mssql/db/{id}/download` endpoint to download the logs/snapshots
       required to restore a SQL database to a given recovery point.
     * Added the optional fields uid, surname, and emailAddress to the
       GenericCsrRequest (renamed from CsrRequest) and renamed WebCsrRequest
       to CsrRequest.
     * Added new endpoints `PATCH /oracle/db/bulk`,
       `PATCH /oracle/host/bulk`, and `PATCH /oracle/rac/bulk` for bulk
       updating an array of IDs with `OracleProperties`.
     * Added an optional query parameter
       `should_apply_to_existing_snapshots` to `PATCH /sla_domain/{id}` to
       apply the new SLA configuration to existing snapshots of data sources
       retained by the specified SLA Domain.
     * Added an optional query parameter
       `should_apply_to_existing_snapshots` to `PUT /sla_domain/{id}` to
       apply the new SLA configuration to existing snapshots of data sources
       retained by the specified SLA Domain.
     * Added optional field 'shouldForce' to 'UpdateMountConfig' in PATCH
       vmware/vm/snapshot/mount/{id} endpoint. Use this field to forcibly power
       down a virtual machine mounted with Storage vMotion.
     * Added a new optional field `isOracleHost` to `HostRegister` in `POST /host`.
       and `HostUpdate` in `PATCH /host/{id}` to indicate if we should discover
       Oracle information during registration and host refresh.
     * Added a new model `EventCsvDownloadResponse` and REST API endpoints
       `/event/csv_download_link` for downloading CSV file for event summary
       information in the Activity log UI page.
     * Added `GET /host/hierarchy/{id}` to get summary of a
       host/share hierarchy object.
     * Added `GET /host/hierarchy/{id}/children` to get list of
       immediate descendant objects.
     * Added `isInVmc` in `GET /vmware/vm/{id}` and `PATCH /vmware/vm/{id}`.
       to return whether the virtual machine is in a VMC setup.
     * Added `pendingSlaDomain` field to `GET /vmware/vm/{id}` and
       `PATCH /vmware/vm/{id}` to indicate a pending SLA Domain assignment
       on the Virtual Machine.
     * Added `pendingSlaDomain` field to `GET /mssql/hierarchy/{id}`,
       `GET /mssql/hierarchy/{id}/children`, and
       `GET /mssql/hierarchy/{id}/descendants` to indicate a pending SLA
       Domain assignment on the MSSQL object.
     * Added `pendingSlaDomain` field to `GET /fileset`,
       `POST /fileset`, `GET /fileset/{id}`, and `PATCH /fileset/{id}`
       to indicate a pending SLA Domain assignment on the Fileset.
     * Added `pendingSlaDomain` field to the objects referenced by the
       `filesets` field in the response objects of
       `GET /failover_cluster/hierarchy/{id}`,
       `GET /failover_cluster/hierarchy/{id}/children`,
       `GET /failover_cluster/hierarchy/{id}/descendants`,
       `GET /host/hierarchy/{id}`, and `GET /host/hierarchy/{id}/children`
       to indicate a pending SLA Domain assignment on the object.
     * Added endpoint `POST /vmware/vcenter/{id}/refresh_vm` which
        allows refreshing metadata for a single virtual machine in a vCenter.
     * Added optional field `shouldForceFull` to the body parameter of
       `PATCH /mssql/db/{id}` to enable requiring a full snapshot for a specified
        SQL Server database.
     * Added `LinuxHost`, `WindowsHost` and `NasHost` to the
       `object_type` filtering field of the `GET /event/latest` endpoint.

     ### Changes to V1 API in Rubrik Version 5.1.1
     ## Breaking changes:

     ## New features:
     * Added `has_instances` parameter to GET `/mssql/hierarchy/{id}/descendants`.
       and GET `/mssql/hierarchy/{id}/children`. Added `hasInstances` field in the
       response object.

     ### Changes to V1 API in Rubrik Version 5.1.0
     ## Deprecation:

     ## New features:
     * Added `GET /archive/aws/s3/{id}/account_id` endpoint to get the
       account ID of the AWS data location.
     * Added `DELETE /authorization/cache` endpoint to clear cached authorization
       information.
     * Added the `GET /syslog/export` endpoint to get all syslog export rules.
     * Added the `POST /syslog/export` endpoint to add a syslog export rule.
     * Added the `GET /syslog/export/{id}` endpoint to get a syslog export rule.
     * Added the `PATCH /syslog/export/{id}` endpoint to update a syslog export
       rule.
     * Added the `DELETE /syslog/export/{id}` endpoint to delete a syslog export
       rule.
     * Added the `POST /syslog/export/test` endpoint to test a syslog export rule.
     * Added stubs for the `GET /event/latest` endpoint to V1 to
       facilitate a future migration from internal to V1.
     * Added stubs for the `GET /event_series/{id}` endpoint to V1
       to facilitate a future migration from internal to V1.
     * Added stubs for the `GET /event` endpoint to V1 to facilitate
       a future migration from internal to V1.
     * Added optional query parameter 'snappableStatus' to /vmware/vcenter,
       /vmware/compute_cluster, /vmware/host,  /host, /mssql/instance, and
       /windows_cluster. This parameter enables a user to fetch the set of
       protectable objects from the list of objects visible to that user.
     * Added optional field `alias` to HostSummary, HostRegister, and HostUpdate
       schemas. This field will allow the user to specify an alias for each host
       which can be used for search.
     * Added `POST /archive/location/{location_id}/reader/refresh/data_sources`.
       endpoint to refresh the metadata of a list of given data sources from
       the given reader location.
     * Added `POST /managed_volume/snapshot/export/{id}/script` endpoint to
       generate a script to create a directory to view all files in all channels
       of a managed volume snapshot export.
     * Moved the `GET /blackout_window` endpoint from internal to V1.
     * Moved the `PATCH /blackout_window` endpoint from internal to V1.
     * Added `GET /certificate` endpoint to get all imported certificates.
     * Added `POST /certificate` endpoint to import a certificate.
     * Added `GET /certificate/{id}` endpoint to retrieve a certificate by id.
     * Added `PATCH /certificate/{id}` endpoint to update a certificate.
     * Added `GET /csr` endpoint to get all outstanding
       Certificate-Signing-Requests.
     * Added `POST /csr` endpoint to generate a Certificate-Signing-Request.
     * Added 'DELETE /oracle/db/{id}/downloaded__snapshots' endpoint
       to delete downloaded Oracle db snapshots and log snapshots.
     * Added unauthenticated endpoint `GET /saml/sso_status` to check
       SAML SSO status. For example, we can check whether SSO is enabled or not.
     * Added optional field archivalTieringSpec to ArchivalSpecV2 to support
       archival tiering. This enables the user to configure either Instant Tiering
       or Smart Tiering (with a corresponding minimum accessible duration) on an
       SLA domain with archival configured to an Azure archival location.
     * Updated endpoint /mssql/db to have a new optional query paramter,
       indicating if backup task information should be included.
     * Added the `IoFilterSummary` object with `id`, `name`, `version`, `vendor`.
       fields and `summary`, `releaseDate` optional fields.
     * Added `GET /vmware/computer_cluster/request/{id}` endpoint to get the details
       of an asynchronous request that involves a VMware compute cluster.
     * Added `PATCH /vmware/computer_cluster/{id}` endpoint to update
       the configuredSlaDomainId for a VMware compute cluster with a specific ID.
     * Added `GET /vmware/compute_cluster/{id}/io_filter` to get the ioFilters on
       the VMware compute cluster with a specific ID.
     * Added `POST /vmware/compute_cluster/{id}/install_io_filter` endpoint to
       install the Rubrik ioFilter to the VMware compute cluster with a specific
       ID.
     * Added `POST /vmware/compute_cluster/{id}/uninstall_io_filter` endpoint to
       uninstall the Rubrik ioFilter from the VMware compute cluster with a
       specific ID.
     * Added `POST /vmware/compute_cluster/{id}/upgrade_io_filter` endpoint to
       upgrade the Rubrik ioFilter to the latest version for the VMware compute
       cluster with a specific ID.
     * Moved the `GET /vmware/compute_cluster` endpoint from internal to V1.
     * Moved the `GET /vmware/compute_cluster/{id}` endpoint from internal to V1.
     * Added endpoint /saml/authn_request/{idp_name} for making SAML
     * Added an optional field 'isRetentionLocked' to 'POST /sla_domain',
       'PUT /sla_domain/{id}' and 'PATCH /sla_domain/{id}' to allow users to manage
       the Retention Lock capabilities of an SLA Domain.
     * Added endpoint 'POST /saml/authn_request/{idp_name}' for making SAML
       authentication request for a given ID Provider.
     * Added endpoint 'POST /saml/rubrik_metadata' for downloading Rubrik SAML
       metadata file.
     * Added a series of new endpoints /idp_auth_domain for managing SAML
       Id Provider integration.
     * Moved the 'connectionStatus' field from VcenterDetail to VcenterSummary.
     * Added new optional query parameters 'data_sources' and 'snapshot_ids' to
       'GET /sla_domain' endpoint. This allows users to filter SLA Domains based
       on whether they can be assigned to specified data sources and snapshots.
     * Changed the existing endpoints `GET /mssql/db/` `GET /mssql/instance`.
       `GET /mssql/db/{id}` `PATCH /mssql/db/{id}` `GET /mssql/db/snapshot/{id}`.
       `GET /mssql/instance/{id}` `GET /mssql/instance/{id}` to return an
       unprotectable reason as a string in the 'unprotectableReason' field instead
       of a JSON struct.
     * Added a `PUT /host/certificate/{id}` endpoint to update the
       certificate of the given host
     * Added `GET /vcd/vapp/template/snapshot/{snapshot_id}/export` to get
       available options for a vApp template snapshot export.
     * Added `POST /vcd/vapp/template/snapshot/{snapshot_id}/export` to queue
       export of a vApp template snapshot.
     * Added continuous data protection state for each VMware virtual machine.
     * Added optional field 'isIoFilterInstalled' to vCenter summary. Returns true
       if any Rubrik IO filters are installed on any compute clusters that are
       a part of the vCenter.
     * Added optional field `cloudStorageTier` to `BaseSnapshotSummary`, to indicate
       the current storage tier of the archived copy of a snapshot.
     * Added `POST ` /vmware/vm/cdp endpoint to get live CDP info for a list of
       virtual machines.
     * Added `POST ` /vmware/vm/cdp_state endpoint to get CDP state info for a list
       of virtual machines.
     * Added the optional field isEffectiveSlaDomainRetentionLocked to
       FilesetSummary. The field is a Boolean that specifies whether the effective
       SLA Domain of a fileset is retention locked.
     * Added optional field isEffectiveSlaDomainRetentionLocked to `Snappable`.
       The parameter depicts if the effective SLA domain for the data source is
       a Retention Lock SLA Domain.
     * Added optional field isConfiguredSlaDomainRetentionLocked to SlaAssignable.
       The parameter depicts if the configured SLA domain for the object is a
       Retention Lock SLA Domain.
     * Added optional parameter `ignore_connection_status` to `GET /vmware/vcenter`.
       to skip calculating connection status.
     * Added required fields: isCdpEnabled(type: boolean) and cdpState(type:
       CdpState Enum) to VirtualMachineDetails.
     * Moved the GET `/mssql/hierarchy/{id}/descendants` and
       GET `/mssql/hierarchy/{id}/children` endpoints from internal to v1.
       Added the `is_relic`, `is_live_mount` `is_clustered`, and
       `is_log_shipping_secondary`.
       parameters. Changed acceptable values of `object_type` and `sort_by`.
       parameters. Added `hasPermissions`, `isInAvailabilityGroup`,
       `descendantSlaDomains`, `instanceChildren`,
       `unprotectableReasons`, `isLiveMount`, `isLogShippingSecondary`,
       `hostStatus`, `cbtEnabled`, `cbtEffectiveStatus`, `isClustered` and
       `clusterInstanceAddress` fields in the
       response object. Removed `replicaCount` field in the response object.
       Added support for returning non-availability databases.
       Changed `object_type` query parameter to take a comma-separated list of
       object types.
       Added the GET `/mssql/hierarchy/{id}` endpoint to get a specific hierarchy
       object.
     * Added the POST `/mssql/sla_domain/assign` endpoint to assign SLA properties
       to SQL Server objects.
     * Added isRetentionLocked to MssqlInstanceSummary.

     ### Changes to V1 API in Rubrik Version 5.0.3
     ## Deprecation:

     ## New features and improvements:
     * Added a new optional field 'oracleQueryUser' to HostRegister, HostUpdate
       and HostDetail objects, for setting the Oracle username for account with
       query privileges on the host. This applies the following endpoints:
       POST /host/bulk, PATCH /host/{id}, and GET /host/{id}.

     ### Changes to V1 API in Rubrik Version 5.0.2
     ## Deprecation:

     ## New features and improvements:
     * Added `GET /oracle/db/{id}/restore_estimate` endpoint to provide an
       estimate of the amount of data that must be downloaded for a restore
       operation.
     * Introduced optional field `logicalSize` to `VirtualMachineDetail`. This
       field gives the sum of logical sizes of all the disks in the virtual
       machine.
     * Added optional parameter `ignore_connection_status` to
       `GET /vmware/vcenter/{id}`. Set this parameter to skip calculating
       connection status.

     ### Changes to V1 API in Rubrik Version 5.0.1
     ## Deprecation:

     ## New features and improvements:
     * Added `GET /cluster/{id}/security/encryption` endpoint to provide encryption
       at rest status of the cluster.
     * Added `GET /vmware/host/{id}/datastore` endpoint to get the details
       of datastores for an ESXi host.
     * Added `POST /vmware/vm/mount/{id}/relocate` endpoint to migrate datastore
       for a virtual machine from Live Mount or Instant Recovery.
     * Added `America/Santiago`, `Australia/Adelaide` and `Australia/Brisbane` as
       supported cluster time zones.

     ### Changes to V1 API in Rubrik Version 5.0.0
     ## Deprecation:
     * Deprecating query paramter `hostname` of `GET /host` and response property
       `hostname` of `GET /host`, `POST /host`, `PUT /host/certificate/{id}`,
       `GET /host/{id}`, `PATCH /host/{id}`, and `POST /host/{id}/refresh`.
       Use `name` instead. Support for `hostname` is present in v1 and removed in v2.
     * Deprecating response property `isArchived` of `GET /mssql/db`,
       `GET /mssql/db/{id}`, and `PATCH /mssql/db/{id}`. Use
       `isDeleted` instead. Support for `isArchived` is present in v1 and removed in v2.
     * Deprecating parameter `datastoreName` of `Post /vmware/vm/snapshot/{id}/mount`.

     ## New features:
     * Added a new PUT endpoint to /ldap_service/{id}.
     * Added /cluster/{id}/snmp_mib_link endpoint.
     * Added a new optional field 'oracleSysDbaUser' to /host/{id} POST endpoint
       during register host for setting the Oracle username for account with sysdba
       privileges on this host.
     * Added a new optional field 'oracleSysDbaUser' to /host/{id} endpoint for
       changing the Oracle username for account with sysdba privileges on this
       host.
     * Added a new optional field 'mfaServerId' to /ldap_service endpoint for
       associating a configured MFA server.
     * Added a new /sla_domain endpoint with the same functionality as /v1, but
       added support for weekly and quarterly time units and modify the config of
       monthly and yearly.
     * Added a new optional field 'isArrayEnabled' to 'FilesetTemplateCreate'
       for creation of storage array-enabled fileset templates. We also include
       this new field in 'FilesetTemplateDetail'.
     * Added a new optional field 'arraySpec' to 'FilesetCreate' for
       creation of storage array-enabled filesets. We also include
       this new field in the responses of the `GET /fileset/{id}` and
       `GET /fileset` endpoints.
     * Added ability to use the /host/{id} endpoint to specify a host level
       setting for enabling or disabling CBT backups of SQL Server databases,
       along with new optional fields 'mssqlCbtEnabled', 'mssqlCbtEffectiveStatus'
       and 'mssqlCbtDriverInstalled'.
     * Added ability to use the /host/{id} endpoint to instruct the Rubrik cluster
       to remove the CBT driver from a Windows host that has CBT backups of SQL
       Server databases disabled.
     * Added new optional field 'isPassthrough' to 'POST /fileset' endpoint to
       indicate if we want to take a direct archive backup.
     * Added a new field unprotectable_reasons to GET /mssql/db/{id} and
       GET /mssql/instance/{id}. This field keeps track of the reasons that a
       SQL Server database or instance cannot be protected by Rubrik.
     * Added ability to use the /host/{id} endpoint to specify a host level
       setting for enabling or disabling VFD backups of volumes on Windows hosts.
     * Added ability to use the /host/{id} endpoint to instruct the Rubrik cluster
       to remove the VFD driver from a Windows host that has VFD backups of volumes
       disabled.
     * Added new optional field 'isOverwrite' to ExportMssqlDbJobConfig for
       'POST /mssql/db/{id}/export' endpoint to enable overwriting an existing
       database while using the export operation.
     * Added a new optional field 'allowOverwrite' to the
       'POST /mssql/db/{id}/export' endpoint to allow overwriting an existing
       database during the export.
     * Added a new field 'hasAttachingDisk' to 'GET /vmware/vm/snapshot/mount' and
       'GET /vmware/vm/snapshot/mount/{id}' that indicates to the user whether
       this is an attaching disk mount job.
     * Added a new field 'attachingDiskCount' to 'GET /vmware/vm/snapshot/mount'
       and 'GET /vmware/vm/snapshot/mount/{id}' that indicate to the user how many
       disks are attached.
     * Removed optional field 'clusterInstanceAddress' from
       'PATCH /mssql/instance/{id}' endpoint since host-centric discovery for
       cluster instances eliminates the need to edit the instance address.
     * Added new field `missedSnapshotTimeUnits` in `MissedSnapshot`.
     * Added new field 'vmxFileContent' in getSnapshotDetail
     * Added new optional fields 'organizationId' and 'organizationName' to
       `/host/{id}` and `/host` endpoints to get the organization a host is
       assigned to due to Envoy.
     * Added new field 'vmwareTagList' in getSnapshotDetail
     * Added new endpoint GET /cluster/{id}/certificate to get the cluster cert.
     * Added new optional field PATCH /vmware/vm/{id} to indicate whether or not
       to refresh the in-memory cache after updates to a virtual machine record.
     * Added new field 'shouldRecoverTags' in MountSnapshotJobConfigV1
     * Added new field 'shouldRecoverTags' in InstantRecoveryJobConfig
     * Added new field 'shouldRecoverTags' in ExportSnapshotJobConfig
     * Added a new optional field 'operating_system' to 'GET /host'.
     * Added a new optional field 'apiEndpoint' to 'NasBaseConfig'.
     * Added new optional field 'enableSymlinkResolution' to FilesetSummary in
       'POST /fileset', "GET /fileset" and "PATCH /fileset/{id}" endpoints to
       indicate if we want to resolve symlinks during metadata scan.
     * Added new optional field 'enableHardlinkSupport' to FilesetSummary and
       FilesetCreate in 'POST /fileset', "GET /fileset" and "PATCH /fileset/{id}"
       endpoints to enable recognition and deduplication of hardlinks in
       fileset backup.

     ## Improvements:
     * Added optional 'apiToken' and 'apiEndpoint' fields to NasConfig to support
       Pure FlashBlade devices.
     * Added a new field 'guestOsName' to GET /vmware/vm. This allows users to
       filter virtual machines based on the guest operating system name.
     * Enhanced GET /vmware/vm/snapshot/{id} response by adding disk details
       such as fileName and deviceKey.
     * Added isMountAllowed field to the response of GET
       /mssql/db/{id}/recoverable_range. This helps identify which recoverable
       ranges support Live Mount, which is affected by whether a database snapshot
       contains filestreams.
     * Added optional query parameters limit and offset to support pagination for
       GET /mssql/db endpoint.
     * Added optional query parameters sortOrder and sortBy to enable users to
       sort the results of GET /mssql/db endpoint by effectiveSlaDomainId and name.

     ### Changes to V1 API in Rubrik Version 4.2
     ## Breaking changes:
     * The input field OperatingSystemType value `Linux` is replaced by `UnixLike`.
       in FilesetTemplateCreateDefinition, used by POST /fileset-template, and
       in FilesetTemplatePatchDefinition, used by PATCH /fileset_template/{id}.
     * The input field operating_system_type value `Linux` is replaced by `UnixLike`.
       in GET /fileset-template and GET /host.

     ## New features:
     * Added a new /ldap_service endpoint for managing Active Directory integration.
     * Added a new optional field 'nasBaseConfig' to GET /api/v1/host. This field
       allows NAS (Isilon/NetApp) api credential to be displayed and edited.
     * GET /host/{id}/search now returns search results for filesets, Windows volume
       groups, and storage array volume groups belonging to the host. Previously,
       the endpoint would only return fileset search results.
     * Added endpoints for actions related to log shipping configurations:
       POST /mssql/db/{id}/log_shipping to create, GET /mssql/db/log_shipping to
       query, GET /mssql/db/log_shipping/{id} to retrieve individual details,
       DELETE /mssql/db/log_shipping/{id} to delete, and POST
       /mssql/db/log_shipping/{id}/reseed to reseed an unhealthy secondary
       database.
     * Added `Africa/Johannesburg`, `Africa/Lagos` and `Africa/Nairobi` as
       supported cluster time zones.
     ## Improvements:
     * Added 2 new optional fields `apiHostname` and `zoneName` to POST /host
       and GET /host. These fields allow different zones to be configured for
       Isilon NAS.
     * Added a new field 'geolocation' to GET /cluster/{id} and PATCH /cluster/{id}.
       These allow users to view and modify the geolocation of the cluster,
       respectively.
     * Added a new field `guestOsType` to the `VirtualMachineDetail`.
       object used in response of `GET /vmware/vm/{id}`.
     * Added an optional organizationId field to the HostRegister request in POST
       /host to allow users with the global admin RBAC role to add a host to an
       organization specified by the value of the organizationId field.
     * Added canLiveMount field to the responses of `GET /mssql/db/snapshot/{id}`.
       and `GET /mssql/db/{id}/snapshot`.
     * Added an optional field `agentStatus` to `VirtualMachineSummary` object used
       in response of `GET /vmware/vm` endpoint. This allows user to check the
       Rubrik Backup Service connection status of the corresponding VMware VM.
     * Added the `POST /vmware/vm/{id}/register_agent` endpoint.
     * Added a new field 'createDatastoreOnly' to POST
       /vmware/vm/snapshot/{id}/mount. This allows user to mount snapshot to vmware
       datastore only, without create a virtual machine.
     * Added a new field `numWindowsVolumeGroups` to the `SlaDomainDetail` and
       `SlaDomainSummary` objects used in response to `GET /sla_domain` endpoints.
     * Added new optional field 'shouldRefreshCacheAfterUpdate' for PATCH
       /vmware/vm/{id} to indicate whether or not to refresh the in-memory cache
       after updates to a virtual machine record.

     ### Changes to V1 API in Rubrik Version 4.1

     ## Breaking changes:
     * The 'allowedBackupWindow' and 'firstFullBackupWindow' input field for
       /sla_domain now take the cluster time zone instead of UTC.

     ## New features:
     * Added POST /host/{id}/refresh endpoint to refresh hosts without
       registering them again
     * Added GET /fileset/snapshot/{id} endpoint to retrieve details of a
       fileset snapshot.
     * Added POST /mssql/db/{id}/log_backup endpoint for taking on-demand
       log backup of SQL Server databases.
     * Added a new optional query parameter 'is_agentless' to
       GET /windows_cluster. This allows users to filter all clusters that
       do not have any hosts with Rubrik connectors installed. If this
       parameter is omitted, all clusters are returned.
     * Added a new field 'isAgentless' to GET /windows_cluster. This indicates
       whether all the hosts on this windows cluster do not have Rubrik connector
       installed. If even one host has Rubrik connector installed, this will
       be set to false.
     * Added a new optional 'organization_id' query parameter on POST /session.
       This allows users to specify the organization to which they intend to
       authenticate. If this parameter is omitted, an organization is chosen
       automatically.
     * Added a new 'organizationId' field to the response on POST /session. This
       indicates the organization to which the user has authenticated.
     * Added a new field 'moid' on GET /vmware/vm. This allows users to search
       VMWare VMs by Managed Object ID. The list of results of the call can now
       additionally be sorted in ascending/descending order by moid.
     * Added new fields 'replicas' and 'availabilityGroupId' on GET /mssql/db
       and GET /mssql/db/{id}. If a database is an availability database,
       it will have some number of replicas, which are copies of the database
       running on different instances. Otherwise, there will only be one
       replica, which represents the single copy of the database. The field
       'availabilityGroupId' will be set only for availability databases
       and points to the availability group of the database. Also deprecated
       several fields on these endpoints, as they should now be accessed via
       the 'replicas' field.
     * Added a field 'cloudInstantiationSpec' on GET /vmware/vm and PATCH
       /vmware/vm/{id} to allow enabling/disabling/updating specs for automatic
       conversion to cloud image on a per VM basis
     * Added a new optional query parameter 'availabilityGroupId' to GET /mssql/db,
       in order to filter databases by their availability group ID.
     * Added a new field 'timezone' to GET /cluster/{id} and PATCH /cluster/{id}.
       These calls show and change, the current time zone setting of the cluster.
     * Add a new field 'ignoreErrors' to POST /vmware/vm/snapshot/{id}/restore_file
       that will let job to ignore file errors during restore jobs.
     * Added `Asia/Kolkata` and `Asia/Kathmandu` as supported cluster time zones.

     ### Changes to V1 API in Rubrik version 4.0

     New features:
     * Added a new field 'name' on GET /sla_domain. This allows users to search
       SLA Domains by name. Users can also sort the SLA Domain summary results
       in ascending/descending order by name
     * The Rubrik cluster generates a unique ID for each virtual machine when a
       vCenter Server is added. When a virtual machine changes to another vCenter
       Server or unregisters and registers with the same vCenter Server, a new
       unique ID is generated for that virtual machine. When this happens, the
       virtual machine object associated with the original ID becomes a relic.
       In this release we have added the option conflictResolutionAuthz to
       add/edit vCenter endpoints of the Rubrik REST APIs. This option can take
       either 'AllowAutoConflictResolution' to authorize the linking of relic
       virtual machine objects with the current virtual machine object of a
       specific virtual machine, and makes the collective snapshot history
       available through the current object. Or it can take 'NoConflictResolution'
       to not allow linking. Default value is 'NoConflictResolution'.
     * Introduced endpoints for SQL Server Live Mounts: POST /mssql/db/{id}/mount,
       GET /mssql/db/mount, GET /mssql/db/mount/{id}, and
       DELETE /mssql/db/mount/{id}. These allow users to create, query for, and
       delete Live Mounts for SQL Server databases.
     * Added the isLiveMount field to the response of GET /mssql/db. Added an
       optional is_live_mount query parameter to filter by this field.
     * Added links field to the paginated responses of
       GET /vmware/vm, /vmware/vm/mount and /fileset endpoints. This allows users
       to navigate between pages by following the href in links.prev and links.next.
     * Introduced optional caCerts parameter for the vCenter post/put/patch
       endpoints to specify trusted CA certs to use when connecting to a vCenter
       server and associated ESX hosts.
     * Modified PATCH /mssql/instance/{id} endpoint to support SQL db
       auto-protection, added fields configuredSlaDomainId,
       logBackupFrequencyInSeconds, logRetentionHours, and copyOnly to the PATCH
       request, as well as configuredSlaDomainId, configuredSlaDomainName,
       logBackupFrequencyInSeconds, logRetentionHours, and copyOnly to the GET and
       PATCH responses.
     * Added GET /vmware/vcenter/{id} endpoint to allow fetching details of a
       single vCenter server, including its refresh and delete status.
     * Introduced optional parameter keepMacAddresses to
       POST /vmware/vm/snapshot/{id}/mount, /vmware/vm/snapshot/{id}/export, and
       /vmware/vm/snapshot/{id}/instant_recovery endpints.
       This allows new VMs to have the same MAC address as their source VMs.
     * Introduced optional parameters offset and limit to support
       pagination for Browse end-point.
     * Added `nodeId` to `AsyncRequestStatus` to improve debugging job failures.


     ### Changes to V1 API in Rubrik version 3.2

     New features:
     * Added an option to preserve the virtual machine moid during instant recovery.
       Use this option cautiously. It will permanently overwrite the source
       virtual machine. The source virtual machine cannot be recovered if the
       operation fails. It will not create a new virtual machine and rename
       the original one so we could fall back to the original in case of a failure
       in the process. This is not exposed in the Web UI and the API user should
       be careful to not destroy the original virtual machine by accident.
     * Introduced shareId into /fileset endpoints to support
       the creation of filesets based on network shares.
     * Introduced optional config parameter for all on demand
       snapshot endpoints. The config parameter includes an optional slaId field.
       The policies of the specified SLA Domain determine the retention of backups
       on the local Rubrik cluster, the retention target, and the archival location.
     * Introduced optional parameters to endpoint /mssql/db/{id}/export,
       so that physical filenames and logical filenames can be changed
       for exported databases. These two parameters are newFilename and
       newLogicalName.
     * Introduced optional config parameter for the VM patch endpoint
       (PATCH /vmware/vm/{id}) to specify a guest credential for a
       specific VM.
     * Introduced optional query parameters to endpoint /host, to
       support infix searching by hostname and sort order of results.
     * Introduced slaId and slaName field to all snapshot summary/details object.
       These fields specify the SLA Domain object that is associated with the
       snapshot.

    Bug Fixes:
     * Made path parameter required in GET /fileset/snapshot/{id}/browse
       and GET /vmware/vm/snapshot/{id}/browse. Previously, an error was
       thrown when path wasn't passed in. This solves that bug.

     ### Changes to V1 API in Rubrik version 3.1
     Initial GA release

    # Overview #
    The Rubrik REST API provides a means to work with Rubrik clusters and Rubrik Edge virtual appliances using text-based representations of the resource objects that are managed by the Rubrik software.

    In its simplest form, the RESTful architecture used by the Rubrik REST API has the following workflow:
    1. Client authenticates with the Rubrik REST API server and starts a session.
    2. Client sends an HTTP request to the URI for a resource object.
    3. Server handles the request and sends an HTTP response with a JSON formatted response body.

    This overview section provides a basic description of the HTTP requests and responses used with the Rubrik REST API. The [Authentication](#section/Authentication) section provides information about how a client authenticates with the Rubrik REST API server.

    ## Documentation conventions

    The descriptions in this documentation use 'Rubrik cluster' to refer to both Rubrik clusters and Rubrik Edge virtual appliances.

    The documentation uses a dollar symbol to indicate a variable in body text and code samples. Some examples:
    * `$cluster_address` to represent a Rubrik cluster IP or resolvable host name
    * `$snapshot_id` to represent the ID of a specific snapshot
    * `$request_id` to represent the ID of a specific asynchronous request

    To shorten the path shown in a code sample, the documentation sometimes replaces a longer variable form with the variable form `{id}`. This variable form represents the `id` value for an associated member string in a response body or request URL.

    The documentation use the term 'snappable' to refer to all objects that have data that can be protected by a Rubrik cluster or a Rubrik Edge appliance. For example, all of the following are 'snappables':
    * Virtual machines
    * File systems
    * SQL Server databases

    ## Versioning

    The Rubrik REST API structures the request URL to include the version of the API. This ensures that backwards incompatible improvements in a new version are not unintentionally used with an earlier version of the API.

    The URL of a request includes a segment that identifies the version of the API. In the URL, the version segment always follows immediately after the Rubrik REST API server name or IPv4 address.

    For example, for a Rubrik cluster with the server address `$cluster_address` a request to the cluster endpoint for Rubrik REST API v1 would look like this:
    `https://$cluster_address/api/v1/cluster`

    In this URL, the `v1` represents the version number for Rubrik REST API v1.

    The Rubrik REST API increments the version number when the new version includes a change that is not backward compatible.

    Examples of changes that are not backward compatible include:
    * Resource type removed
    * Required parameter added to an existing resource type
    * Required parameter removed from an existing resource type
    * Renamed resource or parameter
    * Authentication requirement added for a previously unauthenticated resource

    When the Rubrik REST API has changes that are not backward compatible, those changes appear in a new version. For example, incompatible changes to v1 appear in v2. The Rubrik REST API server makes v2 endpoints available on the path: `https://$cluster_address/api/v2/`. The Rubrik REST API server continues to provide the v1 endpoints on the path: `https://$cluster_address/api/v1/`.

    ### Changes within a version

    Backward compatible changes can be added to the Rubrik REST API as part of an update of the Rubrik CDM software on a Rubrik cluster or Rubrik Edge appliance. When this occurs, the version number remains the same and the URL segment that identifies the API version does not change. The [Changelog](#section/Changelog) that is provided in the docs for each version of the Rubrik REST API describes the changes that are made within that version.

    Examples of backward compatible changes include:
    * New API resource added
    * New optional request parameters added to existing resources
    * New properties added to existing responses

    ## Architecture

    The Rubrik REST API architecture centers around logical entities called *resource objects*. Resource objects can be discrete entities or can contain a hierarchy of other, dependent, resource objects. A dependent, or child, resource object is referenced through the parent object.

    For example, a virtualization environment is a resource object that contains virtual machines as child resource objects. The virtual machines, in turn, contain snapshots as child resource objects. To address this hierarchy, the path to a snapshot must include the parent objects.
    As shown here those parent objects are the virtualization environment (`vmware`) and the virtual machine (`vm`): `/vmware/vm/snapshot`.

    When a request addresses a specific resource object the path must include the  `id` of that specific object.

    For example, to address a specific snapshot with the `id` value of `123-456` the path would be: `/vmware/vm/snapshot/123-456`.

    The full URL for the request would be: `https://$cluster_address/api/v1/vmware/vm/snapshot/123-456`

    The path in this example points to a specific snapshot with the `id` value of `123-456`.

    The `id` is an opaque value which is generated by the Rubrik REST API. It does not follow any specific format.

    ### API base path

    Each endpoint in the Rubrik REST API exists on one of two possible base paths:
    * `https://$cluster_address/api/v1/`
    * `https://$cluster_address/api/internal/`

    The `/api/v1` base path provides the most commonly used endpoints. Rubrik considers these endpoints to be stable. Rubrik designs new releases of the Rubrik REST API to provide as much backward compatibility for these endpoints as possible. After an upgrade to a new version of the Rubrik CDM software, or to a new version of the Rubrik REST API, existing calls to endpoints on the `/api/v1` base path will normally continue to work.

    The primary purpose of the `/api/internal` base path is to provide endpoints that are used by the Rubrik cluster. These endpoints are *internal* in the sense that the Rubrik CDM software uses them to provide a wide variety of cloud data management features. The evolution and improvement of the Rubrik CDM software can cause changes to these endpoints, removal of these endpoints, or addition of new `/api/internal` endpoints. Rubrik does not attempt to make the `/api/internal` endpoints backward compatible.

    ### Requests

    To perform a task, the Rubrik REST API uses an HTTP request. Most requests perform one of these actions:
    * Get an instance of an object from a list
    * Add an instance of an object to a list
    * Perform an operation on an object using the `id` of the object.

    The following table describes the HTTP method and endpoint excerpts for some typical HTTP requests.

    **Note:** The endpoints shown here would be appended to the base URL: `https://$cluster_address/vmware`.

    | Method | Endpoint | Description |
    | ------ | --- | ----------- |
    | GET | `/vm/snapshot` | Returns a list of snapshots. |
    | POST | `/vm/snapshot` | Creates a new snapshot resource object. |
    | GET | `/vm/snapshot/{id}` | Returns information about the snapshot that is identified by `id`. |
    | PATCH | `/vm/snapshot/mount/{id}` | Changes the power status of the mounted snapshot that is identified by `id`. |
    | PUT | `/vcenter/{id}` | Provides a request body with a complete update of the properties of the vCenter Server object that is identified by `id`. |
    | DELETE | `/vm/snapshot/{id}` | Deletes the snapshot that is identified by `id`. |
    | GET | `/vm/{id}/missed_snapshot` | Returns the value of `missed_snapshot` for a snapshot that is identified by `id`. |
    | POST | `/vm/snapshot/{id}/mount` | Performs a `mount` operation using the snapshot that is identified by `id`. |

    #### Reserved ID alias

    The alias `me` can be used with some endpoints as a shorthand replacement for the current, or local, value of that resource object type. For example, for the resource object type `/cluster` the alias `me` can be substituted for the `id` of the Rubrik cluster that is hosting the current session. For the resource object type `/session` the alias `me` can be substituted for the `id` of the current session.

    In filters, use the alias `local` to refer to the Rubrik cluster that is hosting the current session.

    #### Timestamp

    The Rubrik REST API uses a timestamp to express all time values. The timestamp meets the standards of ISO 8601 and uses Coordinated Universal Time (UTC). Timestamps take the form: YYYY-MM-DDTHH:MM:SSZ, with YYYY for the four digit year value, MM for the two digit month value, DD for the two digit day of the month value, HH for the two digit hour value using a 24-hour clock, MM for the two digit minute value, and SS for the two digit second value. The T stands for time and the Z stands for Zulu time, another name for UTC.

    **Example:** Timestamp in a JSON-formatted response body

    ```bash
    {
      "createdTimestamp": "2016-02-11T18:02:24Z"
    }
    ```

    ### Responses

    The Rubrik REST API server responds to all requests by sending an HTTP response message. The response contains a status code and, when appropriate, a JSON object in the response body.

    #### Status codes

    The Rubrik REST API server includes an HTTP status code with every response. The following table describes the status codes supported by the Rubrik REST API server.

    | Status code | Description |
    | ----------- | ----------- |
    | 200&nbsp;OK | Request succeeded. Not used for a DELETE request, or for a POST request that creates a resource. |
    | 201&nbsp;Created | POST request to create a resource object succeeded. |
    | 202&nbsp;Accepted | Request was successfully accepted for further processing. |
    | 204&nbsp;No&nbsp;Content | Request succeeded and the response body is empty. Used for successful DELETE requests and for successful POST requests that do not return content. |
    | 400&nbsp;Bad&nbsp;Request | Request failed because it was malformed. The request may be garbled, or it may be missing required parameters. |
    | 401&nbsp;Unauthorized | The requestor has insufficient authorization to perform the requested action. |
    | 403&nbsp;Forbidden | The requested action is blocked in the current context. |
    | 404&nbsp;Not&nbsp;Found | The request references a resource object that is unknown to the Rubrik REST API server. |
    | 415&nbsp;Unsupported Media Type | The HTTP header of the request specifies a media type that is not supported by the Rubrik REST API server. |
    | 422&nbsp;Unprocessable Entity | The request specifies a correct media type and contains correct syntax but cannot be processed because of semantical errors. |
    | 500&nbsp;Internal Server Error | The Rubrik REST API server encountered an unhandled error. |
    | 503&nbsp;Service Unavailable Error | The Rubrik REST API server is temporarily unavailable. |

    #### Response body

    The JSON object included in a response body can contain members (`{string : value}`) and arrays (`[elements]`). Also, members and arrays can be nested within members and arrays.

    When a response includes a resource object, the object always includes an `id` member in the form `id : $id`. The value of the `id` member is the unique ID of the resource.

    When a response includes a large array (or list) of elements, the Rubrik REST API server encloses the array in a `ListResponse` structure. The `ListResponse` structure breaks a lengthy array into 'pages' of information to make the information easier to manage. Refer to 'Working with lists' for information about managing arrays with large numbers of values.

    #### Status code 400 responses

    The Rubrik REST API server sends a response containing the HTTP status code '400 Bad Request' when the server cannot process the request. This can be caused by malformed request syntax, invalid request message framing, or deceptive request routing.

    The Rubrik REST API server returns a '400 Bad Request' when:
    * Request does not conform with the format specified in OpenAPI definition files. For example, the request is missing required fields.
    * Request is malformed. For example, the request has a malformed `id`.
    * Request contains unsupported `enum` values.

    #### Status code 422 responses

    The Rubrik REST API server sends a response containing the HTTP status code '422 Unproccessable entity' when the request is syntactically correct but has semantic errors.

    For example, when a request refers to an archival location that is not available. Although the request is properly formed, the Rubrik REST API server cannot act on the request because of the missing archival location, and the server returns '422 Unproccessable entity'.

    The Rubrik REST API server also returns '422 Unproccessable entity' when invalid credentials are submitted during login. In that situation, the request may be correctly formed but the action cannot be completed by using the supplied values.

    The following table describes the members of a '422 Unproccessable entity' response object.

    | Member | Optional | Description |
    | ------ | --- | ----------- |
    | `type` | No | Error category. Possible values include: vcenter_error, oracle_error, rubrik_error |
    | `message` | No | Plain text explanation of the cause of the error. |
    | `code` | Yes | A short text string representing the cause of the error. |
    | `param` | Yes | The request member that is the source of the error, such as `backup_window`. |

    ## Working with lists

    When a request returns a large list of elements, the response array can be encapsulated within a `ListResponse` object. The `ListResponse` object is a pagination structure for the elements in the response array. The `ListResponse` object allows the response array to be addressed through smaller subsets of the array, or 'pages'.

    To work with a `ListResponse` object, form a request that calls for a specific page of the results by specifying an offset value and a limit. The response includes the elements from the list starting at the offset value and continuing to the limit. When the limit is very large, or unspecified, the Rubrik REST API server returns as many elements as can be handled by the available memory.

    The `ListResponse` object consists of the members described in the following table.

    | Member | Optional | Description |
    | ------ | --- | ----------- |
    | `hasMore` | No | Indicates whether the array contains elements that are not provided by the current response. `true` if more elements are available for the original request and `false` if the last element is in the current response. |
    | `data` | No | An array of the requested elements. Can be all or some of the elements requested. The elements can be members, arrays, or objects. |
    | `total` | Yes | Total number of elements. |
    | `links` | Yes | When `hasMore` is true, provides a request URL for the next page of results. When appropriate, also provides a request URL for the previous page of results. The request URLs provided by `links` retain the query parameters from the original request. For example, a request URL would retain a value specified by `limit` and a value specified by `search`. The exception to this is the value specified by `offset`, which the Rubrik REST API server uses to specify next and previous pages. |

    Control the contents of a `ListResponse` object by including the following optional query parameters with the original request:
    * `limit`
    Defines the maximum number of a elements to include in the `data` array of the response. Available memory may prevent the return of all elements for very large `limit` values. When that occurs, the response includes `"hasMore": true`.
    * `offset`
    Index reference point to use when determining the elements to include in a response. Include the next element after the index number specified by `offset`. The default value is `0`, which means the list page that is provided in the response starts with first element in the list.

    For example, if the total number of elements in response to a query are 100, and the request includes the following query parameters: `limit=10` and `offset=30`, then the response will include a list page with elements 31-40.

    When the `ListResponse` object provides `next` and `prev`, use the URL specified by `next` to request the next page of elements or use the URL specified by `prev` to request the previous page of elements.

    **Example:** Request for all snapshots from a Rubrik cluster

    The initial request uses the query parameter `limit=1`.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vm/snapshot?limit=1"
    ```

    The response returns the first element and `"hasMore": true` indicates that more than one snapshot meets the request.

    ```bash
    {
      "hasMore": true,
      "status": "RUNNING",
      "data": [
        {
          "id": "1",
          "name": "Windows2012"
        }
      ],
      "links": {
        "next": {
          "href": "https://$cluster_address/api/v1/vmware/vm/snapshot?limit=1&offset=1"
        }
      }
    }

    ```

    To obtain the next element, the request is reissued with the query parameters set to: `limit=1&offset=1`. This could also be achieved by using the URL specified by `next` to request the next page.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vm/snapshot?limit=1&offset=1"
    ```

    The response returns the second element in the array. Since there are elements before and after the element in the response, the `links` member contains both a `next` request URL and a `prev` request URL.

    ```bash
    {
      "hasMore": false,
      "status": "RUNNING",
      "data": [
        {
          "id": "2",
          "name": "Windows2016"
        }
      ],
      "links": {
        "prev": {
           "href": "https://$cluster_address/api/v1/vmware/vm/snapshot?limit=1&offset=0",
          "rel": "prev"
        },
        "next": {
          "href": "https://$cluster_address/api/v1/vmware/vm/snapshot?limit=1&offset=2",
          "rel": "next"
        }
      }
    }
    ```

    ## Asynchronous requests

    The Rubrik REST API server uses asynchronous (async) API requests for tasks that take longer to run. By using async requests the Rubrik REST API server avoids blocking the requestor from performing other tasks while the async tasks run.

    The response to an async request includes a task object in the response body. The following table describes the members of a task object.

    | Member | Optional | Description |
    | ------ | --- | ----------- |
    | `id` | No |  ID assigned to the task.  |
    | `status` | No |  Status of the task: 'RUNNING', 'SUCCEEDED', 'CANCELED', or 'FAILED'.   |
    | `error` | No | Message describing reason for canceled or failed task, or 'None'. |
    | `startTime` | Yes | Timestamp when the Rubrik cluster schedules the task. |
    | `endTime` | Yes | Timestamp when the task ends. |
    | `progress` | Yes | Percentage of the task that is complete. |
    | `links` | No | Polling request array that provides information about how to poll the task. |

    The following table describes the polling request array in the `links` member.

    | Member | Optional | Description |
    | ------ | --- | ----------- |
    | `href` | No | URL to send requests to when polling the task. |
    | `rel` | No | Provides a value of 'self' to indicate that the array refers to the resource represented by the parent JSON object. |

    When an async task is completed the Rubrik REST API server adds a second array to the `links` member in the response that is sent. The second array provides information about how to request the result of the async task.

    The following table describes the results array in the `links` member.

    | Member | Optional | Description |
    | ------ | --- | ----------- |
    | `href` | No | URL to send a request to for the result of the task. |
    | `rel` | No | Provides a value of 'result' to indicate that the array refers to the resource represented by the parent JSON object. |

    **Example:** Starting a mount task and polling the task status

    To initiate a mount operation, send a POST request to the mount endpoint. Include an object containing the details of the snapshot.

    ```bash
    curl -X POST "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id/mount"
    ```

    The Rubrik REST API server returns a task object for the mount operation. The task object describes the task status as 'RUNNING' and provides the `links` member which contains the polling request array.

    ```bash
    {
      "id": "$request_id",
      "status": "RUNNING",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vm/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    Using the information provided in the task object, send a GET request to poll the task status.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vm/request/$request_id"
    ```

    ```bash
    {
      "id": "$request_id",
      "status": "RUNNING",
      "error": "None",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vm/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    Continue to poll the task object until the status changes to 'SUCCEEDED'.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vm/request/$request_id"
    ```

    When the task object status changes to 'SUCCEEDED', the `links` member of the request includes a results array that provides a URL for the task results.

    ```bash
    {
      "id": "$request_id",
      "status": "SUCCEEDED",
      "error": "None",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vm/request/$request_id",
          "rel": "self"
        },
        {
          "href": "https://$cluster_address/api/v1/vmware/vm/$mounted_vm_id",
          "rel": "result"
        }
      ]
    }
    ```

    # OpenAPI
    The Rubrik REST API specification conforms to the OpenAPI 2.0 Specification. Tools that work with the OpenAPI 2.0 Specification can be used with the Rubrik REST API specification.

    Development releases (pre-1.0) of the Rubrik REST API specification made reference to 'swagger'. The previous release of the OpenAPI 2.0 Specification was named the Swagger 1.2 Specification.

    Download the Rubrik REST API specification for your tools. [Download](./api-docs)

    ## Rubrik REST API Explorer
    The Rubrik REST API Explorer is a browser-based API client hosted by the Rubrik cluster. The Explorer has the Rubrik REST API specification built in. You can use the Explorer to try out Rubrik REST API calls and view the responses.

    **IMPORTANT:** The Explorer interacts with the Rubrik cluster through the API calls you make. Use care when making calls that modify or delete configurations and data.

    To access the Rubrik REST API Explorer, click: [Rubrik REST API Explorer](./playground/)

    # Authentication

    The Rubrik REST API server requires that all API calls use the HTTPS protocol.
    To meet the security requirements of that protocol, the Rubrik REST API server
    uses a self-signed certificate. A Certificate Authority cannot validate a
    self-signed certificate. Configure client tools to ignore the certificate
    validation error.

    The Rubrik REST API server requires authentication and authorization for each
    API call, except calls made to the following endpoints:

    * [/cluster/me/version](#operation/getClusterVersion)
    * [/cluster/me/api_version](#operation/getClusterApiVersion)

    ## Authentication session
    Rubrik REST API server authenticates a session using either of the following
    methods:

    * BasicAuth
    * Token

    The Rubrik REST API server requires that you use an authorized username and
    password for the Rubrik cluster. Usernames are managed by either the Rubrik
    cluster or by your LDAP service.

    ### BasicAuth authentication

    BasicAuth authentication uses the HTTP Basic Authentication method and requires
    you to include the user credentials with each API call. Since each API call
    made using the BasicAuth method is separately authenticated, you do not need
    to manage the session state. You also do not need to log out of a session,
    since this method does not create a session.

    To use the BasicAuth method, provide the user credentials in the
    'Authorization' header of an API call.

    Use the string `Basic` followed by the Base64 encoding of `<username:password>`
    as the user credentials, where `<username:password>` is the username for an
    Admin account on the host Rubrik cluster, a colon, and the account password.

    **Example:** Using curl to retrieve a session ID

    This example uses the local Admin username 'admin' and the password 'pass' to
    retrieve: a session ID, the Rubrik server software version, and the API
    version.

    The curl command shown here takes `<username:password>`, adds 'Basic ' to the
    string, and Base64 encodes the result.

     The command includes the following arguments:
     * `-k` to bypass an alert about the self-signed certificate
     * `-u` to flag the `<username:password>` string
     * `-X` to flag the HTTP method `GET`

    ```bash
    curl -k -u admin:pass -X GET "https://$cluster_address/api/v1/cluster/me"
    ```
    The Rubrik REST API server returns the following response body.
    ```bash
    {
      "id": "$cluster_id",
      "version": "3.1.0",
      "apiVersion": "1.0"
    }
    ```

    ### Token authentication

    Token authentication creates a token at the beginning of a session and then
    uses that token to authenticate the API calls that are made during the session.
    The token remains valid for the session - normally 30 minutes after the last
    activity. You can close a session and invalidate the session token at any time
    by making a DELETE call to `/session/{id}` where `{id}` is the session ID or
    `me` for the current session ID.

    **Example:** Token authentication in a session

    This example uses the local Admin username 'admin' and the password 'pass'. To
    open a session, first use the [BasicAuth](#section/BasicAuth) method to
    authenticate a POST call to [/session](#operation/createSession).

    ```bash
    curl -k -u admin:pass -X POST "https://$cluster_address/api/v1/session"
    ```

    The response body includes an array with the session token.

    ```bash
    {
      "id": "$session_id",
      "token": "$token_id",
      "userId": "$user_id"
    }
    ```
    For all subsequent calls during the session, include the token in the
    Authorization header using the form: `Authorization: Bearer $token_id` where
    `$token_id` is the value of the `token` member from the response array.

    In this curl command, the GET request to
    [/cluster](#operation/getPublicClusterInfo) uses `-H` to provide the
    `Authorization: Bearer $token_id` value.

    ```bash
    curl -k -H "Authorization: Bearer $token_id" -X GET
      "https://$cluster_address/api/v1/cluster/me"
    ```

    The response body contains an array with the session ID, the Rubrik
    cluster software version, and the API version.

    ```bash
    {
      "id": "$cluster_id",
      "version": "3.1.0",
      "apiVersion": "1.0"
    }
    ```

    To close the session and invalidate the session token, make a DELETE call to
    [/session](#operation/deleteSession) using the value of the `id` key or use
    `me`. The alias `me` represents the session specified in the Authorization
    header.

    ```bash
    curl -k -H "Authorization: Bearer $token_id" -X DELETE
      "https://$cluster_address/api/v1/session/me"
    ```

    ## LDAP Authentication

    The Rubrik cluster can be integrated with an LDAP service for
    authentication. The API endpoints provide support for adding, updating and
    deleting a specific LDAP service as well as list all of the
    configured LDAP services.

    ### Add a new LDAP service
    You can add a new LDAP service by making a POST call to
    [/ldap_service](#operation/createLdapService). Adding a new LDAP
    service requires information about the dynamic DNS name of the service, an
    administrative user who is authorized to create a computer user account as
    well as search for all the LDAP objects needed for use by the
    Rubrik cluster. The Rubrik cluster resolves the dynamic DNS name using DNS
    SRV records while honoring the advertised priority values.

    **Example:** Adds a new LDAP service for use by the Rubrik cluster

    This example adds an LDAP service that uses a dynamic DNS name
    of *example.com*, with a bind administrator user of *Administrator* with a
    password of *VerySafe*.

    ```bash
    curl -k -u admin:pass -X POST -d '{"dynamicDnsName": "example.com",
      "bindUserName": "Administrator", "bindUserPassword": "VerySafe"}'
      'https://$cluster_address/api/v1/ldap_service'
    ```

    The response body includes the ID associated with this LDAP service.

    ```bash
    {
      "id": "499aeb71-f114-45a5-8456-91b9f6c45ddd",
      "domainType": "AD",
      "name": "example.com",
      "serviceAccount": "cluster10-c8D7A54$",
      "initialRefreshStatus": "ongoing"
    }
    ```

    The parameters associated with the LDAP service can be updated by
    making a PATCH request to [/ldap_service/{id}](#operation/patchLdapService)
    or a PUT request to [/ldap_service/{id}](#operation/putLdapService).

    For example, you could add a prioritized list of authentication servers that
    supercede the LDAP servers advertised for the dynamic DNS name. These
    authentication servers can even be proxies that connect to the actual
    LDAP servers.

    **Example:** Add two new LDAP services

    This example adds two LDAP servers called ad-proxy1.example.com
    and ad-proxy2.cloud.example.com.

    ```bash
    curl -k -u admin:pass -X PATCH -d '{ "authServers":
    ["ldap://ad-proxy1.example.com:389", "ldap://ad-proxy2.example.com:389"]}'
    https://$cluster_address/api/v1/ldap_service/499aeb71-f114-45a5-8456-91b9f6c45ddd
    ```

    The response body confirms a successful update.

    ```bash
    {
      "id": "499aeb71-f114-45a5-8456-91b9f6c45ddd",
      "domainType": "AD",
      "name": "example.com",
      "initialRefreshStatus": "success"
    }
    ```

    ### List configured LDAP services
    You can get a listing of all the configured authentication domains using
    a GET request to [/ldap_service](#operation/queryLdapService).

    **Example:** Get the list of LDAP services.

    ```bash
    curl -k -u admin:pass -X GET 'https://$cluster_address/api/v1/ldap_service'
    ```

    The response body will contain the ID of all the authentication realms.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "499aeb71-f114-45a5-8456-91b9f6c45ddd",
          "domainType": "AD",
          "name": "example.com",
          "serviceAccount": "cluster10-c8D7A54$",
          "initialRefreshStatus": "success"
        },
        {
          "id": "9fef084b-75f8-4c03-9efa-c73b55be5da8",
          "domainType": "LOCAL",
          "name": "local",
          "initialRefreshStatus": "success"
        }
      ],
      "total": 2
    }

    ```

    ### Get information about a specific LDAP service

    You can also get information about a specific LDAP service using
    a GET request to [/ldap_service/{id}](#operation/getLdapService).

    **Example:** Get information about a configured LDAP service.

    ```bash
    curl -k -u admin:pass -X GET
      'https://$cluster_address/api/v1/ldap_service/499aeb71-f114-45a5-8456-91b9f6c45ddd'
    ```

    The response body will contain information about the specified LDAP service.

    ```bash
    {
      "id": "499aeb71-f114-45a5-8456-91b9f6c45ddd",
      "domainType": "AD",
      "name": "example.com",
      "serviceAccount": "cluster10-c8D7A54$",
      "initialRefreshStatus": "success"
    }
    ```

    ### Delete an LDAP service
    Any LDAP service that is configured to a Rubrik cluster can
    be removed by issuing a DELETE request to
    [/ldap_service/{id}](#operation/deleteLdapService).

    **Example:** Remove an LDAP service

    ```bash
    curl -k -u admin:pass -X DELETE
    https://$cluster_address/api/v1/ldap_service/499aeb71-f114-45a5-8456-91b9f6c45ddd

    ```

    ## LDAP domain authentication
    Scripts that automate calls to the Rubrik REST API endpoints must
    include one of the available authentication methods: the HTTP Basic
    method, the session method, or the API token method.

    When the HTTP Basic method is used, and authentication is through
    an LDAP domain, issues can arise when the Rubrik cluster is
    configured with multiple LDAP domains. With this method, the
    authentication server first attempts to authenticate through the
    Rubrik cluster local domain. If that authentication attempt does not
    succeed, the authentication server attempts authentication with each
    available LDAP domain. If there are several LDAP domains configured,
    then this process can slow down authentication. With many LDAP
    domains, the authentication can potentially have too many failed
    logins and result in an account lock-out.

    Although using the [API token for authentication](#token-authentication) is recommended for
    scripting, using the session authentication method will also avoid
    these issues. The following python script provides an example of how
    to use session authentication in a script. The method used in this
    example can be duplicated in other scripting languages to suit your
    scripting requirements.

    ```
    try:
        sessionData = None

        session = requests.Session()
        session.auth = ($username, $password)
        session.verify = False
        session.headers = {'Content-type': 'application/json'}
        requests.adapters.HTTPAdapter()
        session.mount('https://', requests.adapters.HTTPAdapter(pool_connections=1))

        # First, login to create a Web Session Token
        loginData = {
           "initParams": {
               "organizationId": $org_id
            }
        }
        login = session.post(
        url='https://{}/api/internal/session/realm/{}'.format($RubrikCluster, $domain_display_name),
        data=json.dumps(loginData),
        timeout=300)
        assert login.ok and 'session' in login.json()
        sessionData = login.json()['session']
        session.headers.update({'Authorization': 'Bearer {}'.format(sessionData['token'])})
        session.auth = None

        # Issue the desired request
        cluster = session.get(url='https://{}/api/v1/cluster/me'.format($RubrikCluster))
        assert cluster.ok
        print('Session Auth: {}'.format(cluster.json()['name']))

    finally:
        if sessionData:
            # Delete the web sessions explicitly. Rubrik CDM supports a
            # limited number of sessions per user. Once this limit is exceeded,
            # a random web session is discarded. This could log out the
            # user from the UI or cause another script to fail.

           logoutData = {
               "tokenIds": [
                   sessionData['id']
                ],
                "userId": sessionData['userId']
            }
            logout = session.post(
                url='https://{}/api/internal/session/bulk_delete'.format($RubrikCluster),
                data=json.dumps(logoutData),
                timeout=300)
            assert logout.ok
    ```
    Where:
        * `$username` is the name of the user account to be authenticated.
        * `$password` is the password associated with the username.
        * `$org_id` is the ID of the organization representing the tenant.
        * `$RubrikCluster` is the IPv4 address or resolvable hostname of
           the Rubrik cluster.
        * `$domain_display_name` is the name of the LDAP domain.

    ## SAML ID Provider Authentication

    The Rubrik cluster can be integrated with a SAML ID Provider authentication
    domain for authentication. The Rubrik REST API provides API endpoints for
    managing and configuring the ID Provider authentication domain with
    the Rubrik cluster. The Rubrik REST API also provides API endpoints for
    creating the SAML authentication request
    and handling the SAML authentication response.

    ### Add a new SAML ID Provider Authentication Domain
    You can add a new ID Provider by making a POST call to
    [/idp_auth_domain](#operation/createIdProviderAuthDomain).
    Adding a new ID Provider requires the ID Provider metadata XML file
    in base64 encoding, and a human-friendly name for the ID Provider.

    **Example:** Adds a new ID Provider for use by the Rubrik cluster

    ```bash
    curl -k -u admin:pass -X POST -d '{"name": "new-idp",
      "metadataXmlBase64": "1VZbj6LYFn438T9UPI+mi7slpqsnm2sBQgm..."}'
      'https://$cluster_address/api/v1/idp_auth_domain'
    ```

    The response body includes the ID associated with this Active Directory.

    ```bash
    {
      "id": "499aeb71-f114-45a5-8456-91b9f6c45ddd",
      "name": "new-idp",
      "entityId": "http://www.example.com/idp1",
      "ssoUrl": "https://www.example.com/idp1/sso",
      "signCert": "-----BEGIN CERTIFICATE-----\nMIIDrDCCApSg...\n-----END CERTIFICATE-----"
    }
    ```

    ### Update an existing SAML ID Provider Authentication Domain
    The name and metadata associated with the ID Provider can be updated by
    making a PATCH request to
    [/idp_auth_domain/{id}](#operation/updateIdProviderAuthDomain).
    This API call can update either of the two parameters.

    **Example:** Update name of the ID Provider

    This example update the name of ID Provider "new-idp" as "updated-idp",
    and update metadata with new ID Provider "http://www.example.com/idp2"

    ```bash
    curl -k -u admin:pass -X PATCH -d '{ "name": "updated-idp",
      "metadataXmlBase64": "1VZbj6AQwTIr4deKspU/zyR9fxqPPebgQ..."}'
      'https://$cluster_address/api/v1/idp_auth_domain/499aeb71-f114-45a5-8456-91b9f6c45ddd'
    ```

    The response body confirms a successful update.

    ```bash
    {
      "id": "499aeb71-f114-45a5-8456-91b9f6c45ddd",
      "name": "updated-idp",
      "entityId": "http://www.example.com/idp2",
      "ssoUrl": "https://www.example.com/idp2/sso",
      "signCert": "-----BEGIN CERTIFICATE-----\nMIIDrDCCtchA...\n-----END CERTIFICATE-----"
    }
    ```

    ### List configured ID Provider Authentication Domains
    You can get a listing of all the configured ID Providers using
    a GET request to [/idp_auth_domain](#operation/queryIdProviderAuthDomain).

    **Example:** Get the list of ID Provider authentication domains.

    ```bash
    curl -k -u admin:pass -X GET 'https://$cluster_address/api/v1/idp_auth_domain'
    ```

    The response body contains the ID of all the ID provider
    authentication domains.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "499aeb71-f114-45a5-8456-91b9f6c45ddd",
          "name": "new-idp",
          "entityId": "http://www.example.com/idp1",
          "ssoUrl": "https://www.example.com/idp1/sso",
          "signCert": "-----BEGIN CERTIFICATE-----\nMIIDrDCCApSg...\n-----END CERTIFICATE-----"
        },
        {
          "id": "9fef084b-75f8-4c03-9efa-c73b55be5da8",
          "name": "another-idp",
          "entityId": "http://www.example.com/idp2",
          "ssoUrl": "https://www.example.com/idp2/sso",
          "signCert": "-----BEGIN CERTIFICATE-----\nMIIDrDCCtchA...\n-----END CERTIFICATE-----"
        }
      ],
      "total": 2
    }

    ```

    ### Get information about a specific SAML ID Provider Authentication Domain
    You can also get information about a specific ID Provider using
    a GET request to [/idp_auth_domain/{id}](#operation/getIdProviderAuthDomain).

    **Example:** Get information about a configured ID Provider.

    ```bash
    curl -k -u admin:pass -X GET
      'https://$cluster_address/api/v1/idp_auth_domain/499aeb71-f114-45a5-8456-91b9f6c45ddd'
    ```

    The response body contains information about this ID provider
    authentication domain.

    ```bash
    {
      "id": "499aeb71-f114-45a5-8456-91b9f6c45ddd",
      "name": "new-idp",
      "entityId": "http://www.example.com/idp1",
      "ssoUrl": "https://www.example.com/idp1/sso",
      "signCert": "-----BEGIN CERTIFICATE-----\nMIIDrDCCApSg...\n-----END CERTIFICATE-----"
    }
    ```

    ### Delete an ID Provider Authentication Domain
    Any ID Provider authentication domain that is configured
    to a Rubrik cluster can be removed by issuing a DELETE request to
    [/idp_auth_domain/{id}](#operation/deleteIdProviderAuthDomain).

    **Example:** Remove the ID Provider authentication domain

    ```bash
    curl -k -u admin:pass -X DELETE
    https://$cluster_address/api/v1/idp_auth_domain/499aeb71-f114-45a5-8456-91b9f6c45ddd
    ```

    ### Download Rubrik SAML Metadata
    Generate the Rubrik SAML service provider metadata file and
    get the URL of the file by issuing a GET request to
    [/saml/rubrik_metadata](#operation/configRubrikSamlMetadata).

    **Example:**  Generate the Rubrik SAML metadata file without providing
    an address for the host at the endpoint. The cluster chooses
    a floating IP as the host address.

    ```bash
    curl -k -u admin:pass -X POST -d '{}'
      'https://$cluster_address/api/v1/saml/rubrik_metadata'
    ```

    **Example:** Generate the Rubrik SAML metadata file and specify
    an address for the host at the endpoint.

    ```bash
    curl -k -u admin:pass -X POST -d '{"hostAddress": "my.rubrik.saml.sp.com"}'
      'https://$cluster_address/api/v1/saml/rubrik_metadata'
    ```

    ### Check SAML SSO Status ###
    Send a GET request to unauthenticated endpoint
    [/saml/sso_status](#operation/getSamlSsoStatus) to check SAML SSO status.
    The status is represented by an object that contains 1) a Boolean value that
    determines whether or not SSO is enabled. 2) an optional String value that
    indicates the name of the default IdP authentication domain for SSO login.
    The default IdP will be configured when there is only one IdP configured in
    the cluster. 3) a Boolean value, isGpsLoginEnabled, that determines whether
    federated login is enabled.

    **Example:** Check SAML SSO status

    ```bash
    curl -k -X GET 'https://$cluster_address/api/v1/saml/sso_status'
    ```

    ### Make SAML Authentication Request
    Send a POST request to [/saml/authn_request](#operation/makeSamlAuthnRequest)
    to generate a signed SAML authentication request for the authentication domain
    of a specified ID Provider. The request can include optional parameters to
    specify a redirection resource path  and to specify that the request
    is a test of the configuration for the ID Provider. The response provides
    the data that is required for a SAML SSO authentication request for
    the ID Provider. This is an unauthenticated API.

    **Example:** Make the SAML authentication request for ID Provider my-idp-1

    ```bash
    curl -k -X POST https://$cluster_address/api/v1/saml/authn_request/my-idp-1
      -d '{"redirectPath": "/web/bin/index.html#/welcome", "isForIdpTest": false}'
    ```

    # Principal Management

    ## Searching for principals

    To search for principals, send a GET request to the
    [`/principal`](#operation/searchPrincipalsV1) endpoint.

    This endpoint only returns principals from the organization to which the
    currently logged-in user belongs.

    All query parameters are optional. Each specified query parameters (besides the
    sorting parameters) will further restrict the set of results.

    **Example:**
    ```bash
    curl -X GET "https://$cluster_address/api/v1/principal?
    name=$name&
    auth_domain_id=$auth_domain_id&
    organization_id=$organization_id&
    role_id=$role_id&
    is_assigned_roles_or_is_local=$is_assigned_roles_or_is_local&
    sort_by=$sort_by&
    sort_order=$sort_order&
    limit=$limit&
    offset=$offset"
    ```

    ## Assigning roles to principals

    To get a list of roles assigned to principals, send a GET request to the
    [`/principal/role`](#operation/getRolesForPrincipals) endpoint.

    **Example:**
    ```bash
    curl -X GET -d "https://$cluster_address/api/v1/principal/role?
    principals=$principal_ids"
    ```

    To assign roles to a set of principals, send a POST request to the
    [`/principal/role`](#operation/assignRolesToPrincipals)
    endpoint.

    **Example:**
    ```bash
    curl -X POST -d '{
      "principals": "[$principal_id]",
      "roles": "[$role_id]"
    }' "https://$cluster_address/api/v1/principal/role"
    ```

    To revoke roles from a set of principals, send a POST request to the
    [`/principal/role/bulk_revoke`](#operation/revokeRolesFromPrincipals)
    endpoint.

    **Example:**
    ```bash
    curl -X POST -d '{
      "principals": "[$principal_id]",
      "roles": "[$role_id]"
    }' "https://$cluster_address/api/v1/principal/role/bulk_revoke"
    ```

    # Role Management

    This section provides details on role management on CDM.

    ## Role Lifecycle Management

    To create a new role, send a POST request to the
    [`/role`](#operation/createRole) endpoint.

    **Example:**
    ```bash
    curl -X POST -d '{
      "name": "$role_name",
      "description": "$description"
    }' "https://$cluster_address/api/v1/role"
    ```

    To update a new role, send a PATCH request to the
    [`/role/$role_id`](#operation/updateRole) endpoint.

    **Example:**
    ```bash
    curl -X PATCH -d '{
      "name": "$role_name",
      "description": "$description"
    }' "https://$cluster_address/api/v1/role/$role_id"
    ```

    To delete a role, send a DELETE request to the
    [`/role/$role_id`](#operation/deleteRole) endpoint.

    **Example:**
    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/role/$role_id"
    ```

    To get role metadata for all roles in an organization,
    send a GET request to the [`/role`](#operation/getRoles) endpoint.

    All query parameters are optional. The getRoles endpoint uses the
    organization ID of the current user session when the API call does
    not specify an organization ID.

    **Example:**
    ```bash
    curl -X GET "https://$cluster_address/api/v1/role?
    organization_id=$organization_id&
    name=$role_name"
    ```

    To get role metadata for a specific role, send a GET request to the
    [`/role/$role_id`](#operation/getRole) endpoint.

    **Example:**
    ```bash
    curl -X GET "https://$cluster_address/api/v1/role/$role_id"
    ```


    # Authorization

    This section provides details on authorizing calls to the Rubrik CDM REST API.

    ## Clearing the authorization cache
    Stale authorization information cached on the Rubrik CDM API server can cause
    API call failures. Clearing the cache on the node targeted by an API call can
    prevent this error.

    To clear the cache, send a DELETE request to the
    [`/authorization/cache`](#operation/deleteAuthzCache) endpoint.
    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/authorization/cache"
    ```

    # Rubrik certificate management

    This section explains how to manage certificates.

    ## Retrieving all imported certificates

    To retrieve all imported certificates from the cluster, send a GET request to
    the [`/certificate`](#operation/queryCertificates) endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/certificate"
    ```

    The Rubrik REST API server returns an array of objects with the certId,
    the name, the description, the certificate, whether the certificate has
    a private key, the expiration time, and what objects are using the certificate.

    ```bash
    {
      "certId": "$certId",
      "name": "$certName",
      "hasKey": true,
      "expiration": "$certExpiration",
      "usedBy": {}
    }
    ```

    ## Importing a certificate

    To import a certificate, send a POST request to the
    [`/certificates`](#operation/importCertificate) endpoint.

    ```bash
    curl -X POST -d '{
      "name": "certName",
      "pemFile": "$pemFile",
      "privateKey": "$privateKey",
      "description": "$description"
    }' "https://$cluster_address/api/v1/certificate"
    ```

    The Rubrik REST API server returns an object with the certId, the name,
    the description, the certificate, whether the certificate has a private key,
    the expiration time, and what objects are using the certificate.

    ```bash
    {
      "certId": "$certId",
      "name": "$certName",
      "hasKey": true,
      "expiration": "$certExpiration",
      "usedBy": {}
    }
    ```

    ## Retrieving a certificate

    To retrieve a certificate, send a GET request to the
    [`/certificate/{id}`](#operation/exportCertificate) endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/certificate/$cert_id"
    ```

    The Rubrik REST API server returns an object with the certId, the name,
    the description, the certificate, whether the certificate has a private key,
    the expiration time, and what objects are using the certificate.

    ## Updating a certificate

    To update a certificate, send a PATCH request to the
    [`/certificate/{id}`](#operation/updateCertificate) endpoint.

    ```bash
    curl -X POST -d '{
      "name": "certName",
      "pemFile": "$pemFile",
      "description": "$description"
    }' "https://$cluster_address/api/v1/certificate/$cert_id"
    ```

    The Rubrik REST API server returns an object with the certId, the name,
    the description, the certificate, whether the certificate has a private key,
    the expiration time, and what objects are using the certificate.

    ## Deleting a Certificate

    To delete a certificate, send a DELETE request to the
    [`/certificate/{id}`](#operation/deleteCertificate) endpoint.

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/certificate/$cert_id"
    ```

    ## Generating a Certificate Signing Request (CSR)

    To generate a CSR, send a POST request to the
    [`/csr`](#operation/generateCsr) endpoint.

    ```bash
    curl -X POST -d '{
      "hostnames": "$hostnames",
      "name": "$name",
      "organizations": "$organization",
      "organizationUnit": "$organizationUnit",
      "country": "$country",
      "state": "$state",
      "city": "$city"
    }' "https://$cluster_address/api/v1/csr"
    ```
    Hostnames and name are required. The Rubrik REST API server will respond with
    the information provided in the POST request, in addition to the CSR to be
    signed.

    ## Retrieving all outstanding Certificate Signing Requests

    To retrieve all outstanding CSRs, send a GET request to the
    [`/csr`](#operation/getAllCsrs) endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/csr"
    ```
    The Rubrik REST API server returns an array of objects with the csrId,
    the name, the CSR, and all information provided to generate the CSR.

    ## Deleting a Certificate Signing Request (CSR)

    To delete a CSR, send a DELETE request to the
    [`/csr/{id}`](#operation/deleteCsr) endpoint.

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/csr/$csr_id"
    ```

    ## Managing Rubrik Backup Service secondary cluster certificates

    The Rubrik Backup Service can be setup to allow registering with multiple Rubrik
    clusters. See the Multicluster Rubrik Backup Service section of the Rubrik CDM
    User Guide for details. Certificates for replication source or replication
    target clusters are automatically added without calling the API in this section.
    To mark a certificate to be added to agents, send a POST request to
    [`/certificate/agent`](#operation/markAgentSecondaryCertificate).

    ```bash
    curl -X POST \
      -d '{
        "cert_id": "$certId"
      }' \
      "https://$cluster_address/api/v1/certificate/agent"
    ```

    To list all qualified certificates that have been
    [imported to the cluster](#section/Rubrik-certificate-management/Importing-a-certificate),
    send a GET request to
    [`/certificate/agent`](#operation/queryAgentSecondaryCertificate).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/certificate/agent"
    ```

    To unmark a certificate so that is is no longer added to agents, send a DELETE
    request to
    [`/certificate/agent/{id}`](#operation/unmarkAgentSecondaryCertificate).

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/certificate/agent/$certId"
    ```

    # Cluster configuration history
    Rubrik REST API provides the `/config/history` endpoints for
    administrators to audit the changes made to the configuration
    parameters on a Rubrik cluster.

    The ability to audit the configuration changes allows administrators to
    track the information related to the configuration changes, such as the
    old and new values of the configuration parameters, the user account
    that made the changes, the time of each change, and the name of the
    cluster or node where the changes were made.

    The `/config/history` endpoints apply to the following
    configuration parameters:
    * Global or cluster wide configuration
    * Local or node specific configuration

    ## Retrieving a summary of configuration changes
    To retrieve a list of configuration updates based on specific parameters,
    send a GET request to [`/config/history/list_updates`]
    (#operation/queryConfigurationHistoryUpdates).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/config/history/list_updates"
    ```

    To retrieve information for a specific configuration parameter
    include the name of the parameter in the request. To retrieve
    information for all configuration parameters that fit within the specified
    filters, do not specify a parameter name.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/config/history/list_updates?name=$config_name"
    ```
    The *Rubrik CDM User Guide* describes the parameters that can be
    configured to filter the results of the `GET /config/history/list_updates`
    endpoint.

    The Rubrik REST API server responds with a list of JSON objects for the
    configuration updates that meet all specified filters.

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "nodeId": "string",
          "namespace": "string",
          "name": "string",
          "oldValue": "string",
          "newValue": "string",
          "apiUser": "string",
          "modifiedDateTime": "2021-02-26T17:21:54.520Z",
          "source": "string",
          "configChangeMetadata": "string"
        }
      ],
      "total": 0
    }
    ```

    ## Retrieving a summary of configuration changes on a given date
    To retrieve the values of configuration parameters on a specific date,
    send a GET request to [`/config/history/ondate`]
    (#operation/retrieveConfigurationValues).

    Specify values for the `namespace` and `on_date` query parameters
    that are required to send the GET request.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/config/history/ondate?namespace=$namespace&on_date=$timestamp"
    ```

    To retrieve information for a specific configuration parameter
    include the name of the parameter in the request, along with the
    namespace and on_date parameters. To retrieve information for all
    configuration parameters that fit within the specified filters, do not
    specify a configuration parameter name.

    The *Rubrik CDM User Guide* describes the parameters that can be
    configured to filter the results of the `GET /config/history/ondate`
    endpoint.

    The Rubrik REST API server responds with a list of JSON objects for the
    configuration updates that meet all specified filters.

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "namespace": "string",
          "name": "string",
          "defaultValue": "string",
          "onDate": "2021-02-26T17:21:54.526Z",
          "valueOnDate": "string",
          "currentValue": "string",
          "nodeId": "string"
        }
      ],
      "total": 0
    }
    ```

    # Rubrik cluster management

    This section explains how to retrieve basic information about a Rubrik cluster, as well as how to update the name of a cluster.

    ## Discovering Nodes
    **Example:** Discovering unbootstrapped nodes on a network
    The discover endpoint cannot function without multicast DNS. When multicast DNS is not available, manually specify hostname and IPv6 information about the Rubrik cluster to enable node discovery.
    To input information about unbootstrapped nodes located on this network, send a POST request to the [`/cluster/{id}/$manual_discover`](#operation/manualDiscover) endpoint.

    ```bash
    curl -X POST \
      -d '{"nodeInfo": [ {"hostname": "string", "ipv6": "string" } ] }' \
      "https://$cluster_address/api/v1/cluster/$manual_discover"
    ```

    The [`/cluster/{id}/$manual_discover_ipv4`](#operation/manualDiscoverIpv4) endpoint also discovers nodes over an IPv4 network.

    ```bash
    curl -X POST \
      -d '{"nodeInfo": [ {"hostname": "string", "ipv4": "string" } ] }' \
      "https://$cluster_address/api/v1/cluster/$manual_discover_ipv4"
    ```

    ## Retrieving Rubrik Cluster Information


    **Example:** Retrieving publicly available information about a Rubrik cluster

    To retrieve information about a Rubrik cluster, send a GET request to the [`/cluster/$cluster_id`](#operation/getPublicClusterInfo) endpoint. The Rubrik REST API server responds with the publicly available information for the specified Rubrik cluster.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/$cluster_id"
    ```

    The Rubrik REST API server returns an array with the session ID, the Rubrik cluster software version, the API version, the Rubrik cluster name, and the Rubrik cluster time zone.

    ```bash
    {
      "id": "$cluster_id",
      "version": "4.1.0",
      "apiVersion": "1.0",
      "name": "$cluster_name",
      "timezone": {
        "timezone": "$cluster_timezone"
      }
    }
    ```
    To retrieve the cluster certificate, send a GET request to the
    [`/cluster/{id}/certificate`](#operation/getClusterCertificate) endpoint.
    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/$cluster_id/certificate"
    ```
    To request only the current software version of the Rubrik cluster, send a GET request to the [`/cluster/$cluster_id/version`](#operation/getClusterVersion) endpoint.
    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/$cluster_id/version"
    ```

    To request only the current REST API version running on the cluster, send a GET request to [`/cluster/$cluster_id/api_version`](#operation/getClusterApiVersion)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/$cluster_id/api_version"
    ```

    To get the download link for Rubrik SNMP MIB file, send a GET request to [`/cluster/$cluster_id/snmp_mib_link`](#operation/getRubrikSnmpMibDownloadLink)
    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/$cluster_id/snmp_mib_link"
    ```

    To get the download link for the SYSLOG-MSG-MIB file, send a GET request to [`/cluster/$cluster_id/syslog_msg_mib_link`](#operation/getSyslogMsgSnmpMibDownloadLink)
    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/$cluster_id/syslog_msg_mib_link"
    ```

    To get the download link for the SYSLOG-TC-MIB file, send a GET request to [`/cluster/$cluster_id/syslog_tc_mib_link`](#operation/getSyslogTcSnmpMibDownloadLink)
    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/$cluster_id/syslog_tc_mib_link"
    ```

    To retrieve the encryption at rest status of the cluster, send a GET request to the [`/cluster/$cluster_id/encryption`](#operation/getEncryptionStatus) endpoint.
    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/$cluster_id/security/encryption"
    ```

    To retrieve the IDs of the nodes in the cluster, send a GET request to the ['/cluster/$cluster_id/node_id'](#operation/getClusterNodeIds) endpoint.
    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/$cluster_id/node_id"
    ```

    ## Hostnames for nodes in a Rubrik cluster

    ### Retrieving hostnames for nodes in a Rubrik cluster

    To retrieve the hostnames of the nodes in a Rubrik cluster, send a GET request to the ['/cluster/$cluster_id/node_hostname'](#operation/getClusterNodeHostnames) endpoint.
    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/$cluster_id/node_hostname"
    ```
    The Rubrik REST API server responds with an array of node ID to hostname mappings for all the nodes in the specified Rubrik cluster.
    ```bash
    [
      {
        "id": "RVM000000000001",
        "hostname": "myhost01"
      },
      {
        "id": "RVM000000000002",
        "hostname": "myhost02"
      }
    ]
    ```

    ### Updating hostnames for nodes in a Rubrik cluster

    To update the hostnames of the nodes in the Rubrik cluster, send a POST request to the ['/cluster/$cluster_id/node_hostname'](#operation/changeClusterNodeHostnames) endpoint.
    ```bash
    curl -X POST \
      -d '[{ "id": "$id", "hostname":" "$hostname" }]' \
      "https://$cluster_address/api/v1/cluster/$cluster_id/node_hostname"
    ```
    The Rubrik REST API server responds with an appropriate message.

    ## Changing the Rubrik cluster name or time zone

    To change the name or the current time zone of a Rubrik cluster, send a PATCH request to the [`/cluster/$cluster_id`](#operation/updateCluster) endpoint.  Specify the new name as the value of `$cluster_name`, and specify the new time zone as the value of `$cluster_timezone`.

    **Example:** Changing the name and the time zone of a Rubrik cluster

    ```bash
    curl -X PATCH \
      -d '{ "clusterName": $cluster_name, "timezone": { "timezone": $cluster_timezone } }' \
      "https://$cluster_address/api/v1/cluster/$cluster_id"
    ```

    The response provides the attributes of the specified Rubrik cluster object, including the new name, and the new time zone.

    ```bash
    {
      "id": "$cluster_id",
      "version": "4.1.0",
      "apiVersion": "1.0",
      "name": "$cluster_name",
      "timezone": {
          "timezone": "$cluster_timezone"
      }
    }
    ```

    ## Stage CDM software to the cluster.

    Send a POST request to the [`/cluster/{id}/upgrade/stage_cdm_software`](#operation/stageCdmSoftware) endpoint.

    ```bash
    curl -X POST \
      -d '{"version": "$version", "packageUrl": "$packageUrl", "md5sum": "$md5sum", "size": $size, "skipDownload": $skipDownload }' \
      "https://$cluster_address/api/v1/cluster/$cluster_id/upgrade/stage_cdm_software"
    ```

    ## Query asynchronous job status for upgrade related job

    To query the job status details of an asynchronous job that is related to upgrades, issue a GET to [`/cluster/{id}/upgrade/request/{request_id}`](#operation/getAsyncRequestStatusForUpgrade).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/$cluster_id/upgrade/request/$request_id"
    ```

    ## Retrieve CDM version available for upgrade

    Send a GET request to the [`/cluster/{id}/upgrade/available_version`](#operation/availableVersion) endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/upgrade/available_version"
    ```

    ## Retrieving Rubrik cluster prechecks status.
    To start an on demand run of the periodic upgrade prechecks,
     send a POST request to the [`/cluster/{id}/upgrade/precheck_status`](#operation/runPeriodicUpgradePrechecks) endpoint.

    ```bash
    curl -X POST "https://$cluster_address/api/v1/cluster/$cluster_id/upgrade/
    precheck_status"
    ```

    To retrieve the result of the latest run of periodic upgrade prechecks,
     send a GET request to the [`/cluster/{id}/upgrade/precheck_status`](#operation/getPeriodicUpgradePrechecksStatus) endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/$cluster_id/upgrade/
    precheck_status"
    ```

    The Rubrik REST API server returns a response which provides the list of
     failures along with start time and end time.
    ```bash
    {
      "endTime": 1580385970715,
      "isOnDemand": false,
      "failureResults": [
        {
          "isUserRemediable": false,
          "errorMessage": "Sample error message",
          "precheckName": "Sample precheck name",
          "userRemediableAction": "",
          "userRemediableActionMessage": ""
        }
      ],
      "startTime": 1580385904457
    }
    ```

    ## Checking if a Rubrik cluster has an existing set of Rubrik support portal credentials

    Send a GET request to the [`/cluster/{id}/rubrik_support_portal_credentials`](#operation/hasRubrikSupportPortalCredentials) endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/$cluster_id/rubrik_support_portal_credentials"
    ```

    ## Updating Rubrik support portal credentials on a Rubrik cluster

    Send a POST request to the [`/cluster/{id}/rubrik_support_portal_credentials`](#operation/updateRubrikSupportPortalCredentials) endpoint.

    ```bash
    curl -X POST \
      -d '{"username" : "$username", "password": "$password"}' \
      "https://$cluster_address/api/v1/cluster/$cluster_id/rubrik_support_portal_credentials"
    ```

    ## Monitoring events on CDM

    Send a GET request to the [`/cluster/me/upgrade/monitor_events`]
    (#operation/monitorEvents) endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/me/upgrade/monitor_events"
    ```

    # Passwords

    ## Setting password requirements

    To set cluster-wide password requirements, send a PATCH request to
    [`/cluster/{id}/security/password_requirements`]
    (#operation/patchPasswordRequirements).
    The following parameters are optional:
    ```bash
    curl -X PATCH \
      -d '{
        "id": "$cluster_id",
        "minLength": "$min_length",
        "minUpperCase": "$min_upper_case",
        "minLowerCase": "$min_lower_case",
        "minNumerics": "$min_numerics",
        "minSpecial": "$min_special",
        "useZxcvbn": "$use_zxcvbn" }' \
      "https://$cluster_address/api/v1/cluster/{id}/security/password_requirements"
    ```

    The Rubrik REST API server responds with a summary of the password requirements:
    ```bash
    {
      "id": "$cluster_id",
      "minLength": "$min_length",
      "maxLength": "$max_length",
      "minUpperCase": "$min_upper_case",
      "minLowerCase": "$min_lower_case",
      "minNumerics": "$min_numerics",
      "minSpecial": "$min_special",
      "useZxcvbn": "$use_zxcvbn"
    }
    ```

    ## Getting current password requirements

    To retrieve the existing cluster-wide password requirments,
    send a GET request to
    [`/cluster/{id}/security/password_requirements`]
    (#operation/queryPasswordRequirements)

    ```bash
    curl -X GET \
      -d '{
        "id": "$cluster_id" }' \
      "https://$cluster_address/api/v1/cluster/{id}/security/password_requirements"

    ```

    The Rubrik REST API server responds with a summary of the password requirements:
    ```bash
    {
      "id": "$cluster_id",
      "minLength": "$min_length",
      "maxLength": "$max_length",
      "minUpperCase": "$min_upper_case",
      "minLowerCase": "$min_lower_case",
      "minNumerics": "$min_numerics",
      "minSpecial": "$min_special",
      "useZxcvbn": "$use_zxcvbn"
    }
    ```

    ## Managing the Web Server Certificate

    To retrieve the existing web server certificate signed by a CA, send
    a GET request to:
    [`/cluster/{id}/security/web_signed_cert`]
    (#operation/getWebSignedCertificate)

    ```bash
    curl -X GET \
      -d '{
        "id": "$cluster_id" }' \
      "https://$cluster_address/api/v1/cluster/{id}/security/web_signed_cert"
    ```
    ```bash
    {
      "webServerConfiguredWithCASignedCertificate": true,
      "cert": {
        "certId": "string",
        "name": "string",
        "pemFile": "string",
        "hasKey": true,
        "expiration": "2020-03-30T19:32:08.221Z",
        "usedBy": "string",
        "description": "string"
      }
    }
    ```

    Set the web server certificate used by Rubrik for REST API
    communications by sending a PUT request to the
    [`/cluster/{id}/security/web_signed_cert`](#operation/setWebSignedCertificate)
    endpoint:

    ```bash
    curl -X PUT \
      -d '{
        "certificateId": "string"}' \
      "https://$cluster_address/api/v1/cluster/{id}/security/web_signed_cert"
    ```
    ```bash
    {
      "id": "string",
      "status": "string",
      "progress": 0,
      "startTime": "2020-03-30T19:09:13.400Z",
      "endTime": "2020-03-30T19:09:13.400Z",
      "nodeId": "string",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "string",
          "rel": "string"
        }
      ]
    }
    ```

    To use the default, self-signed certificate, send a DELETE request to the
    [`/cluster/{id}/security/web_signed_cert`](#operation/resetWebSignedCertificate)
    endpoint.

    ```bash
    curl -X DELETE \
      -d '{
        "id": "$cluster_id" }' \
      "https://$cluster_address/api/v1/cluster/{id}/security/web_signed_cert"
    ```
    ```bash
    {
      "id": "string",
      "status": "string",
      "progress": 0,
      "startTime": "2020-03-30T19:31:13.024Z",
      "endTime": "2020-03-30T19:31:13.025Z",
      "nodeId": "string",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "string",
          "rel": "string"
        }
      ]
    }
    ```

    ## Managing Truststores

    To retrieve the existing truststore configuration, send
    a GET request to:
    [`/cluster/{id}/security/truststore`]
    (#operation/getTruststores)

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/cluster/{id}/security/truststore"
    ```
    ```bash
    {
      "hasMore": false
      "data": [
        {
          "truststoreType": "TruststoreType",
          "certificates": [
            {
              "certId": "string",
              "name": "string",
              "pemFile": "string",
              "hasKey": true,
              "expiration": "2020-03-30T19:32:08.221Z",
              "usedBy": "string",
              "description": "string"
            }
          ]
        }
      ]
    }
    ```

    To set the certificates for one or more of the truststores used by Rubrik,
    send a PATCH request to the
    [`/cluster/{id}/security/truststore`](#operation/setTruststoreCertificate)
    endpoint:

    ```bash
    curl -X PATCH \
      -d '{
          "truststorePayload": [ \
            {"truststoreType": "TruststoreType", certIds: ["string", "string"]} \
          ]}' \
      "https://$cluster_address/api/v1/cluster/{id}/security/truststore"
    ```
    ```bash
    OK
    ```

    To clear the certificates for one or more of the truststores used by Rubrik,
    send a DELETE request to the
    [`/cluster/{id}/security/truststore`](#operation/unsetTruststoreCertificate)
    endpoint:

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/cluster/{id}/security/truststore?truststores=$truststore1,$truststore2"
    ```
    ```bash
    OK
    ```

    ## Updating CORS support configuration

    To update the CORS support configuration for a web server, send a PATCH request
    to [`/cluster/{id}/security/cors`](#operation/updateCorsConfiguration).
    ```bash
    curl -X PATCH \
      -d '{
        "isEnabled": "$is_enabled",
        "allowedOrigins": "$allowed_origins",
        "allowedHEaders": "$allowed_headers" }' \
      "https://$cluster_address/api/v1/cluster/{id}/security/cors"
    ```

    ## Getting CORS support configuration

    Retrieve the current CORS support configuration with a GET request to:
    [`/cluster/{id}/security/cors`](#operation/getCorsConfiguration).
    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/cluster/{id}/security/cors"
    ```

    ## Getting FIPS enablement status

    Retrieve the current FIPS enablement status with a GET request to:
    [`/cluster/{id}/security/fips`](#operation/getFips).
    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/cluster/{id}/security/fips"
    ```

    ## Updating FIPS enablement

    To update the FIPS enablement for a cluster, send a PATCH request
    to [`/cluster/{id}/security/fips`](#operation/updateFips).
    ```bash
    curl -X PATCH \
      -d '{
        "isEnabledInFlight": "$is_enabled_in_flight" }' \
      "https://$cluster_address/api/v1/cluster/{id}/security/fips"
    ```

    ## Managing KMIP Servers
    To configure a new KMIP server integration, send a PUT request to the
    [`/cluster/{id}/security/kmip/server`](#operation/addKmipServer) endpoint.
    ```bash
    curl -X PUT \
      -d '{
        "serverAddress": "string",
        "serverCertificateId": "string",
        "serverPort": 0}' \
      "https://$cluster_address/api/v1/cluster/{id}/security/kmip/server"

    ```
    ```bash
    {
      "id": "string",
      "status": "string",
      "progress": 0,
      "startTime": "2020-03-31T22:10:40.912Z",
      "endTime": "2020-03-31T22:10:40.912Z",
      "nodeId": "string",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "string",
          "rel": "string"
        }
      ]
    }
    ```

    For information about a configured KMIP server, send a GET request to the
    [`/cluster/{id}/security/kmip/server`](#operation/getKmipServer) endpoint:
    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/cluster/{id}/security/kmip/server?server_address=$address"
    ```
    ```bash
    [
      {
        "serverAddress": "string",
        "serverCertificateId": "string",
        "serverPort": 0
      }
    ]
    ```
    To delete an existing KMIP server integration, send a DELETE
    request to [`/cluster/{id}/security/kmip/server`](#operation/deleteKmipServer):
    ```bash
    curl -X DELETE \
    "https://$cluster_address/api/v1/cluster/{id}/security/kmip/server?server_address=$address"
    ```
    ```bash
    {
      "id": "string",
      "status": "string",
      "progress": 0,
      "startTime": "2020-03-31T22:15:26.693Z",
      "endTime": "2020-03-31T22:15:26.693Z",
      "nodeId": "string",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "string",
          "rel": "string"
        }
      ]
    }

    ```

    ## Managing the KMIP Client
    To configure the KMIP client, send a PUT request to
    [`/cluster/{id}/security/kmip/client`](#operation/setKmipClient)
    ```bash
    curl -X PUT \
      -d '{
        "username": "string",
        "password": "string",
        "clientCertificateId": "string"
        }' \
      "https://$cluster_address/api/v1/cluster/{id}/security/kmip/client"
    ```
    ```bash

    ```
    To retrieve information about the confiugred KMIP client, send a GET request to
    [`/cluster/{id}/security/kmip/client`](#operation/getKmipClient)
    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/cluster/{id}/security/kmip/client"
    ```
    ```bash
    {
      "username": "string",
      "clientCertificateId": "string",
      "isPasswordSet": true
    }
    ```

    ## Manage the 2-Step Verification Global Setting
    ### Retrieving the 2-Step Verification global setting
    To retrieve the 2-Step Verification global setting for
    a specific Rubrik cluster, send a GET request to
    [`/cluster/{id}/security/totp/setting`](#operation/getTotpGlobalSetting).
    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/cluster/{id}/security/totp/setting"
    ```
    The Rubrik REST API server responds with the 2-Step Verification setting for
    the specified Rubrik cluster.
    ```bash
    {
      "isEnforced": true
    }
    ```

    ### Updating the 2-Step Verification global setting
    To update the 2-Step Verification global setting for
    a specific Rubrik cluster, send a PUT request to
    [`/cluster/{id}/security/totp/setting`](#operation/updateTotpGlobalSetting).
    ```bash
    curl -X PUT \
      -d '{"isEnforced": true}'
      "https://$cluster_address/api/v1/cluster/{id}/security/totp/setting"
    ```
    The Rubrik REST API server responds with the updated 2-Step Verification 
    setting for the specified Rubrik cluster.
    ```bash
    {
      "isEnforced": true
    }
    ```

    # Event

    ## Get latest events and event series info for event series
    Send a GET request to [`/event/latest`](#operation/queryLatestEventsV1)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/event/latest"
    ```

    ## Get information for all events
    Send a GET request to [`/event`](#operation/queryEventV1)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/event"
    ```

    ## Get all events and relevant information associated with an event series
    Send a GET request to [`/event_series/{id}`](#operation/queryEventSeriesByIdV1)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/event_series/{id}"
    ```

    ## Get download link of CSV file containing summary of events
    Send a GET request to
    [`/event/csv_download_link`](#operation/getEventsCsvDownloadLink)

    ```bash
    curl -X GET "https://$cluster_address/api/v1//event/csv_download_link"
    ```

    # SLA Domains

    Rubrik clusters provide automated data management and protection through SLA Domains.
    An SLA Domain defines the data management and protection policies for their assigned snappables (virtual machines, file systems, and applications).

    To provide policy based management and protection of a snappable, add the snappable to an SLA Domain, or to multiple SLA Domains.

    ## Retrieving SLA Domains

    Before assigning snappables to SLA Domains, get a list of the SLA Domains that exist on a Rubrik cluster. For a new Rubrik cluster, the list shows only the default SLA Domains. When custom SLA Domains are added to the Rubrik cluster, the list is modified to include those SLA Domains.

    **Example:** Retrieving SLA Domains from a Rubrik cluster

    Send a GET request to [`/sla_domain`](#operation/querySlaDomain).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/sla_domain"
    ```

    The Rubrik REST API server returns a `ListResponse` object of all SLA Domains.
    At a minimum, the `ListResponse` object includes the default SLA Domains: Gold, Silver, and Bronze.

    ```bash
    {
      "data": [
        {
          "id": "$gold_sla_id",
          "name": "Gold"
        },
        {
          "id": "$silver_sla_id",
          "name": "Silver"
        },
        {
          "id": "$bronze_sla_id",
          "name": "Bronze"
        }
      ],
      "hasMore": false,
      "total": 3
    }
    ```

    To obtain more details about a specific SLA domain send a GET request with the `id` of one of the SLA Domains to the `/sla_domain/{id}` endpoint:  [`/sla_domain/{id}`](#operation/getSlaDomain)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/sla_domain/$bronze_sla_id"
    ```
    The Rubrik REST API server responds with the details of the specified SLA Domain.

    ```bash
    {
      "id": "$bronze_sla_id",
      "primaryClusterId": "$cluster_id",
      "name": "Bronze",
      "frequencies": [
        {
          "timeUnit": "Daily",
          "frequency": 1,
          "retention": 32
        },
        {
          "timeUnit": "Monthly",
          "frequency": 1,
          "retention": 12
        },
        {
          "timeUnit": "Yearly",
          "frequency": 1,
          "retention": 2
        }
      ],
      "allowedBackupWindows": [],
      "firstFullAllowedBackupWindows": [],
      "archivalSpecs": [],
      "replicationSpecs": [
        {
          "locationId": "$repl_location_id",
          "retentionLimit": 0
        }
      ],
      "numDbs": 0,
      "numFilesets": 7,
      "numLinuxHosts": 3,
      "numWindowsHosts": 2,
      "numVms": 1,
      "isDefault": false,
      "uiColor": "#cc8366"
    }
    ```

    ## Working with SLA Domains

    To work with an SLA Domain, obtain the `id` of that SLA Domain. As described in [Retrieving SLA Domains](#section/SLA-Domains/Retrieving-SLA-Domains), start by sending a GET request to [`/sla_domain`](#operation/querySlaDomain).

    The Rubrik REST API server responds with a `ListResponse` object that contains all of the SLA Domains on the specfied Rubrik cluster. From that list object, find the data array element that has the `name` value of the selected SLA Domain. In the same array element as the `name` value, note the value of the `id` string.

    ## Creating SLA Domains

    To create an SLA domain send a POST request to [`/sla_domain`](#operation/createSlaDomain). Include the attributes for the SLA Domain in the request body.

    The following table describes the required and optional attributes to include in the request body when creating an SLA Domain.

    | Attribute | Req'd | JSON Type | Description |
    | ------ | --- | ----- | ----------- |
    | `name` | Yes | String | Name of the SLA Domain.  |
    | `frequencies` | Yes | Array | Each member defines a policy by specifying: `timeUnit`, `frequency`, and `retention`. Requires at least one member in the array.  |
    | `allowedBackupWindows` | Yes | Array | Each member defines a backup window using values for `startTimeAttributes` and `durationInHours`. The time specified in `startTimeAttributes` uses the Rubrik cluster time zone. To specify multiple backup windows, add an array member for each window. To create an SLA Domain without a backup window, specify a null array value: `[]`.  |
    | `firstFullAllowedBackupWindows` | Yes | Array | Each member defines a period when first full backups are allowed by specifying: `startTimeAttributes` and `durationInHours`. Several first full backup windows can be specified by adding an array member for each one. Create an SLA Domain without a first full backup window by specifying a null array value: `[]`.  |
    | `localRetentionLimit` | No | String | Specify an integer value to set the number of days to retain a local copy of a snapshot. When an archival location is specified, specify `0` to enable Instant Archiving. |
    | `archivalSpecs` | No | Array | Defines the archival location for the SLA Domain by specifying: `locationId` and `archivalThreshold`. Currently limited to one array member. |
    | `replicationSpecs` | No | Array | Defines the replication location for the SLA Domain by specifying: `locationId` and `retentionLimit`. Currently limited to one array member. |

    **Example:** Creating an SLA Domain for daily backups

    Create an SLA Domain that takes a backup once a day and retains the backup for seven days. Do not set a backup window or a first full backup window. Do not include archival or replication.

    ```bash
    curl -X POST \
      -d '{
      "name": "Daily SLA",
      "frequencies": [
        {
          "timeUnit": "Day",
          "frequency": 1,
          "retention": 7
        }
      ],
      "allowedBackupWindows": [],
      "firstFullAllowedBackupWindows": [] }' \
      "https://$cluster_address/api/v1/sla_domain"
    ```
    The response confirms the attributes of the SLA Domain and provides the `id` of the new SLA Domain.

    ```bash
    {
      "id": "$sla_id",
      "name": "Daily SLA",
      "frequencies": [
        {
          "timeUnit": "Day",
          "frequency": 1,
          "retention": 7
        }
      ],
      "allowedBackupWindows": [],
      "firstFullAllowedBackupWindows": []
    }
    ```
    ## Modifying SLA Domains

    To modify the attributes of an SLA domain send a PUT request to [`/sla_domain/{id}`](#operation/updateSlaDomain). Include in the request body the new attributes.

    **Example:** Modifying the daily backup SLA Domain

    Change the SLA Domain that was created in [Creating SLA Domains](#section/SLA-Domains/Creating-SLA-Domains) to increase the retention to 14 days.

    ```bash
    curl -X PUT \
      -d '{
      "name": "Daily SLA",
      "frequencies": [
        {
          "timeUnit": "Day",
          "frequency": 1,
          "retention": 14
        }
      ],
      "allowedBackupWindows": [],
      "firstFullAllowedBackupWindows": [] }' \
      "https://$cluster_address/api/v1/sla_domain/$sla_id"
    ```
    The response confirms the new attribute.

    ```bash
    {
      "id": "$sla_id",
      "name": "Daily SLA",
      "frequencies": [
        {
          "timeUnit": "Day",
          "frequency": 1,
          "retention": 14
        }
      ],
      "allowedBackupWindows": [],
      "firstFullAllowedBackupWindows": []
    }
    ```
    ## Patching SLA Domains

    To patch the attributes of an SLA domain, send a PATCH request to
    [`/sla_domain/{id}`](#operation/patchSlaDomain). Include in the request body
    only the attributes that needs to be patched.

    **Example:** Patching the daily backup SLA Domain

    Patch the SLA Domain that was created in [Creating SLA Domains]
    (#section/SLA-Domains/Creating-SLA-Domains) to change the archival
    specifications.

    ```bash
    curl -X PATCH \
      -d '{
      "archivalSpecs": [
        {
            "locationId": "some-valid-archived-location-id",
            "archivalThreshold": 14
        }
      ]}' \
      "https://$cluster_address/api/v1/sla_domain/$sla_id"
    ```
    The response confirms the new attribute and also includes the other
    attributes that were not changed.

    ```bash
    {
      "id": "$sla_id",
      "name": "Daily SLA",
      "frequencies": [
        {
          "timeUnit": "Day",
          "frequency": 1,
          "retention": 7
        }
      ],
      "archivalSpecs": [
        {
          "locationId": "some-valid-archived-location-id",
          "archivalThreshold": 14
        }
      ],
      "allowedBackupWindows": [],
      "firstFullAllowedBackupWindows": []
    }
    ```
    ## Deleting SLA Domains

    To delete an SLA domain send a DELETE request to [`/sla_domain/{id}`](#operation/deleteSlaDomain).

    **Example:** Deleting an SLA Domain

    Delete an SLA Domain with the `id` of `$sla_id`.

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/sla_domain/$sla_id"
    ```
    The Rubrik REST API server responds with HTTP response code 204. This indicates the request succeeded and the response body is empty.

    ## Inherited protection

    The Rubrik REST API uses the reserved value `INHERIT` with the `configuredSlaDomainId` string to identify a snappable that derives its protection policy from a parent object. Examples of this:
    * VMware virtual machine inherits from vCenter Server
    * SQL Server database inherits from SQL Server instance

    Every snappable that can be protected through an SLA Domain is represented by an object that has a `configuredSlaDomainId` attribute and an `effectiveSlaDomainId` attribute. The `configuredSlaDomainId` attribute contains either the value of a direct SLA Domain assignment or the reserved value `INHERIT`.

    The `effectiveSlaDomainId` attribute contains the value of the SLA Domain setting that the Rubrik cluster actually applies to the snappable. When the value of the `configuredSlaDomainId` attribute is `INHERIT`, the value of the `effectiveSlaDomainId` attribute is derived from a parent object of the snappable. In all other cases, the value of the `effectiveSlaDomainId` attribute is the same as the value of the `configuredSlaDomainId` attribute.


    ## SLA Domain assignments

    To assign a snappable to an SLA Domain, use the endpoint that is provided for that type of snappable.
    * VMware virtual machines  
    Send a PATCH request to  [`/vmware/vm/{id}`](#operation/updateVm). [VMware virtual machines](#section/VMware-virtual-machines) provides more information about this.
    * Linux or Windows filesets  
    Send a PATCH request to  [`/fileset/{id}`](#operation/updateFileset). [Filesets](#section/Filesets) provides more information about this.
    * SQL Server databases  
    Send a PATCH request to  [`/mssql/db/{id}`](#operation/updateMssqlDb). [SQL Server databases](#section/SQL-Server-databases) provides more information about this.

    ## Assigning SLA Domain to downloaded snapshots

    To assign an SLA Domain to a list of snapshots at their downloaded locations,
    send a POST request to the [`/sla_domain/assign_to_downloaded_snapshots`]
    (#operation/assignSlaToDownloadedSnapshots) endpoint.

    **Example:** Assigning an SLA Domain with ID $slaId to list of snapshots -
                 $s1Id, $s2Id of object $snappableId

    ```bash
    curl -X POST \
      -d '{
       "slaDomainId": $slaId
       "objectId": $snappableId
       "snapshotIds": [$s1Id, $s2Id]}' \
       "https://$cluster_address/api/v1/sla_domain/assign_to_downloaded_snapshots"
    ```

    ```bash
    {
      "responses": [
        {
          "id": "string",
          "status": "string",
          "progress": 0,
          "startTime": "2019-10-29T22:11:35.256Z",
          "endTime": "2019-10-29T22:11:35.256Z",
          "nodeId": "string",
          "error": {
            "message": "string"
          },
          "links": [
            {
              "href": "string",
              "rel": "string"
            }
          ]
        }
      ]
    }
    ```

    The Rubrik REST API server responds with HTTP response code 200 and the
    response body containing the details of the async request.

    # Virtual machines

    The Rubrik cluster protects virtual machines running in a VMware vSphere
    environment through the VADP APIs. The Rubrik cluster also works with
    the Rubrik Backup Service running on the virtual machine to provide:

    * Optimal performance when restoring files and folders to the virtual machine
    * Application consistent snapshots of a Windows virtual machine


    ## vCenter servers

    A Rubrik cluster normally protects and manages virtual machines through the vCenter Server that administers those virtual machines. After a vCenter server is added to a Rubrik cluster, the Rubrik cluster automatically discovers the virtual machines that are administered by that vCenter server.

    ### Retrieving vCenter Servers

    Request a list of the vCenter servers that are registered with a Rubrik cluster by sending a GET request to  [`/vmware/vcenter`](#operation/queryVcenter).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vcenter"
    ```

    The Rubrik REST API server responds with the first page of a `ListResponse` object.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "$vcenter_id0",
          "hostname": "$vcenter_address0",
          "username": "$vcenter_admin0",
          "configuredSlaDomainId": "INHERIT",
          "primaryClusterId": "$cluster_id",
          "caCerts": "$ca_certs0"
        },
        {
          "id": "$vcenter_id1",
          "hostname": "$vcenter_address1",
          "username": "$vcenter_admin1",
          "configuredSlaDomainId": "INHERIT",
          "primaryClusterId": "$cluster_id",
          "caCerts": "$ca_certs1"
        }
      ],
      "total": 2
    }
    ```
    Depending on the number of registered vCenter Servers, all of the entries on the list may not be included on the first page. [Working with lists](#section/Overview/Working-with-lists) describes how to work with a ListResponse object to obtain additional pages of the list.


    ### Adding a vCenter server

    To add a vCenter server, send a POST request to [`/vmware/vcenter`](#operation/createVcenter).
    Include in the body of the request the address of the vCenter server and credentials for a user account (`username`) that has the required permissions. The Rubrik User Guide provides details about creating an account with the required permissions.

    ```bash
    curl -X POST \
      -d '{
        "hostname": "$vcenter_address",
        "username": "$vcenter_admin",
        "password": "$vcenter_password" }' \
      "https://$cluster_address/api/v1/vmware/vcenter"
    ```

    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$request_id",
      "status": "RUNNING",
      "error": "None",
      "progress": "$request_progress"
      "links": [
        {
          href: "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          rel: "self"
        }
      ]
    }
    ```

    Using the information provided in the task object, send a GET request to the [`/vmware/vcenter/request/{id}`](#operation/getVcenterAsyncRequestStatus) endpoint to poll the task status. When the value of `status` in the task object is `SUCCEEDED`, the task finished successfully.

    ### Retrieve vCenter Server details
    Get the details for a vCenter Server that is registered with a Rubrik cluster by sending a GET request to [`/vmware/vcenter/{id}`](#operation/getVcenter).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vcenter/{id}"
    ```

    The Rubrik REST API server responds with the details of the specified vCenter Server object.

    ```bash
    {
      "id": "$id",
      "hostname": "$vcenter_address0",
      "username": "$vcenter_admin0",
      "configuredSlaDomainId": "INHERIT",
      "primaryClusterId": "$cluster_id"
    }
    ```

    ### Modifying a vCenter Server entry

    To change the information that a Rubrik cluster stores for a vCenter Server, send a PUT request to [`/vmware/vcenter/{id}`](#operation/updateVcenter). All of the members of the `VcenterConfig` object must be in the PUT request. Using the new values, include in the body of the PUT request each member (`{string : value}`) of the `VcenterConfig` object:
    * `"hostname": "$vcenter_address"`
    * `"username": "$vcenter_admin"`
    * `"password": "$vcenter_password"`

    To change the configured SLA that is configured for a vCenter Server or to change CA certificates for the vCenter, send a PATCH request to[`/vmware/vcenter/{id}`](#operation/patchVcenter).

    ```bash
    curl -X PUT \
      -d '{
        "hostname": "$vcenter_address",
        "username": "$vcenter_admin",
        "password": "$vcenter_password" }' \
      "https://$cluster_address/api/v1/vmware/vcenter/$vcenter_id"
    ```

    The Rubrik REST API server sends a response, with the updated details of the vCenter Server entry in the response body.

    ```bash
    {
      "id": "$vcenter_id",
      "hostname": "$vcenter_address",
      "username": "$vcenter_admin",
      "configuredSlaDomainId": "INHERIT",
      "primaryClusterId": "$cluster_id",
      "caCerts": "$ca_certs"
    }
    ```
    ### Removing a vCenter Server entry

    To remove a vCenter Server entry from a Rubrik cluster, first unmount any Live Mount and Instant Recovery virtual machines for the vCenter Server. Then send a DELETE request to [`/vmware/vcenter/{id}`](#operation/deleteVcenter).

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/vmware/vcenter/$vcenter_id"
    ```
    The Rubrik REST API server initiates the asynchronous delete task and responds with a task object.

    ```bash
    {
        "id": "$request_id",
        "status": "RUNNING",
        "error": "None",
        "progress": 0,
        "startTime": "$start_timestamp",
        "endTime": "$end_timestamp",
        "links": [
          {
            "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
            "rel": "self"
          }
        ]
      }
    ```
    Using the information provided in the task object, send a GET request to poll the task status. When the value of `status` in the task object is `SUCCEEDED`, the removal of the vCenter Server object finished successfully.

    ### Force refresh of virtual machine on a vCenter
    Force a refresh of the metadata for a single virtual machine by sending a POST
    request to [`/vmware/vcenter/{id}`](#operation/createRefreshVmV1).

    ```bash
    curl -X POST \
      -d '{
        "vmMoid": "$vm_moid" }' \
      "https://$cluster_address/api/v1/vmware/vcenter/{id}/refresh_vm"
    ```

    The Rubrik REST API server responds with a 204 response.



    ### Metadata refresh

    The Rubrik cluster regularly refreshes the metadata of the registered vCenter Servers. As part of a refresh operation, the Rubrik cluster discovers any changes or additions to the virtual machines that are administered by the vCenter Servers. Instead of waiting for a regular refresh, a metadata refresh can be manually initiated by sending a POST request to [`/vmware/vm/refresh`](#operation/createRefresh), using the Rubrik cluster ID (`$cluster_address`) and the vCenter Server ID (`$vcenter_id`).

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/vmware/vcenter/$vcenter_id/refresh"
    ```

    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$request_id",
      "status": "RUNNING",
      "error": "None",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    Using the information provided in the task object, send a GET request to poll the task status. When the value of `status` in the task object is `SUCCEEDED`, the metadata refresh completed successfully.

    ## ESXi hypervisors

    Retrieve a list of all available ESXi hypervisors in the vSphere environment by sending a GET request to [`/vmware/host`](#operation/queryVmwareHost).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/host?primary_cluster_id=$cluster_id"
    ```
    The value of `primary_cluster_id` is the `id` of a Rubrik cluster. Use `local` to retrieve a list for the Rubrik cluster that is hosting the current session.

    The Rubrik REST API server responds with the first page of a `ListResponse` object.

    **Note:** To shorten the example, the response uses ellipsis to replace some members.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "$esxi_id",
          "name": "$esxi_name",
          "datacenterId": "$datacenter_id",
          "computeClusterId": "$compute_cluster_id",
          "datastores": [
          ...
          ],
          "configuredSlaDomainId": "INHERIT",
          "primaryClusterId": "$cluster_id"
        }
        ],
      "total": 1
    }
    ```

    Retrieve more details for an ESXi hypervisor by sending a GET request to [`/vmware/host/{id}`](#operation/getVmwareHost)

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/vmware/host/$esxi_id"
    ```

    The Rubrik REST API server responds with the details for the specified ESXi hypervisor.

    **Note:** To shorten the example, the response uses ellipsis to replace some members.

    ```bash
    {
      "id": "$esxi_id",
      "moid": "$moid",
      "name": "$esxi_name",
      "computeClusterId": "$compute_cluster_id",
      "datacenter": {
        "id": "$datacenter_id",
        "name": "$datacenter_name",
        "vcenterId": "$vcenter_id",
        "configuredSlaDomainId": "INHERIT",
        "primaryClusterId": "$cluster_id"
      },
      "datastores": [
        ...
      ],
      "virtualMachines": [
        ...
      ],
      "configuredSlaDomainId": "INHERIT",
      "primaryClusterId": "$cluster_id"
    }
    ```

    Additionally, To change the SLA Domain that is configured for an ESXi hypervisor, send a PATCH request on [`/vmware/host`](#operation/updateVmwareHost)

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/vmware/host/$snapshot_id"
    ```

    Retrieve datastore details for an ESXi hypervisor by sending a GET request to [`/vmware/host/{id}/datastore`](#operation/getVmwareHostDatastore)
    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/host/$esxi_id/datastore"
    ```


    ## Virtual machine protection

    After a vCenter Server is registered, the Rubrik cluster acquires metadata for the virtual machines that are administered through that vCenter Server. Using the metadata, assign Rubrik cluster protection to the virtual machines.

    The typical protection workflow involves the following tasks:
    1. Find the virtual machine resource object.
    2. (Optional) Enable scripts on the virtual machine.
    3. (Optional) Exclude specified vmdk files for the virtual machine.
    4. Assign the virtual machine to an SLA Domain.
    5. (Optional) Get the configuration used to force a full snapshot of the
       virtual machine.
    6. (Optional) Request a forced full snapshot for the virtual machine.

    ### Finding virtual machines
    Get a list of the virtual machine objects known to the Rubrik cluster by sending a GET request to [`/vmware/vm`](#operation/queryVm). The Rubrik REST API server returns a response that includes a `ListResponse` object. Use query parameters as part of the GET request, to filter the list and to work with the `ListResponse` object.

    A GET request that is sent to the [`/vmware/vm`](#operation/queryVm) endpoint accepts the query parameters that are described in the following table.
    | Parameter | Description |
    | --------- | ----------- |
    | `effective_sla_domain_id` | SLA Domain applied to the virtual machine, either directly or derived. Use `UNPROTECTED` for virtual machines that do not have a derived or direct SLA Domain. |
    | `primary_cluster_id` | The `id` of the primary Rubrik cluster for the virtual machine. Use `local` for the Rubrik cluster that is hosting the Rubrik REST API session. |
    | `limit` | Maximum number of a elements to include in the `data` array of the response. |
    | `offset` | Index reference point to use when determining the elements to include in the response. |
    | `is_relic` | Relic status of the virtual machine. `true` to specify only relic virtual machines. `false` to exclude relic virtual machines. Do not include the parameter to include both relic and non-relic virtual machines. |
    | `name` | String value to match in any part of the name of a virtual machine.  |
    | `moid` | String value to match in any part of the MOID of a virtual machine.  |
    | `sla_assignment` | SLA Domain assignment status of the virtual machine. Use `derived` for virtual machines that derive protection status from another resource object. Use `direct` for virtual machines that have a directly assigned SLA Domain. Use `unassigned` for virtual machines that do not have a direct or derived SLA Domain. |
    | `guest_os_name` | Filter by vm guest os name using infix search. |
    | `sort_by` | Perform an ASCII sort of the elements in the `ListResponse` object data array by a specified object value: `effective_sla_domain_id`, `name`, `moid`, `folderPath`, or `infraPath`. |
    | sort_order | Sort order for the elements in the ListResponse object data array. Use `asc` for ascending sort or `desc` for descending sort. |


    **Example:** Retrieving a list of virtual machine resource objects

    Retrieve a list of unprotected virtual machine resource objects that have 'test' in their name. Limit the first page of the response to the first object.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vm?effective_sla_domain_id=UNPROTECTED&limit=1&offset=0&name=test"
    ```
    The Rubrik REST API server responds with a `ListResponse` object. The first page has the first object of the 156 objects that matched the query parameters.

    **Note:** To shorten the example, the response uses ellipsis to replace some members.

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "$vm_id",
          "moid": "$vm_moid",
          "name": "abctest123",
          "vcenterId": "$vcenter_id",
          "hostName": "$esxi_host_name",
          "hostId": "$esxi_host_id",
          "clusterName": "$vcenter_cluster_name",
          "powerStatus": "poweredOn",
          "configuredSlaDomainId": "INHERIT",
          "configuredSlaDomainName": "Inherit",
          "effectiveSlaDomainId": "UNPROTECTED",
          "effectiveSlaDomainName": "Unprotected",
          "slaAssignment": "Unassigned",
          "ipAddress": "$vm_ip",
          "toolsInstalled": true,
          "primaryClusterId": "$cluster_id",
          "isReplicationEnabled": false,
          "folderPath": [
            ...
          ],
          "infraPath": [
            ...
          ],
          "vmwareToolsInstalled": true,
          "isRelic": false,
          "maxNestedVsphereSnapshots": -1,
          "snapshotConsistencyMandate": "UNKNOWN",
          "physicalStorage": 0,
          "guestCredentialAuthorizationStatus": "PENDING"
        }
      ],
      "total": 156
    }
    ```

    ### Retrieving more details for a virtual machine
    To get detailed information for a specified virtual machine object, send a GET request to [`/vmware/vm/{id}`](#operation/getVm).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vm/$vm_id"
    ```
    The Rubrik REST API server responds with the details for the virtual machine object.

    **Note:** To shorten the example, the response uses ellipsis to replace some members.

    ```bash
    {
      "id": "$vm_id",
      "moid": "$vm_moid",
      "name": "abctest123",
      "powerStatus": "poweredOn",
      "configuredSlaDomainId": "INHERIT",
      "effectiveSlaDomain": {
        ...
      },
      "slaAssignment": "Unassigned",
      "blackoutWindowStatus": {
        "isGlobalBlackoutActive": false,
        "isSnappableBlackoutActive": false
      },
      "blackoutWindows": {
        ...
        ],
        "snappableBlackoutWindows": []
      },
      "currentHost": {
        ...
      },
      "virtualDiskIds": [
        ...
      ],
      "snapshots": [],
      "ipAddress": "$vm_ip",
      "toolsInstalled": true,
      "snapshotCount": 0,
      "snapshotConsistencyMandate": "",
      "maxNestedVsphereSnapshots": -1,
      "primaryClusterId": "$cluster_id",
      "isReplicationEnabled": false,
      "isRelic": false,
      "physicalStorage": 0,
      "guestOsName": "$guest_os",
      "guestCredentialAuthorizationStatus": "PENDING",
      "isArrayIntegrationPossible": false,
      "isArrayIntegrationEnabled": false
    }
    ```

    ### Register Rubrik Backup Service

    To register Rubrik Backup Service running on a specified virtual machine,
    send a POST request to
    [`/vmware/vm/{id}/register_agent`](#operation/vmRegisterAgent).

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/vmware/vm/$vm_id/register_agent"
    ```
    The Rubrik REST API server responds with an HTTP 204 response when the
    registration is successful.


    ### Enabling scripts

    A virtual machine object can be configured to start scripts on the guest operating system. A script can be started before the backup (`preBackupScript`), after the snapshot completes (`postSnapScript`), and after the backup task completes (`postBackupScript`). The *Rubrik User Guide* provides information about script requirements.

    To configure a virtual machine object to start scripts, send a PATCH request to [`/vmware/vm/{id}`](#operation/updateVm). Since this is a PATCH request, only the elements of the virtual machine object that are modified or added should be included in the request body. All three script members are shown in the request body in this model, but all are optional.

    ```bash
    curl -X PATCH \
     -d '{
          "preBackupScript": {
            "scriptPath": "$pre_script_path",
            "timeoutMs": 10000,
            "failureHandling": "abort"
          },
          "postSnapScript": {
            "scriptPath": "$postsnap_script_path",
            "timeoutMs": 10000,
            "failureHandling": "abort"
          },
          "postBackupScript": {
            "scriptPath": "$postbackup_script_path",
            "timeoutMs": 10000,
            "failureHandling": "abort"
          }
        }' \
      "https://$cluster_address/api/v1/vmware/vm/$vm_id"
    ```

    The Rubrik REST API server sends an HTTP 200 response that includes the modified or added members in the response body.

    #### Manually starting a virtual machine script

    For testing or to run a script before running a backup, manually trigger the script by sending a POST request to [`/vmware/vm/{id}/guest_script/run`](#operation/runGuestOsScript). To manually start a script, the script must first be a part of the configuration of the virtual machine object. Use the value of the `phase` member to identify the script, as follows:
    * Use `PreBackup` for the script identified by the `preBackupScript` member.
    * Use `PostSnap` for the script identified by the `postSnapScript` member.
    * Use `PostBackup` for the script identified by the `postBackupScript` member.

    ```bash
    curl -X POST \
      -d '{
        "phase": "PreBackup" }' \
      "https://$cluster_address/api/v1/vmware/vm/$vm_id/guest_script/run"
    ```
    The Rubrik REST API server responds with an HTTP 204 response when the script finishes with a 0 exit code.


    ### Excluding a VMDK file

    The Rubrik cluster can be configured to ignore some of the VMDK files of a virtual machine while protecting the other VMDK files of that virtual machine. To exclude a VMDK file, send a GET request to [`/vmware/vm/virtual_disk/{id}`](#operation/getVirtualDisk) using the `$disk_id` of the VMDK file.

    To get the `$disk_id` values, send a GET request to [`/vmware/vm/{id}`](#operation/getVm). The response body has the `disk_id` values for the virtual machine in the `virtualDiskIds` array.

    After identifying the `$disk_id` for a VMDK file, obtain the current state of the VMDK file.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vm/virtual_disk/$disk_id"
    ```
    The Rubrik REST API server responds with the value of `excludeFromSnapshots`.

    ```bash
    {
      "id": "$disk_id",
      "excludeFromSnapshots": false
    }
    ```
    When the value is `false` the Rubrik cluster is not configured to exclude the VMDK file. Change this value to `true` to instruct the Rubrik cluster to exclude the VMDK file from all subsequent snapshots of the virtual machine.

    Send a PATCH request to [`/vmware/vm/virtual_disk/{id}`](#operation/updateVirtualDisk) to change the value of `excludeFromSnapshots` to `true` and exclude the VMDK file.

    ```bash
    curl -X PATCH \
      -d '{
        "excludeFromSnapshots": true }' \
      "https://$cluster_address/api/v1/vmware/vm/virtual_disk/$disk_id"
    ```

    The Rubrik REST API server responds with the updated `excludeFromSnapshots` value for the VMDK file.

    ```bash
    {
      "id": "$disk_id",
      "excludeFromSnapshots": true
    }
    ```

    ### Assigning a virtual machine to an SLA Domain
    To protect a virtual machine through the rules and policies of an SLA Domain send a PATCH request to [`/vmware/vm/{id}`](#operation/updateVm) with the value of `configuredSlaDomainId` set to the `$sla_domain_id`.

    **Note:** [Retrieving SLA Domains](#section/SLA-Domains/Retrieving-SLA-Domains) describes how to retrieve the SLA Domain objects on a Rubrik cluster.

    ```bash
    curl -X PATCH -d \
      '{
        "configuredSlaDomainId": "$sla_domain_id"
      }' \
      "https://$cluster_address/api/v1/vmware/vm/$vm_id"
    ```
    The Rubrik REST API server responds with confirmation of the assignment.

    ```bash
    {
      "id": "$vm_id",
      "configuredSlaDomainId": "$sla_domain_id"
    }
    ```
    ### Getting the configuration used to force a full snapshot of a virtual machine

    To retrieve the configuration of a virtual machine that is used to force a full
    snapshot of the virtual machine, send a GET request to
    [`/vmware/vm/{id}/request/force_full_snapshot`](#operation/getVmForceFullSpec).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vm/{id}/request/force_full_snapshot"
    ```

    The Rubrik REST API server responds with the force full snapshot object
    which contains the latest configuration of the virtual machine.

    ```bash
    {
      "vmId": "$vm_id",
      "virtualDiskInfos": [
        {
          "virtualDiskId": "$disk_id",
          "shouldDedupe": false
        },
        {
          "virtualDiskId": "$disk_id",
          "shouldDedupe": true
        }
      ]
    }
    ```
    ### Requesting a forced full snapshot for a virtual machine

    To force a full snapshot of a virtual machine, send a POST request to
    [`/vmware/vm/{id}/request/force_full_snapshot`](#operation/requestVmForceFullSnapshot).

    ```bash
    curl -X POST "https://$cluster_address/api/v1/vmware/vm/{id}/request/force_full_snapshot"
    ```

    The Rubrik REST API server persists the configuration for forcing a
    full snapshot until the next backup job, which takes a full snapshot
    and clears the configuration.

    ```bash
    {
      "vmId": "$vm_id",
      "virtualDiskInfos": [
        {
          "virtualDiskId": "$disk_id",
          "shouldDedupe": false
        },
        {
          "virtualDiskId": "$disk_id",
          "shouldDedupe": true
        }
      ]
    }
    ```
    ## Snapshot management

    Managing snapshots includes the following possible actions:
    * Retrieving snapshot information
    * Retrieving snapshot information for multiple virtual machines
    * Retrieving snapshot details
    * Retrieving missed snapshot information
    * Creating on-demand snapshots
    * Expiring individual snapshots
    * Expiring all snapshots for a virtual machine

    ### Retrieving snapshot information

    To retrieve a list of the snapshots for a virtual machine, send a GET request to [`/vmware/vm/{id}/snapshot`](#operation/querySnapshot).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vm/$vm_id/snapshot"
    ```
    The Rubrik REST API server responds with a `ListResponse` object.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "date": "$timestamp0",
          "indexState": 0,
          "cloudState": 0,
          "vmName": "$vm_name",
          "replicationLocationIds": [],
          "id": "$snapshot_id0",
          "consistencyLevel": "$consistency_level0",
          "archivalLocationIds": [],
          "isOnDemandSnapshot": false
        },
        {
          "date": "$timestamp1",
          "indexState": 0,
          "cloudState": 0,
          "vmName": "$vm_name",
          "replicationLocationIds": [],
          "id": "$snapshot_id1",
          "consistencyLevel": "$consistency_level1",
          "archivalLocationIds": [],
          "isOnDemandSnapshot": true
        }
     ],
     "total": 2
    }
    ```
    Each member of the data array includes the `id` of a snapshot. Use this value (`$snapshot_id`) to perform tasks with the snapshot, such as:
    * Browsing for data in the snapshot
    * Downloading data from the snapshot
    * Restoring data from the snapshot
    * Exporting data from the snapshot
    * Mounting a virtual machine from the snapshot

    ### Retrieving snapshot information for a batch of virtual machines

    To retrieve lists of snapshots for a batch of virtual machines, send a POST request to [`/vmware/vm/snapshots`](#operation/querySnapshotsForVms).
    This reuqest taks a list of virtual mahine IDs.

    ```bash
    curl -X POST \
      -d '{
         "vm_ids": ["vmId_1", "vmId_2"]
         }'\
          "https://$cluster_address/api/v1/vmware/vm/snapshots"
    ```

    The Rubrik REST API server responds with a `BatchVmSnapshotSummaries`
    object.

    ```bash
    {
      "responses":
      [
        {
          "vmId": "vmId_1",
          "VmSnapshotSummaries":
          [
            {
              "date": "$timestamp0",
              "indexState": 0,
              "cloudState": 0,
              "vmName": "$vm_name",
              "replicationLocationIds": [],
              "id": "$snapshot_id0",
              "consistencyLevel": "$consistency_level0",
              "archivalLocationIds": [],
              "isOnDemandSnapshot": false
            }
          ]
        },
        {
          "vmId": "vmId_2",
          "VmSnapshotSummaries":
          [
            {
              "date": "$timestamp0",
              "indexState": 0,
              "cloudState": 0,
              "vmName": "$vm_name",
              "replicationLocationIds": [],
              "id": "$snapshot_id0",
              "consistencyLevel": "$consistency_level0",
              "archivalLocationIds": [],
              "isOnDemandSnapshot": false
            }
          ]
        }
      ]
    }
    ```

    ### Retrieving snapshot details

    To retrieve details for a specified snapshot send a GET request to [`/vmware/vm/snapshot/{id}`](#operation/getSnapshot).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id"
    ```
    The Rubrik REST API server responds with the details of the specified snapshot.

    **Note:** To shorten the example, the response uses ellipsis to replace some members.

    ```bash
    {
      "date": "$timestamp",
      "indexState": 0,
      "virtualMachine": {
       ...
      },
      "vmName": "$vm_name",
      "isCorrupt": false,
      "replicationLocationIds": [],
      "archivalLocationIds": [],
      "snapshotDiskIds": [
        "$vmdk_id"
      ],
      "isOnDemandSnapshot": false,
      "cloudState": 0,
      "id": "$snapshot_id",
      "consistencyLevel": "1",
      "config": "[]"
    }
    ```

    ### Retrieving missed snapshot information

    The Rubrik cluster stores information for missed snapshots. *Missed snapshots* are snapshot tasks that are not completed as required by the rules and policies of an SLA Domain.  Retrieve missed snapshot information for a virtual machine by sending  a GET request to [`/vmware/vm/{id}/missed_snapshot`](#operation/missedSnapshots).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vm/$vm_id/missed_snapshot"
    ```
    The Rubrik REST API server responds with a `ListResponse` object.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "archivalLocationType": [
            "missed"
          ],
          "missedSnapshotTime": "$timestamp0"
        },
        {
          "archivalLocationType": [
            "missed"
          ],
          "missedSnapshotTime": "$timestamp1"
        }
      ],
      "total": 2
    }
    ```

    ### Creating on-demand snapshots

    On-demand snapshots can be created for both protected and unprotected virtual machines. To create an on-demand snapshot of a virtual machine send a POST request to [`/vmware/vm/{id}/snapshot`](#operation/createOnDemandBackup).

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/vmware/vm/$vm_id/snapshot"
    ```
    The Rubrik REST API server initiates the asynchronous snapshot task and responds with a task object.

    ```bash
    {
      "id": "$request_id",
      "status": "ACQUIRING",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vm/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```
    Using the information provided in the task object, send a GET request to poll the task status. When the value of `status` in the task object is `SUCCEEDED`, the on-demand snapshot finished successfully.


    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vm/request/$request_id"
    ```
    The Rubrik REST API server sends a task object with `status="SUCCEEDED"`.  The task object for a successful snapshot includes the URI for the snapshot: `https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id`.

    ```bash
    {
      "id":"$request_id",
      "status":"SUCCEEDED",
      "startTime":"$timestamp0",
      "endTime":"$timestamp1",
      "links":[
        {
          "href":"https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id",
          "rel":"result"
        },
       {
          "href":"https://$cluster_address/api/v1/vmware/vm/request/$request_id",
          "rel":"self"
       }
      ]
    }
    ```

    ### Expiring individual snapshots

    On-demand snapshots and snapshots for unprotected virtual machines can be expired by using the snapshot `id`. To expire an individual snapshot, send a DELETE request to [`/vmware/vm/snapshot/{id}`](#operation/deleteVmwareSnapshot). Include the query parameter `location` to specify whether to expire all copies of the snapshot, or only the local copy. Use `location=local` to expire only the copy of the snapshot on the specified Rubrik cluster. Use `location=all` to expire all copies of the snapshot, including replicas and archival copies.

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id?location=$snapshot_location"
    ```
    The Rubrik REST API server expires the specified snapshot and responds with HTTP response code 204. This indicates the request succeeded and the response body is empty.

    The Rubrik REST API server responds with HTTP response code 422 'Unprocessable Entity', when the specified snapshot is not one of the following:
    * On-demand snapshot
    * Snapshot for an unprotected virtual machine

    ### Expiring all snapshots for a virtual machine

    All snapshots for an unprotected virtual machine can be expired by using the virtual machine `id`. To expire all snapshots for an unprotected virtual machine, send a DELETE request to [`/vmware/vm/{id}/snapshot`](#operation/deleteVmwareSnapshots). The Rubrik cluster expires all snapshots, replicas, and archival snapshots for the specified virtual machine.

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/vmware/vm/$vm_id/snapshot"
    ```
    The Rubrik REST API server expires all snapshots for the specified virtual machine in all locations and responds with HTTP response code 204. This indicates the request succeeded and the response body is empty.

    The Rubrik REST API server responds with HTTP response code 422 'Unprocessable Entity', when the specified virtual machine is protected through an SLA Domain assignment.




    ## Data recovery
    To recover a file or folder from a snapshot, retrieve the `id` of the file or folder using either search or browse. Then use the `id` with one of the recovery methods:
    * Download the file or folder
    * Restore the file or folder to the source location
    * Export the file or folder to another host

    ### Searching for data in snapshots

    Search for files and folders across all indexed snapshots of a virtual machine by using the virtual machine `id`. Send a GET request to [`/vmware/vm/{id}/search`](#operation/searchVm) with the `path` query parameter. Use a path segment string or a name segment string for the value of `path`.

    **IMPORTANT:** The snapshot used in this task must be indexed. Indexing makes the file system structure of the data available to the Rubrik cluster. To determine whether a snapshot has been successfully indexed, send a GET request to [`/vmware/vm/snapshot/{id}`](#operation/getSnapshot) as described in the 'Retrieving snapshot information' section of [Snapshot management](#section/Virtual-machines/Snapshot-management). Look at the value of `indexState`. A value of `1` means the snapshot has been indexed. A value of `0` means the snapshot has not been indexed.

    The Rubrik REST API server uses the rules described in the following table when matching the value of `path` with folders and files in the indexed snapshots.
    | Type | Rule | Description |
    | ---- | ---- | ----------- |
    | Path delimiter | Forward slashes and backslashes are equally recognized as path delimiters. | In the value of path, `/` matches both `/` and `\`, and `\` matches both `/` and `\`. |
    | Path segments | Path segments match all files and folders that begin with the same path segment. | For example, '/abc/x' matches files and folders at '/abc/' or '\abc\\' with a filename or folder name that starts with 'x'. |
    | Name segments | Name segments match all files and folders that begin with the same name segment. | For example, 'xyz' matches files and folders with a filename or folder name that starts with 'xyz', in all path locations. |
    | Characters | Any character that the guest operating system accepts in a file path can be used.  | For example, the greater than symbol `>` and the lesser than symbol `<` are not allowed. |
    | Windows drive | To specify a full path on a Windows guest follow the Windows file system requirement. | For example, to specify the 'temp' folder on the 'D' drive of a Windows virtual machine, use: `D:\temp`. |

    **Example:** Searching for files and folders

    Search for all files and folders in '/usr/local/' with a name that starts with the later 'g'.

    Send a GET request to [`/vmware/vm/{id}/search`](#operation/searchVm) with `path=/usr/local/g`.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vm/$vm_id/search?path=%2Fusr%2Flocal%2Fg"
    ```
    The Rubrik REST API server responds with a `ListResponse` object. The data array has two members, a directory at: `/usr/local/games` and a file at: `/usr/local/gamehints`.


    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "path": "/usr/local/games",
          "filename": "games",
          "fileVersions": [
            {
              "lastModified": "$timestamp0",
              "size": 4096,
              "snapshotId": "$snapshot_id0",
              "fileMode": "directory",
              "source": "cloud"
            }
          ]
        },
        {
        "path": "/usr/local/gamehints",
        "filename": "gamehints",
        "fileVersions": [
          {
            "lastModified": "$timestamp1",
            "size": 14480,
            "snapshotId": "$snapshot_id1",
            "fileMode": "file",
            "source": "cloud"
          },
          {
            "lastModified": "$timestamp2",
            "size": 14480,
            "snapshotId": "$snapshot_id2",
            "fileMode": "file",
            "source": "cloud"
          }
        ]
       }
      ],
      "total": 2
    }
    ```

    ### Browsing for data in snapshots

    Browse for files and folders with an indexed snapshot by using the snapshot `id`. Send a GET request to  [`/vmware/vm/snapshot/{id}/browse`](#operation/browseVmwareSnapshot) with the `path` query parameter.  Use a path segment string for the value of `path`. The response provides a ListResponse object that includes all of the files and folders in the directory that is specified by the value of `path`.

    **IMPORTANT:** The snapshot used in this task must be indexed. Indexing makes the file system structure of the data available to the Rubrik cluster. To determine whether a snapshot has been successfully indexed, send a GET request to [`/vmware/vm/snapshot/{id}`](#operation/getSnapshot) as described in the 'Retrieving snapshot information' section of [Snapshot management](#section/Virtual-machines/Snapshot-management). Look at the value of `indexState`. A value of `1` means the snapshot has been indexed. A value of `0` means the snapshot has not been indexed.

    The Rubrik REST API server uses the rules described in the following table when matching the value of `path` with the path in the specified snapshot.
    | Type | Rule | Description |
    | ---- | ---- | ----------- |
    | Path delimiter | Forward slashes and backslashes are equally recognized as path delimiters. | In the value of path, `/` matches both `/` and `\`, and `\` matches both `/` and `\`. |
    | Path description | The path description must end in a directory name, without an ending slash. | For example, '/abc/x' returns all files and folders in the directory at '/abc/x', but '/abc/x/' returns an HTTP 422 response. |
    | Characters | Any character that the guest operating system accepts in a file path can be used.  | For example, the greater than symbol `>` and the lesser than symbol `<` are not allowed. |
    | Windows drive | To specify a full path on a Windows guest follow the Windows file system requirement. | For example, to specify the 'temp' folder on the 'D' drive of a Windows virtual machine, use: `D:\temp`. |

    **Example:** Browsing for files and folders

    Retrieve a ListResponse object with all of the files and folders in '/home'.

    Send a GET request to  [`/vmware/vm/snapshot/{id}/browse`](#operation/browseVmwareSnapshot) with `path=/home`.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id/browse?path=%2Fhome&offset=0"
    ```
    The Rubrik REST API server responds with a `ListResponse` object. The data array has two members, the directory: `ubuntu` and the file: `ubuntu.tar`.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "filename": "ubuntu",
          "path": "ubuntu",
          "lastModified": "$timestamp0",
          "size": 31892819777,
          "fileMode": "directory",
          "statusMessage": ""
        },
        {
          "filename": "ubuntu.tar",
          "path": "ubuntu.tar",
          "lastModified": "$timestamp1",
          "size": 4746675383,
          "fileMode": "file",
          "statusMessage": ""
        }
      ],
      "total": 2
    }
    ```
    ### Downloading data from a snapshot

    Data can be retrieved from a snapshot by creating a download link for an individual file and folder from the snapshot. To have the Rubrik cluster create a download link, send a POST request to [`/vmware/vm/snapshot/{id}/download`](#operation/createDownloadFileJob). Include in the request body the string/value pair: `"path":"$path"`, where `$path` is the full path to the file or folder. When `$path` refers to a folder, the Rubrik cluster creates a ZIP file of the folder and all that it contains.

    The basic download work flow is:
    1. Send a POST request to start the asynchronous download task.
    2. Send a GET request to poll the task status.
    3. When the task succeeds, use the download link provided in the response body to retrieve the file or folder.

    **IMPORTANT:** The snapshot used in this task must be indexed. Indexing makes the file system structure of the data available to the Rubrik cluster. To determine whether a snapshot has been successfully indexed, send a GET request to [`/vmware/vm/snapshot/{id}`](#operation/getSnapshot) as described in the 'Retrieving snapshot information' section of [Snapshot management](#section/Virtual-machines/Snapshot-management). Look at the value of `indexState`. A value of `1` means the snapshot has been indexed. A value of `0` means the snapshot has not been indexed.

    ```bash
    curl -X POST -d \
    '{
       "path": "$full_source_path"
     }' \
     'https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id/download_file'
    ```
    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$download_task_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    ### Restoring data from a snapshot

    To restore a file or folder to the source virtual machine send a POST request to [`/vmware/vm/snapshot/{id}/restore_file`](#operation/createRestoreFileJob). With the request, include a request body. The following table describes the members of the request body.

    | Name | Description |
    | ---- | ----------- |
    | `path` | Full path of the file or folder. |
    | `domainName` | Authentication domain for the credentials being used to authenticate and authorize the action. |
    | `username` | Username of account to authenticate and authorize the action. |
    | `password` | Password for the account to authenticate and authorize the action. |
    | `restorePath` | Full path location for the restore of the file or folder. The action can create a directory at the end of the specified path, but cannot create directories that are specified within the path. |
    | `shouldUseAgent` | Instruct the Rubrik cluster to restore the file using Rubrik Backup Service running on virtual machine. Use `true` to restore using RBS and `false` to restore using `VMware tools`. |
    | `shouldSaveCredentials` | Instruct the Rubrik cluster to save the credentials included in the request. Use `true` to save the credentials and `false` to use the credentials only for the current request. |
    | `shouldRestoreXAttrs` | Instruct the Rubrik cluster to restore the
    extended attributes of all files and folders included in the `path`.
    When restoring to a Linux host, extended attributes are restored.
    When restoring to a Windows host, alternate data streams (ADS) are
    restored. Use `true` to restore this metadata and `false` otherwise. |

    ```bash
    curl -X POST -d \
    '{
       "path": "$full_source_path",
       "domainName": "$auth_domain",
       "username": "$username",
       "password": "$password",
       "restorePath": "$full_restore_path",
       "shouldUseAgent" : true,
       "shouldSaveCredentials": true,
       "shouldRestoreXAttrs": true
     }' \
     "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id/restore_file"
    ```

    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$restore_task_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```


    ## Snapshot mount operations
    Snapshot mount operations include the following possible actions:
    * Retrieving a snapshot from an archival location
    * Mounting a snapshot by using Instant Recovery
    * Mounting a snapshot by using Live Mount
    * Mounting a snapshot for a batch of virtual machines using Live Mount
    * Exporting a snapshot
    * Downloading a snapshot from an archival location and then exporting it
    * Changing the properties of a mounted virtual machine
    * Removing a virtual machine mount
    * Migrating a datastore for a virtual machine from Live Mount or Instant Recovery

    ### Retrieving a snapshot from an archival location

    To work with a snapshot that is stored only at an archival location, first download the snapshot to the Rubrik cluster by sending a POST request to [`/vmware/vm/snapshot/{id}/download`](#operation/createDownloadSnapshotFromCloud).

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id/download"
    ```
    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$snap_download_task_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    ### Mounting a snapshot by using Instant Recovery

    Replace a source virtual machine from a snapshot by using the Instant Recovery feature. To use Instant Recovery, send a POST request to [`/vmware/vm/snapshot/{id}/instant_recover`](#operation/createInstantRecovery). This request requires a snapshot `id` and can optionally include the parameters that are described in the following table.

    | Name | Description |
    | ---- | ----------- |
    | `hostId` | The `id` of an ESXi hypervisor. When not specified, the Rubrik cluster uses the original hypervisor. |
    | `vmName` | Assigns a specified name to the virtual machine. |
    | `removeNetworkDevices` | Determines whether the virtual machine has network devices. Use `true` to remove network devices from the virtual machine. Use `false` to keep the existing network devices. |

    ```bash
    curl -X POST -d \
      '{
        "vmName": "$vm_name",
        "hostId": "$esxi_id",
        "removeNetworkDevices": true
       }' \
       "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id/instant_recover"
    ```
    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$instant_recovery_task_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    ### Mounting a snapshot by using Live Mount

    Mount a new virtual machine from a snapshot by using the Live Mount feature. To use Live Mount, send a POST request to [`/vmware/vm/snapshot/{id}/mount`](#operation/createMountV1). This request requires a snapshot `id` and can optionally include the parameters that are described in the following table.

    | Name | Description |
    | ---- | ----------- |
    | `hostId` | The `id` of an ESXi hypervisor. When not specified, the Rubrik cluster uses the original hypervisor. |
    | `vmName` | Assigns a specified name to the virtual machine. |
    | `dataStoreName` | Obsolete paraemeter. |
    | `disableNetwork` | Determines whether the virtual machine has access to the network. Use `true` to Mount the snapshot with network access disabled. Use `false` to allow the virtual machine to access the network. |
    | `removeNetworkDevices` | Determines whether the virtual machine has network devices. Use `true` to remove network devices from the virtual machine. Use `false` to keep the existing network devices. |
    | `powerOn` | Determines whether the virtual machine is powered on after mounting. Use `true` to power on the virtual machine. Use `false` to leave the virtual machine powered off after mounting. |


    ```bash
    curl -X POST \
      -d '{
         "hostId": "$esxi_id",
         "vmName": "$vm_name",
         "dataStoreName": "$datastore_name",
         "disableNetwork": $network_state,
         "removeNetworkDevices": $network_devices_state,
         "powerOn": $power_state
       }'\
        "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id/mount"
    ```

    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$live_mount_task_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    ### Mounting a snapshot for a batch of virtual machines using Live Mount

    Mount a snapshot each for a batch of virtual machines. Send a POST request to
    [`/vmware/vm/batch_mount`](#operation/batchMountSnapshot). This request
    requires a snapshots parameter to identify the virtual machine and the snapshot
    of the virtual machine to mount.
    The following parameters are available to identify the snapshot: `snapshotId`,
    `snapshotBeforeDate`, and `snapshotAfterDate`. One of the parameters must be configured
    to identify the snapshot to be mounted.

    | Name | Required | Type | Description |
    | ---- | -------- | ---- | ----------- |
    | `vmId` | Required | String | The `id` of the virtual machine. |
    | `snapshotId` | Optional | String | The `id` of the snapshot to mount. |
    | `snapshotBeforeDate` | Optional | Date | If the snapshotId is not specified, mount the newest snapshot before the date specified for this parameter. |
    | `snapshotAfterDate` | Optional | Date | If the snapshotId and the snapshotBeforeDate are not specified, mount the oldest snapshot after the date specified for this parameter. |
    | `config` | Required | Object | [Properties of the /vmware/vm/snapshot/{id}/mount endpoint.](#mounting-a-snapshot-by-using-live-mount) |

    ```bash
    curl -X POST \
      -d '{
         "snapshots": [
           {
             "vmId": "$vm_id",
             "snapshotBeforeDate": "$timestamp",
             "config": {
               "hostId": "$esxi_id",
               "vmName": "$vm_name",
               "dataStoreName": "$datastore_name",
               "disableNetwork": $network_state,
               "removeNetworkDevices": $network_devices_state,
               "powerOn": $power_state
             }
           }
         ]
         }'\
          "https://$cluster_address/api/v1/vmware/vm/batch_mount"
    ```

    The Rubrik REST API server initiates a batch of mount jobs and
    resonds with objects tracking the job status.

    ```bash
    {
      "responses": [
        {
          "id": "$live_mount_task_id",
          "status": "QUEUED",
          "progress": 0,
          "startTime": "$timestamp",
          "links": [
            {
              "href": "https://$cluster_address/api/v1/vmware/request/$request_id",
              "rel": "self"
            }
          ]
        }
      ]
    }
    ```
    ### Retrieving the ID of the mount

    After a mount task successfully completes, the `id` of the mount object can be retrieved by sending a GET request to [`/vmware/vm/request/{id}`](#operation/getAsyncRequestStatus) and using the `$request_id` value from the original request object for the Live Mount.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vm/request/$request_id"
    ```
    The Rubrik REST API server responds with a request object that includes the `id` of the mount object.

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vm/snapshot/mount/$mount_id",
          "rel": "result"
        },
        {
          "href": "https://$cluster_address/api/v1/vmware/vm/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "SUCCEEDED"
    }
    ```
    ### Retrieving active mounts

    To retrieve a list of all of the active mounts for a Rubrik cluster, send a GET request to [`/vmware/vm/snapshot/mount`](#operation/queryMountV1).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vm/snapshot/mount"
    ```
    The Rubrik REST API server responds with a ListResponse object.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "$mount_id",
          "snapshotDate": "$snapshot_timestamp",
          "vmId": "$source_vm_id",
          "mountedVmId": "$mounted_vm_id",
          "hostId": "$esxi_id",
          "isReady": true
        }
      ],
      "total": 1
    }
    ```
    ### Retrieving the details for a mount

    To retrieve details about a specific mount, send a GET request to [`/vmware/vm/snapshot/mount/{id}`](#operation/getMountV1).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vm/snapshot/mount/$mount_id"
    ```
    The Rubrik REST API server responds with the details.

    ```bash
    {
      "snapshotDate": "$timestamp",
      "vmId": "$source_vm_id",
      "isReady": true,
      "hostId": "$esxi_id",
      "id": "$mount_id",
      "mountedVmId": "$mounted_vm_id"
    }
    ```

    ### Exporting a snapshot

    To export a snapshot send a POST request to
    [`/vmware/vm/snapshot/{id}/export`](#operation/createExportV1). This request
    requires a snapshot `id` and the parameters that are described in the
    following table.

    | Name | Description |
    | ---- | ----------- |
    | `datastoreId` | The `id` of a datastore for the specified ESXi hypervisor. |
    | `vmName` | Assigns a specified name to the virtual machine. |
    | `hostId` | The `id` of an ESXi hypervisor. |
    | `disableNetwork` | Determines whether the virtual machine has access to the network. Use `true` to Mount the snapshot with network access disabled. Use `false` to allow the virtual machine to access the network. |
    | `removeNetworkDevices` | Determines whether the virtual machine has network devices. Use `true` to remove network devices from the virtual machine. Use `false` to keep the existing network devices. |
    | `powerOn` | Determines whether the virtual machine is powered on after mounting. Use `true` to power on the virtual machine. Use `false` to leave the virtual machine powered off after mounting. |
    | `unregisterVm` | Determines whether to add the exported virtual machine to the vCenter Server inventory. Use `true` to remove the exported virtual machine from the associated vCenter Server inventory. Use `false` to add the exported virtual machine to the associated vCenter Server inventory. |


    ```bash
    curl -X  -d \
     '{
       "datastoreId": "string",
       "vmName": "string",
       "hostId": "string",
       "disableNetwork": true,
       "removeNetworkDevices": true,
       "powerOn": true,
       "unregisterVm": true
     }' \
     "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id/export"
    ```

    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$export_task_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    ### Exporting a snapshot from an archival location

    To export a snapshot from an archival location, send a POST
    request to [`/vmware/vm/snapshot/{id}/export_with_download`]
    (#operation/createExportWithDownloadFromCloudV1). This request requries
    a snapshot `id` and the parameters that are described in the following table.

    | Name | Description |
    | ---- | ----------- |
    | `datastoreId` | `id` of a datastore for the specified ESXi hypervisor. |
    | `vmName` | Assigns a name to the virtual machine. |
    | `hostId` | `id` of an ESXi hypervisor. |
    | `disableNetwork` | Determines if the virtual machine has access to the
                         network. `true` mounts the snapshot with network
                         access disabled. `false` allows the virtual machine
                         to access the network. |
    | `removeNetworkDevices` | Determines if the virtual machine includes network
                               devices. `true` removes network devices from
                               the virtual machine.`false` keeps the existing
                               network devices. |
    | `powerOn` | Determines if the virtual machine is powered on after
                  mounting. `true` powers on the virtual machine. `false`
                  leaves the virtual machine powered off after mounting. |
    | `unregisterVm` | Determines if the exported virtual machine is added to
                       the vCenter Server inventory. `true` removes the exported
                       virtual machine from the associated vCenter Server
                       inventory. `false` adds the exported virtual machine
                       to the associated vCenter Server inventory. |

    ```bash
    curl -X  -d \
     '{
       "datastoreId": "string",
       "vmName": "string",
       "hostId": "string",
       "disableNetwork": true,
       "removeNetworkDevices": true,
       "powerOn": true,
       "unregisterVm": true
     }' \
     "https://$cluster_address/api/v1/vmware/vm/snapshot/$id/export_with_download"
    ```

    The Rubrik REST API server initiates the asynchronous request task and responds
    with a task object.

    ```bash
    {
      "id": "$download_task_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href":
             "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    ### Changing power status of a mounted virtual machine

    To change the power status of a mounted virtual machine send a PATCH request to [`/vmware/vm/snapshot/mount/{id}`](#operation/updateMount). Include in the request body, the member `"powerStatus": $power_state`. For `$power_state`, use `true` to power on the virtual machine, or use `false` to power off the virtual machine.

    ```bash
    curl -X PATCH \
      -d '{
        "powerStatus": $power_state }' \
      "https://$cluster_address/api/v1/vmware/vm/snapshot/mount/$mount_id"
    ```

    The Rubrik REST API server responds with the mount details.

    ```bash
    {
      "powerStatus": "$power_state",
      "id": "$mount_id",
      "snapshotDate": "$timestamp",
      "vmId": "$vm_id",
      "mountedVmId": "$mounted_vm_id",
      "hostId": "$esxi_id",
      "isReady": true,
      "mountRequestId": "$mount_request_id",
      "unmountRequestId": "$unmount_request_id"
    }
    ```

    ### Removing a virtual machine mount

    To remove a Live Mount send a DELETE request to [`/vmware/vm/snapshot/mount/{id}`](#operation/createUnmount). To remove a mount object after live migration of the virtual machine include the query parameter `force=true`.

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/vmware/vm/snapshot/mount/$mount_id"
    ```
    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$delete_mount_task_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    ### Get recoverable ranges for a CDP-enabled virtual machine

    For a list of time ranges to which a CDP-enabled virtual machine can recover, send a GET request to [`/vmware/vm/{id}/recoverable_range`](#operation/getVmwareRecoverableRanges). The time range start and end timestamps are specified as milliseconds from epoch.
    Any point-in-time recovery operation from version 2 of the API can use the time ranges returned by this API call for any CDP-enabled virtual machine.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/$vm_id/recoverable_range
    ```

    ```bash
    {
      "data": [
        "beginTime": "2018-01-01T12:34:56.789Z",
        "endTime": "2018-01-01T12:34:56.789Z"
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    ### Get missed recoverable ranges for a CDP-enabled virtual machine

    For a list of time ranges to which a CDP-enabled virtual machine cannot recover to, send a GET request to [`/vmware/vm/{id}/missed_recoverable_range`](#operation/getVmwareMissedRecoverableRanges). The time range start and end timestamps are specified as milliseconds from epoch.
    Any point-in-time recovery operation from version 2 of the API can use the time ranges returned by this API call for any CDP-enabled virtual machine.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/$vm_id/missed_recoverable_range
    ```

    ```bash
    {
      "data": [
        "beginTime": "2018-01-01T12:34:56.789Z",
        "endTime": "2018-01-01T12:34:56.789Z"
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    ### Migrating a datastore for a virtual machine from Live Mount or Instant Recovery

    Send a POST request to [`/vmware/vm/snapshot/mount/{id}/relocate`](#operation/relocateMount) to migrate a datastore for a virtual machine created from Live Mount or Instant Recovery.


    ### Get compute cluster information

    VMware compute cluster can be found by a GET on [`/vmware/compute_cluster`](#operation/queryComputeCluster).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/compute_cluster"
    ```

    ```bash
    {
      "data": [
        {
          "id": "compute_cluster_id",
          "name": "compute_cluster_name",
          "configuredSlaDomainId": "configured_sla_domain_id",
          "configuredSlaDomainName": "configured_sla_domain_name",
          "primaryClusterId": "primary_cluster_id",
          "datacenterId": "datacenter_id",
          "effectiveSlaDomainId": "effective_sla_domain_id",
          "effectiveSlaDomainName": "effective_sla_domain_name",
          "effectiveSlaSourceObjectId": "effective_sla_source_object_id",
          "effectiveSlaSourceObjectName": "effective_sla_source_object_name"
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    Further details are acquired from GET [`/vmware/compute_cluster/{id}`](#operation/getComputeCluster).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/compute_cluster/$compute_clustere_id"
    ```

    ```bash
    {
      "id": "compute_cluster_id",
      "name": "compute_cluster_name",
      "configuredSlaDomainId": "configured_sla_domain_id",
      "configuredSlaDomainName": "configured_sla_domain_name",
      "primaryClusterId": "primary_cluster_id",
      "datacenterId": "datacenter_id",
      "effectiveSlaDomainId": "effective_sla_domain_id",
      "effectiveSlaDomainName": "effective_sla_domain_name",
      "effectiveSlaSourceObjectId": "effective_sla_source_object_id",
      "effectiveSlaSourceObjectName": "effective_sla_source_object_name"
      "moid": "compute_cluster_moid",
      "hosts": [
        {
          "id": "string",
          "name": "string",
          "configuredSlaDomainId": "string",
          "configuredSlaDomainName": "string",
          "primaryClusterId": "string",
          "datacenterId": "string",
          "computeClusterId": "string",
          "datastores": [
            {
              "id": "string",
              "name": "string",
              "capacity": 0,
              "dataStoreType": "string",
              "dataCenterName": "string",
              "isLocal": true
             }
          ],
          "effectiveSlaDomainId": "string",
          "effectiveSlaDomainName": "string",
          "effectiveSlaSourceObjectId": "string",
          "effectiveSlaSourceObjectName": "string"
        }
      ],
    "virtualMachines": [
        {
          "id": "string",
          "name": "string",
          "configuredSlaDomainId": "string",
          "configuredSlaDomainName": "string",
          "primaryClusterId": "string",
          "slaAssignment": "Derived",
          "effectiveSlaDomainId": "string",
          "effectiveSlaDomainName": "string",
          "effectiveSlaSourceObjectId": "string",
          "effectiveSlaSourceObjectName": "string",
          "moid": "string",
          "vcenterId": "string",
          "hostName": "string",
          "hostId": "string",
          "clusterName": "string",
          "snapshotConsistencyMandate": "UNKNOWN",
          "powerStatus": "string",
          "protectionDate": "2018-10-02T20:33:03.833Z",
          "ipAddress": "string",
          "agentStatus": {
            "agentStatus": "string",
            "disconnectReason": "string"
          },
          "toolsInstalled": true,
          "isReplicationEnabled": true,
          "folderPath": [
            {
              "id": "string",
              "managedId": "string",
              "name": "string"
            }
          ],
          "infraPath": [
            {
              "id": "string",
              "managedId": "string",
              "name": "string"
            }
          ],
          "vmwareToolsInstalled": true,
          "isRelic": true,
          "guestCredentialAuthorizationStatus": "string",
          "cloudInstantiationSpec": {
            "imageRetentionInSeconds": 0
          },
          "parentAppInfo": {
            "id": "string",
            "isProtectedThruHierarchy": true
          }
        }
      ]
    }
    ```

    configuredSlaDomainId could be updated by a PATCH [`/vmware/compute_cluster/{id}`](#operation/updateComputeCluster).

    ```bash
    curl -X PATCH \
      -d '{
        "sla_assignable": $sla_domain }' \
      "https://$cluster_address/api/v1/vmware/compute_cluster/$compute_clustere_id"
    ```

    ```bash
    {
      "id": "compute_cluster_id",
      "name": "compute_cluster_name",
      "configuredSlaDomainId": "configured_sla_domain_id",
      "configuredSlaDomainName": "configured_sla_domain_name",
      "primaryClusterId": "primary_cluster_id",
      "datacenterId": "datacenter_id",
      "effectiveSlaDomainId": "effective_sla_domain_id",
      "effectiveSlaDomainName": "effective_sla_domain_name",
      "effectiveSlaSourceObjectId": "effective_sla_source_object_id",
      "effectiveSlaSourceObjectName": "effective_sla_source_object_name"
      "moid": "compute_cluster_moid",
      "hosts": [
        {
          "id": "string",
          "name": "string",
          "configuredSlaDomainId": "string",
          "configuredSlaDomainName": "string",
          "primaryClusterId": "string",
          "datacenterId": "string",
          "computeClusterId": "string",
          "datastores": [
            {
              "id": "string",
              "name": "string",
              "capacity": 0,
              "dataStoreType": "string",
              "dataCenterName": "string",
              "isLocal": true
             }
          ],
          "effectiveSlaDomainId": "string",
          "effectiveSlaDomainName": "string",
          "effectiveSlaSourceObjectId": "string",
          "effectiveSlaSourceObjectName": "string"
        }
      ],
    "virtualMachines": [
        {
          "id": "string",
          "name": "string",
          "configuredSlaDomainId": "string",
          "configuredSlaDomainName": "string",
          "primaryClusterId": "string",
          "slaAssignment": "Derived",
          "effectiveSlaDomainId": "string",
          "effectiveSlaDomainName": "string",
          "effectiveSlaSourceObjectId": "string",
          "effectiveSlaSourceObjectName": "string",
          "moid": "string",
          "vcenterId": "string",
          "hostName": "string",
          "hostId": "string",
          "clusterName": "string",
          "snapshotConsistencyMandate": "UNKNOWN",
          "powerStatus": "string",
          "protectionDate": "2018-10-02T20:33:03.833Z",
          "ipAddress": "string",
          "agentStatus": {
            "agentStatus": "string",
            "disconnectReason": "string"
          },
          "toolsInstalled": true,
          "isReplicationEnabled": true,
          "folderPath": [
            {
              "id": "string",
              "managedId": "string",
              "name": "string"
            }
          ],
          "infraPath": [
            {
              "id": "string",
              "managedId": "string",
              "name": "string"
            }
          ],
          "vmwareToolsInstalled": true,
          "isRelic": true,
          "guestCredentialAuthorizationStatus": "string",
          "cloudInstantiationSpec": {
            "imageRetentionInSeconds": 0
          },
          "parentAppInfo": {
            "id": "string",
            "isProtectedThruHierarchy": true
          }
        }
      ]
    }
    ```

    ### Query asynchronous job status for VMware compute cluster

    To query the job status details of an asynchronous job that is related to an VMware compute cluster with a GET to [`/vmware/compute_cluster/request/{id}`](#operation/getAsyncRequestStatusForComputeCluster).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/compute_cluster/request/$job_id"
    ```

    ```bash
    {
      "id": "string",
      "status": "string",
      "progress": 0,
      "startTime": "2018-10-02T20:33:03.933Z",
      "endTime": "2018-10-02T20:33:03.933Z",
      "nodeId": "string",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "string",
          "rel": "string"
        }
      ]
    }
    ```

    ### VMware IO filters operations

    All IO filters on a specific VMware compute cluster can be found with a GET on [`/vmware/compute_cluster/{id}/io_filter`](#operation/getIoFilters).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/compute_cluster/$compute_cluster_id/io_filter"
    ```

    ```bash
    {
      "data": [
        {
          "id": "string",
          "name": "string",
          "version": "string",
          "vendor": "string",
          "releaseDate": "string",
          "summary": "string"
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    Install the latest version of Rubrik IO filter to a specific VMware compute cluster with a POST on [`/vmware/compute_cluster/{id}/install_io_filter`](#operation/installIoFilter).

    ```bash
    curl -X POST "https://$cluster_address/api/v1/vmware/compute_cluster/$compute_cluster_id/install_io_filter"
    ```

    ```bash
    {
      "id": "string",
      "status": "string",
      "progress": 0,
      "startTime": "2018-10-02T20:33:03.933Z",
      "endTime": "2018-10-02T20:33:03.933Z",
      "nodeId": "string",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "string",
          "rel": "string"
        }
      ]
    }
    ```

    Uninstall the Rubrik IO filter from a specific VMware compute cluster with a POST on [`/vmware/compute_cluster/{id}/uninstall_io_filter`](#operation/uninstallIoFilter).

    ```bash
    curl -X POST "https://$cluster_address/api/v1/vmware/compute_cluster/$compute_cluster_id/uninstall_io_filter"
    ```

    ```bash
    {
      "id": "string",
      "status": "string",
      "progress": 0,
      "startTime": "2018-10-02T20:33:03.933Z",
      "endTime": "2018-10-02T20:33:03.933Z",
      "nodeId": "string",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "string",
          "rel": "string"
        }
      ]
    }
    ```

    Update the Rubrik IO filter to the latest version for a specific VMware compute cluster with a POST on [`/vmware/compute_cluster/{id}/upgrade_io_filter`](#operation/upgradeIoFilter).

    ```bash
    curl -X POST "https://$cluster_address/api/v1/vmware/compute_cluster/$compute_cluster_id/upgrade_io_filter"
    ```

    ```bash
    {
      "id": "string",
      "status": "string",
      "progress": 0,
      "startTime": "2018-10-02T20:33:03.933Z",
      "endTime": "2018-10-02T20:33:03.933Z",
      "nodeId": "string",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "string",
          "rel": "string"
        }
      ]
    }
    ```

    ### Getting Live CDP fields for a batch of CDP-enabled virtual machines

    Send a POST request to
    [`/vmware/vm/cdp`](#operation/getVmwareCdpLiveInfo).
    The request takes a list of virtual machine IDs that correspond to CDP-enabled
    virtual machines as a mandatory parameter named 'ids'.

    ```bash
    curl -X POST \
      -d '{
         "ids": ["id_1", "id_2"]
         }'\
          "https://$cluster_address/api/v1/vmware/vm/cdp"
    ```

    The Rubrik REST API server responds with a `ListResponse` object.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
        "vmId": "id_1",
        "localRecoveryPoint": "2018-01-01T12:34:56.789Z",
        "remoteRecoveryPoint": "2018-01-01T12:34:56.789Z"
        },
        {
        "vmId": "id_2",
        "localRecoveryPoint": "",
        "remoteRecoveryPoint": ""
        }
      ]
      "total": 2
    }
    ```
    ### Getting CDP State fields for a batch of CDP-enabled virtual machines

    Send a POST request to
    [`/vmware/vm/cdp_state`](#operation/getVmwareCdpStateInfo).
    The request takes a list of virtual machine IDs that correspond to CDP-enabled
    virtual machines as a mandatory parameter named 'ids'.

    ```bash
    curl -X POST \
      -d '{
         "ids": ["id_1", "id_2"]
         }'\
          "https://$cluster_address/api/v1/vmware/vm/cdp_state"
    ```

    The Rubrik REST API server responds with a `ListResponse` object.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
        "vmId": "id_1",
        "localStatus": "Active",
        "replicationStatus": "Healthy",
        "healthPercentage": "85%"
        },
        {
        "vmId": "id_2",
        "localStatus": "Active",
        "replicationStatus": "Healthy",
        "healthPercentage": "100%"
        }
      ]
      "total": 2
    }
    ```

    ### Getting recoverable ranges for a batch of CDP-enabled virtual machines

    To get the recoverable time ranges for a batch of CDP-enabled virtual
    machines, send a POST request to [`/vmware/vm/recoverable_range`]
    (#operation/getVmwareVmRecoverableRangesInBatch). The request takes a list of
    virtual machine IDs, and optionally a "before_time" and "after_time" as a filter
    of the time range. The returned recoverable range timestamps are specified as
    milliseconds from epoch.

    ```bash
    curl -X POST \
      -d '{
         "vmIds": ["vmId_1", "vmId_2"]
         }'\
          "https://$cluster_address/api/v1/vmware/vm/recoverable_range"
    ```

    The Rubrik REST API server responds with a `BatchVmwareVmRecoverableRanges`
    object.

    ```bash
    {
      "responses":
      [
        {
          "vmId": "vmId_1",
          "recoverableRanges":
          [
            {
              "beginTime": "2018-01-01T12:34:56.789Z",
              "endTime": "2018-01-01T12:38:56.789Z"
            }
          ]
        },
        {
          "vmId": "vmId_2",
          "recoverableRanges":
          [
            {
              "beginTime": "2018-01-01T12:34:57.789Z",
              "endTime": "2018-01-01T12:38:57.789Z"
            }
          ]
        }
      ]
    }
    ```

    ### Getting missed recoverable ranges for a batch of CDP-enabled
    ### virtual machines

    To get the missed recoverable time ranges for a batch of CDP-enabled virtual
    machines, send a POST request to [`/vmware/vm/missed_recoverable_range`]
    (#operation/getVmwareVmMissedRecoverableRangesInBatch). The request takes a
    list of virtual machine IDs, and optionally a "before_time" and "after_time"
    as a filter of the time range. The returned missed recoverable range timestamps
    are specified as milliseconds from epoch. If no filters being specified, the
    missed recoverable range will be calculated based on the retention window,
    i.e. from retention time to the current time

    ```bash
    curl -X POST \
      -d '{
         "vmIds": ["vmId_1", "vmId_2"]
         }'\
          "https://$cluster_address/api/v1/vmware/vm/missed_recoverable_range"
    ```

    The Rubrik REST API server responds with a
    `BatchVmwareVmMissedRecoverableRanges` object.

    ```bash
    {
      "responses":
      [
        {
          "vmId": "vmId_1",
          "missedRecoverableRanges":
          [
            {
              "beginTime": "2018-01-01T12:34:56.789Z",
              "endTime": "2018-01-01T12:38:56.789Z"
            }
          ]
        },
        {
          "vmId": "vmId_2",
          "missedRecoverableRanges":
          [
            {
              "beginTime": "2018-01-01T12:34:57.789Z",
              "endTime": "2018-01-01T12:38:57.789Z"
            }
          ]
        }
      ]
    }
    ```

    ## Get VMware Hierarchy Objects
    Send a GET request to
    [`/vmware/hierarchy/export`](#operation/getVmwareHierarchyExport).
    The request takes an optional root ID for the hierarchy. This endpoint
    is used to retrieve the set of objects that are valid recovery targets
    during a VMware Virtual Machine Export operations. This is limited to
    VMware Clusters, Hosts, and Resource Pools. The available options for
    the root ID are None (return top level objects), Clusters (return child
    Hosts and Resource Pools), Standalone Hosts (return child Resource
    Pools), or Resource Pools (return child Resource Pools).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/hierarchy/export"
    ```

    The Rubrik REST API server responds with a `ListResponse` object.
    ```bash
    {
      "hasMore": true,
        "data": [
          {
            "id": "string",
            "name": "string",
            "objectType": "string",
            "location": "string",
            "hasChildren": true,
            "datastores": [
            ...
            ],
            "recoverableTo": true,
          },
        ]
    }
    ```

    ## Get VMware Hierarchy Object
    Send a GET request to
    [`/vmware/hierarchy/{id}/export`](#operation/getVmwareHierarchyObject).
    The request takes an ID for the hierarchy object. This endpoint
    is used to retrieve the VMware Hierarchy object that are valid recovery targets
    during a VMware Virtual Machine Export operations. This is limited to
    VMware Clusters, Hosts, and Resource Pools. The available options for
    the ID are Compute Cluster ID , Standalone Hosts ID, or Resource Pools ID.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/hierarchy/{id}/export"
    ```

    The Rubrik REST API server responds with a `VmwareHierarchyInfo` object.
    ```bash
    {
      "responses":
      {
       "id": "string",
        "name": "string",
        "objectType": "string",
        "location": "string",
        "hasChildren": true,
        "datastores": [
        ...
        ],
        "recoverableTo": true,
      }
    }
    ```

    ## Get VMware User-Configured Network List
    Send a GET request to
    [`/vmware/vcenter/{id}/networks`](#operation/getNetworks).
    The request takes an ID for the vCenter server for which to retrieve the
    user-configured networks and returns the networks' names and IDs.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vcenter/{id}/networks"
    ```

    The Rubrik REST API server responds with a `NetworkInfo` object.
    ```bash
    {
      "hasMore": false,
      "data": [
        {
        "id": "network_id",
        "name": "network_name"
        }
      ]
      "total": 1
    }
    ```

    ## Set Network for HotAdd Backups and Recoveries
    Send a POST request to
    [`/vmware/vcenter/{id}/hotadd/network`](#operation/setHotAddNetwork). The
    request takes an ID for the vCenter server and a user-configured network
    ID. It can also optionally take the information about static IP configuration.
    This static IP configuration requires the IP address range and the subnet mask,
    optionally taking in a gateway and list of DNS servers.

    ```bash
    curl -X POST \
    -d '{
      "hotadd_network_info": {
        "network_id":"string",
        "static_ip_info": {
          "ip_addresses":["list", "of", "ips"],
          "subnet_mask":"string",
          "gateway":"string",
          "dns_servers":["list", "of", "dns", "servers"]
        }
      }
    }'
    \  "https://$cluster_address/api/v1/vmware/vcenter/{id}/hotadd/network"
    ```

    The Rubrik REST API server responds with an HTTP 204 response when the
    network is set up properly.

    ## Get Network Information for HotAdd Backups and Recoveries
    Send a GET request to
    [`/vmware/vcenter/{id}/hotadd/network`](#operation/getHotAddNetwork). The
    request takes an ID for the vCenter server.

    ```bash
    curl -x GET "https://$cluster_address/api/v1/vmware/vcenter/{id}/hotadd/network"
    ```

    The Rubrik REST API server responds with a `HotAddNetworkConfigWithName` object.
    ```bash
    {
      "networkName": "$networkName",
      "staticIpConfig": {
        "ip_addresses": ["list", "of", "ips"],
        "subnet_mask": "$subnet_mask",
        "gateway": "$gateway",
        "dns_servers": ["list", "of", "dns", "servers"]
      }
    }
    ```

    ## Bulk creating on-demand snapshots
    On-demand snapshots can be created for both protected and unprotected virtual
    machines. To create an on-demand snapshot of a set of virtual machines, send a
    POST request to
    [`/vmware/vm/snapshot/bulk`](#operation/bulkCreateOnDemandBackup).

    ```bash
    curl -X POST \
      -d '{
         "vms": [
           {
             "vmId": "$vm_id"
           }
         ],
         }'\
          "https://$cluster_address/api/v1/vmware/vm/snapshot/bulk"
    ```

    The Rubrik REST API server initiates the asynchronous snapshot tasks and
    responds with objects tracking the job status.
    ```bash
    {
      "responses": [
        {
          "id": "$request_id",
          "status": "QUEUED",
          "progress": 0,
          "startTime": "$timestamp",
          "links": [
            {
              "href": "https://$cluster_address/api/v1/vmware/vm/snapshot/bulk",
              "rel": "self"
            }
          ]
        }
      ]
    }
    ```

    ## Get VMware HotAdd proxy virtual machine list
    To retrieve the list of VMware HotAdd proxy virtual machines, send a GET
    request to the [`/vmware/vcenter/hotadd/vm`](#operation/queryHotAddProxyVm)
    endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vcenter/hotadd/vm"
    ```

    The Rubrik REST API server responds with a `ListResponse` object.
    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "string",
          "name": "string",
          "vcenterName": "string",
          "computeClusterName": "string",
          "hostName": "string",
          "datastoreName": "string",
          "networkInfo": {
            "networkName":"string",
            "staticIpConfig": {
              "ip_addresses":["list", "of", "ips"],
              "subnet_mask":"string",
              "gateway":"string",
              "dns_server":"string"
            }
          },
          "status": "OK",
          "UsedPortCount": 0,
        },
      ]
    }
    ```

    ## Get Number of HotAdd Proxies Needed for Vcenter
    Send a GET request to
    [`/vmware/vcenter/{id}/hotadd/needed`](#operation/getNumProxiesNeeded).
    The request takes an ID for the vCenter server for which to return the
    number of HotAdd proxies needed.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vcenter/{id}/hotadd/needed"
    ```

    The Rubrik cluster returns the number of proxies needed.
    ```bash
    {
      "needed": 7
    }
    ```

    ## Get Ingest and Export Bandwidth Limits Using HotAdd for Vcenter.
    Send a GET request to
    [`/vmware/vcenter/{id}/hotadd/bandwidth`](#operation/getHotAddBandwidth).
    The request takes the vCenter server ID and returns the
    ingest and export bandwidth limits for that vCenter, when using HotAdd.

    ```bash
    curl -X GET \
    "https://$cluster_address/api/v1/vmware/vcenter/{id}/hotadd/bandwidth"
    ```

    The Rubrik cluster returns the bandwidth limits in Mbps.
    ```bash
    {
      "ingestLimit": 7,
      "exportLimit": 7
    }
    ```

    ## Set Ingest and Export Bandwidth Limits Using HotAdd for Vcenter.
    Send a POST request to
    [`/vmware/vcenter/{id}/hotadd/bandwidth`](#operation/setHotAddBandwidth).
    The request takes an ID for the vCenter server and the bandwidth limits to
    update. Setting a bandwidth limit to 0 clears the limit in that
    direction.

    ```bash
    curl -X POST \
    -d '{
      "hot_add_bandwidth_info": {
        "ingestLimit": 0,
        "exportLimit": 0
      }
    }'
    \ "https://$cluster_address/api/v1/vmware/vcenter/{id}/hotadd/bandwidth"
    ```

    The Rubrik REST API server responds with an HTTP 204 response when the
    bandwidth limits are set properly.

    ### Get preferred CDP network protocol

    To retrieve the currently preferred network protocol (IPv4 or IPv6) used for
    CDP data transfer, send a GET request to
    [`/vmware/config/cdp/get_preferred_cdp_network_protocol`](#operation/getPreferredCdpNetworkProtocol).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/config/cdp/get_preferred_cdp_network_protocol"
    ```

    The Rubrik REST API server responds with the preferred CDP
    network protocol.

    ```bash
    {
      "preferredCdpNetworkProtocol": "IPv4"
    }
    ```

    The configuration of VMware ESX subnets take priority over this setting.
    When a valid IPv6 ESX subnet is defined, CDP uses IPv6 for data transfer
    even when the preferred protocol is IPv4.

    ### Set preferred CDP network protocol

    Set the preferred network protocol (IPv4 or IPv6) used for CDP data
    transfer by sending a PATCH request to
    [`/vmware/config/cdp/set_preferred_cdp_network_protocol`](#operation/setPreferredCdpNetworkProtocol).

    ```bash
    curl -X PATCH \
      "https://$cluster_address/api/v1/vmware/config/cdp/set_preferred_cdp_network_protocol"
    ```

    The Rubrik REST API server responds with the updated preferred CDP
    network protocol.

    ```bash
    {
      "preferredCdpNetworkProtocol": "IPv4"
    }
    ```

    ## Migrate cluster associated with Rubrik Backup Service

    See the
    [host section](#section/Hosts/Migrate-cluster-associated-with-Rubrik-Backup-Service)
    for more details. To migrate the primary cluster for the Rubrik Backup Service
    on a virtual machine, send a POST request to
    [`/vmware/vm/make_primary`](#operation/vmMakePrimary).

    ```bash
    curl -X POST \
      -d '{
        "ids": [
          "$vm_id1",
          ...
        ] }' \
      "https://$cluster_address/api/v1/vmware/vm/make_primary"
    ```

    The Rubrik REST API server initiates the asynchronous request task and responds
    with a task object.

    ```bash
    {
      "id": "$request_id",
      "status": "RUNNING",
      "error": "None",
      "progress": "$request_progress"
      "links": [
        {
          href: "https://$cluster_address/api/v1/vmware/vm/request/$request_id",
          rel: "self"
        }
      ]
    }
    ```

    ### Get VMware Networks for virtual machine recovery

    To get all the available VMware networks for the specified compute resource,
    send a GET request to
    [`/vmware/config/recovery/networks`](#operation/getVmwareRecoveryNetworks).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/config/recovery/networks"
    ```

    The Rubrik REST API server returns a collection of all the available
    recovery networks `VmwareNetworkInfo` for the compute resource specified by
    the `compute_resource_id` parameter.

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "computeResourceId": string,
          "computeResourceType": string,
        },
      ],
      "total": 1,
    }
    ```

    # Legal Hold

    ### Get summary of snapshots which are placed under legal hold
    Send a GET request to [`/legal_hold/snapshot`](#operation/queryLegalHold).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/legal_hold/snapshot"
    ```

    ```bash
    {
      "data": [
        {
          "objectId": "$object_id",
          "objectName": "$object_name",
          "objectType": "$object_type",
          "snapshotId": "$snapshot_id",
          "snapshotTime": "2019-11-12T10:35:12.784Z",
          "placeOnHoldTime": "2019-11-13T11:11:06.456Z",
          "locationsPresent": [
            "$location1_id",
            "$location2_id"
          ],
          "isOnDemandSnapshot": true
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    ### Place a snapshot on legal hold
    To place a snapshot under legal hold, send a POST request to [`/legal_hold/snapshot`](#operation/applyLegalHold).

    ```bash
    curl -X POST \
      -d '{ "snapshotId": "$snapshot_id", "holdConfig": {"isHoldInPlace": true} }' \
       "https://$cluster_address/api/v1/legal_hold/snapshot"
    ```

    The rubrik REST API server responds with the legal hold summary object if request succeeds.

    ```bash
    {
      "objectId": "$object_id",
      "objectName": "$object_name",
      "objectType": "$object_type",
      "snapshotId": "$snapshot_id",
      "snapshotTime": "2019-11-12T10:35:12.784Z",
      "placeOnHoldTime": "2019-11-13T11:11:06.456Z",
      "locationsPresent": [
        "$location1_id",
        "$location2_id"
      ],
      "isOnDemandSnapshot": true
    }
    ```

    ### Get objects which are part of legal hold
    Send a GET request to [`/legal_hold/object`](#operation/getLegalHoldObjects) to retrieve a list of objects with snapshots that are under a legal hold.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/legal_hold/object"
    ```

    ```bash
    {
      "data": [
        {
          "objectId": "$object_id",
          "objectName": "$object_name",
          "objectType": "$object_type",
          "numberOfSnapshotsHeld": 1
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    To return a list of the snapshots for a specific object that are under legal hold, send a GET request to [`/legal_hold/snapshot`](#operation/queryLegalHold) with the ID of the object in the object_id parameter.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/legal_hold/snapshot?object_id=$object_id"
    ```

    ```bash
    {
      "data": [
        {
          "objectId": "$object_id",
          "objectName": "$object_name",
          "objectType": "$object_type",
          "snapshotId": "$snapshot_id",
          "snapshotTime": "2019-11-12T10:35:12.784Z",
          "placeOnHoldTime": "2019-11-13T11:11:06.456Z",
          "locationsPresent": "",
          "isOnDemandSnapshot": true
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    ### Dissolve legal hold
    To remove a legal hold from a collection of object snapshots, send a POST request to [`/legal_hold/object/{id}/dissolve`](#operation/dissolveLegalHoldSnapshots).

    ```bash
    curl -X POST \
      -d '{ "snapshotIds": ["$snapshot_id"] }' \
      "https://$cluster_address/api/v1/legal_hold/object/$object_id/dissolve"
    ```

    The Rubrik REST API server responds with the list of snapshots on which legal hold has been dissolved.

    ```bash
    {
      "dissolvedSnapshotIds": [
        "$snapshot_id"
      ]
    }
    ```

    # Cloud Utilization

    Rubrik clusters can utilize the cloud for storage and compute for
    snapshot archival and data consolidation on archival locations.

    ## Forecasting cloud utilization

    To forecast the cloud utilization according to specified SLA domain
    parameters, send a POST request to:
    [`/cloud_utilization/cloud_out_forecast`](#operation/doCloudOutForecast).

    **Example:** Forecasting cloud utilization

    ```bash
    curl -X POST -d '{
      "cloudOutForecastRequest": {
        "slaParameters": {
          "frequencies": {
            "monthly": {
              "frequency": 1,
              "retention": 12
            },
            "yearly": {
              "frequency": 1,
              "retention": 2
            }
          },
          "archivalSpecs": {
            "locationId": "75892476-c158-45fb-8ea9-365c634da294",
            "archivalThreshold": 1
          }
        },
        "consolidationFilter": "ForecastWithConsolidation",
        "granularity": Year,
        "forecastPeriodInGranularityUnit": 3
      }
    }' "https://$cluster_address/api/v1/cloud_utilization/cloud_out_forecast"
    ```

    The response gives the forecast result summary.

    ```bash
    {
      "assumptions": {
        "logicalDataSizeInGB": 1000.0,
        "annualGrowthRateInPercent": 7.0,
        "compressionFactor": 2.5,
        "frequencyChangeRates": {
          "monthlyChangeRateInPercent": 10.0,
          "yearlyChangeRateInPercent": 30.0
        }
      },
      "locationForecast": {
        "locationName": "S3:s3-location-name",
        "locationType": "S3",
        "locationRegion": "us-west-2",
        "instanceType": "m5.2xlarge",
        "storageForecast": {
          "forecastWithConsolidation": {
            "storageUsedInGB": [1000, 1100, 1105],
            "storageCostInUSD": [276, 304, 305],
            "dataRetrievalCostInUSD": [0, 0, 0],
            "perStorageClassForecast": [
              {
                "storageClass": "STANDARD",
                "storageUsedInGB": [900, 1150, 1450],
                "storageCostInUSD": [176, 304, 376]
              }
            ]
          }
        },
        "computeForecast": {
          "forecastWithConsolidation": {
            "computeDurationInHrs": [0, 11, 12],
            "computeCostInUSD": [0, 8, 9]
          }
        }
      }
    }
    ```

    # User-defined tag

    Rubrik CDM clusters can manage user-defined tags attached to the compute resources created by CloudOn and CloudOut.

    Resource tags are associated with a cloud archival location, such as AWS or Azure. Rubrik CDM allows a maximum of 10 resource tags for each archival location. Check with the cloud provider for additional restrictions on resource tags.

    If a compute resource supports tagging during creation by the cloud provider, user-defined resource tags are attached at resource creation time. Otherwise, user-defined resource tags are attached to the compute resource after creation.

    * Compute Instances: Bolt, Converter, Transient instances, Converted Instances
    * Disks/Snapshots: EBS Volumes/Snapshots, Managed Disks/Snapshot
    * Images: AMIs, Images

    ## Query existing user-defined tags on a CDM cluster

    To query existing user-defined tags on a CDM cluster, send a GET request to the
    [`/user_defined_tag`](#operation/queryUserDefinedTag) endpoint.

    **Example:** Query existing user-defined tags on a CDM cluster

    ```bash
    curl -X GET "https://$cluster_address/api/v1/user_defined_tag"
    ```

    ```json
    {
            "resourceTags": [{
                    "id": "38400000-8cf0-11bd-b23e-10b96e4ef00d",
                    "key": "department",
                    "value": "engineering",
                    "lastUpdateTime": "2021-01-31T11:54:24 UTC",
                    "scopeRefId": "a0ef0663-7a7c-4027-9972-061780e52fee"
            }]
    }
    ```

    ## Create a new user-defined tag on a CDM cluster

    To create a new user-defined tag on a CDM cluster, send a POST request to the
    [`/user_defined_tag`](#operation/createUserDefinedTag) endpoint.

    **Example:** Create a new user-defined tags on a CDM cluster

    ```bash
    curl -X POST \
      -d '{
              "key": "department",
              "value": "engineering",
              "scopeRefId": "a0ef0663-7a7c-4027-9972-061780e52fee"
        }' \
      "https://$cluster_address/api/v1/user_defined_tag"
    ```

    ```json
    {
            "id": "38400000-8cf0-11bd-b23e-10b96e4ef00d",
            "key": "department",
            "value": "engineering",
            "lastUpdateTime": "2021-01-31T11:54:24 UTC",
            "scopeRefId": "a0ef0663-7a7c-4027-9972-061780e52fee"
    }
    ```

    ## Delete existing user-defined tags on a CDM cluster

    To delete existing user-defined tags on a CDM cluster, send a DELETE request to the
    [`/user_defined_tag`](#operation/deleteUserDefinedTagBulk) endpoint.

    **Example:** Delete existing user-defined tags on a CDM cluster

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/user_defined_tag?ids=$id"
    ```

    ```json
    {
            "ids": ["38400000-8cf0-11bd-b23e-10b96e4ef00d"]
    }
    ```

    ## Get information about a user-defined tag on a CDM cluster

    To fetch an existing user-defined tag on a CDM cluster, send a GET request to the
    [`/user_defined_tag/{id}`](#operation/getUserDefinedTag) endpoint.

    **Example:** To fetch an existing user-defined tag on a CDM cluster

    ```bash
    curl -X GET "https://$cluster_address/api/v1/user_defined_tag/$id"
    ```

    ```json
    {
            "id": "38400000-8cf0-11bd-b23e-10b96e4ef00d",
            "key": "department",
            "value": "engineering",
            "lastUpdateTime": "2021-01-31T11:54:24 UTC",
            "scopeRefId": "a0ef0663-7a7c-4027-9972-061780e52fee"
    }
    ```

    ## Update information about an existing user-defined tag on a CDM cluster

    To update an existing user-defined tag on a CDM cluster, send a PATCH request to the
    [`/user_defined_tag/{id}`](#operation/updateUserDefinedTag) endpoint.

    **Example:** To update an existing user-defined tag on a CDM cluster

    ```bash
    curl -X PATCH \
     -d '{"value": "engineering"}' \
     "https://$cluster_address/api/v1/user_defined_tag/$id"
    ```
    ```json
    {
            "id": "38400000-8cf0-11bd-b23e-10b96e4ef00d",
            "key": "department",
            "value": "engineering",
            "lastUpdateTime": "2021-01-31T11:54:24 UTC",
            "scopeRefId": "a0ef0663-7a7c-4027-9972-061780e52fee"
    }
    ```

    ## Delete a existing user-defined tag on a CDM cluster

    To delete an existing user-defined tag on a CDM cluster, send a DELETE request to the
    [`/user_defined_tag/{id}`](#operation/deleteUserDefinedTag) endpoint.

    **Example:** To delete an existing user-defined tag on a CDM cluster

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/user_defined_tag/$id"
    ```



    # Hosts

    Rubrik clusters can protect file system data and application data through direct interaction with a host operating system. This method of protection does not require a virtual environment API. Instead, the Rubrik cluster works with the Rubrik Backup Service software that is running on supported Linux hosts and Windows hosts.

    In some situations, the Rubrik cluster can directly interact with hosts without the Rubrik Backup Service, for example when providing protection of data on a network share.

    ## Rubrik Backup Service

    The Rubrik Backup Service software must be installed on a host to enable file system level protection and direct protection of supported applications. The Rubrik Backup Service software is signed by a specific Rubrik cluster and can only be used with that Rubrik cluster.

    The following URLs provide access to the Rubrik Backup Service software on a Rubrik cluster:
    * Linux: https://$cluster_address/connector/rubrik-agent.x86_64.rpm
    * Windows: https://$cluster_address/connector/RubrikBackupService.zip

    **IMPORTANT:** The Rubrik User Guide describes how to install the Rubrik Backup Service software, and lists the permissions and settings that are required to allow the Rubrik Backup Service to provide support for specific operating systems, applications, and clusters.

    ## Registering a host
    After installing the Rubrik Backup Service on a host, register the host with the Rubrik cluster. Registering initiates secure communication between the Rubrik cluster and the Rubrik Backup Service on the host. After a host is registered, the Rubrik Backup Service on the host sends detailed information about the host to the Rubrik cluster.

    The Rubrik Backup Service scans a registered host for protectable objects, such as: applications, databases, and Windows clusters. The Rubrik Backup Service sends the results of the scan to the Rubrik cluster.

    To register a host, send a POST request to [`/host`](#operation/registerHost) and include `hostname: $hostname`. The `$hostname` value must be the IPv4 address of the host or the resolvable hostname of the host.

    ```bash
    curl -X POST \
      -d '{
        "hostname": "$hostname" }' \
      "https://$cluster_address/api/v1/host"
    ```

    To register the host and discover protection points of the host in the background, send a POST request to [`/host/background`](#operation/registerHostAsync) and include `hostname: $hostname`. The`$hostname` value must be the IPv4 address of the host or the resolvable hostname of the host.

    ```bash
    curl -X POST \
      -d '{
        "hostname": "$hostname" }' \
      "https://$cluster_address/api/v1/host/background"
    ```
    The Rubrik REST API server responds with the details for the host, including the connection status.

    ```bash
    {
      "id": "$host_id",
      "name": "$hostname",
      "hostname": "$hostname", (deprecated)
      "primaryClusterId": "$cluster_id",
      "agentId": "$agent_id",
      "operatingSystem": "$os_version",
      "operatingSystemType": "$os_type",
      "status": "Connected",
      "compressionEnabled": false
    }
    ```

    To register bulk hosts in the background, send a POST request to [`/host/bulk_background`](#operation/bulkRegisterHostAsync) and include `hostname: $hostname`. The`$hostname` value must be the IPv4 address of the host or the resolvable hostname of the host.

    ```
    curl -X POST \
      -d '{
        [{"hostname": "$hostname1"}, {"hostname": "$hostname2"}] }' \
      "https://$cluster_address/api/v1/host/bulk_background"
    ```

    The `status` field in the response is returned as `Refreshing` until the host has finished discovering all the mssql instances, oracle DBs, etc. After this step, status is returned as `Connected` and all discovery is done for the host

    For background hosts, the connection status is returned as `Refreshing` until the host is fully registered. After this step, that status is returned as `Connected` and all discovery is done for the host

    ## Retrieving host information

    To retrieve a current list of the hosts that are registered with a Rubrik cluster, send a GET request to [`/host`](#operation/queryHost).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/host"
    ```

    The Rubrik REST API server responds with a ListResponse object that contains the first page of the current list.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "$host_id0",
          "name": "$hostname0",
          "hostname": "$hostname0", (deprecated)
          "primaryClusterId": "$cluster_id",
          "operatingSystem": "$os_version0",
          "operatingSystemType": "$os_type0",
          "status": "Connected"
        },
        {
          "id": "$host_id1",
          "name": "$hostname1",
          "hostname": "$hostname1", (deprecated)
          "primaryClusterId": "$cluster_id",
          "operatingSystem": "$os_version1",
          "operatingSystemType": "$os_type1",
          "status": "Connected"
        }
      ],
      "total": 2
    }
    ```
    Depending on the number of registered hosts, the complete list of registered hosts may not be included on the first page. [Working with lists](#section/Overview/Working-with-lists) describes how to work with a ListResponse object to obtain additional pages of the list.


    To retrieve the details for a specified host, send a GET request to [`/host/{id}`](#operation/getHost).

    Adding a host will cause Rubrik to communicate with the remote Rubrik agent and get detailed information about the host.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/host/$host_id0"
    ```
    The Rubrik REST API server responds with the details of the specified host.

    ```bash
      {
        "id": "$host_id0",
        "name": "$hostname0",
        "hostname": "$hostname0", (deprecated)
        "primaryClusterId": "$cluster_id",
        "agentId": "$agent_id",
        "operatingSystem": "$os_version0",
        "operatingSystemType": "$os_type0",
        "status": "Connected",
        "compressionEnabled": false
      }
    ```

    ## Adding a host without the Rubrik Backup Service

    A host without the Rubrik Backup Service can be added by setting the `hasAgent` flag to `false`. This can be used to register a host that will be accessed through network shares.

    ```bash
    curl -X POST \
      -d '{ \
        "hostname": "$hostname",
        "hasAgent": "false" }' \
      "https://$cluster_address/api/v1/host"
    ```

    ## Modifying a registered host

    To change the FQDN or IPv4 address that the Rubrik cluster uses to connect with a registered host, send a PATCH request to [`/host`](#operation/updateHost). Use the value of `hostname` to specify the new FQDN or IPv4 address of the host. Optionally, also use this PATCH request to specify whether to compress the data that is transmitted to and from the host. Set the value of `compressionEnabled` to `true` to enable compression or set the value to `false` to turn compression off.


    ```bash
    curl -X POST \
      -d '{
        "hostname": "$hostname",
        "compressionEnabled": true }' \
      "https://$cluster_address/api/v1/host/$host_id"
    ```

    The Rubrik REST API server responds with a confirmation of the new details of the registered host.

    ```bash
     {
      "id": "$host_id",
      "name": "$hostname",
      "hostname": "$hostname", (deprecated)
      "primaryClusterId": "$cluster_id",
      "agentId": "$agent_id",
      "operatingSystem": "$os_version",
      "operatingSystemType": "$os_type",
      "status": "Connected",
      "compressionEnabled": true
     }
    ```
    ## Removing a host

    Remove a host from the Rubrik cluster when the host no longer requires protection. The Rubrik cluster moves all of the unexpired backups for the host filesets of the host to Unmanaged Objects.

    To remove a host send a DELETE request to [`/host/{id}`](#operation/deleteHost).

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/host/$host_id"
    ```

    The Rubrik REST API server responds with HTTP response code 204. This indicates the request succeeded and the response body is empty.

    ## Refreshing a Host

    Refresh a host when changes made on the host do not appear in the
    Rubrik web UI. The refresh requests updated information from the
    Rubrik Backup Service that is running on the host.

    To refresh a host send a POST request to
    [`/host/{id}/refresh`](#operation/refreshHost)

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/host/$host_id/refresh"
    ```

    The Rubrik REST API server responds with HTTP response code 200 and
    includes the updated properties of the host object in the response body.

    ## Updating a Host Certificate

    When a host has a new certificate that is not registered with Rubrik
    the Rubrik cluster will not communicate with that host until the
    certificate is updated. In order to do that send a PUT request to
    [`/host/certificate/{id}`](#operation/updateCertificateHost)

    ```bash
    curl -X PUT \
      "https://$cluster_address/api/v1/host/certificate/$host_id"
    ```

    The Rubrik REST API server responds with the details of the specified host.

    ## Migrate cluster associated with Rubrik Backup Service

    Hosts can register with multiple clusters but can only communicate or back up to
    a single cluster. Such a cluster is the primary cluster for that host. See the
    Multicluster Rubrik Backup Service section of the Rubrik CDM User Guide for
    details. To change the primary cluster to the current cluster, for Rubrik Backup
    Service on a host, send a POST request to
    [`/host/make_primary`](#operation/hostMakePrimary).

    ```bash
    curl -X POST \
      -d '{
        "ids": [
          "$host_id1",
          ...
        ] }' \
      "https://$cluster_address/api/v1/host/make_primary"
    ```

    The Rubrik REST API server initiates the asynchronous request task and responds
    with a task object.

    ```bash
    {
      "id": "$request_id",
      "status": "RUNNING",
      "error": "None",
      "progress": "$request_progress"
      "links": [
        {
          href: "https://$cluster_address/api/v1/vmware/vm/request/$request_id",
          rel: "self"
        }
      ]
    }
    ```

    To migrate the Rubrik Backup Service on a virtual machine, see the
    [corresponding virtual machine API](#section/Virtual-machines/Migrate-cluster-associated-with-Rubrik-Backup-Service).

    Alternatively, in a disaster recovery scenario, when migrating the primary
    cluster for all hosts *and* virtual machines from an old cluster to this one,
    send a POST request to [`/host/make_primary`](#operation/hostMakePrimary) with
    oldPrimaryClusterUuid specified. Note that the hosts and virtual machines must
    already have been registered on this cluster.

    ```bash
    curl -X POST \
      -d '{
        "oldPrimaryClusterUuid": "12345678-90ab-cdef-1234-567890abcdef" }' \
      "https://$cluster_address/api/v1/host/make_primary"
    ```

    ## Windows Server Failover Clustering nodes

    To begin working with Windows Server Failover Clustering (WSFC) clusters, register each WSFC node with the Rubrik cluster as described in [`Registering a host`](#section/Hosts/Registering-a-host). The scan performed by the Rubrik Backup Service on each WSFC node detects the WSFC cluster and provides information about the WSFC cluster to the Rubrik cluster.

    To view WSFC cluster information, send a GET request to [`/windows_cluster`](#operation/queryWindowsCluster).

    **Note:** The variable `$cluster_address` refers to the FQDN or IPv4 address of the Rubrik cluster.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/windows_cluster"
    ```
    The Rubrik REST API server responds with a ListResponse object that contains the first page of the list of WSFC clusters.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "$wsfc_id",
          "name": "$wsfc_name",
          "fqdn": "$wsfc_fqdn",
          "hostIds": [
            "$wsfc_node_id0",
            "$wsfc_node_id1"
          ],
          "primaryClusterId": "$cluster_id"
        }
      ],
      "total": 1
    }
    ```

    To retrieve detailed information about a WSFC cluster, send a GET request to: [`/windows_cluster/{id}`](#operation/getWindowsCluster), where `$cluster_id` is the `id` of the WSFC cluster.


    ```bash
    curl -X GET "https://$cluster_address/api/v1/windows_cluster/$cluster_id"
    ```

    The Rubrik REST API server responds with the details for the specified WSFC cluster.

    ```bash
    {
      "name": "$wsfc_name",
      "id": "$wsfc_id",
      "naturalId": "$cluster_natural_id",
      "hostIds": [
      "$wsfc_node_id0",
      "$wsfc_node_id1"
      ],
      "fqdn": "$wsfc_fqdn",
      "primaryClusterId": "$cluster_id"
    }
    ```

    ## Bulk Update Host Shares

    To update a list of Host shares in bulk, send a PATCH request to the [`/host/share/bulk`](#operation/bulkUpdateHostShare) endpoint with a bulk_update_properties to complete an update.

    ```bash
    curl -X PATCH \
      -d '[
        {
          "shareId": "$share_id",
          "updateProperties": {
            "exportPoint": "$export_point",
            "username": "$username",
            "password": "$password",
            "domain": "$domain",
            "hostShareParameters": {
              "isNetAppSnapDiffEnabled": true,
              "isIsilonChangelistEnabled": true
            }
          }
        }
      ]' \
      "https://$cluster_address/api/v1/host/share/bulk"
    ```

    The Rubrik REST API server responds with the details of the updated Host shares.

    ## Discover shares on NAS host

    To retrieve a current list of shares (NFS/SMB) on a specific NAS host,
    send a GET request to [`/host/{id}/nas_share_discover`](#operation/discoverNasShares)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/host/{id}/nas_share_discover"
    ```

    The Rubrik REST API server responds with a List object that contains all
    discovered shares on the NAS host.

    ```bash
    {
      [
        {
          "shareType": "NFS",
          "exportPoint": "/ifs/data/dir1",
        },
        {
          "shareType": "SMB",
          "exportPoint": "ifs_data",
        }
      ]
    }
    ```

    ## Bulk add NAS shares

    To add NAS shares in bulk without validating their share credentials, send a
    POST request to [`/host/share/bulk`](#operation/bulkAddHostShares)

    ```bash
    curl -X POST \
      -d '{ \
        [ \
          { \
            "shareType": "$share_type", \
            "exportPoint": "$export_point" \
          },
          { \
            "shareType": "$share_type", \
            "exportPoint": "$export_point" \
          }, \
        ] \
      }' \
      "https://$cluster_address/api/v1/host/share/bulk"
    ```

    The Rubrik REST API server responds with details of added shares.

    ## Getting a list of volumes on a Volume Group host

    To retrieve a list of all volumes on a Volume Group host, send a GET
    request to [`/host/{id}/volume`](#operation/queryHostVolume)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/host/{id}/volume"
    ```

    The Rubrik REST API server responds with summary information for each
    volume on the specified Volume Group host.

    ```
    {
      "hasMore": true,
      "data": [
        {
          "id": "string",
          "fileSystemType": "NTFS",
          "mountPoints": [
            "string"
          ],
          "size": 0,
          "naturalId": "string",
          "volumeGroupId": "string",
          "isCurrentlyPresentOnSystem": true
        }
      ],
      "total": 0
    }
    ```

    ## Remote RBS management
    The Rubrik Backup Service (RBS) management endpoints provide the capability to install/uninstall/upgrade RBS on remote hosts.

    ### Retrieving the Rubrik Backup Service host information

    To get the Rubrik Backup Service host information, send a GET request to [`/host/rbs`](#operation/getRbsHostInfo).

    ```bash
    curl -X GET \
      -d '{
        "name": "$hostname",
        "username": "$username",
        "password": "$password",
        "operationTimeout": 600 }' \
      "https://$cluster_address/api/v1/host/rbs"
    ```


    The Rubrik REST API server responds with summary information for Rubrik Backup Service host.

    ```
    {
      "name": "$hostname",
      "agentId": "$rbsAgentId",
      "agentVersion": "$rbsVersion",
      "osInfo": "$osInfo",
      "osType": "$osType",
      "status": "Installed"
    }
    ```

    ### Installing Rubrik Backup Service on a host

    To install Rubrik Backup Service on a host, send a POST request to [`/host/rbs/install`](#operation/rbsInstall).

    Install Rubrik Backup Service on a host with operationMode as Synchronous.
    ```bash
    curl -X POST \
      -d '{
        "name": "$hostname",
        "username": "$username",
        "password": "$password",
        "operationTimeout": 600,
        "operationMode": Synchronous }' \
      "https://$cluster_address/api/v1/host/rbs/install"
    ```

    The Rubrik REST API server responds with the summary of Rubrik Backup Service on the host.
    ```bash
    {
      "rbsHostSummary": {
        "name": "$hostname",
        "agentId": "$rbsAgentId",
        "agentVersion": "$rbsVersion",
        "osInfo": "$osInfo",
        "osType": "$osType",
        "status": "Installed"
      }
    }
    ```

    Install Rubrik Backup Service on a host with operationMode as Asynchronous.
    ```bash
    curl -X POST \
      -d '{
        "name": "$hostname",
        "username": "$username",
        "password": "$password",
        "operationTimeout": 600,
        "operationMode": Asynchronous }' \
      "https://$cluster_address/api/v1/host/rbs/install"
    ```

    The Rubrik REST API server initiates the asynchronous task and responds
    with a task object.

    ```bash
    {
      "asyncRequestStatus": {
        "id": "$id",
        "status": "$status",
        "progress": 0,
        "startTime": "2021-03-24T23:27:41.493Z",
        "endTime": "2021-03-24T23:27:41.493Z",
        "nodeId": "$nodeId",
        "error": {
          "message": "$message"
        },
        "links": [
          {
            "href": "$href",
            "rel": "$rel"
          }
        ]
      }
    }
    ```

    ### Uninstalling Rubrik Backup Service from a host

    To uninstall Rubrik Backup Service from a host, send a POST request to [`/host/rbs/uninstall`](#operation/rbsUninstall).

    Uninstall Rubrik Backup Service from a host with operationMode as Synchronous.
    ```bash
    curl -X POST \
      -d '{
        "name": "$hostname",
        "username": "$username",
        "password": "$password",
        "operationTimeout": 600,
        "operationMode": Synchronous }' \
      "https://$cluster_address/api/v1/host/rbs/uninstall"
    ```

    The Rubrik REST API server responds with the summary of Rubrik Backup Service on the host.
    ```bash
    {
      "rbsHostSummary": {
        "name": "$hostname",
        "status": "NotInstalled"
      }
    }
    ```

    Uninstall Rubrik Backup Service from a host with operationMode as Asynchronous.
    ```bash
    curl -X POST \
      -d '{
        "name": "$hostname",
        "username": "$username",
        "password": "$password",
        "operationTimeout": 600,
        "operationMode": Asynchronous }' \
      "https://$cluster_address/api/v1/host/rbs/uninstall"
    ```

    The Rubrik REST API server initiates the asynchronous task and responds
    with a task object.
    ```bash
    {
      "asyncRequestStatus": {
        "id": "$id",
        "status": "$status",
        "progress": 0,
        "startTime": "2021-03-24T23:27:41.493Z",
        "endTime": "2021-03-24T23:27:41.493Z",
        "nodeId": "$nodeId",
        "error": {
          "message": "$message"
        },
        "links": [
          {
            "href": "$href",
            "rel": "$rel"
          }
        ]
      }
    }

    ### Upgrading Rubrik Backup Service on a host

    To upgrade Rubrik Backup Service on a host, send a POST request to [`/host/rbs/upgrade`](#operation/rbsUpgrade).

    Upgrade Rubrik Backup Service on a host with operationMode as Synchronous.
    ```bash
    curl -X POST \
      -d '{
        "name": "$hostname",
        "username": "$username",
        "password": "$password",
        "operationTimeout": 600,
        "operationMode": Synchronous }' \
      "https://$cluster_address/api/v1/host/rbs/upgrade"
    ```

    The Rubrik REST API server responds with the summary of Rubrik Backup Service on the host.
    ```bash
    {
      "rbsHostSummary": {
        "name": "$hostname",
        "agentId": "$rbsAgentId",
        "agentVersion": "$rbsVersion",
        "osInfo": "$osInfo",
        "osType": "$osType",
        "status": "Installed"
      }
    }
    ```

    Upgrade Rubrik Backup Service on a host with operationMode as Asynchronous.
    ```bash
    curl -X POST \
      -d '{
        "name": "$hostname",
        "username": "$username",
        "password": "$password",
        "operationTimeout": 600,
        "operationMode": Asynchronous }' \
      "https://$cluster_address/api/v1/host/rbs/upgrade"
    ```

    The Rubrik REST API server initiates the asynchronous task and responds
    with a task object.

    ```bash
    {
      "asyncRequestStatus": {
        "id": "$id",
        "status": "$status",
        "progress": 0,
        "startTime": "2021-03-24T23:27:41.493Z",
        "endTime": "2021-03-24T23:27:41.493Z",
        "nodeId": "$nodeId",
        "error": {
          "message": "$message"
        },
        "links": [
          {
            "href": "$href",
            "rel": "$rel"
          }
        ]
      }
    }
    ```

    # Failover cluster

    This REST API is used to manage failover cluster objects of UnixLike hosts.

    ### Add a new failover cluster
    Add a new failover cluster by making a POST call to
    [/failover_cluster](#operation/createFailoverCluster).

    ```bash
    curl -X POST \
      -d '{
        "name": "$name",
        "hostIds": [ "$hostId" ],
        "configuredSlaDomainId": "$configuredSlaDomainId"}'\
      "https://$cluster_address/api/v1/failover_cluster"
    ```

    ```bash
    {
      "id": "$id",
      "name": "$name",
      "configuredSlaDomainId": "$configuredSlaDomainId",
      "configuredSlaDomainName": "$configuredSlaDomainName",
      "configuredSlaDomainType": "ProtectionSla",
      "primaryClusterId": "$primaryClusterId",
      "isConfiguredSlaDomainRetentionLocked": true,
      "slaLastUpdateTime": "2020-04-20T17:30:30.743Z",
      "effectiveSlaDomainId": "$effectiveSlaDomainId",
      "effectiveSlaDomainName": "$effectiveSlaDomainName",
      "isEffectiveSlaDomainRetentionLocked": true,
      "effectiveSlaDomainPolarisManagedId": "$effectiveSlaDomainPolarisManagedId",
      "effectiveSlaSourceObjectId": "$effectiveSlaSourceObjectId",
      "effectiveSlaSourceObjectName": "$effectiveSlaSourceObjectName",
      "nodes": [
        {
          "id": "$id",
          "name": "$name",
          "connectionStatus": "Connected",
          "operatingSystem": "$operatingSystem"
        }
      ],
      "connectionStatus": "Connected",
      "slaAssignment": "Derived",
      "operatingSystemType": "$operatingSystemType",
      "numNodes": $numNodes,
      "numApps": 0
    }

    ```

    ### Get all failover clusters
    Get a listing of all failover clusters using
    a GET request to [/failover_cluster](#operation/queryFailoverCluster).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/failover_cluster?sort_order=asc"
    ```

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "$id",
          "name": "$name",
          "configuredSlaDomainId": "$configuredSlaDomainId",
          "configuredSlaDomainName": "$configuredSlaDomainName",
          "configuredSlaDomainType": "ProtectionSla",
          "primaryClusterId": "$primaryClusterId",
          "isConfiguredSlaDomainRetentionLocked": false,
          "effectiveSlaDomainId": "$effectiveSlaDomainId",
          "effectiveSlaDomainName": "$effectiveSlaDomainName",
          "isEffectiveSlaDomainRetentionLocked": false,
          "effectiveSlaSourceObjectId": "$effectiveSlaSourceObjectId",
          "nodes": [
            {
              "id": "$id",
              "name": "$name",
              "connectionStatus": "Connected",
              "operatingSystem": "$operatingSystem"
            },
            {
              "id": "$id",
              "name": "$name",
              "connectionStatus": "Connected",
              "operatingSystem": "$operatingSystem"
            }
          ],
          "connectionStatus": "Connected",
          "slaAssignment": "$slaAssignment",
          "operatingSystemType": "$operatingSystemType"
        }
      ],
      "total": 1
    }
    ```

    ### Get information about a specific failover cluster
    Get information about a specific failover cluster using
    a GET request to
    [/failover_cluster/{id}](#operation/getFailoverCluster).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/failover_cluster/$failover_cluster_id"
    ```

    ```bash
    {
      "id": "$id",
      "name": "$name",
      "configuredSlaDomainId": "$configuredSlaDomainId",
      "configuredSlaDomainName": "$configuredSlaDomainName",
      "configuredSlaDomainType": "ProtectionSla",
      "primaryClusterId": "$primaryClusterId",
      "isConfiguredSlaDomainRetentionLocked": false,
      "effectiveSlaDomainId": "$effectiveSlaDomainId",
      "effectiveSlaDomainName": "$effectiveSlaDomainName",
      "isEffectiveSlaDomainRetentionLocked": false,
      "effectiveSlaSourceObjectId": "$effectiveSlaSourceObjectId",
      "nodes": [
        {
          "id": "$id",
          "name": "$name",
          "connectionStatus": "Connected",
          "operatingSystem": "$operatingSystem"
        },
        {
          "id": "$id",
          "name": "$name",
          "connectionStatus": "Connected",
          "operatingSystem": "$operatingSystem"
        }
      ],
      "connectionStatus": "Connected",
      "slaAssignment": "$slaAssignment",
      "operatingSystemType": "$operatingSystemType",
      "numNodes": $numNodes,
      "numApps": $numApps
    }
    ```

    ### Update the parameters of an existing failover cluster
    The parameters associated with the failover cluster can be updated by
    making a PATCH request to
    [/failover_cluster/{id}](#operation/updateFailoverCluster)

    ```bash
    curl -X PATCH \
      -d '{
        "name": "$name",
        "hostIds": [ "$hostId" ],
        "configuredSlaDomainId": "$configuredSlaDomainId"}'\
      "https://$cluster_address/api/v1/failover_cluster/$failover_cluster_id"
    ```

    ```bash
    {
      "id": "$id",
      "name": "$name",
      "configuredSlaDomainId": "$configuredSlaDomainId",
      "configuredSlaDomainName": "$configuredSlaDomainName",
      "configuredSlaDomainType": "ProtectionSla",
      "primaryClusterId": "$primaryClusterId",
      "isConfiguredSlaDomainRetentionLocked": true,
      "slaLastUpdateTime": "2020-04-20T18:26:56.893Z",
      "effectiveSlaDomainId": "$effectiveSlaDomainId",
      "effectiveSlaDomainName": "$effectiveSlaDomainName",
      "isEffectiveSlaDomainRetentionLocked": true,
      "effectiveSlaDomainPolarisManagedId": "$effectiveSlaDomainPolarisManagedId",
      "effectiveSlaSourceObjectId": "$effectiveSlaSourceObjectId",
      "effectiveSlaSourceObjectName": "$effectiveSlaSourceObjectName",
      "nodes": [
        {
          "id": "$id",
          "name": "$name",
          "connectionStatus": "Connected",
          "operatingSystem": "$operatingSystem"
        }
      ],
      "connectionStatus": "Connected",
      "slaAssignment": "Derived",
      "operatingSystemType": "$operatingSystemType",
      "numNodes": $numNodes,
      "numApps": $numApps
    }
    ```

    ### Delete a specific failover cluster
    Any failover cluster can be removed by issuing a DELETE request to
    [/failover_cluster/{id}](#operation/deleteFailoverCluster).

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/failover_cluster/$failover_cluster_id?preserve_snapshots=false"
    ```

    ### Bulk delete a failover cluster
    A list of failover clusters can be removed by issuing a DELETE request to
    [/failover_cluster/bulk](#operation/bulkDeleteFailoverCluster).

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/failover_cluster/bulk?ids=$failover_cluster_id1,$failover_cluster_id2&preserve_snapshots=false"
    ```

    # Failover cluster App

    Use this REST API to manage failover cluster app objects.

    ### Add a new failover cluster app
    Add a new failover cluster app by making a POST call to
    [/failover_cluster/failover_cluster_app](#operation/createFailoverClusterApp).

    Use either the virtualIps or nodeOrders options in the failoverClusterAppSource request parameter to create a failover cluster app.

    ```bash
    curl -X POST \
      -d '{
        "name": "$name",
        "failoverClusterType": "Windows",
        "failoverClusterId": "$failoverClusterId",
        "failoverClusterAppSource": {
          "virtualIps": [
            "$virtualIp"
          ],
          "nodeOrders": [
            {
              "nodeId": "$nodeId",
              "nodeName": "$nodeName",
              "order": 0
            }
          ]
        },
        "configuredSlaDomainId": "string"}'\
      "https://$cluster_address/api/v1/failover_cluster/failover_cluster_app"
    ```

    Response when a failover cluster app is created using the virtualIps option in the failoverClusterAppSource request parameter.

    ```bash
    {
      "id": "$id",
      "name": "$name",
      "configuredSlaDomainId": "$configuredSlaDomainId",
      "configuredSlaDomainName": "$configuredSlaDomainName",
      "configuredSlaDomainType": "ProtectionSla",
      "primaryClusterId": "$primaryClusterId",
      "isConfiguredSlaDomainRetentionLocked": true,
      "slaLastUpdateTime": "2020-04-21T17:32:44.266Z",
      "effectiveSlaDomainId": "$effectiveSlaDomainId",
      "effectiveSlaDomainName": "$effectiveSlaDomainName",
      "isEffectiveSlaDomainRetentionLocked": true,
      "effectiveSlaDomainPolarisManagedId": "$effectiveSlaDomainPolarisManagedId",
      "effectiveSlaSourceObjectId": "$effectiveSlaSourceObjectId",
      "effectiveSlaSourceObjectName": "$effectiveSlaSourceObjectName",
      "failoverClusterType": "Windows",
      "failoverClusterId": "$failoverClusterId",
      "failoverClusterAppSource": {
        "virtualIps": [
          "$virtualIp"
        ]
      },
      "connectionStatus": "Connected",
      "slaAssignment": "Derived",
      "operatingSystemType": "$operatingSystemType",
      "failoverClusterName": "$failoverClusterName"
    }
    ```

    Response when a failover cluster app is created using the nodeOrders option in the failoverClusterAppSource request parameter.

    ```bash
    {
      "id": "$id",
      "name": "$name",
      "configuredSlaDomainId": "$configuredSlaDomainId",
      "configuredSlaDomainName": "$configuredSlaDomainName",
      "configuredSlaDomainType": "ProtectionSla",
      "primaryClusterId": "$primaryClusterId",
      "isConfiguredSlaDomainRetentionLocked": true,
      "slaLastUpdateTime": "2020-04-21T17:32:44.266Z",
      "effectiveSlaDomainId": "$effectiveSlaDomainId",
      "effectiveSlaDomainName": "$effectiveSlaDomainName",
      "isEffectiveSlaDomainRetentionLocked": true,
      "effectiveSlaDomainPolarisManagedId": "$effectiveSlaDomainPolarisManagedId",
      "effectiveSlaSourceObjectId": "$effectiveSlaSourceObjectId",
      "effectiveSlaSourceObjectName": "$effectiveSlaSourceObjectName",
      "failoverClusterType": "Windows",
      "failoverClusterId": "$failoverClusterId",
      "failoverClusterAppSource": {
        "nodeOrders": [
          {
            "nodeId": "$nodeId",
            "nodeName": "$nodeName",
            "order": 0
          }
        ]
      },
      "connectionStatus": "Connected",
      "slaAssignment": "Derived",
      "operatingSystemType": "$operatingSystemType",
      "failoverClusterName": "$failoverClusterName"
    }
    ```

    ### Get all failover cluster apps
    Get a listing of all failover cluster apps using
    a GET request to
    [/failover_cluster/failover_cluster_app](#operation/queryFailoverClusterApp).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/failover_cluster/failover_cluster_app?sort_order=asc"
    ```

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "$id",
          "name": "$name",
          "configuredSlaDomainId": "$configuredSlaDomainId",
          "configuredSlaDomainName": "$configuredSlaDomainName",
          "configuredSlaDomainType": "ProtectionSla",
          "primaryClusterId": "$primaryClusterId",
          "isConfiguredSlaDomainRetentionLocked": false,
          "effectiveSlaDomainId": "$effectiveSlaDomainId",
          "effectiveSlaDomainName": "$effectiveSlaDomainName",
          "isEffectiveSlaDomainRetentionLocked": false,
          "effectiveSlaSourceObjectId": "$effectiveSlaSourceObjectId",
          "failoverClusterType": "UnixLike",
          "failoverClusterId": "$failoverClusterId",
          "failoverClusterAppSource": {
            "virtualIps": [
              "$virtualIp"
            ]
          },
          "connectionStatus": "Connected",
          "slaAssignment": "$slaAssignment",
          "operatingSystemType": "Linux",
          "failoverClusterName": "$failoverClusterName"
        }
      ],
      "total": 1
    }
    ```


    ### Get information about a specific failover cluster app
    Get information about a specific failover cluster app using
    a GET request to
    [/failover_cluster/failover_cluster_app/{id}](#operation/getFailoverClusterApp).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/failover_cluster/failover_cluster_app/$failover_cluster_app_id"
    ```

    ```bash
    {
      "id": "$id",
      "name": "$name",
      "configuredSlaDomainId": "$configuredSlaDomainId",
      "configuredSlaDomainName": "$configuredSlaDomainName",
      "configuredSlaDomainType": "ProtectionSla",
      "primaryClusterId": "$primaryClusterId",
      "isConfiguredSlaDomainRetentionLocked": true,
      "slaLastUpdateTime": "2020-04-21T18:00:46.694Z",
      "effectiveSlaDomainId": "$effectiveSlaDomainId",
      "effectiveSlaDomainName": "$effectiveSlaDomainName",
      "isEffectiveSlaDomainRetentionLocked": true,
      "effectiveSlaDomainPolarisManagedId": "$effectiveSlaDomainPolarisManagedId",
      "effectiveSlaSourceObjectId": "$effectiveSlaSourceObjectId",
      "effectiveSlaSourceObjectName": "$effectiveSlaSourceObjectName",
      "failoverClusterType": "Windows",
      "failoverClusterId": "$failoverClusterId",
      "failoverClusterAppSource": {
        "virtualIps": [
          "$virtualIp"
        ],
      },
      "connectionStatus": "Connected",
      "slaAssignment": "Derived",
      "operatingSystemType": "$operatingSystemType",
      "failoverClusterName": "$failoverClusterName",
      "filesets": [
        {
          "configuredSlaDomainId": "$configuredSlaDomainId",
          "forceFull": true,
          "forceFullPartitionIds": [
            0
          ],
          "allowBackupNetworkMounts": true,
          "allowBackupHiddenFoldersInNetworkMounts": true,
          "useWindowsVss": true,
          "id": "$id",
          "name": "$name",
          "configuredSlaDomainName": "$configuredSlaDomainName",
          "configuredSlaDomainType": "ProtectionSla",
          "primaryClusterId": "$primaryClusterId",
          "isConfiguredSlaDomainRetentionLocked": true,
          "slaLastUpdateTime": "2020-04-21T18:00:46.694Z",
          "hostName": "$hostName",
          "templateId": "$templateId",
          "templateName": "$templateName",
          "operatingSystemType": "$operatingSystemType",
          "effectiveSlaDomainId": "$effectiveSlaDomainId",
          "isEffectiveSlaDomainRetentionLocked": true,
          "effectiveSlaDomainName": "$effectiveSlaDomainName",
          "effectiveSlaDomainPolarisManagedId": "$effectiveSlaDomainPolarisManagedId",
          "includes": [
            "$includes"
          ],
          "excludes": [
            "$excludes"
          ],
          "exceptions": [
            "$exceptions"
          ],
          "isRelic": true,
          "isPassthrough": true,
          "enableSymlinkResolution": true,
          "enableHardlinkSupport": true,
          "failoverClusterAppId": "$failoverClusterAppId",
          "failoverClusterAppName": "$failoverClusterAppName",
          "pendingSlaDomain": {
            "objectId": "$objectId",
            "pendingSlaDomainId": "$pendingSlaDomainId",
            "pendingSlaDomainName": "$pendingSlaDomainName",
            "isPendingSlaDomainRetentionLocked": true
          },
          "protectionDate": "2020-04-21T18:00:46.694Z",
          "snapshotCount": 0,
          "archivedSnapshotCount": 0,
          "snapshots": [
            {
              "id": "$id",
              "date": "2020-04-21T18:00:46.694Z",
              "expirationDate": "2020-04-21T18:00:46.694Z",
              "sourceObjectType": "$sourceObjectType",
              "isOnDemandSnapshot": true,
              "isCustomRetentionApplied": true,
              "cloudState": 0,
              "consistencyLevel": "$consistencyLevel",
              "indexState": 0,
              "replicationLocationIds": [
                "$replicationLocationIds"
              ],
              "archivalLocationIds": [
                "$archivalLocationIds"
              ],
              "slaId": "$slaId",
              "slaName": "$slaName",
              "isRetainedByRetentionLockSla": true,
              "cloudStorageTier": "Hot",
              "isPlacedOnLegalHold": true,
              "snapshotRetentionInfo": {
                "localInfo": {
                  "id": "$id",
                  "name": "$name",
                  "isSnapshotPresent": true,
                  "isExpirationDateCalculated": true,
                  "expirationTime": "2020-04-21T18:00:46.694Z",
                  "snapshotFrequency": "$snapshotFrequency",
                  "isExpirationInformationUnavailable": true
                },
                "archivalInfos": [
                  {
                    "id": "$id",
                    "name": "$name",
                    "isSnapshotPresent": true,
                    "isExpirationDateCalculated": true,
                    "expirationTime": "2020-04-21T18:00:46.694Z",
                    "snapshotFrequency": "$snapshotFrequency",
                    "isExpirationInformationUnavailable": true
                  }
                ],
                "replicationInfos": [
                  {
                    "id": "$id",
                    "name": "$name",
                    "isSnapshotPresent": true,
                    "isExpirationDateCalculated": true,
                    "expirationTime": "2020-04-21T18:00:46.694Z",
                    "snapshotFrequency": "$snapshotFrequency",
                    "isExpirationInformationUnavailable": true
                  }
                ],
                "cloudNativeLocationInfo": [
                  {
                    "id": "$id",
                    "name": "$name",
                    "isSnapshotPresent": true,
                    "isExpirationDateCalculated": true,
                    "expirationTime": "2020-04-21T18:00:46.694Z",
                    "snapshotFrequency": "$snapshotFrequency",
                    "isExpirationInformationUnavailable": true
                  }
                ]
              },
              "filesetName": "$filesetName",
              "fileCount": 0,
              "snapdiffUsed": true
            }
          ],
          "localStorage": 0,
          "archiveStorage": 0,
          "preBackupScript": "$preBackupScript",
          "postBackupScript": "$postBackupScript",
          "backupScriptTimeout": 0,
          "backupScriptErrorHandling": "$backupScriptErrorHandling"
        }
      ]
    }
    ```

    ### Update the parameters of an existing failover cluster app
    The parameters associated with the failover cluster app can be updated by
    making a PATCH request to
    [/failover_cluster/failover_cluster_app/{id}](#operation/updateFailoverClusterApp)

    Use either the virtualIps or nodeOrders options in the failoverClusterAppSource request parameter to update a failover cluster app.

    ```bash
    curl -X PATCH \
      -d '{
        "name": "$name",
        "failoverClusterType": "Windows",
        "failoverClusterId": "$failoverClusterId",
        "failoverClusterAppSource": {
          "virtualIps": [
            "$virtualIp"
          ],
          "nodeOrders": [
            {
              "nodeId": "$nodeId",
              "nodeName": "$nodeName",
              "order": 0
            }
          ]
        },
        "configuredSlaDomainId": "string"}'\
      "https://$cluster_address/api/v1/failover_cluster/failover_cluster_app/$failover_cluster_app_id"
    ```

    Response when a failover cluster app is updated using the virtualIps option in the failoverClusterAppSource request parameter.

    ```bash
    {
      "id": "$id",
      "name": "$name",
      "configuredSlaDomainId": "$configuredSlaDomainId",
      "configuredSlaDomainName": "$configuredSlaDomainName",
      "configuredSlaDomainType": "ProtectionSla",
      "primaryClusterId": "$primaryClusterId",
      "isConfiguredSlaDomainRetentionLocked": true,
      "slaLastUpdateTime": "2020-04-21T18:24:20.126Z",
      "effectiveSlaDomainId": "$effectiveSlaDomainId",
      "effectiveSlaDomainName": "$effectiveSlaDomainName",
      "isEffectiveSlaDomainRetentionLocked": true,
      "effectiveSlaDomainPolarisManagedId": "$effectiveSlaDomainPolarisManagedId",
      "effectiveSlaSourceObjectId": "$effectiveSlaSourceObjectId",
      "effectiveSlaSourceObjectName": "$effectiveSlaSourceObjectName",
      "failoverClusterType": "Windows",
      "failoverClusterId": "$failoverClusterId",
      "failoverClusterAppSource": {
        "virtualIps": [
          "$virtualIp"
        ],
      },
      "connectionStatus": "Connected",
      "slaAssignment": "Derived",
      "operatingSystemType": "$operatingSystemType",
      "failoverClusterName": "$failoverClusterName"
    }
    ```

    Response when a failover cluster app is updated using the nodeOrders option in the failoverClusterAppSource request parameter.

    ```bash
    {
      "id": "$id",
      "name": "$name",
      "configuredSlaDomainId": "$configuredSlaDomainId",
      "configuredSlaDomainName": "$configuredSlaDomainName",
      "configuredSlaDomainType": "ProtectionSla",
      "primaryClusterId": "$primaryClusterId",
      "isConfiguredSlaDomainRetentionLocked": true,
      "slaLastUpdateTime": "2020-04-21T18:24:20.126Z",
      "effectiveSlaDomainId": "$effectiveSlaDomainId",
      "effectiveSlaDomainName": "$effectiveSlaDomainName",
      "isEffectiveSlaDomainRetentionLocked": true,
      "effectiveSlaDomainPolarisManagedId": "$effectiveSlaDomainPolarisManagedId",
      "effectiveSlaSourceObjectId": "$effectiveSlaSourceObjectId",
      "effectiveSlaSourceObjectName": "$effectiveSlaSourceObjectName",
      "failoverClusterType": "Windows",
      "failoverClusterId": "$failoverClusterId",
      "failoverClusterAppSource": {
        "nodeOrders": [
          {
            "nodeId": "$nodeId",
            "nodeName": "$nodeName",
            "order": 0
          }
        ]
      },
      "connectionStatus": "Connected",
      "slaAssignment": "Derived",
      "operatingSystemType": "$operatingSystemType",
      "failoverClusterName": "$failoverClusterName"
    }
    ```

    ### Delete a specific failover cluster app
    Remove any failover cluster app by issuing a DELETE request to
    [/failover_cluster/failover_cluster_app/{id}](#operation/deleteFailoverClusterApp).

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/failover_cluster/failover_cluster_app/$failover_cluster_app_id?preserve_snapshots=false"
    ```

    ### Bulk delete a failover cluster apps
    Specify a list of failover cluster applications to remove by issuing a DELETE
    request to [/failover_cluster/failover_cluster_app//bulk](#operation/bulkDeleteFailoverClusterApp).

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/failover_cluster/failover_cluster_app/bulk?ids=$failover_cluster_app_id1,$failover_cluster_app_id2&preserve_snapshots=false"
    ```

    # Failover cluster hierarchy

    This REST API is used to get failover cluster hierarchy objects.

    ### Get summary of a hierarchy object
    Get a summary of a hierarchy object by making a GET call to
    [/failover_cluster/hierarchy/{id}](#operation/getFailoverClusterHierarchyObject).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/failover_cluster/hierarchy/$failover_cluster_app_id"
    ```

    ```bash
    {
      "id": "$id",
      "name": "$name",
      "configuredSlaDomainId": "$configuredSlaDomainId",
      "configuredSlaDomainName": "$configuredSlaDomainName",
      "configuredSlaDomainType": "ProtectionSla",
      "primaryClusterId": "$primaryClusterId",
      "isConfiguredSlaDomainRetentionLocked": false,
      "effectiveSlaDomainId": "$effectiveSlaDomainId",
      "effectiveSlaDomainName": "$effectiveSlaDomainName",
      "isEffectiveSlaDomainRetentionLocked": false,
      "effectiveSlaSourceObjectId": "Global:::All",
      "objectType": "FailoverClusterApp",
      "descendentCount": {
        "failoverCluster": 0,
        "failoverClusterApp": 0,
        "fileset": 1
      },
      "isDeleted": false,
      "numNodes": 0,
      "failoverClusterType": "UnixLike",
      "failoverClusterAppConnectionStatus": "Connected",
      "failoverClusterAppName": "$failoverClusterAppName",
      "failoverClusterAppSource": {
        "virtualIps": [
          "$virtualIp"
        ]
      },
      "slaAssignment": "$slaAssignment",
      "filesets": [
        {
          "allowBackupNetworkMounts": false,
          "allowBackupHiddenFoldersInNetworkMounts": false,
          "useWindowsVss": false,
          "id": "$id",
          "name": "$name",
          "configuredSlaDomainId": "$configuredSlaDomainId",
          "configuredSlaDomainName": "$configuredSlaDomainName",
          "configuredSlaDomainType": "ProtectionSla",
          "primaryClusterId": "$primaryClusterId",
          "isConfiguredSlaDomainRetentionLocked": false,
          "hostName": "$hostName",
          "templateId": "$templateId",
          "templateName": "$templateName",
          "operatingSystemType": "UnixLike",
          "effectiveSlaDomainId": "$effectiveSlaDomainId",
          "isEffectiveSlaDomainRetentionLocked": false,
          "includes": [
            "$includes"
          ],
          "excludes": [],
          "exceptions": [],
          "isRelic": false,
          "isPassthrough": false,
          "enableSymlinkResolution": false,
          "enableHardlinkSupport": false,
          "failoverClusterAppId": "$failoverClusterAppId",
          "failoverClusterAppName": "$failoverClusterAppName"
        }
      ]
    }
    ```

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/failover_cluster/hierarchy/$failover_cluster_id"
    ```

    ```bash
    {
      "id": "$id",
      "name": "$name",
      "configuredSlaDomainId": "$configuredSlaDomainId",
      "configuredSlaDomainName": "$configuredSlaDomainName",
      "configuredSlaDomainType": "ProtectionSla",
      "primaryClusterId": "$primaryClusterId",
      "isConfiguredSlaDomainRetentionLocked": false,
      "effectiveSlaDomainId": "$effectiveSlaDomainId",
      "effectiveSlaDomainName": "$effectiveSlaDomainName",
      "isEffectiveSlaDomainRetentionLocked": false,
      "effectiveSlaSourceObjectId": "Global:::All",
      "objectType": "HostFailoverCluster",
      "descendentCount": {
        "failoverCluster": 0,
        "failoverClusterApp": 1,
        "fileset": 1
      },
      "isDeleted": false,
      "numNodes": 2,
      "nodes": [
        {
          "id": "$id",
          "name": "$name",
          "connectionStatus": "Connected",
          "operatingSystem": "$operatingSystem"
        },
        {
          "id": "$id",
          "name": "$name",
          "connectionStatus": "Connected",
          "operatingSystem": "$operatingSystem"
        }
      ],
      "failoverClusterConnectionStatus": "Connected",
      "failoverClusterName": "$failoverClusterName",
      "numFailoverClusterApps": 1,
      "slaAssignment": "$slaAssignment",
      "operatingSystemType": "$operatingSystemType"
    }
    ```

    ### Get list of immediate descendant objects
    Get a list of immediate descendant objects using a GET request to
    [/failover_cluster/hierarchy/{id}/children](#operation/getFailoverClusterHierarchyChildren).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/failover_cluster/hierarchy/root/children"
    ```

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "$id",
          "name": "$name",
          "configuredSlaDomainId": "$configuredSlaDomainId",
          "configuredSlaDomainName": "$configuredSlaDomainName",
          "configuredSlaDomainType": "ProtectionSla",
          "primaryClusterId": "$primaryClusterId",
          "isConfiguredSlaDomainRetentionLocked": false,
          "effectiveSlaDomainId": "$effectiveSlaDomainId",
          "effectiveSlaDomainName": "$effectiveSlaDomainName",
          "isEffectiveSlaDomainRetentionLocked": false,
          "effectiveSlaSourceObjectId": "Global:::All",
          "objectType": "HostFailoverCluster",
          "descendentCount": {
            "failoverCluster": 0,
            "failoverClusterApp": 1,
            "fileset": 1
          },
          "isDeleted": false,
          "numNodes": 2,
          "nodes": [
            {
              "id": "$id",
              "name": "$name",
              "connectionStatus": "Connected",
              "operatingSystem": "$operatingSystem"
            },
            {
              "id": "$id",
              "name": "$name",
              "connectionStatus": "Connected",
              "operatingSystem": "$operatingSystem"
            }
          ],
          "failoverClusterConnectionStatus": "Connected",
          "failoverClusterName": "$failoverClusterName",
          "numFailoverClusterApps": $numFailoverClusterApps,
          "slaAssignment": "$slaAssignment",
          "operatingSystemType": "$operatingSystemType"
        }
      ],
      "total": 1
    }
    ```

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/failover_cluster/hierarchy/$failover_cluster_id/children"
    ```

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "$id",
          "name": "$name",
          "configuredSlaDomainId": "$configuredSlaDomainId",
          "configuredSlaDomainName": "$configuredSlaDomainName",
          "configuredSlaDomainType": "ProtectionSla",
          "primaryClusterId": "$primaryClusterId",
          "isConfiguredSlaDomainRetentionLocked": false,
          "effectiveSlaDomainId": "$effectiveSlaDomainId",
          "effectiveSlaDomainName": "$effectiveSlaDomainName",
          "isEffectiveSlaDomainRetentionLocked": false,
          "effectiveSlaSourceObjectId": "Global:::All",
          "objectType": "FailoverClusterApp",
          "descendentCount": {
            "failoverCluster": 0,
            "failoverClusterApp": 0,
            "fileset": 1
          },
          "isDeleted": false,
          "numNodes": 0,
          "failoverClusterType": "UnixLike",
          "failoverClusterAppConnectionStatus": "Connected",
          "failoverClusterAppName": "$failoverClusterAppName",
          "failoverClusterAppSource": {
            "virtualIps": [
              "$virtualIp"
            ]
          },
          "slaAssignment": "$slaAssignment",
          "filesets": [
            {
              "allowBackupNetworkMounts": false,
              "allowBackupHiddenFoldersInNetworkMounts": false,
              "useWindowsVss": false,
              "id": "$id",
              "name": "$name",
              "configuredSlaDomainId": "$configuredSlaDomainId",
              "configuredSlaDomainName": "$configuredSlaDomainName",
              "configuredSlaDomainType": "ProtectionSla",
              "primaryClusterId": "$primaryClusterId",
              "isConfiguredSlaDomainRetentionLocked": false,
              "hostName": "$hostName",
              "templateId": "$templateId",
              "templateName": "$templateName",
              "operatingSystemType": "UnixLike",
              "effectiveSlaDomainId": "$effectiveSlaDomainId",
              "isEffectiveSlaDomainRetentionLocked": false,
              "includes": [
                "$includes"
              ],
              "excludes": [],
              "exceptions": [],
              "isRelic": false,
              "isPassthrough": false,
              "enableSymlinkResolution": false,
              "enableHardlinkSupport": false,
              "failoverClusterAppId": "$failoverClusterAppId",
              "failoverClusterAppName": "$failoverClusterAppName"
            }
          ]
        }
      ],
      "total": 1
    }
    ```

    ### Get list of descendant objects
    Get a list of descendant objects using
    a GET request to
    [/failover_cluster/hierarchy/{id}/descendants](#operation/getFailoverClusterHierarchyDescendants).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/failover_cluster/hierarchy/$failover_cluster_id/descendants"
    ```

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "$id",
          "name": "$name",
          "configuredSlaDomainId": "$configuredSlaDomainId",
          "configuredSlaDomainName": "$configuredSlaDomainName",
          "configuredSlaDomainType": "ProtectionSla",
          "primaryClusterId": "$primaryClusterId",
          "isConfiguredSlaDomainRetentionLocked": false,
          "effectiveSlaDomainId": "$effectiveSlaDomainId",
          "effectiveSlaDomainName": "$effectiveSlaDomainName",
          "isEffectiveSlaDomainRetentionLocked": false,
          "effectiveSlaSourceObjectId": "Global:::All",
          "objectType": "FailoverClusterApp",
          "descendentCount": {
            "failoverCluster": 0,
            "failoverClusterApp": 0,
            "fileset": 1
          },
          "isDeleted": false,
          "numNodes": 0,
          "failoverClusterType": "UnixLike",
          "failoverClusterAppConnectionStatus": "Connected",
          "failoverClusterAppName": "$failoverClusterAppName",
          "failoverClusterAppSource": {
            "virtualIps": [
              "$virtualIp"
            ]
          },
          "slaAssignment": "$slaAssignment",
          "filesets": [
            {
              "allowBackupNetworkMounts": false,
              "allowBackupHiddenFoldersInNetworkMounts": false,
              "useWindowsVss": false,
              "id": "$id",
              "name": "$name",
              "configuredSlaDomainId": "$configuredSlaDomainId",
              "configuredSlaDomainName": "$configuredSlaDomainName",
              "configuredSlaDomainType": "ProtectionSla",
              "primaryClusterId": "$primaryClusterId",
              "isConfiguredSlaDomainRetentionLocked": false,
              "hostName": "$hostName",
              "templateId": "$templateId",
              "templateName": "$templateName",
              "operatingSystemType": "UnixLike",
              "effectiveSlaDomainId": "$effectiveSlaDomainId",
              "isEffectiveSlaDomainRetentionLocked": false,
              "includes": [
                "$includes"
              ],
              "excludes": [],
              "exceptions": [],
              "isRelic": false,
              "isPassthrough": false,
              "enableSymlinkResolution": false,
              "enableHardlinkSupport": false,
              "failoverClusterAppId": "$failoverClusterAppId",
              "failoverClusterAppName": "$failoverClusterAppName"
            }
          ]
        },
        {
          "id": "$id",
          "name": "$name",
          "configuredSlaDomainId": "$configuredSlaDomainId",
          "configuredSlaDomainName": "$configuredSlaDomainName",
          "configuredSlaDomainType": "ProtectionSla",
          "primaryClusterId": "$primaryClusterId",
          "isConfiguredSlaDomainRetentionLocked": false,
          "effectiveSlaDomainId": "$effectiveSlaDomainId",
          "effectiveSlaDomainName": "$effectiveSlaDomainName",
          "isEffectiveSlaDomainRetentionLocked": false,
          "effectiveSlaSourceObjectId": "$effectiveSlaSourceObjectId",
          "effectiveSlaSourceObjectName": "$effectiveSlaSourceObjectName",
          "objectType": "Fileset",
          "descendentCount": {
            "failoverCluster": 0,
            "failoverClusterApp": 0,
            "fileset": 0
          },
          "isDeleted": false,
          "numNodes": 0,
          "slaAssignment": "$slaAssignment"
        }
      ],
      "total": 2
    }
    ```

    # Filesets

    A fileset defines a set of files and folders on a Linux, Unix, or
    Windows host, or on NAS shares. The Rubrik cluster uses the filesets
    that are specified for a host or a NAS share to determine the data to
    protect on that host or share.

    The Rubrik cluster interprets a fileset based on the values provided in
    the Include, Exclude, and Do Not Exclude arrays of the fileset template
    that the fileset is based on. The Rubrik cluster uses the values of the
    arrays to determine the files and folders in a fileset. The Do Not
    Exclude array specifies objects that should not be excluded from the
    fileset by the values in the Exclude array.

    ## Fileset workflow
    To protect data through filesets perform the following tasks:
    1. Obtain and install the Rubrik Backup Service software on the host.
    The *Rubrik CDM User Guide* describes this task.
    2. Add the host to the Rubrik cluster.
    The [Hosts](#section/Hosts) section describes this task.
    3. Create a fileset template that defines a set of file system data to
    protect.
    The [Fileset templates](#fileset-templates) section describes this task.
    4. Use a fileset template to assign a fileset to a host.
    5. Assign the host fileset to an SLA Domain.

    ## Fileset templates
    A fileset template encompasses a set of file system metadata that is
    needed to define filesets. The metadata includes the file system
    paths on the host that need protection or paths that do not need
    protection.
    The metadata varies with the type of the host or the NAS share to
    which the template applies.

    ### Retrieving fileset templates
    To retrieve the current list of fileset templates, send a GET request to the
    [`/fileset_template`](#operation/queryFilesetTemplate) endpoint.

    ```bash
    curl -X GET \
    "https://$cluster_address/api/v1/fileset_template"
    ```

    The Rubrik REST API server responds with a ListResponse object containing the
    first page of the current list of fileset templates.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "allowBackupNetworkMounts": false,
          "allowBackupHiddenFoldersInNetworkMounts": false,
          "useWindowsVss": false,
          "name": "$fileset_name",
          "includes": [
            "/users"
          ],
          "excludes": [],
          "exceptions": [],
          "operatingSystemType": "$os_type1",
          "isArrayEnabled": true,
          "id": "$fileset_template_id0",
          "primaryClusterId": "$cluster_id",
          "isArchived": false,
          "hostCount": 0,
          "shareCount": 0
        }
       ],
       "total": 1
     }
    ```

    To retrieve the details of a specific fileset template, send a GET request
    to the [`fileset_template/{id}`](#operation/getFilesetTemplate) endpoint.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/fileset_template/$fileset_template_id0"
    ```

    The Rubrik REST API server responds with the details of the fileset template
    identified by the value of the `{id}` path parameter.

    ### Creating a fileset template
    Create a fileset template to simplify creating identical filesets for
    multiple hosts.

    Operations for a fileset object are described in the
    [Fileset](#fileset) section.

    To create a fileset-template, send a POST request to
    [`/fileset_template`](#operation/createFilesetTemplate) with the
    required details: `name`, `includes`, and `operatingSystemType`
    or `shareType`.

    ```bash
    curl -X POST \
      -d '{
        "name": "Users",
        "includes": ["C:\\Users"],
        "operatingSystemType": "$os_type1"
        }' \
      "https://$cluster_address/api/v1/fileset_template"
    ```
    To create a fileset template for a specific type of NAS share, replace
    `operatingSystemType` with `shareType` in the above payload.
    For example, `"shareType":"NFS"`.

    The Rubrik REST API server responds with the new fileset template object.

    ```bash
    {
      "allowBackupNetworkMounts": true,
      "allowBackupHiddenFoldersInNetworkMounts": true,
      "useWindowsVss": true,
      "name": "Users",
      "includes": [
        "C:\\users"
      ],
      "excludes": [],
      "exceptions": [],
      "operatingSystemType": "$os_type1",
      "isArrayEnabled": false,
      "id": "$fileset_template_id1",
      "primaryClusterId": "$cluster_id",
      "isArchived": false,
      "hostCount": 0,
      "shareCount": 0
    }
    ```

    ### Updating a fileset template
    To modify the values of a specific fileset template, send a PATCH request
    to the [`/fileset_template/{id}`](#operation/updateFilesetTemplate)
    endpoint.

    ```bash
    curl -X PATCH \
      -d '{
            "id": "$fileset_template_id0",
            "allowBackupNetworkMounts": true
         }' \
      "https://$cluster_address/api/v1/fileset_template/$fileset_template_id0"
    ```

    The Rubrik REST API server responds with the details of the updated
    fileset template.

    ```bash
    {
          "allowBackupNetworkMounts": true,
          "allowBackupHiddenFoldersInNetworkMounts": false,
          "useWindowsVss": false,
          "name": "$fileset_name",
          "includes": [
            "/users"
          ],
          "excludes": [],
          "exceptions": [],
          "operatingSystemType": "$os_type2",
          "isArrayEnabled": true,
          "id": "$fileset_template_id0",
          "primaryClusterId": "$cluster_id",
          "isArchived": false,
          "hostCount": 0,
          "shareCount": 0
        }
    ```

    ### Deleting a fileset template
    To delete a specific fileset template and all the associated filesets,
    send a DELETE request to the
    [`/fileset_template/{id}`](#operation/deleteFilesetTemplate) endpoint.

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/fileset_template/$fileset_template_id0"
    ```

    ## Fileset
    A fileset is an instance of the fileset template that is assigned to a
    specific host.

    ### Retrieving filesets
    To retrieve the current list of filesets, send a GET request to the
    [`/fileset`](#operation/queryFileset) endpoint.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/fileset"
    ```
    The Rubrik REST API server responds with a ListResponse object
    containing the first page of the current list of filesets.

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "allowBackupNetworkMounts": true,
          "allowBackupHiddenFoldersInNetworkMounts": true,
          "useWindowsVss": true,
          "id": "string",
          "name": "string",
          "configuredSlaDomainId": "string",
          "configuredSlaDomainName": "string",
          "configuredSlaDomainType": "ProtectionSla",
          "primaryClusterId": "string",
          "isConfiguredSlaDomainRetentionLocked": true,
          "slaLastUpdateTime": "2021-03-03T18:42:24.766Z",
          "hostId": "string",
          "shareId": "string",
          "hostName": "string",
          "templateId": "string",
          "templateName": "string",
          "operatingSystemType": "string",
          "effectiveSlaDomainId": "string",
          "isEffectiveSlaDomainRetentionLocked": true,
          "effectiveSlaDomainName": "string",
          "effectiveSlaDomainPolarisManagedId": "string",
          "includes": [
            "string"
          ],
          "excludes": [
            "string"
          ],
          "exceptions": [
            "string"
          ],
          "isRelic": true,
          "arraySpec": {
            "proxyHostId": "string"
          },
          "isPassthrough": true,
          "enableSymlinkResolution": true,
          "enableHardlinkSupport": true,
          "failoverClusterAppId": "string",
          "failoverClusterAppName": "string",
          "pendingSlaDomain": {
            "objectId": "string",
            "pendingSlaDomainId": "string",
            "pendingSlaDomainName": "string",
            "isPendingSlaDomainRetentionLocked": true
          },
          "snapMirrorLabelForFullBackup": "string",
          "snapMirrorLabelForIncrementalBackup": "string"
        }
      ],
      "total": 0
    }
    ```

    To retrieve the details of a specific fileset, send a GET request to the
    [`/fileset/{id}`](#operation/getFileset) endpoint.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/fileset/$fileset_id"
    ```

    The Rubrik REST API server responds with the details of the fileset
    identified by the value of the {id} path parameter.

    ### Creating a fileset
    To create a fileset, send a POST request to [`/fileset`](#operation/createFileset) with the required details: the `hostId` or `shareId`, and
    the `templateId`.
    See [Retrieving fileset templates](#retrieving-fileset-templates) for
    information on obtaining a template ID, to create a fileset.

    ```bash
    curl -X POST \
      -d '{
        "templateId": "$fileset_template_id",
        "hostId": "$host_id" }' \
      "https://$cluster_address/api/v1/fileset"
    ```
    To create a fileset for a NAS share, replace `hostId` with `shareId` in
    the above payload.
    For example, `"shareId": "$share_id"`.

    The Rubrik REST API server responds with the new fileset object.

    ```bash
    {
      "configuredSlaDomainId": "UNPROTECTED",
      "forceFull": false,
      "forceFullPartitionIds": [],
      "allowBackupNetworkMounts": true,
      "allowBackupHiddenFoldersInNetworkMounts": false,
      "useWindowsVss": false,
      "id": "$fileset_id",
      "name": "$fileset_name",
      "configuredSlaDomainName": "Unprotected",
      "configuredSlaDomainType": "ProtectionSla",
      "primaryClusterId": "$cluster_id",
      "isConfiguredSlaDomainRetentionLocked": false,
      "hostId": "$host_id",
      "hostName": "$hostname",
      "templateId": "$fileset_template_id",
      "templateName": "$fileset_template_name",
      "operatingSystemType": "UnixLike",
      "effectiveSlaDomainId": "UNPROTECTED",
      "isEffectiveSlaDomainRetentionLocked": false,
      "effectiveSlaDomainName": "Unprotected",
      "includes": [
        "$location_to_protect"
      ],
      "excludes": [],
      "exceptions": [],
      "isRelic": false,
      "isPassthrough": false,
      "enableSymlinkResolution": false,
      "enableHardlinkSupport": false,
      "snapshotCount": 0,
      "archivedSnapshotCount": 0,
      "snapshots": []
    }
    ```
    ### Updating a fileset
    To update the values of a specific fileset, send a PATCH request to the
    [`/fileset/{id}`](#operation/updateFileset) endpoint. The request
    payload includes the properties to be updated.

    ```bash
    curl -X PATCH \
      -d '{
               "configuredSlaDomainId": "string",
               "forceFull": true,
               "forceFullPartitionIds": [
                           0
                ],
                "snapMirrorLabelForFullBackup": "string",
                "snapMirrorLabelForIncrementalBackup": "string"
           }' \
      "https://$cluster_address/api/v1/fileset/$fileset_id"
    ```

    The Rubrik REST API server responds with the details of the updated
    fileset.

    ### Deleting a fileset
    To delete a specific fileset, send a DELETE request to the
    [`/fileset/{id}`](#operation/deleteFileset) endpoint. 
    By default, the Rubrik cluster preserves the snapshots of the fileset to
    be deleted.

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/fileset/$fileset_id"
    ```
    To delete the snapshots of the fileset along with the fileset, set the
    `preserve_snapshots` query parameter to `false` in the DELETE
    request.

    ```bash
    curl -X DELETE \
    "https://$cluster_address/api/v1/fileset/$fileset_id?preserve_snapshots=false"
    ```
    The Rubrik REST API server deletes the specified fileset and the
    snapshots associated with the fileset.

    ## On-demand backups of host filesets
    ### Creating on-demand snapshot
    To initiate an on-demand snapshot of a fileset, send a POST request to
    the [`/fileset/{id}/snapshot`](#operation/createFilesetBackupJob)
    endpoint.

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/fileset/$fileset_id/snapshot"
    ```

    The Rubrik REST API responds with the ID for the on-demand snapshot
    request along with other details about the request, like the status and
    the time at which the request was received.

    ```bash
    {
      "id": "$request_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "2021-03-04T20:07:55.169Z",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/fileset/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```
    ### Retrieving snapshot ID
    To retrieve the snapshot ID, retrieve the status of the on-demand
    snapshot request by sending a GET request to the
    [`/fileset/request/{id}`](#operation/getFilesetAsyncRequestStatus)
    endpoint.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/fileset/request/$request_id"
    ```

    The Rubrik REST API server responds with the status of the on-demand
    snapshot request. If the snapshot has completed successfully, the
    response includes the ID for the snapshot in the reference link to the
    snapshot.

    ```bash
    {
      "id": "$request_id",
      "status": "SUCCEEDED",
      "startTime": "2021-03-04T20:07:55.169Z",
      "endTime": "2021-03-04T20:12:54.792Z",
      "nodeId": "$node_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/fileset/$snapshot_id/snapshot",
          "rel": "result"
        },
        {
          "href": "https://$cluster_address/api/v1/fileset/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    ### Retrieving snapshot details
    To retrieve information about a specific snapshot, send a GET request to
    the [`/fileset/snapshot/{id}`](#operation/getFilesetSnapshot) endpoint.
    By default, the flag to return verbose information about the fileset is set to `false`. Change the value of the `verbose` flag to `true` to get
    detailed information about the fileset.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/fileset/snapshot/$snapshot_id?verbose=false"
    ```
    The Rubrik REST API responds with the details of the specified fileset snapshot.

    ```bash
    {
      "id": "$snapshot_id",
      "date": "2021-03-04T20:08:00.000Z",
      "sourceObjectType": "Fileset",
      "isOnDemandSnapshot": true,
      "isCustomRetentionApplied": false,
      "cloudState": 0,
      "indexState": 1,
      "replicationLocationIds": [],
      "archivalLocationIds": [],
      "slaId": "UNPROTECTED",
      "slaName": "Unprotected",
      "isRetainedByRetentionLockSla": false,
      "isPlacedOnLegalHold": false,
      "snapshotRetentionInfo": {
        "localInfo": {
          "id": "$cluster_id",
          "name": "LOCAL",
          "isSnapshotPresent": true,
          "isExpirationDateCalculated": true,
          "snapshotFrequency": "Forever"
        },
        "archivalInfos": [],
        "replicationInfos": [],
        "cloudNativeLocationInfo": []
      },
      "filesetName": "$fileset_name",
      "fileCount": 10,
      "lastModified": "2021-02-24T14:13:33+0000",
      "size": 23572
    }
    ```

    ### Deleting fileset snapshots
    To delete a specific fileset snapshot, send a DELETE request to the
    [`/fileset/snapshot/{id}`](#operation/deleteFilesetSnapshot) endpoint,
    where `{id}` is the ID of the snapshot.

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/fileset/snapshot/$snapshot_id"
    ```
    The Rubrik REST API deletes the specified fileset snapshot.

    To delete all the snapshots of a specific fileset, send a DELETE request
    to the [`/fileset/{id}/snapshot`](#operation/deleteFilesetSnapshots)
    endpoint, where `{id}` is the ID of the fileset.

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/fileset/$fileset_id/snapshot"
    ```
    The Rubrik REST API deletes all the snapshots of the specified fileset.

    ## SLA Domain protection of host filesets

    To assign an SLA to a fileset, send a PATCH request to the
    [`/fileset/{id}`](#operation/updateFileset) endpoint.

    ```bash
    curl -X PATCH \
      -d '{ 
        "configuredSlaDomainId": "$sla_domain_id" }' \
      "https://$cluster_address/api/v1/fileset/$fileset_id"
    ```
    The Rubrik REST API server responds with the details of the updated
    fileset.

    ```bash
    {
      "id": "$fileset_id",
      "excludes": [],
      "operatingSystemType": "Windows",
      "includes": [
        "C:\\Users"
      ],
      "hostId": "$host_id",
      "templateId": "$fileset_template_id",
      "configuredSlaDomainId": "$sla_domain_id"
    }
    ```

    ### Retrieving missed snapshots
    To retrieve the details of snapshots that were missed for a fileset,
    send a GET request to the [`/fileset/{id}/missed_snapshot`](#operation/getMissedFilesetSnapshots) endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/fileset/$fileset_id/missed_snapshot"
    ```
    The Rubrik REST API server responds with the details of snapshots
    that were missed, for the specified fileset.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "archivalLocationType": [
            "LOCAL"
          ],
          "missedSnapshotTime": "2021-03-04T07:59:59.999Z",
          "missedSnapshotTimeUnits": [
            {
              "timeUnit": "Daily",
              "frequency": 1,
              "retention": 2
            }
          ]
        }
      ],
      "total": 1
    }
    ```

    ## Search & Recovery
    ### Searching at fileset-level
    To search for specific file within a fileset, send a GET request to the
    [`/fileset/{id}/search`](#operation/searchFileset) endpoint. Specify
    a path prefix or a filename prefix in the `path` query parameter.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/fileset/$fileset_id/search?path=$path"
    ```

    The Rubrik REST API server responds with the details of the files that
    match the search query.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "path": "$path_to_file",
          "filename": "$filename",
          "fileVersions": [
            {
              "snapshotId": "$snapshot_id",
              "lastModified": "2014-07-17T02:02:54+0000",
              "size": 533120,
              "fileMode": "file",
              "source": "cloud"
            }
          ]
        }
      ],
      "total": 1
    }
    ```
    ### Searching at host-level
    To search for specific file at the host-level, send a GET request to the
    [`/host/{id}/search`](#operation/searchHost) endpoint. Specify
    a path prefix or a filename prefix in the `path` query parameter.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/host/$host_id/search?path=$path"
    ```

    The Rubrik REST API server responds with the details of the files that
    match the search query.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "path": "$path_to_file",
          "filename": "$filename",
          "fileVersions": [
            {
              "snapshotId": "$snapshot_id",
              "lastModified": "2014-07-17T02:02:54+0000",
              "size": 533120,
              "fileMode": "file",
              "source": "cloud"
            }
          ]
        }
      ],
      "total": 1
    }
    ```

    ### Browsing files in a snapshot
    To list all files and folders within a snapshot, send a GET request to the
    [`/fileset/snapshot/{id}/browse`](#operation/browseFilesetSnapshot)
    endpoint.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/fileset/snapshot/$snapshot_id/browse?path=$absolute_file_path"
    ```

    The Rubrik REST API server responds with the details of all the files
    and folders available at the specified path in the snapshot.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "filename": "$filename",
          "path": "$path_relative_to_absolute_file_path",
          "lastModified": "2016-12-01T23:26:59+0000",
          "size": 529024,
          "fileMode": "file",
          "statusMessage": ""
        }
      ],
      "total": 1
    }
    ```
    ### Download options
    There are two options for downloading the files of a fileset snapshot:
    download the entire snapshot or download specific files from the
    snapshot.

    To download the entire snapshot from an archival location, send a
    POST request to the
    [`/fileset/snapshot/{id}/download`](#operation/createDownloadFilesetSnapshotFromCloud) endpoint.


    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/fileset/snapshot/$snapshot_id/download"
    ```

    To download files from a specific location in a snapshot, send a POST
    request to the [`/fileset/snapshot/{id}/download_file`](#operation/createFilesetDownloadFileJob) endpoint.

    ```bash
    curl -X POST -d \
    '{
        "sourceDir": "$path_to_download_from"
     }' \
      "https://$cluster_address/api/v1/fileset/snapshot/$snapshot_id/download_file"
    ```

    The Rubrik REST API server initiates an async download job and returns
    a job instance ID.

    ```bash
    {
      "id": "$job_instance_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "2021-03-05T18:19:27.584Z",
      "links": [
        {
          "href": "https://$cluster_address//api/v1/fileset/request/$job_instance_id",
          "rel": "self"
        }
      ]
    }
    ```

    To retrieve the download location, send a GET request to the
    [`fileset/request/{id}`](#operation/getFilesetAsyncRequestStatus) endpoint where, `{id}` is the `$job_instance_id`.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/fileset/request/$job_instance_id"
    ```

    The Rubrik REST API server responds with the status of the download
    job. The response includes a download link when the job completes
    successfully.

    ```bash
    {
      "id": "$job_instance_id",
      "status": "SUCCEEDED",
      "startTime": "2021-03-05T18:01:43.755Z",
      "endTime": "2021-03-05T18:02:48.481Z",
      "nodeId": "$node_id",
      "links": [
        {
          "href": "$download_url",
          "rel": "result"
        },
        {
          "href": "https://$cluster_address/api/v1/fileset/request/$job_instance_id",
          "rel": "self"
        }
      ]
    }
    ```

    ### Recovery options
    To restore files from a fileset snapshot on to the source host, send a
    POST request to the [`/fileset/snapshot/{id}/restore_file`](#operation/createFilesetRestoreFileJob) endpoint.

    ```bash
    curl -X POST -d \
      '{
        "sourceDir": "$source_of_restore",
        "destinationDir": "$destination_of_restore"
      }' \
      "https://$cluster_address/api/v1/fileset/snapshot/$snapshot_id/restore_file"
    ```

    To restore files from a fileset snapshot on to a host other than the
    source host, send a POST request to the [`/fileset/snapshot/{id}/export_file`](#operation/createFilesetExportFileJob).

    ```bash
    curl -X POST -d \
      '{
        "sourceDir": "$source_of_restore",
        "destinationDir": "$destination_of_restore",
        "hostId": "$destination_host_id"
      }' \
      "https://$cluster_address/api/v1/fileset/snapshot/$snapshot_id/export_file"
    ```

    The Rubrik REST API server initiates an async restore job and returns
    a job instance ID.

    ```bash
    {
      "id": "$job_instance_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "2021-03-05T18:19:27.584Z",
      "links": [
        {
          "href": "https://$cluster_address//api/v1/fileset/request/$job_instance_id",
          "rel": "self"
        }
      ]
    }
    ```

    To check the progress of the request, send a GET request to the
    [`fileset/request/{id}`](#operation/getFilesetAsyncRequestStatus) endpoint where, `{id}` is the `$job_instance_id`.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/fileset/request/$job_instance_id"
    ```

    The Rubrik REST API server responds with the status of the restore
    job.

    ```bash
    {
      "id": "$job_instance_id",
      "status": "SUCCEEDED",
      "startTime": "2021-03-05T18:01:43.755Z",
      "endTime": "2021-03-05T18:02:48.481Z",
      "nodeId": "$node_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/fileset/request/$job_instance_id",
          "rel": "self"
        }
      ]
    }
    ```

    #  host hierarchy

    This REST API is used to get host/share hierarchy objects.

    ### Get summary of a hierarchy object
    Get a summary of a hierarchy object by making a GET call to
    [/host/hierarchy/{id}]\
    (#operation/getHostHierarchyObject).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/host/hierarchy/{id}"
    ```

    The Rubrik REST API server returns a host hierarchy object contains the ID,
    objectType, status, descendantCount, primaryClusterId, name, alias,
    operatingSystem, operatingSystemType shareType, vendorType, hostId, exportPoint,
    filesets and isSnapdiff.

    ### Get list of immediate descendant objects
    Get a list of immediate descendant objects using a GET request to
    [/host/hierarchy/{id}/children]\
    (#operation/getHostHierarchyChildren).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/host/hierarchy/{id}/children"
    ```

    The Rubrik REST API server returns a list of host hierarchy objects.

    # Directories

    A HDFS directory defines a set of files and folders on a HDFS cluster.  The Rubrik cluster uses the directorys that are assigned to a HDFS cluster to determine the data to protect on that cluster.

    The Rubrik cluster interprets a directory based on the values provided in the
    Include, Exclude, and Do Not Exclude arrays. The Rubrik cluster applies a
    set of rules to the values provided in these arrays and permits several
    types of values to be added to the arrays. The Do Not Exclude array specifies objects that should not be excluded from the directory by the values in the Exclude array.

    ## Directory workflow
    The basic workflow to follow when using directorys to protect data in host file systems is:
    1. Obtain and install the Rubrik Backup Service software on the HDFS cluster.
    The Rubrik user guide describes this task.
    2. Add the HDFS cluster to the Rubrik cluster.
    The [Hosts](#section/Hosts) section describes this task.
    3. Create a directory template that defines a set of file system data to protect.
    4. Use a directory template to assign a directory to a host.
    5. Assign the host directory to an SLA Domain.

    ## Directory templates

    First, create a directory template.
    A directory template can be used to create directory instances for various HDFS clusters.
    Performing a POST on [`/hdfs_template`](#operation/createHdfsTemplate)  with the necessary details will create a directory template.

    ```bash
    curl -X POST \
      -d '{
        "name": "Users",
        "includes": ["/Users"]}' \
      "https://$cluster_address/api/v1/hdfs_template"
    ```

    ```bash
    {
      "id": "$directory_template_id",
      "name": "Users",
      "excludes": [],
      "includes": [
        "/Users"
      ]
    }
    ```

    To get the details of a directory template, use GET on the [`/hdfs_template/{id}`](#operation/getHdfsTemplate) endpoint.

    ```bash
    curl -X GET \
      -d '{
        "id": "$directory_template_id" }' \
      "https://$cluster_address/api/v1/hdfs_template"
    ```

    ```bash
    {
      "id": "$host_id",
      "hostname": "$hostname",
      "status": "Connected"
    }
    ```

    To get the current list of all directory templates matching a query, use GET on the [`/hdfs_template`](#operation/queryHdfsTemplate) endpoint.

    ```bash
    curl -X POST \
      -d '{
        "hostname": "$hostname" }' \
      "https://$cluster_address/api/v1/hdfs_template"
    ```

    ```bash
    {
      "id": "$host_id",
      "hostname": "$hostname",
      "status": "Connected"
    }
    ```

    Modify with PATCH on the [`/hdfs_template/{id}`](#operation/updateHdfsTemplate) endpoint.

    ```bash
    curl -X PATCH \
      -d '{
        "id": "$directory_template_id" }' \
      "https://$cluster_address/api/v1/hdfs_template"
    ```

    ```bash
    {
      "id": "$host_id",
      "hostname": "$hostname",
      "status": "Connected"
    }
    ```

    Delete with the [`/hdfs_template/{id}`](#operation/deleteHdfsTemplate) endpoint.

    ```bash
    curl -X DELETE \
      -d '{
        "id": "$directory_template_id" }' \
      "https://$cluster_address/api/v1/hdfs_template"
    ```
    ## Directory

    Create a directory using a directory template.
    The directory is an instance of the template that is assigned to a specific HDFS cluster.

    To get the current list of HDFS clusters, use GET on the [`/hdfs`](#operation/queryHdfs) endpoint.

    ```bash
    curl -X POST \
      -d '{
        "hostname": "$hostname" }' \
      "https://$cluster_address/api/v1/hdfs"
    ```

    ```bash
    {
      "id": "$host_id",
      "hostname": "$hostname",
      "status": "Connected"
    }
    ```

    To get the current further details of HDFS clusters, use GET on the [`/hdfs/{id}`](#operation/getHdfs) endpoint.

    ```bash
    curl -X POST \
      -d '{
        "hostname": "$hostname" }' \
      "https://$cluster_address/api/v1/hdfs"
    ```

    ```bash
    {
      "id": "$host_id",
      "hostname": "$hostname",
      "status": "Connected"
    }
    ```

    A directory can be created with a POST on [`/hdfs`](#operation/createHdfs).

    ```bash
    curl -X POST \
      -d '{
        "templateId": "$directory_template_id",
        "hostId": "$host_id" }' \
      "https://$cluster_address/api/v1/hdfs"
    ```

    ```bash
    {
      "id": "$directory_id",
      "excludes": [],
      "includes": [
        "/Users"
      ],
      "hostId": "$host_id",
      "templateId": "$directory_template_id",
      "configuredSlaDomainId": "UNPROTECTED"
    }
    ```

    A directory can be deleted with a DELETE on [`/hdfs`](#operation/deleteHdfs).

    ```bash
    curl -X POST \
      -d '{
        "templateId": "directory_template_id",
        "hostId": "$host_id" }' \
      "https://$cluster_address/api/v1/hdfs"
    ```

    ```bash
    {
      "id": "$directory_id",
      "excludes": [],
      "includes": [
        "/Users"
      ],
      "hostId": "$host_id",
      "templateId": "$directory_template_id",
      "configuredSlaDomainId": "UNPROTECTED"
    }
    ```
    ## On demand backups of HDFS cluster directorys

    To create an on-demand snapshot, use POST on [`/hdfs/{id}/snapshot`](#operation/createHdfsBackupJob).

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/hdfs/$directory_id/snapshot"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/hdfs/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "QUEUED"
    }
    ```

    After taking a snapshot, retrieve the `$snapshot_id` by querying [`/hdfs/request`](#operation/getHdfsAsyncRequestStatus).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/hdfs/request/$request_id"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/hdfs/snapshot/$snapshot_id",
          "rel": "result"
        },
        {
          "href": "https://$cluster_address/api/v1/hdfs/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "SUCCEEDED"
    }
    ```


    After taking a snapshot, retrieve the `$snapshot_id` from the request.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/hdfs/request/$request_id"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/hdfs/snapshot/$snapshot_id",
          "rel": "result"
        },
        {
          "href": "https://$cluster_address/api/v1/hdfs/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "SUCCEEDED"
    }
    ```

    For more information about a specific snapshot, send a GET request to
    the [`/hdfs/snapshot/{id}`](#operation/getHdfsSnapshot) endpoint.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/hdfs/snapshot/$snapshot_id"
    ```

    ```bash
    {
      "id": "$snapshot_id"
      "date": <timestamp1>,
      "expirationDate": <timestamp2>,
      "sourceObjectType": "Hdfs",
      "isOnDemandSnapshot": true,
      "cloudState": 2,
      "consistencyLevel": "none",
      "indexState": 1,
      "replicationLocationIds": [
        "$replication_location_id"
      ],
      "archivalLocationIds": [
        "$archival_location_id"
      ],
      "slaId": "$sla_id",
      "slaName": "sla",
      "directoryName": "directory",
      "fileCount": 10,
      "lastModified": <timestamp3>,
      "size": 533120
    }
    ```

    To delete a specific snapshot, send a DELETE request to the
    [`/hdfs/snapshot/{id}`](#operation/deleteHdfsSnapshot) endpoint,
    where `{id}` is the ID of the snapshot.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/hdfs/snapshot/$snapshot_id"
    ```

    ```bash
    {
    }
    ```

    Delete all snapshots for a specific HDFS cluster with a DELETE on [`/hdfs/{id}/snapshot`](#operation/deleteHdfsSnapshots).

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/hdfs/$id/snapshot"
    ```
    ## SLA Domain protection of host directorys

    Assign a directory to an SLA with a PATCH [`/hdfs/{id}`](#operation/updateHdfs).

    ```bash
    curl -X PATCH \
      -d '{
        "configuredSlaDomainId": "$sla_domain_id" }' \
      "https://$cluster_address/api/v1/hdfs/$directory_id"
    ```

    ```bash
    {
      "id": "$directory_id",
      "excludes": [],
      "includes": [
        "/Users"
      ],
      "hostId": "$host_id",
      "templateId": "$directory_template_id",
      "configuredSlaDomainId": "$sla_domain_id"
    }
    ```

    List missed snapshots with a GET on [`/hdfs/{id}/missed_snapshot`](#operation/getMissedHdfsSnapshots).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/hdfs/$id/missed_snapshot"
    ```

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "missedSnapshotTime": "2000-01-02T11:08:40.420Z"
        }
      ],
      "total": 1
    }
    ```

    ## Search & Recovery

    Once snapshots have been taken, they can be used to search for files and recover.

    File search can be performed on a specific directory using its `$directory_id` with a GET on [`/hdfs/{id}/search`](#operation/searchHdfs) and specifying the file path with the `path` query parameter.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/hdfs/$directory_id/search?path=home"
    ```

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "path": "/home",
          "filename": "home",
          "fileVersions": [
            {
              "snapshotId": "$snapshot_id",
              "lastModified": "2014-07-17T02:02:54+0000",
              "size": 533120
            }
          ]
        }
      ],
      "total": 1
    }
    ```

    Files within a snapshot can be browsed by using GET on [`/hdfs/snapshot/{id}/browse`](#operation/browseHdfsSnapshot).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/hdfs/snapshot/$snapshot_id/browse?path=%2Fhome&offset=0"
    ```

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "filename": "ubuntu",
          "path": "ubuntu",
          "lastModified": "2016-12-01T23:26:59+0000",
          "size": 529024,
        }
      ],
      "total": 1
    }
    ```

    Files from a snapshot can also be restored to a host with POST on [`/hdfs/snapshot/{id}/restore_file`](#operation/createHdfsRestoreFileJob).

    ```bash
    curl -X POST -d \
      '{
        "sourceDir": "/foo.txt",
        "destinationDir": "/bar.txt"
      }' \
      "https://$cluster_address/api/v1/hdfs/snapshot/$snapshot_id/restore_file"
    ```

    Files can also be restored to a different host with POST on [`/hdfs/snapshot/{id}/export_file`](#operation/createHdfsExportFileJob).

    ```bash
    curl -X POST -d \
      '{
        "sourceDir": "/foo.txt",
        "destinationDir": "/bar.txt",
        "hostId": "$host_id"
      }' \
      "https://$cluster_address/api/v1/hdfs/snapshot/$snapshot_id/export_file"
    ```

    # SQL Server databases

    Version 3.0 added support for Microsoft SQL backups.
    First add the hosts hosting the Microsoft SQL databases as specified in the [host protection](#section/Hosts) section.
    Once the host has been added, instances and databases will be auto-discovered.

    ## Instances

    Microsoft SQL instances can be found by a GET on [`/mssql/instance`](#operation/queryMssqlInstance)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/instance"
    ```

    ```bash
    {
      "data": [
        {
          "id": "$instance_id",
          "name": "$instance_name",
          "configuredSlaDomainId": "INHERIT",
          "configuredSlaDomainName": "Inherit",
          "effectiveSlaDomainId": "INHERIT",
          "effectiveSlaDomainName": "Inherit"
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    Further details are acquired from [`/mssql/instance/{id}`](#operation/getMssqlInstance).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/instance/$instance_id"
    ```

    ```bash
    {
      "data": [
        {
          "id": "$instance_id",
          "name": "$instance_name",
          "configuredSlaDomainId": "INHERIT",
          "configuredSlaDomainName": "Inherit",
          "effectiveSlaDomainId": "UNPROTECTED",
          "effectiveSlaDomainName": "Unprotected"
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    The Rubrik cluster auto-detects most fields of the Microsoft SQL instance. However, certain fields such as the `clusterInstanceAddress` can be overridden with a PATCH to [`/mssql/instance/{id}`](#operation/updateMssqlInstance).

    ```bash
    curl -X PATCH \
      -d '{
        "clusterInstanceAddress": "1.1.1.1"
      }' \
      "https://$cluster_address/api/v1/mssql/instance/$instance_id"
    ```

    ```bash
    {
      "data": [
        '{
          "id": "$instance_id",
          "name": "$instance_name",
          "configuredSlaDomainId": "INHERIT",
          "configuredSlaDomainName": "Inherit",
          "effectiveSlaDomainId": "UNPROTECTED",
          "effectiveSlaDomainName": "Unprotected",
          "clusterInstanceAddress": "1.1.1.1"
      }' \
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    The total number of SQL Server Instances can be found by GET on
    [/mssql/instance/count](#operation/countMssqlInstanceV1).

      ```bash
      curl -X GET "https://$cluster_address/api/v1/mssql/instance/count"
      ```

      ```bash
      {
        "count": $total_number_of_instances
      }
      ```

    ## Databases

    All Microsoft SQL databases on an instance can be found with a GET on
     [`/mssql/db`](#operation/queryMssqlDb).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/db?instance_id=$instance_id"
    ```

    ```bash
    {
      "data": [
        {
          "id": "$db_id",
          "name": "$db_name",
          "configuredSlaDomainId": "INHERIT",
          "configuredSlaDomainName": "Inherit",
          "effectiveSlaDomainId": "UNPROTECTED",
          "effectiveSlaDomainName": "Unprotected",
          "instanceId": "$instance_id"
          "instanceName": "$instance_name"
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    Further details are acquired from [`/mssql/db/{id}`](#operation/getMssqlDb).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/db/$db_id"
    ```

    ```bash
    {
      "data": [
        {
          "id": "$db_id",
          "name": "$db_name",
          "configuredSlaDomainId": "INHERIT",
          "configuredSlaDomainName": "Inherit",
          "effectiveSlaDomainId": "UNPROTECTED",
          "effectiveSlaDomainName": "Unprotected",
          "instanceId": "$instance_id"
          "instanceName": "$instance_name"
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    The total number of SQL Server Databases can be found by GET on
     [/mssql/db/count](#operation/countMssqlDbV1).

      ```bash
      curl -X GET "https://$cluster_address/api/v1/mssql/db/count?root_id=$host_id"
      ```

      ```bash
      {
        "numTotal": 15,
        "numProtected": 2,
        "numNoSla": 0,
        "numDoNotProtect": 13
      }
      ```

    Snappable Id of a SQL Server database can be found by GET on
    [/mssql/db/{id}/snappable_id](#operation/mssqlGetSnappableIdV1).

      ```bash
      curl -X GET "https://$cluster_address/api/v1/mssql/db/$db_id/snappable_id"
      ```

      ```bash
      {
        "snappableId": "$snappable_id"
      }
      ```

    The properties of SQL Server database can be updated by PATCH on
    [/mssql/db/bulk](#operation/bulkUpdateMssqlDbV1).

    ```bash
    curl -X PATCH "https://$cluster_address/api/v1/mssql/db/bulk" -d\
    '[
      {
          "databaseId": "$db_id",
          "updateProperties": {
             "logBackupFrequencyInSeconds": 2000,
             "logRetentionHours": 180,
             "copyOnly": true,
             "maxDataStreams": 8,
             "isPaused": true,
             "shouldForceFull": true
       }
     }
    ]'
    ```

    ```bash
    [
      {
        "id": "MssqlDatabase:::5d1da757-95d0-4740-9851-53c25c3dda2d",
        "name": "simple_rec",
        "configuredSlaDomainId": "ea82adf1-fa12-4b33-89af-9c2a08802a5d",
        "configuredSlaDomainName": "Gold",
        "configuredSlaDomainType": "ProtectionSla",
        "primaryClusterId": "977dbc71-8137-4de5-be23-67251f0b63c1",
        "isConfiguredSlaDomainRetentionLocked": false,
        "effectiveSlaDomainId": "ea82adf1-fa12-4b33-89af-9c2a08802a5d",
        "effectiveSlaDomainName": "Gold",
        "isEffectiveSlaDomainRetentionLocked": false,
        "effectiveSlaSourceObjectId": "MssqlDatabase:::5d1da757-95d0-4740-9851-53c25c3dda2d",
        "effectiveSlaSourceObjectName": "simple_rec",
        "slaAssignment": "Direct",
        "retentionSlaDomainId": "ea82adf1-fa12-4b33-89af-9c2a08802a5d",
        "rootProperties": {
          "rootType": "Host",
          "rootId": "Host:::151e41d1-5395-4940-98ec-17460eae8949",
          "rootName": "10.0.46.37"
        },
        "instanceId": "MssqlInstance:::442b9524-9e45-4b03-aa66-eec1f3d0c470",
        "instanceName": "SQLEXPRESS",
        "isRelic": false,
        "copyOnly": true,
        "logBackupFrequencyInSeconds": 2000,
        "logBackupRetentionHours": 180,
        "isLiveMount": false,
        "isLogShippingSecondary": false,
        "recoveryModel": "FULL",
        "state": "ONLINE",
        "hasPermissions": true,
        "isInAvailabilityGroup": false,
        "replicas": [
          {
            "instanceId": "MssqlInstance:::442b9524-9e45-4b03-aa66-eec1f3d0c470",
            "instanceName": "SQLEXPRESS",
            "recoveryModel": "FULL",
            "state": "ONLINE",
            "hasPermissions": true,
            "isStandby": false,
            "recoveryForkGuid": "83145A93-8921-4318-8508-B9ABE1D3B0F6",
            "isArchived": false,
            "isDeleted": false,
            "rootProperties": {
              "rootType": "Host",
              "rootId": "Host:::151e41d1-5395-4940-98ec-17460eae8949",
              "rootName": "10.0.46.37"
            }
          }
        ],
        "unprotectableReasons": [],
        "numMissedSnapshot": 0,
        "lastSnapshotTime": "2020-09-07T13:36:33.000Z",
        "includeBackupTaskInfo": false,
        "isOnline": true,
        "blackoutWindowStatus": {
          "isGlobalBlackoutActive": false,
          "isSnappableBlackoutActive": true
        },
        "blackoutWindows": {
          "globalBlackoutWindows": [],
          "snappableBlackoutWindows": [
            {
              "startTime": "2020-09-13T11:02:04+0000"
            }
          ]
        },
        "snapshotCount": 2,
        "isLocal": true,
        "isStandby": false,
        "latestRecoveryPoint": "2020-09-07T14:11:54.000Z",
        "oldestRecoveryPoint": "2020-09-07T12:47:38.000Z",
        "protectionDate": "2020-08-26T07:43:26.429Z",
        "recoveryForkGuid": "83145A93-8921-4318-8508-B9ABE1D3B0F6",
        "maxDataStreams": 8,
        "localStorage": 1363475,
        "archiveStorage": 0
      }
    ]
    ```

    ## Availability Groups

    To get the details of a SQL Server Availability Group, GET on
    [`/mssql/availability_group/{id}`](#operation/getMssqlAvailabilityGroupV1).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/availability_group/$availability_group_id"
    ```

    ```bash
    {
      "id": "$availability_group_id",
      "name": "$availability_group_name",
      "configuredSlaDomainId": "$sla_id",
      "configuredSlaDomainName": "$sla_name",
      "configuredSlaDomainType": "$sla_type",
      "primaryClusterId": "$primary_cluster_id",
      "isConfiguredSlaDomainRetentionLocked": $is_sla_retention_locked,
      "effectiveSlaDomainId": "$sla_id",
      "effectiveSlaDomainName": "$sla_name",
      "isEffectiveSlaDomainRetentionLocked": $is_sla_retention_locked,
      "slaAssignment": "$sla_assignment",
      "logBackupFrequencyInSeconds": $log_backup_frequenct,
      "logRetentionHours": $log_backup_retention,
      "copyOnly": $copy_only
    }
    ```

    To get a summary of all SQL Server Availability Groups, GET on
    [`/mssql/availability_group`](#operation/queryMssqlAvailabilityGroupV1).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/availability_group"
    ```

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "$availability_group_id",
          "name": "$availability_group_name",
          "configuredSlaDomainId": "$sla_id",
          "configuredSlaDomainName": "$sla_name",
          "configuredSlaDomainType": "$sla_type",
          "primaryClusterId": "$primary_cluster_id",
          "isConfiguredSlaDomainRetentionLocked": $is_sla_retention_locked,
          "effectiveSlaDomainId": "$sla_id",
          "effectiveSlaDomainName": "$sla_name",
          "isEffectiveSlaDomainRetentionLocked": $is_sla_retention_locked,
          "slaAssignment": "$sla_assignment",
          "logBackupFrequencyInSeconds": $log_backup_frequenct,
          "logRetentionHours": $log_backup_retention,
          "copyOnly": $copy_only
        }
      ],
      "total": 1
    }
    ```

    To update a SQL Server Availability Group, PATCH on
    [`/mssql/availability_group/{id}`](#operation/updateMssqlAvailabilityGroupV1).

    ```bash
    curl -X PATCH "https://$cluster_address/api/v1/mssql/availability_group/$availability_group_id" -d\
     '{
        "logBackupFrequencyInSeconds": $log_backup_freq,
        "logRetentionHours": $log_backup_retention,
        "copyOnly": $copy_only,
        "configuredSlaDomainId\": "$sla_id"
      }'
    ```

    ```bash
    {
      "id": "$availability_group_id",
      "name": "$availability_group_name",
      "configuredSlaDomainId": "$sla_id",
      "configuredSlaDomainName": "$sla_name",
      "configuredSlaDomainType": "$sla_type",
      "primaryClusterId": "$primary_cluster_id",
      "isConfiguredSlaDomainRetentionLocked": $is_sla_retention_locked,
      "effectiveSlaDomainId": "$sla_id",
      "effectiveSlaDomainName": "$sla_name",
      "isEffectiveSlaDomainRetentionLocked": $is_sla_retention_locked,
      "slaAssignment": "$sla_assignment",
      "logBackupFrequencyInSeconds": $log_backup_frequenct,
      "logRetentionHours": $log_backup_retention,
      "copyOnly": $copy_only
    }
    ```

    ## Protection

    To create an on-demand snapshot, POST on [`/mssql/db/{id}/snapshot`](#operation/createOnDemandMssqlBackup).

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/mssql/db/$db_id/snapshot"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/mssql/db/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "QUEUED"
    }
    ```

    Once the snapshot has been taken, the `$snapshot_id` can be retrieved from the request with [`/mssql/request/{id}`](#operation/getMssqlAsyncRequestStatus).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/mssql/request/$request_id"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/mssql/db/snapshot/$snapshot_id",
          "rel": "result"
        },
        {
          "href": "https://$cluster_address/api/v1/mssql/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "SUCCEEDED"
    }
    ```

    The `$snapshot_id` can be used to extract further information on the snapshot with a GET on [`/mssql/db/snapshot/{id}`](#operation/getMssqlDbSnapshot).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/mssql/db/snapshot/$snapshot_id"
    ```

    ```bash
    {
      "id": "$snapshot_id",
      "date": "2017-02-02T18:53:12.718Z",
      "isOnDemandSnapshot": true
    }
    ```

    To create an on-demand log backup, POST on [`/mssql/db/{id}/log_backup`](#operation/createOnDemandMssqlLogBackup).

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/mssql/db/$db_id/log_backup"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/mssql/db/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "QUEUED"
    }
    ```

    To protect a specific database under an SLA, perform a PATCH on [`/mssql/db/{id}`](#operation/updateMssqlDb)

    ```bash
    curl -X PATCH \
      -d '{
        "configuredSlaDomainId": "$sla_domain_id" }' \
      "https://$cluster_address/api/v1/mssql/db/$db_id"
    ```

    ```bash
    {
      "id": "$db_id",
      "name": "$db_name",
      "configuredSlaDomainId": "$sla_domain_id",
      "configuredSlaDomainName": "$sla_domain_name",
      "effectiveSlaDomainId": "$sla_domain_id",
      "effectiveSlaDomainName": "sla_domain_name",
      "instanceId": "$instance_id"
      "instanceName": "$instance_name"
    }
    ```

    List all snapshots for a database with a GET on [`/mssql/db/{id}/snapshot`](#operation/queryMssqlDbSnapshot).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/mssql/db/$db_id/snapshot"
    ```

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "$snapshot_id",
          "date": "2017-02-02T18:53:12.718Z",
          "isOnDemandSnapshot": true
        }
      ],
      "total": 1
    }
    ```

    Point-in-time recovery is supported when log backups are taken. The range of recoverable times can be listed with a GET on [`/mssql/db/{id}/recoverable_range`](#operation/getMssqlDbRecoverableRanges).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/mssql/db/$db_id/recoverable_range"
    ```

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "beginTime": "2017-02-02T18:53:12.694Z",
          "endTime": "2017-02-02T20:53:12.694Z"
        }
      ],
      "total": 1
    }
    ```

    ## Download
    The Rubrik REST API server provides endpoints to browse and
    download snapshots and logs for a specific SQL Server database.

    ### Browsing SQL Server snapshots
    To view a list of snapshots and log backups of a specific SQL Server
    database, send a POST request to the 
    [`/mssql/db/{id}/browse`](#operation/browseMssqlBackupFiles)
    endpoint where, `{id}` is the ID of the SQL Server database.

    This POST call fetches metadata based on a timestamp or the
    log sequence number (LSN) provided in the request payload.

    To fetch a list of snapshots and log backups that are required to
    recover to a point in time, specify the point in time using either the
    `date` or the `lsnpoint` attribute of the `recoveryPoint` attribute.
    Both `date` and `lsnPoint` cannot be used at the same time.

    ```bash
    curl -X POST -d \
      '{ 
            "recoveryPoint": {"date": "2019-08-15T10:40"}
       }' \
      "https://$cluster_address/api/v1/mssql/db/$db_id/browse
    ```

    To fetch a list of snapshots and log backups that fit within a range,
    specify the range by using a combination of the `startPoint` and
    `endPoint` attributes.
    Within the `startPoint` and `endPoint` attributes, specify values for
    either the `lsnPoint` or the `date` attributes, not for both.

    ```bash
    curl -X POST -d \
      '{ 
            "startPoint": {"date": "2019-08-15T10:40"}, 
            "endPoint": {"date": "2019-08-15T10:45:47"} 
       }' \
      "https://$cluster_address/api/v1/mssql/db/$db_id/browse
    ```

    To recover to a point in time, use the `recoveryPoint` attribute; do
    not define a range using the `startPoint` and `endPoint` attributes.

    To fetch a list of snapshots and log backups that fit within a range,
    specify the beginning of a range using the `startPoint` attribute and
    specify the end of the range using the `endPoint` attribute.
    When specifying a range, do not specify a `recoveryPoint`.

    The Rubrik REST API server responds with the list of the log and
    database snapshots that fit within the parameters specified in the
    request.

    ```bash
    {
      "items": [
        {
          "backupId": "e8f0c6ee-fafc-4740-b9c9-deadba9815df",
          "backupType": "Log",
          "path": "testdb/logs/2019-08-15T10-40-58Z.trn",
          "date": "2019-08-15T10:40:58.000Z",
          "lsn": "45000000219000001",
          "recoveryForkGuid": "03F633D8-6B5A-48F5-97F0-401440F124FD",
          "backupSize": 86528
        },
        {
          "backupId": "5e3de1ce-f5ab-4787-a057-accec64fe7af",
          "backupType": "Snapshot",
          "path": "testdb/snapshot-2019-08-15T10-45-31Z/",
          "date": "2019-08-15T10:45:47.000Z",
          "lsn": "45000000221300001",
          "recoveryForkGuid": "03F633D8-6B5A-48F5-97F0-401440F124FD",
          "backupSize": 16777216
        },
        {
          "backupId": "c57d1908-c085-43ef-9a7f-fcb482994bf7",
          "backupType": "Log",
          "path": "testdb/logs/2019-08-15T10-46-03Z.trn",
          "date": "2019-08-15T10:46:03.000Z",
          "lsn": "45000000222300001",
          "recoveryForkGuid": "03F633D8-6B5A-48F5-97F0-401440F124FD",
          "backupSize": 86528
        }
      ]
    }

    ```

    ### Downloading all SQL Server snapshots and logs
    To initiate a request to build a zip file containing the
    snapshots and log backups that are required to recover to a specific
    point in time, or a range of time, send a POST request to the
    [`/mssql/db/{id}/download_files`](#operation/createDownloadMssqlBackupFiles) endpoint.

    The usage of parameters for this POST call is identical to the usage
    described for the [browse API call](#browsing-sql-server-snapshots).

    ```bash
    curl -X POST -d \
      '{ "startPoint": {"date": "2019-08-15T10:40"}, "endPoint": {"date": "2019-08-15T10:45:47"} }' \
      "https://$cluster_address/api/v1/mssql/db/$db_id/download_files
    ```

    The Rubrik REST API server responds with the details of the
    asynchronous task that is initiated by the POST API call.

    ```bash
    {
      "id": "$request_id",
      "status": "$request_status",
      "progress": 0,
      "startTime": "2021-03-23T20:38:05.511Z",
      "endTime": "2021-03-23T20:38:05.511Z",
      "nodeId": "$node_id",
      "error": {
        "message": "$error_message"
      },
      "links": [
        {
          "href": "string",
          "rel": "string"
        }
      ]
    }
    ```

    To check the status of the download request, send a GET request to the
    (`/mssql/request/{id}`)[#operation/getMssqlAsyncRequestStatus]
    endpoint where, `{id}` is the `$request_id`.

    The Rubrik REST API server responds with the link to
    download the zip file when the zip file is ready for download.

    ### Downloading specific SQL Server snapshots and logs
    To initiate a request to build a zip file containing
    specific snapshots and log backups, send a POST
    request to the [`/mssql/db/{id}/download_files_by_id`](#operation/createDownloadMssqlBackupFilesById) endpoint with
    the object IDs for the snapshots and logs to be downloaded.

    ```bash
    curl -X POST -d \
      '{ "items": ["e8f0c6ee-fafc-4740-b9c9-deadba9815df", "c57d1908-c085-43ef-9a7f-fcb482994bf7"] }' \
      "https://$cluster_address/api/v1/mssql/db/$db_id/download_files_by_id"
    ```

    The Rubrik REST API server responds with the details of the
    asynchronous task that is initiated by the POST API call.

    ```bash
    {
      "id": "$request_id",
      "status": "$request_status",
      "progress": 0,
      "startTime": "2021-03-23T20:38:05.511Z",
      "endTime": "2021-03-23T20:38:05.511Z",
      "nodeId": "$node_id",
      "error": {
        "message": "$error_message"
      },
      "links": [
        {
          "href": "string",
          "rel": "string"
        }
      ]
    }
    ```
    To check the status of the download request, send a GET request to the
    (`/mssql/request/{id}`)[#operation/getMssqlAsyncRequestStatus]
    endpoint where, `{id}` is the `$request_id`.

    The Rubrik REST API server responds with the link to
    download the zip file when the zip file is ready for download.

    The zip file uses the naming convention of `$database_name`-
    `$random_string`.zip.

    The path to the log backup files inside the zip file is of the form
    `$database_name`/logs/`$database_name`-`$timestamp`.trn.
    For example, if the `$database_name` is `BigDatabase`, the log
    backup file is located at `BigDatabase/logs/BigDatabase-2021-03-23T03-15-55Z.trn` inside the downloaded zip
    file.

    The path to the database snapshot files inside the zip file is of the form
    `$database_name`/snapshot-`$timestamp`/`$snapshot_files`. For
    example, if the `$database_name` is
    `BigDatabase` and a snapshot filename is `snapshot.mdf`, then the 
    location of the file inside the downloaded zip file is
    `BigDatabase/snapshot-2021-03-23T03-15-55Z/snapshot.mdf`.


    Make an asynchronous POST request to the [`/mssql/db/{id}/download`](#operation/downloadFromArchive) endpoint to download snapshots and logs from archival for a given database and recovery point.

    ```bash
    curl -X POST -d \
      '{ "recoveryPoint": { "timestampMs": 12345 } }' \
      "https://$cluster_address/api/v1/mssql/db/$db_id/download"
    ```

    A 'missed snapshot' occurs when a snapshot that is required by SLA Domain policy cannot be created.
    To retrieve information about missed snapshots, send a GET request to the [`/mssql/db/{id}/missed_snapshot`](#operation/getMissedMssqlDbSnapshots) endpoint.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/mssql/db/$db_id/missed_snapshot"
    ```

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "missedSnapshotTime": "2000-01-02T11:08:40.420Z"
        }
      ],
      "total": 1
    }
    ```

    To retrieve the recoverable time ranges that were missed for a specified database, send a GET request to the [`/mssql/db/{id}/missed_recoverable_range`](#operation/getMssqlDbMissedRecoverableRanges) endpoint.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/mssql/db/$db_id/missed_recoverable_range"
    ```

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "beginTime": "2017-02-02T18:53:12.694Z",
          "endTime": "2017-02-02T20:53:12.694Z"
        }
      ],
      "total": 1
    }
    ```

    Delete all snapshots for a specific database with a DELETE on [`/mssql/db/{id}/snapshot`](#operation/deleteMssqlDbSnapshots).

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/mssql/db/$db_id/snapshot"
    ```

    Assign SLA properties to multiple objects with a POST to
    [`mssql/sla_domain/assign`](#operation/assignMssqlSlaProperties).

    ```bash
    curl -X POST -d \
      '{
        "ids": ["$id1", "$id2"],
        "copyOnly": true,
        "configuredSlaDomainId": "$slaDomainId"
      }' \
      "https://$cluster_address/api/v1/mssql/sla_domain/assign"
    ```

    To take on demand snapshot of multiple SQL Server databases, perform POST on
     [`/mssql/db/bulk/snapshot`](#operation/createOnDemandMssqlBatchBackupV1).

    ```bash
    curl -X POST "https://$cluster_address/api/v1/mssql/db/bulk/snapshot" -d\
    '{
       "slaId": "$sla_id",
       "databaseIds": [
         "$db_id_1",
         "$db_id_2"
       ],
       "instanceIds": [
         "$instance_id_3"
       ],
       "hostIds": [
         "$host_id_4",
         "$host_id_5",
         "$host_id_6",
       ],
       "windowsClusterIds": [
         "$windows_cluster_id_7"
       ],
       "availabilityGroupIds": [
         "$availability_group_id_8"
       ],
       "forceFullSnapshot": true
     }'
    ```
    ```bash
    {
      "id": "$mssql_multi_host_batch_backup_job_id",
      "status": "$job_status",
      "progress": $job_progress,
      "startTime": "$job_start_time",
      "links": [
        {
          "href": "$link1",
          "rel": "self"
        }
      ]

    ```

    Get the details of on demand backup job of SQL Server databases by performing
     GET on
     [`/mssql/db/bulk/snapshot/{id}`](#operation/getOnDemandMssqlBatchBackupResultV1).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/db/bulk/snapshot/$mssql_multi_host_batch_backup_job_id"
    ```

    ```bash
    {
      "id": "$mssql_multi_host_batch_backup_job_id",
      "successfulSnapshots": [
        {
          "databaseId": "$db_id",
          "snapshotId": "$snapshot_id"
        }
      ],
      "failedSnapshots": [
        {
          "databaseId": "$db_id_2",
          "error": "$error"
        }
      ],
      "canceledSnapshots": []
    }
    ```


    To delete all the downloaded snapshots and logs for a SQL Server database,
     perform DELETE on
     [`mssql/db/{id}/recoverable_range/download`](#operation/deleteDownloadedMssqlDbRecoverableRangesV1).

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/mssql/db/$db_id/recoverable_range_download"
    ```
    ```bash
    {
      "jobInstanceId": "$expire_mssql_download_ranges_job_id"
    }
    ```

    To get the deletion status of downloaded recoverable range, perform GET on
     [`/mssql/db/recoverable_range/download/{id}`](#operation/getDeleteMssqlDbRecoverableRangesStatusV1).

    ```bash
    curl -X GET \
    "https://$cluster_address/api/v1/mssql/db/recoverable_range/download/$expire_mssql_download_ranges_job_id"
    ```

    ```bash
    {
      "id": "$expire_mssql_download_ranges_job_id"
      "status": "SUCCEEDED",
      "startTime": "$job_start_time",
      "endTime": "$job_end_time",
      "jobType": "EXPIRE_MSSQL_DOWNLOADED_RANGES",
      "nodeId": "$node_id",
      "isDisabled": $is_disabled,
      "archived": $archived
    }
    ```

    To get the default SQL Server database backup properties, perform GET on
     [`/mssql/db/defaults`](#operation/getDefaultDbPropertiesV1).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/db/defaults"
    ```

    ```bash
    {
      "logBackupFrequencyInSeconds": $log_backup_frequency,
      "cbtStatus": $cbt_status,
      "logRetentionTimeInHours": $log_retention_time
    }
    ```

    To update the default SQL Server database backup properties, perform PATCH on
     [`/mssql/db/defaults`](#operation/updateDefaultDbPropertiesV1).

    ```bash
    curl -X PATCH "https://$cluster_address/api/v1/mssql/db/defaults" -d\
     '{
        "logBackupFrequencyInSeconds": 900,
        "cbtStatus": true,
        "logRetentionTimeInHours": 168
      }'
    ```

    ```bash
    {
      "logBackupFrequencyInSeconds": 900,
      "cbtStatus": true,
      "logRetentionTimeInHours": 168
    }
    ```

    ## Restore

    Perform a restore with a POST on [`/mssql/db/{id}/restore`](#operation/createRestoreMssqlDb) specifying the timestamp as the recovery point.

    ```bash
    curl -X POST -d \
      '{
        "recoveryPoint": {
          "timestampMs": 12345
        }
      }' \
      "https://$cluster_address/api/v1/mssql/db/$db_id/restore"
    ```

    A database can also be exported to another instance with a POST on [`/mssql/db/{id}/export`](#operation/createExportMssqlDb).

    ```bash
    curl -X POST -d \
      '{
        "recoveryPoint": {
          "timestampMs": 12345
        },
        "targetInstanceId": "$instance_id",
        "targetDatabaseName": "$db_name"
      }' \
      "https://$cluster_address/api/v1/mssql/db/$db_id/export"
    ```

    List of all the database files which are needed to restore a SQL Server
     database can be found by GET on
     [/mssql/db/{id}/restore_files](#operation/mssqlGetRestoreFilesV1).

      ```bash
      curl -X GET "https://$cluster_address/api/v1mssql/db/$db_id/restore_files?time=$time_to_restore"
      ```

      ```bash
      [
        {
          "logicalName": "$logical_file_name",
          "originalPath": "$original_file_path",
          "originalName": "$original_file_name",
          "fileType": "Data",
          "fileId": $file_id
        },
        {
          "logicalName": "$logical_file_name",
          "originalPath": "$original_file_path",
          "originalName": "$original_file_name",
          "fileType": "Log",
          "fileId": $file_id
        }
      ]
      ```

    An estimate of resources needed for restoring a SQL Server database can be
     found by GET on
     [/mssql/db/{id}/restore_estimate](#operation/mssqlRestoreEstimateV1).

      ```bash
      curl -X GET "https://$cluster_address/api/v1/mssql/db/$db_id/restore_estimate?time=$time_to_restore"
      ```

      ```bash
      {
        "bytesFromCloud": $bytes_from_cloud
      }
      ```

    Get compatible instances for recovery of a SQL Server database by performing
     GET on
     [/mssql/db/{id}/compatible_instance](#operation/getCompatibleMssqlInstancesV1).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/db/$db_id/compatible_instance?recovery_type=$recovery_type"
    ```

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "logBackupFrequencyInSeconds": $log_backup_frequency,
          "logRetentionHours": $log_backup_retention,
          "copyOnly": $copy_only,
          "id": "$instance_id",
          "internalTimestamp": $internal_timestamp,
          "name": "$instance_name",
          "primaryClusterId": "$cluster_id",
          "rootProperties": {
            "rootType": "$root_type",
            "rootId": "$root_id",
            "rootName": "$root_name"
          },
          "version": "$version",
          "configuredSlaDomainId": "$sla_domain_id",
          "configuredSlaDomainType": "$sla_type",
          "configuredSlaDomainName": "$sla_name",
          "isRetentionLocked": $is_retention_locked,
          "unprotectableReasons": []
        }
      ],
      "total": 1
    }
    ```

    ## Live Mount

    Perform a Live Mount with a POST on [`/mssql/db/{id}/mount`](#operation/createMssqlMount), specifying the timestamp as the recovery point.

    ```bash
    curl -X POST -d \
      '{
        "recoveryPoint": {
          "timestampMs": 12345
        },
        "mountedDatabaseName": "$db_name"
      }' \
      "https://$cluster_address/api/v1/mssql/db/$db_id/mount"
    ```

    All current Live Mounts can be found with a GET on [`/mssql/db/mount`](#operation/queryMssqlMount).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/db/mount"
    ```

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "$mount_id",
          "sourceDatabaseId": "$source_db_id",
          "sourceRecoveryPoint": {
            "timestampMs": 12345
          },
          "targetInstanceId": "$target_instance_id",
          "creationDate": "2017-02-02T18:53:12.694Z",
          "isReady": true,
          "mountedDatabaseId": "$mounted_db_id"
        }
      ],
      "total": 1
    }
    ```

    Further details for a single Live Mount are acquired from [`/mssql/db/mount/{id}`](#operation/getMssqlMount).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/db/mount/$mount_id"
    ```

    ```bash
    {
      "id": "$mount_id",
      "sourceDatabaseId": "$source_db_id",
      "sourceRecoveryPoint": {
        "timestampMs": 12345
      },
      "targetInstanceId": "$target_instance_id",
      "creationDate": "2017-02-02T18:53:12.694Z",
      "isReady": true,
      "mountedDatabaseId": "$mounted_db_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/mssql/db/$source_db_id",
          "rel": "sourceDatabase"
        },
        {
          "href": "https://$cluster_address/api/v1/mssql/instance/$target_instance_id",
          "rel": "targetInstance"
        },
        {
          "href": "https://$cluster_address/api/v1/mssql/db/$mounted_db_id",
          "rel": "mountedDatabase"
        }
      ],
    }
    ```

    Delete a Live Mount with a DELETE on [`/mssql/db/mount/{id}`](#operation/createMssqlUnmount).

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/mssql/db/mount/$mount_id"
    ```

    ## Log Shipping

    Create a Log Shipping Configuration with a POST on [`/mssql/db/{id}/log_shipping`](#operation/createLogShippingConfiguration).

    ```bash
    curl -X POST -d \
      '{
        "config": {
          "targetInstanceId": "$target_instance_id",
          "targetDatabaseName": "$db_name",
          "state": "$state"
        }
      }' \
      "https://$cluster_address/api/v1/mssql/db/{id}/log_shipping"
    ```

    All current Log Shipping Configurations can be found with a GET on [`/mssql/db/log_shipping`](#operation/queryLogShippingConfigurations).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/db/log_shipping"
    ```

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "$log_shipping_id",
          "lastAppliedPoint": "2017-02-02T18:53:12.694Z",
          "location": "$host_name/$instance_name",
          "primaryDatabaseId": "$primary_db_id",
          "primaryDatabaseName": "$primary_database_name",
          "secondaryDatabaseName": "$secondary_database_name",
          "secondaryDatabaseId": "$secondary_database_id",
          "state": "$state",
          "status": "OK"
        }
      ],
      "total": 1
    }
    ```

    Further details for a single Log Shipping configuration are acquired from [`/mssql/db/log_shipping/{id}`](#operation/getLogShippingConfiguration).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/db/log_shipping/{id}"
    ```

    ```bash
    {
      "id": "$log_shipping_id",
      "lastAppliedPoint": "2017-02-02T18:53:12.694Z",
      "location": "$host_name/$instance_name",
      "primaryDatabaseId": "$primary_db_id",
      "primaryDatabaseName": "$primary_database_name",
      "secondaryDatabaseName": "$secondary_database_name",
      "secondaryDatabaseId": "$secondary_database_id",
      "state": "$state",
      "status": "OK"
      "links": [
        {
          "href": "https://$cluster_address/api/v1/mssql/db/$primary_db_id",
          "rel": "primaryDatabase"
        },
        {
          "href": "https://$cluster_address/api/v1/mssql/instance/$secondary_instance_id",
          "rel": "secondaryInstance"
        },
        {
          "href": "https://$cluster_address/api/v1/mssql/db/$secondary_db_id",
          "rel": "secondaryDatabase"
        }
      ],
    }
    ```

    Update a Log Shipping Configuration with a PATCH on [`/mssql/db/log_shipping/{id}`](#operation/updateLogShippingConfiguration).

    ```bash
    curl -X PATCH -d \
      '{
        "config": {
          "state": "$state"
        }
      }' \
      "https://$cluster_address/api/v1/mssql/db/log_shipping/$id"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/mssql/db/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "QUEUED"
    }
    ```

    Delete a Log Shipping Configuration with a DELETE on [`/mssql/db/log_shipping/{id}`](#operation/deleteLogShippingConfiguration).

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/mssql/db/log_shipping/$id?delete_secondary_database=true"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/mssql/db/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "QUEUED"
    }
    ```

    Reseed a Log Shipping Configuration with a POST on [`/mssql/db/log_shipping/{id}/reseed`](#operation/reseedSecondary)

    ```bash
    curl -X POST -d \
      '{
        "config": {
          "state": "$state"
        }
      }' \
      "https://$cluster_address/api/v1/mssql/db/log_shipping/$id/reseed"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/mssql/db/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "QUEUED"
    }
    ```

    # Hierarchy

    This REST API is used to get SQL Server hierarchy objects.

    ### Get list of immediate descendant objects
    Get a list of immediate descendant objects using a GET request to
    [/mssql/hierarchy/{id}/children]\
    (#operation/getMssqlHierarchyChildren).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/hierarchy/{id}/children"
    ```

    ```bash
    {
      "data": [
        {
          "id": "$database_id",
          "name": "$database_name",
          "objectType": "MssqlDatabase",
          "descendantCount": {},
          "hasPermissions": true,
          "isInAvailabilityGroup": false,
          "isLiveMount": false,
          "isLogShippingSecondary": false,
          "configuredSlaDomainId": "INHERIT",
          "configuredSlaDomainName": "Inherit",
          "effectiveSlaDomainId": "INHERIT",
          "effectiveSlaDomainName": "Inherit"
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    ### Get list of descendant objects
    Get a list of descendant objects using
    a GET request to
    [/mssql/hierarchy/{id}/descendants]\
    (#operation/getMssqlHierarchyDescendants).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/hierarchy/{id}/descendants"
    ```

    ```bash
    {
      "data": [
        {
          "id": "$database_id",
          "name": "$database_name",
          "objectType": "MssqlDatabase",
          "descendantCount": {},
          "hasPermissions": true,
          "isInAvailabilityGroup": false,
          "isLiveMount": false,
          "isLogShippingSecondary": false,
          "configuredSlaDomainId": "INHERIT",
          "configuredSlaDomainName": "Inherit",
          "effectiveSlaDomainId": "INHERIT",
          "effectiveSlaDomainName": "Inherit"
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    ### Get an object
    Get an object in the hierarchy using a GET request to
    [/mssql/hierarchy/{id}]\
    (#operation/getMssqlHierarchyObject).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/hierarchy/{id}"
    ```

    ```bash
    {
      "id": "$database_id",
      "name": "$database_name",
      "objectType": "MssqlDatabase",
      "descendantCount": {},
      "hasPermissions": true,
      "isInAvailabilityGroup": false,
      "isLiveMount": false,
      "isLogShippingSecondary": false,
      "configuredSlaDomainId": "INHERIT",
      "configuredSlaDomainName": "Inherit",
      "effectiveSlaDomainId": "INHERIT",
      "effectiveSlaDomainName": "Inherit"
    }
    ```
    ## Host configurations

    ### Retrieving SQL Server host configurations
    To retrieve all the SQL Server host configurations, send a GET request to
     [`/mssql/host/configuration`](#operation/queryMssqlHostConfig).

    ```bash
    curl -X GET "https://$cluster_address/api/v1//mssql/host/configuration"
    ```

    The Rubrik REST API server responds with a list of all the SQL Server host 
    configurations.
    ```bash
    {
      "data": [
        {
          "hostId": "hostId",
          "enableDatabaseBatchSnapshots": "Enabled",
          "enableVdi": "Enabled",
          "enableVdiDb": "Enabled",
          "enableGroupFetch": "Enabled",
          "enableCbtBackup": "Enabled",
          "physicalHostLogBackupThrottleMaxRefCount": 10,
          "throttlePhysicalHostMaxRefCount": 3,
          "fileTransferParallelism": 8,
          "mssqlDefaultMaxDataStreamsPerDatabase": 2,
          "fileRestoreReadParallelism": 16,
          "fileRestoreWriteParallelism": 4
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    To retrieve the configuration of a specific SQL Server host, send a GET 
    request to
     [`/mssql/host/configuration/{host_id}`](#operation/getMssqlHostConfig).

    ```bash
    curl -X GET "https://$cluster_address/api/v1//mssql/host/configuration/{host_id}"
    ```

    The Rubrik REST API server responds with the configuration details of the 
    specified SQL Server host.

    ```bash
    {
      "enableDatabaseBatchSnapshots": "Enabled",
      "enableVdi": "Enabled",
      "enableVdiDb": "Enabled",
      "enableGroupFetch": "Enabled",
      "enableCbtBackup": "Enabled",
      "physicalHostLogBackupThrottleMaxRefCount": 10,
      "throttlePhysicalHostMaxRefCount": 3,
      "fileTransferParallelism": 8,
      "mssqlDefaultMaxDataStreamsPerDatabase": 2,
      "fileRestoreReadParallelism": 16,
      "fileRestoreWriteParallelism": 4
    }
    ```


    ### Creating a SQL Server host configuration
    To create a new SQL Server host configuration, send a POST request to
     [`/mssql/host/configuration`](#operation/createMssqlHostConfig).

    ```bash
    curl -X POST -d \
     '{
       "hostId": "hostId",
       "enableDatabaseBatchSnapshots": "Enabled",
       "enableVdi": "Enabled",
       "enableVdiDb": "Enabled",
       "enableGroupFetch": "Enabled",
       "enableCbtBackup": "Enabled",
       "physicalHostLogBackupThrottleMaxRefCount": 10,
       "throttlePhysicalHostMaxRefCount": 3,
       "fileTransferParallelism": 8,
       "mssqlDefaultMaxDataStreamsPerDatabase": 2,
       "fileRestoreReadParallelism": 16,
       "fileRestoreWriteParallelism": 4
     }' \
    "https://$cluster_address/api/v1/mssql/host/configuration"
    ```

    The Rubrik REST API server responds with the details of the new SQL Server 
    host configuration.
    ```bash
    {
      "hostId": "hostId",
      "enableDatabaseBatchSnapshots": "Enabled",
      "enableVdi": "Enabled",
      "enableVdiDb": "Enabled",
      "enableGroupFetch": "Enabled",
      "enableCbtBackup": "Enabled",
      "physicalHostLogBackupThrottleMaxRefCount": 10,
      "throttlePhysicalHostMaxRefCount": 3,
      "fileTransferParallelism": 8,
      "mssqlDefaultMaxDataStreamsPerDatabase": 2,
      "fileRestoreReadParallelism": 16,
      "fileRestoreWriteParallelism": 4
    }
    ```

    ### Updating a SQL Server host configuration
    To update the configuration of a specific SQL Server host, send a PATCH 
    request to
     [`/mssql/host/configuration/{host_id}`](#operation/updateMssqlHostConfig).

    ```bash
    curl -X PATCH -d \
     '{
       "enableDatabaseBatchSnapshots": true,
       "enableVdi": true,
       "enableVdiDb": false,
       "enableGroupFetch": false,
       "enableCbtBackup": false,
       "physicalHostLogBackupThrottleMaxRefCount": 10,
       "throttlePhysicalHostMaxRefCount": 3,
       "fileTransferParallelism": 8,
       "mssqlDefaultMaxDataStreamsPerDatabase": 2,
       "fileRestoreReadParallelism": 16,
       "fileRestoreWriteParallelism": 4
     }' \
    "https://$cluster_address/api/v1//mssql/host/configuration/{host_id}"
    ```

    The Rubrik REST API server responds with the updated configuration details of 
    the specified SQL Server host.

    ```bash
    {
      "enableDatabaseBatchSnapshots": "Enabled",
      "enableVdi": "Enabled",
      "enableVdiDb": "Enabled",
      "enableGroupFetch": "Enabled",
      "enableCbtBackup": "Enabled",
      "physicalHostLogBackupThrottleMaxRefCount": 10,
      "throttlePhysicalHostMaxRefCount": 3,
      "fileTransferParallelism": 8,
      "mssqlDefaultMaxDataStreamsPerDatabase": 2,
      "fileRestoreReadParallelism": 16,
      "fileRestoreWriteParallelism": 4
    }
    ```

    ### Deleting a SQL Server host configuration
    To delete a specific SQL Server host configuration, send a DELETE request to
     [`/mssql/host/configuration/{host_id}`](#operation/deleteMssqlHostConfig).

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/mssql/host/configuration/{host_id}"
    ```

    The Rubrik REST API server deletes the specified SQL Server host configuration.

    # Oracle Databases

    ## Delete Downloaded Oracle Db Snapshots and Log Snapshots

    To request an asynchronous job to expire downloaded database snapshots taken during a specified time period as well as log snapshots that contain any logs with timestamps within that time period, send a DELETE request to the [`/oracle/db/{id}/downloaded_snapshots`](#operation/deleteDownloadedSnapshots) endpoint with optional query parameters before_time and after_time.

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/oracle/db/{id}/downloaded_snapshots?before_time=2016-01-01T01:23:45.678&after_time=2016-01-01T01:23:45.678"
      ```
    An async request is returned and can be polled to retrieve the job status.

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/internal/oracle/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "QUEUED"
    }
    ```

    ## Provide Estimate for Restore Operation Download

    To request the number of bytes that must be downloaded for a restore operation for an Oracle database, send a GET request to the [`/oracle/db/{id}/restore_estimate`](#operation/oracleRestoreEstimate) endpoint with the snapshot ID or the time to be restored to.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/oracle/db/{id}/restore_estimate?recovery_time=2016-01-01T01:23:45.678"
    ```
    An OracleRestoreEstimateResult object is returned which stores the number of bytes which are needed to restore.

    ```bash
    {
      "bytesToRestore": "$bytesToRestore",
    }
    ```

    ## Bulk Update Oracle Databases

    To update a list of Oracle Databases in bulk, send a PATCH request to the [`/oracle/db/bulk`](#operation/bulkUpdateOracleDb) endpoint with a bulk_update_properties to complete a update.

    ```bash
    curl -X PATCH \
      -d '{
        "ids": "$ids",
        "logBackupFrequencyInMinutes": "$logBackupFrequencyInMinutes",
        "logRetentionHours": "$logRetentionHours",
        "hostLogRetentionHours": "$hostLogRetentionHours",
        "numChannels": "$numChannels",
        "hostMount": "string",
        "configuredSlaDomainIdDeprecated": "string",
        "nodeOrder": [
          {
            "nodeName": "string",
            "order": 0
          }
        ]
      }' \
      "https://$cluster_address/api/v1/oracle/db/bulk"
    ```

    A BulkOracleDbDetails object contains an array of OracleDbDetail is returned.

    ## Bulk Update Oracle Hosts

    To update a list of Oracle hosts in bulk, send a PATCH request to the [`/oracle/host/bulk`](#operation/bulkUpdateOracleHost) endpoint with a bulk_update_properties to complete a update.

    ```bash
    curl -X PATCH \
      -d '{
        "ids": "$ids",
        "logBackupFrequencyInMinutes": "$logBackupFrequencyInMinutes",
        "logRetentionHours": "$logRetentionHours",
        "hostLogRetentionHours": "$hostLogRetentionHours",
        "numChannels": "$numChannels",
        "hostMount": "string",
        "configuredSlaDomainIdDeprecated": "string",
        "nodeOrder": [
          {
            "nodeName": "string",
            "order": 0
          }
        ]
      }' \
      "https://$cluster_address/api/v1/oracle/host/bulk"
    ```

    A BulkOracleHostDetails object contains an array of OracleHostDetail is returned.

    ## Bulk Update Oracle RACs

    To update a list of Oracle RACs in bulk, send a PATCH request to the [`/oracle/rac/bulk`](#operation/bulkUpdateOracleRac) endpoint with a bulk_update_properties to complete a update.

    ```bash
    curl -X PATCH \
      -d '{
        "ids": "$ids",
        "logBackupFrequencyInMinutes": "$logBackupFrequencyInMinutes",
        "logRetentionHours": "$logRetentionHours",
        "hostLogRetentionHours": "$hostLogRetentionHours",
        "numChannels": "$numChannels",
        "hostMount": "string",
        "configuredSlaDomainIdDeprecated": "string",
        "nodeOrder": [
          {
            "nodeName": "string",
            "order": 0
          }
        ]
      }' \
      "https://$cluster_address/api/v1/oracle/rac/bulk"
    ```

    A BulkOracleRacDetails object contains an array of OracleRacDetail is returned.

    ## Trigger a ORACLE_VALIDATE_BACKUP job to validate backups of selected recovery point on a choosing Oracle host

    To request an asynchronous job to validate backups of selected recovery point on a choosing Oracle host or Oracle RAC, send a POST request to the [`/oracle/db/{id}/validate`](#operation/createOracleValidateBackupJob) endpoint with a OracleValidateConfig.

    ```bash
    curl -X POST \
      -d '{
        "config": {
          "recoveryPoint": { "timestampMs": 12345 },
          "targetOracleHostOrRacId": "54321":,
          "sgaMaxSize": 4,
          "targetOracleHome": "/fullpath/for/oracleHome",
          "targetMountPath": "/fullpath/for/mountPath",
          "numChannels": 4
        }
      }' \
      "https://$cluster_address/api/v1/oracle/db/{id}/validate
      ```
    An async request is returned and can be polled to retrieve the job status.

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/internal/oracle/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "QUEUED"
    }
    ```

    ## Get a download link of example Advanced Recovery Options file

    To get a link to download an example Advanced Recovery Options file, send a GET request to the [`/oracle/aco_example_download_link`](#operation/getExampleAcoDownloadLink) endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/oracle/aco_example_download_link"
    ```

    An OracleFileDownloadLink object is returned which has a link to download the sample Advanced Recovery Options file.

    ## Update Oracle Data Guard Group

    To update an Oracle Data Guard group, send a PATCH request to the [`/oracle/data_guard_group/{id}`](#operation/updateOracleDataGuardGroup) endpoint. Edit the update_properties field with the properties to be updated.

    ```bash
    curl -X PATCH \
      -d '{
        "logBackupFrequencyInMinutes": "$logBackupFrequencyInMinutes",
        "logRetentionHours": "$logRetentionHours",
        "hostLogRetentionHours": "$hostLogRetentionHours",
        "numChannels": "$numChannels",
        "hostMount": "string",
        "shouldBackupFromPrimaryOnly": false,
        "preferredDGMemberUniqueNames": ["unique_name"]
        ]
      }' \
      "https://$cluster_address/api/v1/oracle/data_guard_group/{id}"
    ```

    The Rubrik REST API server responds with an OracleDbDetail object containing information about the Data Guard group.
    ```bash
    {
      "id": "OracleDatabase:::1e7d288f-deed-4d72-a3a2-ad578c093f2e",
      "name": "rbk",
      "configuredSlaDomainId": "INHERIT",
      "configuredSlaDomainName": "Inherit",
      "configuredSlaDomainType": "ProtectionSla",
      "primaryClusterId": "55a8c22c-424c-41ee-91e0-94c282281e4b",
      "isConfiguredSlaDomainRetentionLocked": false,
      "effectiveSlaDomainId": "UNPROTECTED",
      "effectiveSlaDomainName": "Unprotected",
      "isEffectiveSlaDomainRetentionLocked": false,
      "effectiveSlaSourceObjectId": "Global:::All",
      "slaAssignment": "Unassigned",
      "retentionSlaDomainId": "UNPROTECTED",
      "infraPath": [],
      "isRelic": false,
      "numTablespaces": 0,
      "logBackupFrequencyInMinutes": 0,
      "numMissedSnapshot": 0,
      "includeBackupTaskInfo": true,
      "isDbLocalToTheCluster": true,
      "hostLogRetentionHours": 0,
      "isArchiveLogModeEnabled": true,
      "dbUniqueName": "DG_rbk",
      "dataGuardType": "DataGuardGroup",
      "dataGuardGroupMembers": [
        {
          "dbUniqueName": "rbk",
          "role": "PRIMARY",
          "standaloneHostId": "OracleHost:::d108cb3f-e4c6-4579-8aa1-f471940d6f8f",
          "standaloneHostName": "oel75-121-dg-primary-20210421023956"
        }
      ],
      "logRetentionHours": 720,
      "numChannels": 1,
      "hostMount": "/var/rubrik/oracle",
      "tablespaces": [],
      "snapshotCount": 0,
      "isLiveMount": false,
      "hostsInfo": [
        {
          "id": "Host:::0134de15-10b7-4296-a0b4-7232d2a9edaa",
          "hostname": "10.0.188.224",
          "oracleSysDbaUser": "oracle",
          "oracleQueryUser": "oracle"
        }
      ],
      "shouldBackupFromPrimaryDGGroupMemberOnly": true,
      "preferredDGMemberUniqueNames": []
    }
    ```

    ## Retrieving Oracle databases
    ### Retrieving a summary of all Oracle databases

    To get a list of Oracle databases, send a GET request to the [`/oracle/db`](#operation/queryOracleDbV1) endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/oracle/db"
    ```

    The Rubrik REST API server responds with a list of OracleDbSummary objects containing information about the databases.

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "OracleDatabase:::912819e7-d603-4c1a-860a-88ba9c15b930",
          "name": "rbk",
          "configuredSlaDomainId": "INHERIT",
          "configuredSlaDomainName": "Inherit",
          "configuredSlaDomainType": "ProtectionSla",
          "primaryClusterId": "55a8c22c-424c-41ee-91e0-94c282281e4b",
          "isConfiguredSlaDomainRetentionLocked": false,
          "effectiveSlaDomainId": "UNPROTECTED",
          "effectiveSlaDomainName": "Unprotected",
          "isEffectiveSlaDomainRetentionLocked": false,
          "effectiveSlaSourceObjectId": "Global:::All",
          "slaAssignment": "Unassigned",
          "retentionSlaDomainId": "UNPROTECTED",
          "infraPath": [
            {
              "name": "oel75-121-dg-primary-20210421023956",
              "id": "OracleHost:::d108cb3f-e4c6-4579-8aa1-f471940d6f8f"
            }
          ],
          "isRelic": false,
          "numTablespaces": 5,
          "numMissedSnapshot": 0,
          "includeBackupTaskInfo": false,
          "isDbLocalToTheCluster": true,
          "hostLogRetentionHours": 0,
          "sid": "rbk",
          "standaloneHostId": "OracleHost:::d108cb3f-e4c6-4579-8aa1-f471940d6f8f",
          "numInstances": 1,
          "instances": [
            {
              "hostName": "10.0.188.224",
              "instanceSid": "rbk"
            }
          ],
          "isArchiveLogModeEnabled": true,
          "standaloneHostName": "oel75-121",
          "archiveLogDestinations": [
            ""
          ],
          "isPrimary": true,
          "dbUniqueName": "rbk",
          "databaseRole": "PRIMARY",
          "dataGuardType": "DataGuardMember",
          "dataGuardGroupId": "OracleDatabase:::1e7d288f-deed-4d72-a3a2-ad578c093f2e",
          "dataGuardGroupName": "DG_rbk"
        }
      ],
      "total": 1
    }
    ```

    ### Retrieving detailed information for a specific Oracle database

    To get detailed information about an Oracle Database, send a GET request to the [`/oracle/db/{id}`](#operation/getOracleDbV1) endpoint where, {id} is the ID of the Oracle database.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/oracle/db/$oracle_database_id"
    ```

    The Rubrik REST API server responds with an OracleDbDetail object containing information about the specified  database.

    ```bash
    {
      "id": "OracleDatabase:::912819e7-d603-4c1a-860a-88ba9c15b930",
      "name": "rbk",
      "configuredSlaDomainId": "INHERIT",
      "configuredSlaDomainName": "Inherit",
      "configuredSlaDomainType": "ProtectionSla",
      "primaryClusterId": "55a8c22c-424c-41ee-91e0-94c282281e4b",
      "isConfiguredSlaDomainRetentionLocked": false,
      "effectiveSlaDomainId": "UNPROTECTED",
      "effectiveSlaDomainName": "Unprotected",
      "isEffectiveSlaDomainRetentionLocked": false,
      "effectiveSlaSourceObjectId": "Global:::All",
      "slaAssignment": "Unassigned",
      "retentionSlaDomainId": "UNPROTECTED",
      "infraPath": [
        {
          "name": "oel75-121-dg-primary-20210421023956",
          "id": "OracleHost:::d108cb3f-e4c6-4579-8aa1-f471940d6f8f"
        }
      ],
      "isRelic": false,
      "numTablespaces": 5,
      "logBackupFrequencyInMinutes": 0,
      "numMissedSnapshot": 0,
      "includeBackupTaskInfo": true,
      "isDbLocalToTheCluster": true,
      "hostLogRetentionHours": 0,
      "sid": "rbk",
      "standaloneHostId": "OracleHost:::d108cb3f-e4c6-4579-8aa1-f471940d6f8f",
      "numInstances": 1,
      "instances": [
        {
          "hostName": "10.0.188.224",
          "instanceSid": "rbk"
        }
      ],
      "isArchiveLogModeEnabled": true,
      "standaloneHostName": "oel75-121-dg-primary-20210421023956",
      "archiveLogDestinations": [
        ""
      ],
      "isPrimary": true,
      "dbUniqueName": "rbk",
      "databaseRole": "PRIMARY",
      "dataGuardType": "DataGuardMember",
      "dataGuardGroupId": "OracleDatabase:::1e7d288f-deed-4d72-a3a2-ad578c093f2e",
      "dataGuardGroupName": "DG_rbk",
      "logRetentionHours": 720,
      "numChannels": 1,
      "hostMount": "/var/rubrik/oracle",
      "tablespaces": [
        "SYSAUX",
        "SYSTEM",
        "UNDOTBS1",
        "USERS",
        "TEMP"
      ],
      "snapshotCount": 0,
      "oracleHome": "/u01/app/oracle/product/12.1.0.2/dbhome_1",
      "isLiveMount": false,
      "hostsInfo": [
        {
          "id": "Host:::0134de15-10b7-4296-a0b4-7232d2a9edaa",
          "hostname": "10.0.188.224",
          "oracleSysDbaUser": "oracle",
          "oracleQueryUser": "oracle"
        }
      ]
    }
    ```

    ## Updating Oracle Database

    To update an Oracle database, send a PATCH request to the [`/oracle/db/{id}`](#operation/updateOracleDbV1) endpoint. Edit the update_properties field with the properties to be updated.

    ```bash
    curl -X PATCH \
      -d '{
        "logBackupFrequencyInMinutes": "$logBackupFrequencyInMinutes",
        "logRetentionHours": "$logRetentionHours",
        "hostLogRetentionHours": "$hostLogRetentionHours",
        "numChannels": "$numChannels",
        "hostMount": "$hostMount"
        ]
      }' \
      "https://$cluster_address/api/v1/oracle/db/$oracle_database_id"
    ```

    The Rubrik REST API server responds with an OracleDbDetail object containing information about the updated database.
    ```bash
    {
      "id": "OracleDatabase:::912819e7-d603-4c1a-860a-88ba9c15b930",
      "name": "rbk",
      "configuredSlaDomainId": "INHERIT",
      "configuredSlaDomainName": "Inherit",
      "configuredSlaDomainType": "ProtectionSla",
      "primaryClusterId": "55a8c22c-424c-41ee-91e0-94c282281e4b",
      "isConfiguredSlaDomainRetentionLocked": false,
      "effectiveSlaDomainId": "UNPROTECTED",
      "effectiveSlaDomainName": "Unprotected",
      "isEffectiveSlaDomainRetentionLocked": false,
      "effectiveSlaSourceObjectId": "Global:::All",
      "slaAssignment": "Unassigned",
      "retentionSlaDomainId": "UNPROTECTED",
      "infraPath": [
        {
          "name": "oel75-121-dg-primary-20210421023956",
          "id": "OracleHost:::d108cb3f-e4c6-4579-8aa1-f471940d6f8f"
        }
      ],
      "isRelic": false,
      "numTablespaces": 5,
      "logBackupFrequencyInMinutes": 0,
      "numMissedSnapshot": 0,
      "includeBackupTaskInfo": true,
      "isDbLocalToTheCluster": true,
      "hostLogRetentionHours": 0,
      "sid": "rbk",
      "standaloneHostId": "OracleHost:::d108cb3f-e4c6-4579-8aa1-f471940d6f8f",
      "numInstances": 1,
      "instances": [
        {
          "hostName": "10.0.188.224",
          "instanceSid": "rbk"
        }
      ],
      "isArchiveLogModeEnabled": true,
      "standaloneHostName": "oel75-121-dg-primary-20210421023956",
      "archiveLogDestinations": [
        ""
      ],
      "isPrimary": true,
      "dbUniqueName": "rbk",
      "databaseRole": "PRIMARY",
      "dataGuardType": "DataGuardMember",
      "dataGuardGroupId": "OracleDatabase:::1e7d288f-deed-4d72-a3a2-ad578c093f2e",
      "dataGuardGroupName": "DG_rbk",
      "logRetentionHours": 720,
      "numChannels": 1,
      "hostMount": "/var/rubrik/oracle",
      "tablespaces": [
        "SYSAUX",
        "SYSTEM",
        "UNDOTBS1",
        "USERS",
        "TEMP"
      ],
      "snapshotCount": 0,
      "oracleHome": "/u01/app/oracle/product/12.1.0.2/dbhome_1",
      "isLiveMount": false,
      "hostsInfo": [
        {
          "id": "Host:::0134de15-10b7-4296-a0b4-7232d2a9edaa",
          "hostname": "10.0.188.224",
          "oracleSysDbaUser": "oracle",
          "oracleQueryUser": "oracle"
        }
      ]
    }
    ```

    ## Get Oracle Advanced Cloning Options (ACO) parameters

    To get a list of supported ACO parameter names, send a GET request to the [`/oracle/aco_parameter_list`](#operation/getAcoParameterList) endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/oracle/aco_parameter_list"
    ```

    The Rubrik REST API server responds with an OracleAcoParameterList object which contains the list of supported ACO parameter names.

    ## Validate an Oracle Advanced Cloning Options (ACO) config file

    To validate an ACO file, send a POST request to the [`/oracle/validate_aco_file`](#operation/validateOracleAcoFile) endpoint. Send the base 64 encoded string of the ACO file contents in the body and a boolean determining whether the ACO file is for a Live Mount or not, as a query parameter.
    ```bash
    curl -X POST \
      -d '{
        "aco_contents_base64": "$aco_contents_base64"
      }' \
      "https://$cluster_address/api/v1/oracle/validate_aco_file?is_live_mount={is_live_mount}
    ```

    The Rubrik REST API server validates the given ACO file contents and returns an OracleAcoValidationResult containing the validation result of the ACO file given.

    # vApps

    The Rubrik cluster protects vApps running in a VMware vCloud Director environment through the vCloud Director REST APIs.
    The Rubrik cluster must connect to the underlying vCenter servers to protect vApps.

    ## vApp Templates

    The Rubrik cluster protects vApp template objects through the vCloud Director APIs.

    ## vCloud Director server

    A Rubrik cluster protects and manages vApps and vApp templates through the vCloud Director server that administers those
    vApps. After a vCloud Director server is added to a Rubrik cluster, the Rubrik cluster automatically discovers the vApps
    administered under the server.

    ### Retrieving details for a vApp template snapshot export

    To retrieve the options available for exporting a specified vApp template snapshot to an organization vDC and available
    storage policies, send a GET request
    to [`/vcd/vapp/template/snapshot/{snapshot_id}/export/options`](#operation/getVappTemplateSnapshotExportOptions).

    To filter the results of the GET request sent to the 
    [`/vcd/vapp/template/snapshot/{snapshot_id}/export/options`](#operation/getVappTemplateSnapshotExportOptions)
    endpoint, configure the following query parameters before sending the request.

    | Parameter  | Required | Type   | Description |
    | ---------- | -------- | ------ | ----------- |
    |`catalog_id`| Required | string | ID of the target Catalog object.|
    |`name`      | Required | string | Name of template object to be created. This is used to verify the existence of a template with the given name. Templates must have unique names.
    |`org_vdc_id`| Optional | string | ID assigned to a target organization VDC object. This parameter is required when advanced export options are used.

    A vApp template export targets a catalog and requires a valid storage policy and organization vDC. There are three
    options available for export of a vApp template -

    * **OriginalVdcExportOptions** - This option is used to export to the original organization vDC of the vApp template
      when the snapshot was taken. Only available when the catalog to export is under the same organization as the original
      organization vDC and the vDC is still active.
      `org_vdc_id` is not required when using this option.
    * **DefaultCatalogExportOptions** - This option is used to export to the vDC corresponding to the default storage policy
      of the catalog. This option is unavailable for catalogs that do not have storage policies.
      `org_vdc_id` is not required when using this option.
    * **AdvancedExportOptions** - This option is used to export to a specific organization vDC under the same organization
      as the Catalog to export. The GET request returns the choices of storage policies available.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vcd/vapp/template/snapshot/$snapshot_id/export/options?catalog_id=$catalog_id&name=$template_name"
    ```

    The Rubrik REST API responds with a `VappTemplateExportOptionsUnion` object which has fields for all the above options.

    **Note:** To shorten the example, the response uses ellipses to replace some members.

    ```bash
    {
      "hasMore": false,
      "originalVdcExportOptions" :
        {
          "orgVdcId": "$org_vdc_id1",
          "availableStoragePolicies": [
            ...
          ]
        },
       "defaultCatalogExportOptions" :
        {
          "orgVdcId": "$org_vdc_id1",
          "availableStoragePolicies": [
            ...
          ]
        },
       "advancedExportOptions" :
        {
          "orgVdcId": "$org_vdc_id1",
          "availableStoragePolicies": [
            ...
          ]
        }
    }
    ```

    ### Exporting a vApp template snapshot

    To create a new vApp template in a catalog using the export feature, send a POST request to the 
    [`/vcd/vapp/template/snapshot/{snapshot_id}/export`](#operation/createVappTemplateSnapshotExport) endpoint.
    The request takes the snapshot_id as a path parameter. The request payload includes the parameters described in the 
    following table.

    | Name            | Required | Type   | Description |
    | --------------- | -------- | ------ | ----------- |
    |`name`           | Required | string | Name of vApp template to be created.|
    |`catalogId`      | Required | string | ID of the Catalog where the vApp template is created.|
    |`orgVdcId`       | Required | string | ID of the organization vDC where the vApp template is created.|
    |`storagePolicyId`| Required | string | ID of the organization vDC storage policy to be used. In case a storage policy ID is not provided, the default storage policy of the organization vDC is used.

    **Note:** The Catalog and organization vDC must belong to the same organization. When providing a storage policy, that
    storage policy must be present in the organization vDC.

    ```bash
    curl -X POST -d \
      '{
        "name": "$template_name",
        "catalogId": "$catalog_id",
        "orgVdcId": "$org_vdc_id"
       }' \
       "https://$cluster_address/api/v1/vcd/vapp/template/snapshot/$snapshot_id/export"
    ```

    The Rubrik REST API server initiates the asynchronous request task and responds with the the details of the
    AsyncRequestStatus request.

    ```bash
    {
      "id": "$request_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vcd/vapp/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    ### Retrieving summary of vApps

    To retrieve the summary information for all vCD vApp objects, send a GET request to the
    [`/vcd/vapp`](#operation/queryVcdVappsV1) endpoint. The parameters described in the following table are available to 
    filter the results of the GET request.

    | Name                     | Required | Type    | Description |
    | ------------------------ | -------- | ------- | ----------- |
    |`sort_by`                 | Optional | string  | Attribute to sort the vCD vApp list on.|
    |`sort_order`              | Optional | string  | Order for sorting the results, either ascending or descending.|
    |`limit`                   | Optional | int     | Limit the number of matches returned.|
    |`offset`                  | Optional | int     | Number of matches to ignore from the beginning of the results.|
    |`name`                    | Optional | string  | Search for a vCD vApp object by name.|
    |`is_relic`                | Optional | boolean | Filter by isRelic field of vCD vApp object. Returns both relic and non-relic vApps when this value is not specified.|
    |`effective_sla_domain_id` | Optional | string  | SLA Domain applied to the virtual machine, either directly or derived.|
    |`primary_cluster_id`      | Optional | string  | Filter by primary cluster ID, or **local**.|
    |`sla_assignment`          | Optional | string  | Filter by SLA assignment type.|
    |`include_backup_task_info`| Optional | boolean | Include backup task information in response.|

     ```bash
     curl -X GET "https://$cluster_address/api/v1/vcd/vapp"
     ```

    The Rubrik REST API server responds with a list of vApp objects that fit the specified parameters. The response is a 
    List of VcdVappSummary objects.

     ```bash
     {
      "hasMore": true,
      "data": [
        {
          "id": "$vappId",
          "name": "$vappName",
          "configuredSlaDomainId": "INHERIT",
          "configuredSlaDomainName": "Inherit",
          "configuredSlaDomainType": "ProtectionSla",
          "primaryClusterId": "$primaryClusterId",
          "isConfiguredSlaDomainRetentionLocked": true,
          "slaLastUpdateTime": "$slaLastUpdateTime",
          "effectiveSlaDomainId": "UNPROTECTED",
          "effectiveSlaDomainName": "Unprotected",
          "isEffectiveSlaDomainRetentionLocked": true,
          "effectiveSlaDomainPolarisManagedId": "$effectiveSlaDomainPolarisManagedId",
          "effectiveSlaSourceObjectId": "$effectiveSlaSourceObjectId",
          "effectiveSlaSourceObjectName": "$effectiveSlaSourceObjectName",
          "slaAssignment": "Derived",
          "retentionSlaDomainId": "$retentionSlaDomainId",
          "vcdClusterId": "$vcdId",
          "vcdClusterName": "$vcdClusterName",
          "infraPath": [
            ...
          ],
          "isRelic": true,
          "numMissedSnapshot": 0,
          "lastSnapshotTime": "$lastSnapshotTime",
          "includeBackupTaskInfo": true,
          "currentBackupTaskInfo": {
            "taskStatus": "Queued",
            "queueTime": "$queueTime",
            "expectedEndTime": "$expectedEndTime"
          },
          "isTemplate": true,
          "catalogId": "$catalogId",
          "pendingSlaDomain": {
            "objectId": "$objectId",
            "pendingSlaDomainId": "$pendingSlaDomain",
            "pendingSlaDomainName": "$pendingSlaDomainName",
            "isPendingSlaDomainRetentionLocked": true
          }
        }
      ],
      "total": 0
    }
     ```

    ### Retrieving details for a specific vApp

    To retrieve detailed information about a specific vApp, send a GET request to
    [`/vcd/vapp/{id}`](#operation/getVcdVappV1), where {id} is the ID of a vApp object.

     ```bash
     curl -X GET -d "https://$cluster_address/api/v1/vcd/vapp/{id}"
     ```

    The Rubrik REST API server responds with the details (VcdVappDetail) of the specified vApp object.

     ```bash
    {
      "id": "string",
      "status": "string",
      "progress": 0,
      "startTime": "2021-03-16T04:37:38.913Z",
      "endTime": "2021-03-16T04:37:38.913Z",
      "nodeId": "string",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "string",
          "rel": "string"
        }
      ]
    }
     ```

    ### Updating vApp

    To make changes to the parameters of a specified vApp object, send a PATCH request
    to [`/vcd/vapp/{id}`](#operation/updateVcdVappV1), where {id} is the ID of the vApp object to be updated. The request
    payload of the PATCH request includes the parameters to be updated.

    | Name |  Description | Notes |
      | ---- | ------------ | ----- |
    | configured_sla_domain_id | ID of the SLA Domain object that manages protection for the specified vApp object. Existing snapshots of the vApp object will be retained with the configuration of the specified SLA Domain. | optional |
    | is_paused | Boolean value that indicates whether protection activity is paused for the specified vApp. Set to &#39;true&#39; when protection activity is paused and &#39;false&#39; when protection activity is not paused. Protection activity includes: backup, replication, and archiving. | optional |
    | is_best_effort_synchronization_enabled | Boolean value that indicates whether the Rubrik cluster should attempt taking synchronized snapshots across all child Virtual Machines of the vApp object. | optional |
    | vcd_vm_moids_to_exclude_from_snapshot | Array containing vCloud Director Virtual Machine moids that will be excluded from the vApp snapshots. | optional |

    ```bash
     curl -X PATCH -d \
      '{
        "configuredSlaDomainId": "$sla_domain_id",
        "isPaused": "true",
        "isBestEffortSynchronizationEnabled": "true",
        "vcdVmMoidsToExcludeFromSnapshot": "$vm_moids_to_exclude"
       }' \
       "https://$cluster_address/api/v1/vcd/vapp/{id}"
     ```

    The Rubrik REST API server responds with the details (VcdVappDetail) of the updated vApp object.

     ```bash
    {
      "configuredSlaDomainId": "INHERIT",
      "isPaused": true,
      "isBestEffortSynchronizationEnabled": true,
      "vcdVmMoidsToExcludeFromSnapshot": [
        ...
      ],
      "id": "$vappId",
      "name": "$name",
      "configuredSlaDomainName": "Inherit",
      "configuredSlaDomainType": "ProtectionSla",
      "primaryClusterId": "$primaryClusterId",
      "isConfiguredSlaDomainRetentionLocked": true,
      "slaLastUpdateTime": "$slaLastUpdateTime",
      "effectiveSlaDomainId": "UNPROTECTED",
      "effectiveSlaDomainName": "Unprotected",
      "isEffectiveSlaDomainRetentionLocked": true,
      "effectiveSlaDomainPolarisManagedId": "$effectiveSlaDomainPolarisManagedId",
      "effectiveSlaSourceObjectId": "$effectiveSlaSourceObjectId",
      "effectiveSlaSourceObjectName": "effectiveSlaSourceObjectName",
      "slaAssignment": "Derived",
      "retentionSlaDomainId": "$retentionSlaDomainId",
      "vcdClusterId": "$vcdClusterId",
      "vcdClusterName": "$vcdClusterName",
      "infraPath": [
        ...
      ],
      "isRelic": true,
      "numMissedSnapshot": 0,
      "lastSnapshotTime": "$lastSnapshotTime",
      "includeBackupTaskInfo": true,
      "currentBackupTaskInfo": {
        "taskStatus": "Queued",
        "queueTime": "$queueTime",
        "expectedEndTime": "$expectedEndTime"
      },
      "isTemplate": true,
      "catalogId": "$catalogId",
      "pendingSlaDomain": {
        "objectId": "$objectId",
        "pendingSlaDomainId": "$pendingSlaDomainId",
        "pendingSlaDomainName": "$pendingSlaDomainName",
        "isPendingSlaDomainRetentionLocked": true
      },
      "networks": [
        ...
      ],
      "vms": [
        ...
      ]
    }
     ```

    ### Retrieving summary information for all vApp snapshots

    ## vApp snapshots

    To retrieve summary information for each of the snapshot objects of a specified vApp object, send a GET request
    to [`/vcd/vapp/{id}/snapshot`](#operation/queryVappSnapshotV1), where {id} is the ID of the vApp object.

     ```bash
     curl -X GET -d "https://$cluster_address/api/v1/vcd/vapp/{id}/snapshot"
     ```

    The Rubrik REST API server responds with the details of all the snapshots of the specified vApp. 
    The response is a List of VcdVappSnapshotSummary objects.

     ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "$vappId",
          "date": "$date",
          "expirationDate": "$expirationDate",
          "sourceObjectType": "$sourceObjectType",
          "isOnDemandSnapshot": true,
          "isCustomRetentionApplied": true,
          "cloudState": 0,
          "consistencyLevel": "#consistencyLevel",
          "indexState": 0,
          "replicationLocationIds": [
            "string"
          ],
          "archivalLocationIds": [
            "string"
          ],
          "slaId": "$slaId",
          "slaName": "$slaName",
          "isRetainedByRetentionLockSla": true,
          "cloudStorageTier": "Hot",
          "isPlacedOnLegalHold": true,
          "snapshotRetentionInfo": {
            "localInfo": {
              "id": "string",
              "name": "string",
              "isSnapshotPresent": true,
              "isExpirationDateCalculated": true,
              "expirationTime": "$expirationTime",
              "snapshotFrequency": "$snapshotFrequency",
              "isExpirationInformationUnavailable": true
            },
            "archivalInfos": [
              {
                "id": "$id",
                "name": "$name",
                "isSnapshotPresent": true,
                "isExpirationDateCalculated": true,
                "expirationTime": "$expirationTime",
                "snapshotFrequency": "$snapshotFrequency",
                "isExpirationInformationUnavailable": true
              }
            ],
            "replicationInfos": [
              {
                "id": "$id",
                "name": "$name",
                "isSnapshotPresent": true,
                "isExpirationDateCalculated": true,
                "expirationTime": "$expirationTime",
                "snapshotFrequency": "$snapshotFrequency",
                "isExpirationInformationUnavailable": true
              }
            ],
            "cloudNativeLocationInfo": [
              {
                "id": "$id",
                "name": "$name",
                "isSnapshotPresent": true,
                "isExpirationDateCalculated": true,
                "expirationTime": "$expirationTime",
                "snapshotFrequency": "$snapshotFrequency",
                "isExpirationInformationUnavailable": true
              }
            ]
          },
          "parentSnapshotId": "$parentSnapshotId",
          "vappName": "$vappName",
          "isSynchronized": true,
          "vmSnapshots": [
            {
              "vcenterVmId": "$vcenterVmId",
              "vmSnapshotId": "$vmSnapshotId",
              "vmName": "$vmName",
              "vcdVmMoid": "$vcdVmMoid",
              "indexState": 0
            }
          ]
        }
      ],
      "total": 0
    }
     ```

    ## Creating an on-demand snapshot for a vApp

    To create an on-demand snapshot for a specified vApp object, send a POST request to
    [`/vcd/vapp/{id}/snapshot`](#operation/createOnDemandSnapshotV1), where {id} is the ID of the vApp object.

     ```bash
     curl -X POST -d "https://$cluster_address/api/v1/vcd/vapp/$id/snapshot"
     ```

    The Rubrik REST API server initiates an asynchronous job to create an on-demand snapshot and returns the details of the
    AsyncRequestStatus request.

     ```bash
    {
      "id": "$requestId",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$startTime",
      "endTime": "$endTime",
      "nodeId": "$nodeId",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vcd/vapp/request/$requestId",
          "rel": "self"
        }
      ]
    }
     ```

    ### Deleting all snapshots of a vApp object

    To delete all snapshots for a specified vApp object, send a DELETE request to
    [`/vcd/vapp/{id}/snapshot`](#operation/deleteVappSnapshotsV1), where {id} is the ID of the vApp object whose snapshot
    needs to be deleted.

     ```bash
     curl -X DELETE -d "https://$cluster_address/api/v1/vcd/vapp/$id/snapshot"
     ```

    The Rubrik REST API server deletes all snapshots of the specified vApp.

     ```bash
    {"Snapshots deleted successfully."}
     ```

    ## Retrieving details about a specific vApp snapshot

    To retrieve detailed information about a specified snapshot for a vApp object, send a GET request
    to [`/vcd/vapp/snapshot/{id}`](#operation/getVappSnapshotV1), where {id} is the ID of the snapshot object whose details
    are required.

    ```bash
     curl -X GET -d "https://$cluster_address/api/v1/vcd/vapp/snapshot/{id}"
     ```

    The Rubrik REST API server fetches details (VcdVappSnapshotDetail) of the specified vApp snapshot.

     ```bash
    {
      "id": "$id",
      "date": "$date",
      "expirationDate": "$expirationDate",
      "sourceObjectType": "$sourceObjectType",
      "isOnDemandSnapshot": true,
      "isCustomRetentionApplied": true,
      "cloudState": 0,
      "consistencyLevel": "$consistencyLevel",
      "indexState": 0,
      "replicationLocationIds": [
        "string"
      ],
      "archivalLocationIds": [
        "string"
      ],
      "slaId": "$slaId",
      "slaName": "$slaName",
      "isRetainedByRetentionLockSla": true,
      "cloudStorageTier": "Hot",
      "isPlacedOnLegalHold": true,
      "snapshotRetentionInfo": {
        "localInfo": {
          "id": "string",
          "name": "string",
          "isSnapshotPresent": true,
          "isExpirationDateCalculated": true,
          "expirationTime": "$expirationTime",
          "snapshotFrequency": "$snapshotFrequency",
          "isExpirationInformationUnavailable": true
        },
        "archivalInfos": [
          {
            "id": "$id",
            "name": "$name",
            "isSnapshotPresent": true,
            "isExpirationDateCalculated": true,
            "expirationTime": "$expirationTime",
            "snapshotFrequency": "$snapshotFrequency",
            "isExpirationInformationUnavailable": true
          }
        ],
        "replicationInfos": [
          {
            "id": "$id",
            "name": "$name",
            "isSnapshotPresent": true,
            "isExpirationDateCalculated": true,
            "expirationTime": "$expirationTime",
            "snapshotFrequency": "$snapshotFrequency",
            "isExpirationInformationUnavailable": true
          }
        ],
        "cloudNativeLocationInfo": [
          {
            "id": "$id",
            "name": "$name",
            "isSnapshotPresent": true,
            "isExpirationDateCalculated": true,
            "expirationTime": "$expirationTime",
            "snapshotFrequency": "$snapshotFrequency",
            "isExpirationInformationUnavailable": true
          }
        ]
      },
      "parentSnapshotId": "$parentSnapshotId",
      "vappName": "$vappName",
      "isSynchronized": true,
      "vmSnapshots": [
        {
          "vcenterVmId": "$vcenterVmId",
          "vmSnapshotId": "$vmSnapshotId",
          "vmName": "$vmName",
          "vcdVmMoid": "$vcdVmMoid",
          "indexState": 0,
          "networkConnections": [
            {
              "nicIndex": 0,
              "macAddress": "$macAddress",
              "addressingMode": "DHCP",
              "ipAddress": "$ipAddress",
              "vappNetworkName": "vappNetworkName",
              "isConnected": true,
              "networkAdapterType": "$networkAdapterType"
            }
          ]
        }
      ],
      "networks": [
        {
          "name": "$name",
          "parentNetworkId": "$parentNetworkId",
          "isDeployed": true
        }
      ],
      "excludedVcdVmMoids": [
        $excludedVcdVmMoids
      ]
    }
     ```

    ### Deleting a specific vApp snapshot object

    To delete an on-demand snapshot or a snapshot from a vApp that is not assigned to an SLA Domain, send a DELETE request
    to [`/vcd/vapp/snapshot/{id}`](#operation/deleteVappSnapshotV1), where {id}  is the ID assigned to a snapshot object.

    ```bash
     curl -X DELETE -d "https://$cluster_address/api/v1/vcd/vapp/snapshot/{id}?location=$snapshot_location"
     ```

    The Rubrik REST API server deletes the specified vApp snapshot at the location ("all" or "local") specified. 

     ```bash
    {"Snapshot successfully deleted."}
     ```

    ### Retrieving details about missed snapshots for a vApp object

    To retrieve the timestamp for each missed snapshot for a specified vApp, send a GET request
    to [`/vcd/vapp/{id}/missed_snapshot`](#operation/vcdMissedSnapshotsV1). where {id} is the id of the vapp.

     ```bash
      curl -X GET -d "https://$cluster_address/api/v1/vcd/vapp/$id/missed_snapshot"
      ```

    The Rubrik REST API server fetches details about all missed snapshots (List of MissedSnapshot) of the specified vApp.

      ```bash
    {
      "hasMore": true,
      "data": [
        {
          "archivalLocationType": [
            "string"
          ],
          "missedSnapshotTime": "$missedSnapshotTime",
          "missedSnapshotTimeUnits": [
            {
              "timeUnit": "Minute",
              "frequency": 0,
              "retention": 0,
              "dayOfTime": "Monday"
            }
          ]
        }
      ],
      "total": 0
    }
      ```

    ### Retrieving exportable network configurations

    To retrieve the summary information for the vApp networks that are available for network connections from the virtual
    machines in the exported vApp snapshot, send a GET request
    to [`/vcd/vapp/snapshot/{snapshot_id}/export/options`](#operation/getVappSnapshotExportOptionsV1). This API requires the
    snapshot_id of the vApp snapshot object to export. It also requires the `export_mode`, `target_vapp_id` and the
    `target_org_vdc_id1`.

    ```bash
      curl -X GET -d "https://$cluster_address/api/v1/vcd/vapp/snapshot/$snapshot_id/export/options?export_mode=$export_mode"
      ```

    The Rubrik REST API server fetches VappExportOptions for the specified snapshot and export mode specified.

      ```bash
    {
      "restorableNetworks": [
        {
          "name": "$name",
          "parentNetworkId": "$parentNetworkId",
          "isDeployed": true,
          "newName": "$newName"
        }
      ],
      "targetVappNetworks": [
        {
          "name": "$name",
          "parentNetworkId": "$parentNetworkId",
          "isDeployed": true
        }
      ],
      "availableStoragePolicies": [
        {
          "name": "$name",
          "id": "$id"
        }
      ],
      "allChildVmsWithDefaultNetworkConnections": [
        {
          "name": "$name",
          "vcdMoid": "$vcdMoid",
          "storagePolicyId": "$storagePolicyId",
          "networkConnections": [
            {
              "nicIndex": 0,
              "macAddress": "$macAddress",
              "addressingMode": "DHCP",
              "ipAddress": "$ipAddress",
              "vappNetworkName": "$vappNetworkName",
              "isConnected": true,
              "networkAdapterType": "$networkAdapterType"
            }
          ]
        }
      ]
    }
      ```

    ### Exporting vApp snapshot

    To export the specified vApp snapshot into a new vApp or an existing vApp, send a POST request
    to [`/vcd/vapp/snapshot/{snapshot_id}/export`](#operation/createVappExportV1), where {snapshot_id} is the ID assigned to
    the vApp snapshot object.

    ```bash
        curl -X POST -d \
        '{
          "exportMode": "$exportMode",
          "newVappParams": {
            "name": "$name",
            "orgVdcId": "$orgVdcId"
          },
          "targetVappId": "$targetVappId",
          "networksToRestore": [
            {
              "name": "$name",
              "parentNetworkId": "$parentNetworkId",
              "isDeployed": true,
              "newName": "$newName"
            }
          ],
          "vmsToExport": [
            {
              "name": "$name",
              "vcdMoid": "$vcdMoid",
              "storagePolicyId": "$storagePolicyId",
              "networkConnections": [
                {
                  "nicIndex": 0,
                  "macAddress": "$macAddress",
                  "addressingMode": "DHCP",
                  "ipAddress": "$ipAddress",
                  "vappNetworkName": "$vappNetworkName",
                  "isConnected": true,
                  "networkAdapterType": "$networkAdapterType"
                }
              ]
            }
          ],
          "shouldPowerOnVappAfterExport": false
        }' \
        "https://$cluster_address/api/v1/vcd/vapp/snapshot/$snapshot_id/export"
    ```

    The Rubrik REST API server initiates an asynchronous job to export vApp snapshot and returns the details of the
    AsyncRequestStatus request.

    ```bash
    {
      "id": "$requestId",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$startTime",
      "endTime": "$endTime",
      "nodeId": "$nodeId",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vcd/vapp/request/$requestId",
          "rel": "self"
        }
      ]
    }
    ```

    ### Recovering vApp objects of virtual machines

    To instantly recover the specified vApp, send a POST request
    to [`/vcd/vapp/snapshot/{snapshot_id}/instant_recover`](#operation/createVappInstantRecoveryV1), where {snapshot_id} is
    the ID assigned to the vApp snapshot object.

    ```bash
        curl -X POST -d \
        '{
          "vmsToRestore": [
            {
              "name": "$name",
              "vcdMoid": "$vcdMoid",
              "storagePolicyId": "$storagePolicyId",
              "networkConnections": [
                {
                  "nicIndex": 0,
                  "macAddress": "$macAddress",
                  "addressingMode": "DHCP",
                  "ipAddress": "$ipAddress",
                  "vappNetworkName": "$vappNetworkName",
                  "isConnected": true,
                  "networkAdapterType": "$networkAdapterType"
                }
              ]
            }
          ],
          "shouldPowerOnVmsAfterRecovery": false
        }' \
        "https://$cluster_address/api/v1/vcd/vapp/snapshot/$snapshot_id/instant_recover"
    ```

    The Rubrik REST API server initiates an asynchronous job to Instant Recover vApp snapshot and returns the details of the
    AsyncRequestStatus request.

    ```bash
    {
      "id": "$requestId",
      "status": "$status",
      "progress": 0,
      "startTime": "$startTime",
      "endTime": "$endTime",
      "nodeId": "$nodeId",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vcd/vapp/request/$requestId",
          "rel": "self"
        }
      ]
    }
    ```

    ### Retrieving Instant Recovery information

    To retrieve the available vApp network connections and the default vApp network connection for the virtual machines in a
    vApp snapshot, send a GET request
    to [`/vcd/vapp/snapshot/{snapshot_id}/instant_recover/options`](#operation/getVappSnapshotInstantRecoveryOptionsV1),
    where {snapshot_id} is the ID of the vApp snapshot object.

    ```bash
        curl -X GET -d "https://$cluster_address/api/v1/vcd/vapp/snapshot/$snapshot_id/instant_recover/options"
    ```

    The Rubrik REST API server fetches VappInstantRecoveryOptions for the specified snapshot.

    ```bash
    {
      "restorableVms": [
        {
          "name": "$name",
          "vcdMoid": "$vcdMoid",
          "storagePolicyId": "$storagePolicyId",
          "networkConnections": [
            {
              "nicIndex": 0,
              "macAddress": "$macAddress",
              "addressingMode": "DHCP",
              "ipAddress": "$ipAddress",
              "vappNetworkName": "$vappNetworkName",
              "isConnected": true,
              "networkAdapterType": "$networkAdapterType"
            }
          ]
        }
      ],
      "availableVappNetworks": [
        {
          "name": "$name",
          "parentNetworkId": "$parentNetworkId",
          "isDeployed": true
        }
      ]
    }
    ```

    ### Retrieving vApp job status

    To retrieves the details of a specified asynchronous job for a vApp, send a GET request
    to [`/vcd/vapp/request/{id}`](#operation/getVappAsyncRequestStatusV1), where {id} is the ID assigned to an asynchronous
    job.

    ```bash
        curl -X GET -d "https://$cluster_address/api/v1/vcd/vapp/request/{id}"
    ```

    The Rubrik REST API server fetches status of a vApp asynchronous job (AsyncRequestStatus).

    ```bash
    {
      "id": "$requestId",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$startTime",
      "endTime": "$endTime",
      "nodeId": "$nodeId",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vcd/vapp/request/$requestId",
          "rel": "self"
        }
      ]
    }
    ```

    ### Searching for a file in a vApp snapshot

    To search for a file through snapshots of all virtual machines that are part of the vApp, send a GET request
    to [`/vcd/vapp/{id}/search`](#operation/searchVappV1), where {id} is the ID of the vApp. It also requires a `path`
    parameter. The parameter takes either a path prefix or a filename prefix.

    ```bash
        curl -X GET -d "https://$cluster_address/api/v1/vcd/vapp/$id/search/options?path=$path"
    ```

    The Rubrik REST API server searches a file through snapshots of all virtual machines and returns list of 
    AppSearchResponse.

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "path": "$path",
          "filename": "$filename",
          "fileVersions": [
            {
              "lastModified": "$lastModified",
              "size": 0,
              "snapshotId": "$snapshotId",
              "fileMode": "$fileMode",
              "source": "$source"
            }
          ],
          "childObjectId": "$childObjectId",
          "childObjectName": "$childObjectName"
        }
      ],
      "total": 0
    }
    ```

    ### Downloading snapshot from archive

    To retrieve a snapshot that is not available locally, from an archival location, send a POST request
    to [`/vcd/vapp/snapshot/{id}/download`](#operation/createVcdVappDownloadSnapshotFromCloudV1)z where {id} is the ID of
    the snapshot which needs to be downloaded.

    ```bash
        curl -X POST -d "https://$cluster_address/api/v1/vcd/vapp/snapshot/$id/download"
    ```

    The Rubrik REST API server initiates an asynchronous job to download vApp snapshot from archive and returns the 
    details of the AsyncRequestStatus request.

    ```bash
    {
      "id": "$requestId",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$startTime",
      "endTime": "$endTime",
      "nodeId": "$nodeId",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vcd/vapp/request/$requestId",
          "rel": "self"
        }
      ]
    }
    ```

    ### Retrieving summary for all vCD Clusters

    To retrieve the summary information for all vCD cluster objects, send a GET request
    to [`/vcd/cluster`](#operation/queryVcdClusterV1). The parameters described in the following table are available to
    filter the results of the GET request.

    | Name       | Required | Type   | Description |
    | ---------- | -------- | ------ | ----------- |
    |`name`      | Optional | string | Search for a vCD Cluster object by name.|
    |`status`    | Optional | string | Filter the results using the status value of the vCD Cluster objects.|
    |`sort_by`   | Optional | string | Attribute to sort the results on.|
    |`sort_order`| Optional | string | Order for sorting the results, either ascending or descending.|

    ```bash
        curl -X GET -d "https://$cluster_address/api/v1/vcd/cluster"
    ```

    The Rubrik REST API server fetches VcdClusterSummary for all vCD instances on the Rubrik cluster.

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "$id",
          "name": "$name",
          "configuredSlaDomainId": "INHERIT",
          "configuredSlaDomainName": "Inherit",
          "configuredSlaDomainType": "ProtectionSla",
          "primaryClusterId": "$primaryClusterId",
          "isConfiguredSlaDomainRetentionLocked": true,
          "slaLastUpdateTime": "$slaLastUpdateTime",
          "hostname": "$hostname",
          "username": "$username",
          "caCerts": "$caCerts",
          "connectionStatus": {
            "status": "Disconnected",
            "message": "string"
          }
        }
      ],
      "total": 0
    }
    ```

    ### Adding a vCD Cluster

    To create a vCD Cluster object by providing the address of the vCD Cluster and the credentials for an account on the
    vCD Cluster that has administrator privileges, send a POST request to [`/vcd/cluster`](#operation/createVcdClusterV1).

    ```bash
        curl -X POST -d \
        '{
          "hostname": "$hostname",
          "username": "$username",
          "caCerts": "$caCerts",
          "password": "$password"
        }' \
        "https://$cluster_address/api/v1/vcd/cluster"
    ```

    The Rubrik REST API server attempts to add vCD to the Rubrik cluster and returns AsyncRequestStatus of request.

    ```bash
    {
      "id": "$requestId",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$startTime",
      "endTime": "$endTime",
      "nodeId": "$nodeId",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vcd/cluster/request/$requestId",
          "rel": "self"
        }
      ]
    }
    ```

    ### Retrieving VimServers of a vCD Cluster

    To retrieve the VimServer representation of the vCenter Servers that are attached to a specified vCD Cluster object,
    send a GET request to [`/vcd/cluster/{id}/vimserver`](#operation/queryVcdVimServerV1), where {id} is the ID assigned to
    the vCD cluster. It also need two parameters `sort_by` and `sort_order` which decide the order of the results.

    ```bash
        curl -X GET -d "https://$cluster_address/api/v1/vcd/cluster/$id/vimserver"
    ```

    The Rubrik REST API server fetches VimserverSummary for all Vim servers belonging to a vCD.

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "$id",
          "name": "$name",
          "vcenterId": "$vcenterId",
          "vcdClusterId": "$vcdClusterId",
          "vcdClusterName": "$vcdClusterName",
          "hostname": "$hostname",
          "connectionStatus": {
            "status": "Disconnected",
            "message": "string"
          }
        }
      ],
      "total": 0
    }
    ```

    ### Refreshing a vCD Cluster

    To refresh the metadata for a specified vCD Cluster object, send a POST request
    to [`/vcd/cluster/{id}/refresh`](#operation/refreshVcdClusterV1), where {id} is the ID assigned to a vCD Cluster object.

    ```bash
        curl -X POST -d "https://$cluster_address/api/v1/vcd/cluster/$id/refresh"
    ```

    The Rubrik REST API server initiates an asynchronous job to refresh a vCD and returns the
    details of the AsyncRequestStatus request.

    ```bash
    {
      "id": "$requestId",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$startTime",
      "endTime": "$endTime",
      "nodeId": "$nodeId",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vcd/cluster/request/$requestId",
          "rel": "self"
        }
      ]
    }
    ```

    ### Retrieving vCD Cluster details

    To retrieve detailed information for a vCD Cluster object, send a GET request
    to [`/vcd/cluster/{id}`](#operation/getVcdClusterV1), where {id} is the ID assigned to a vCD Cluster object.

    ```bash
        curl -X GET -d "https://$cluster_address/api/v1/vcd/cluster/{id}"
    ```

    The Rubrik REST API server fetches VcdClusterDetail for the specified vCD instance.

    ```bash
    {
      "id": "$id",
      "name": "$name",
      "configuredSlaDomainId": "$configuredSlaDomainId",
      "configuredSlaDomainName": "$configuredSlaDomainName",
      "configuredSlaDomainType": "ProtectionSla",
      "primaryClusterId": "$primaryClusterId",
      "isConfiguredSlaDomainRetentionLocked": true,
      "slaLastUpdateTime": "$slaLastUpdateTime",
      "hostname": "$hostname",
      "username": "$username",
      "caCerts": "$caCerts",
      "connectionStatus": {
        "status": "Disconnected",
        "message": "string"
      }
    }
    ```

    ### Changing vCD Cluster object

    To modify the hostname and credentials of a specified vCD Cluster object, send a PATCH request
    to [`/vcd/cluster/{id}`](#operation/updateVcdClusterV1), where {id} is the ID assigned to a vCD Cluster object. It also
    requires a parameter named `patch_properties` which contains the updated hostname and credentials for a specified vCD
    Cluster object.

    ```bash
        curl -X PATCH -d \
        '{
          "hostname": "$hostname",
          "username": "$username",
          "password": "$password",
          "caCerts": "$caCerts",
          "configuredSlaDomainId": "$configuredSlaDomainId"
        }' \
        "https://$cluster_address/api/v1/vcd/cluster/{id}"
    ```

    The Rubrik REST API server updates and fetches the updated VcdClusterDetail for the specified vCD instance.

    ```bash
    {
      "id": "$id",
      "name": "$name",
      "configuredSlaDomainId": "$configuredSlaDomainId",
      "configuredSlaDomainName": "$configuredSlaDomainName",
      "configuredSlaDomainType": "ProtectionSla",
      "primaryClusterId": "$primaryClusterId",
      "isConfiguredSlaDomainRetentionLocked": true,
      "slaLastUpdateTime": "$slaLastUpdateTime",
      "hostname": "$hostname",
      "username": "$username",
      "caCerts": "$caCerts",
      "connectionStatus": {
        "status": "Disconnected",
        "message": "string"
      }
    }
    ```

    ### Removing a vCD Cluster

    To remove a vCD Cluster object, send a DELETE request to [`/vcd/cluster/{id}`](#operation/deleteVcdClusterV1), where
    {id} is the ID of assigned to a vCD Cluster object.

    ```bash
        curl -X DELETE -d "https://$cluster_address/api/v1/vcd/cluster/{id}"
    ```

    The Rubrik REST API server initiates an asynchronous job to delete a vCD instance and returns the
    details of the AsyncRequestStatus request.

    ```bash
    {
      "id": "$requestId",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$startTime",
      "endTime": "$endTime",
      "nodeId": "$nodeId",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vcd/cluster/request/$requestId",
          "rel": "self"
        }
      ]
    }
    ```

    ### Retrieving details of jobs on vCD cluster

    To retrieve the details of a specified asynchronous job for a vCD Cluster, send a GET request
    to [`/vcd/cluster/request/{id}`](#operation/getVcdClusterAsyncRequestStatusV1), where {id} is the ID assigned to an
    asynchronous job.

    ```bash
        curl -X GET -d "https://$cluster_address/api/v1/vcd/cluster/request/{id}"
    ```

    The Rubrik REST API server fetches details of the specifed asynchronous job and returns the AsyncRequestStatus request.

    ```bash
    {
      "id": "$requestId",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$startTime",
      "endTime": "$endTime",
      "nodeId": "$nodeId",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vcd/cluster/request/$requestId",
          "rel": "self"
        }
      ]
    }
    ```

    ### Retrieving summary of a vCD hierarchy object

    To retrieve details of the specified object in the vCD hierarchy, send a GET request
    to [`/vcd/hierarchy/{id}`](#operation/getVcdHierarchyObjectV1), where {id} is the ID of the vCD hierarchy object.

    ```bash
        curl -X GET -d "https://$cluster_address/api/v1/vcd/hierarchy/{id}"
    ```

    The Rubrik REST API server fetches VcdHierarchyObjectSummary for the specified vCD object.

    ```bash
    {
      "id": "$id",
      "name": "$name",
      "configuredSlaDomainId": "$configuredSlaDomainId",
      "configuredSlaDomainName": "$configuredSlaDomainName",
      "configuredSlaDomainType": "$configuredSlaDomainType",
      "primaryClusterId": "$primaryClusterId",
      "isConfiguredSlaDomainRetentionLocked": true,
      "slaLastUpdateTime": "$slaLastUpdateTime",
      "effectiveSlaDomainId": "UNPROTECTED",
      "effectiveSlaDomainName": "Unprotected",
      "isEffectiveSlaDomainRetentionLocked": true,
      "effectiveSlaDomainPolarisManagedId": "$effectiveSlaDomainPolarisManagedId",
      "effectiveSlaSourceObjectId": "$effectiveSlaSourceObjectId",
      "effectiveSlaSourceObjectName": "$effectiveSlaSourceObjectName",
      "slaAssignment": "Derived",
      "retentionSlaDomainId": "$retentionSlaDomainId",
      "infraPath": [
        ...
      ],
      "slaPath": [
        ...
      ],
      "isRelic": true,
      "isDeleted": true,
      "objectType": "Cluster",
      "descendantCount": {
        "vcdCluster": 0,
        "connectedVimServer": 0,
        "disconnectedVimServer": 0,
        "org": 0,
        "orgVdc": 0,
        "catalog": 0,
        "vApp": 0
      },
      "connectionStatus": {
        "status": "Disconnected",
        "message": "string"
      },
      "ipAddress": "$ipAddress",
      "vcenterId": "$vcenterId",
      "extendedAttributes": {
        "vappAtributes": {
          "isVappTemplate": true
        }
      },
      "pendingSlaDomain": {
        "objectId": "$objectId",
        "pendingSlaDomainId": "$pendingSlaDomainId",
        "pendingSlaDomainName": "$pendingSlaDomainName",
        "isPendingSlaDomainRetentionLocked": true
      }
    }
    ```

    ### Retrieving immediate descendant objects

    To retrieve the list of immediate descendant objects for the specified parent, send a GET request
    to [`/vcd/hierarchy/{id}/children`](#operation/getVcdHierarchyChildrenV1), where {id} is the ID of the parent vCD
    hierarchy object. The parameters described in the following table are available to filter the results of the GET
    request.

    | Name                    | Required | Type    | Description |
    | ----------------------- | -------- | ------- | ----------- |
    |`id`                     | Required | string  | ID of the parent vCD hierarchy object. To get top-level nodes, use **root** as the ID.|
    |`sort_by`                | Optional | string  | Attribute to sort the results on.|
    |`sort_order`             | Optional | string  | Order for sorting the results, either ascending or descending.|
    |`limit`                  | Optional | int     | Limit the number of matches returned.|
    |`offset`                 | Optional | int     | Number of matches to ignore from the beginning of the results.|
    |`name`                   | Optional | string  | Search object by object name.|
    |`is_relic`               | Optional | boolean | Filter by isRelic field of vCD vApp hierarchy object. Return both relic and non-relic children when this value is not specified.|
    |`effective_sla_domain_id`| Optional | string  | Filter by ID of effective SLA domain.|
    |`object_type`            | Optional | string  | Filter by node object type. |
    |`primary_cluster_id`     | Optional | string  | Filter by primary cluster ID, or **local**.|
    |`sla_assignment`         | Optional | string  | Filter by SLA assignment type.|
    |`snappable_status`       | Optional | string  | Filters vCD hierarchy objects based on the specified query value.|

    ```bash
        curl -X GET -d "https://$cluster_address/api/v1/vcd/hierarchy/$id/children"
    ```

    The Rubrik REST API server fetches VcdHierarchyObjectSummary for all children (immediate descendants) 
    of the specified vCD object.

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "$id",
          "name": "$name",
          "configuredSlaDomainId": "$configuredSlaDomainId",
          "configuredSlaDomainName": "$configuredSlaDomainName",
          "configuredSlaDomainType": "$configuredSlaDomainType",
          "primaryClusterId": "$primaryClusterId",
          "isConfiguredSlaDomainRetentionLocked": true,
          "slaLastUpdateTime": "$slaLastUpdateTime",
          "effectiveSlaDomainId": "UNPROTECTED",
          "effectiveSlaDomainName": "Unprotected",
          "isEffectiveSlaDomainRetentionLocked": true,
          "effectiveSlaDomainPolarisManagedId": "$effectiveSlaDomainPolarisManagedId",
          "effectiveSlaSourceObjectId": "$effectiveSlaSourceObjectId",
          "effectiveSlaSourceObjectName": "$effectiveSlaSourceObjectName",
          "slaAssignment": "Derived",
          "retentionSlaDomainId": "$retentionSlaDomainId",
          "infraPath": [
            ...
          ],
          "slaPath": [
            ...
          ],
          "isRelic": true,
          "isDeleted": true,
          "objectType": "Cluster",
          "descendantCount": {
            "vcdCluster": 0,
            "connectedVimServer": 0,
            "disconnectedVimServer": 0,
            "org": 0,
            "orgVdc": 0,
            "catalog": 0,
            "vApp": 0
          },
          "connectionStatus": {
            "status": "Disconnected",
            "message": "string"
          },
          "ipAddress": "$ipAddress",
          "vcenterId": "$vcenterId",
          "extendedAttributes": {
            "vappAtributes": {
              "isVappTemplate": true
            }
          },
          "pendingSlaDomain": {
            "objectId": "$objectId",
            "pendingSlaDomainId": "$pendingSlaDomainId",
            "pendingSlaDomainName": "$pendingSlaDomainName",
            "isPendingSlaDomainRetentionLocked": true
          }
        }
      ],
      "total": 0
    }
    ```

    ### Retrieving list of descendant objects

    To retrieve the list of descendant objects for the specified parent, send a GET request to
    [`/vcd/hierarchy/{id}/descendants`](#operation/getVcdHierarchyDescendantsV1), where {id} is the ID of the parent vCD
    hierarchy object. The parameters described in the following table are available to filter the results of the GET
    request.

    | Name                    | Required | Type    | Description |
    | ----------------------- | -------- | ------- | ----------- |
    |`id`                     | Required | string  | ID of the parent vCD hierarchy object. To get top-level nodes, use **root** as the ID.|
    |`sort_by`                | Optional | string  | Attribute to sort the results on.|
    |`sort_order`             | Optional | string  | Order for sorting the results, either ascending or descending.|
    |`limit`                  | Optional | int     | Limit the number of matches returned.|
    |`offset`                 | Optional | int     | Number of matches to ignore from the beginning of the results.|
    |`name`                   | Optional | string  | Search object by object name.|
    |`is_relic`               | Optional | boolean | Filter by isRelic field of vCD vApp hierarchy object. Return both relic and non-relic children when this value is not specified.|
    |`effective_sla_domain_id`| Optional | string  | Filter by ID of effective SLA domain.|
    |`object_type`            | Optional | string  | Filter by node object type. |
    |`primary_cluster_id`     | Optional | string  | Filter by primary cluster ID, or **local**.|
    |`sla_assignment`         | Optional | string  | Filter by SLA assignment type.|
    |`snappable_status`       | Optional | string  | Filters vCD hierarchy objects based on the specified query value.|

    ```bash
        curl -X GET -d "https://$cluster_address/api/v1/vcd/hierarchy/$id/descendants"
    ```

    The Rubrik REST API server fetches VcdHierarchyObjectSummary for all descendants of specified vCD object.

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "$id",
          "name": "$name",
          "configuredSlaDomainId": "$configuredSlaDomainId",
          "configuredSlaDomainName": "$configuredSlaDomainName",
          "configuredSlaDomainType": "$configuredSlaDomainType",
          "primaryClusterId": "$primaryClusterId",
          "isConfiguredSlaDomainRetentionLocked": true,
          "slaLastUpdateTime": "$slaLastUpdateTime",
          "effectiveSlaDomainId": "UNPROTECTED",
          "effectiveSlaDomainName": "Unprotected",
          "isEffectiveSlaDomainRetentionLocked": true,
          "effectiveSlaDomainPolarisManagedId": "$effectiveSlaDomainPolarisManagedId",
          "effectiveSlaSourceObjectId": "$effectiveSlaSourceObjectId",
          "effectiveSlaSourceObjectName": "$effectiveSlaSourceObjectName",
          "slaAssignment": "Derived",
          "retentionSlaDomainId": "$retentionSlaDomainId",
          "infraPath": [
            ...
          ],
          "slaPath": [
            ...
          ],
          "isRelic": true,
          "isDeleted": true,
          "objectType": "Cluster",
          "descendantCount": {
            "vcdCluster": 0,
            "connectedVimServer": 0,
            "disconnectedVimServer": 0,
            "org": 0,
            "orgVdc": 0,
            "catalog": 0,
            "vApp": 0
          },
          "connectionStatus": {
            "status": "Disconnected",
            "message": "string"
          },
          "ipAddress": "$ipAddress",
          "vcenterId": "$vcenterId",
          "extendedAttributes": {
            "vappAtributes": {
              "isVappTemplate": true
            }
          },
          "pendingSlaDomain": {
            "objectId": "$objectId",
            "pendingSlaDomainId": "$pendingSlaDomainId",
            "pendingSlaDomainName": "$pendingSlaDomainName",
            "isPendingSlaDomainRetentionLocked": true
          }
        }
      ],
      "total": 0
    }
    ```

    # Blackout Windows

    ## Get Global Blackout Window Status
    Send a GET request to ['/blackout_window`](#operation/getBlackoutWindowStatus)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/blackout_window"
    ```

    ## Start or Stop the Global Blackout Window in local Rubrik Cluster
    Send a PATCH request to [`/blackout_window`](#operation/toggleBlackoutWindow)

    ```bash
    curl -X PATCH \
      -d '{ \
       "isGlobalBlackoutActive": true \
       }' \
      "https://$cluster_address/api/v1/blackout_window"
    ```

    # Managed Volumes

    ## Create Script to Unify Managed Volume Export View

    To request an asynchronous job to generate a script to create a directory to view all files in all channels of a managed volume export, send a POST request to the [`/managed_volume/snapshot/export/{id}/script`](#operation/createManagedVolumeGenerateScriptJob) endpoint with the ID of the snapshot export.

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/managed_volume/snapshot/export/{id}/script"
    ```
    An asynchronous request is returned and can be polled to retrieve the job status.

    ```bash
    {
      "id":"$request_id",
      "links": [
        {
          "href":"https://$cluster_address/api/v1/managed_volume/request/$request_id",
          "rel":"result"
        },
      "status":"QUEUED"
    }
    ```

    # Archival

    ## Create Script to Refresh data sources in a Reader location

    Send a POST request to the [`/archive/location/{location_id}/reader/refresh/data_sources`](#operation/refreshArchivalLocationDataSources) endpoint to request an asynchronous job that refreshes the metadata for a list of data sources from a specified reader location. The POST request must provide the ID of the reader location and a list of the IDs of the data sources in the archival location.

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/archive/location/{location_id}/reader/refresh/data_sources"
    ```
    An asynchronous request is returned and can be polled to retrieve the job status.

    ```bash
    {
      "id":"$request_id",
      "links": [
        {
          "href":"https://$cluster_address/api/v1/archive/request/$request_id",
          "rel":"result"
        },
      "status":"QUEUED"
    }
    ```

    ## Get the ID of the customer AWS account that owns the archival location

    Send a GET request to the [`/archive/aws/s3/{id}/account_id`](#operation/getAwsAccountId) endpoint to request the ID of the AWS customer account for the S3 archival location. Returns an error when the location given is not an AWS S3 archival location.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/archive/aws/s3/{id}/account_id"
    ```
    Returns the ID of the AWS account.

    ## Disable archival location for archiving and modifications.

    Send a POST request to the [`/archive/location/{location_id}/owner/disable`](#operation/disableArchivalLocation) endpoint to disable the specified active archival location. The POST request must include the ID of the active location.

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/archive/location/{location_id}/owner/disable"
    ```
    Returns empty response body

    ## Enable archival location for archiving and modifications.

    Send a POST request to the [`/archive/location/{location_id}/owner/enable`](#operation/enableArchivalLocation) endpoint to enable archiving and other
    operations that were previously disabled on the specified archival location
    with the disable operation. The POST request must include the ID of the
    specified location.

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/archive/location/{location_id}/owner/enable"
    ```
    Returns empty response body

    # Replication

    ## Enable Source Specific Replication Pause
    Send a POST request to [`/replication/location_pause/enable`]
    (#operation/enablePerLocationPause)

    ```bash
    curl -X POST \
      -d '{ \
       "sourceClusterUuids": ["510ae3f4-d733-4545-9ea4-fe702401fdca"], \
       "shouldCancelImmediately": true \
       }' \
      "https://$cluster_address/api/v1/replication/location_pause/enable"
    ```

    ## Disable Source Specific Replication Pause
    Send a POST request to [`/replication/location_pause/disable`]
    (#operation/disablePerLocationPause)

    ```bash
    curl -X POST \
      -d '{ \
       "sourceClusterUuids": ["510ae3f4-d733-4545-9ea4-fe702401fdca"], \
       "shouldSkipOldSnapshots": true \
       }' \
      "https://$cluster_address/api/v1/replication/location_pause/disable"
    ```

    # Unmanaged object

    An unmanaged object is an object that is not currently assigned
    an active SLA.

    ### Get all unmanaged reader object summaries
    Get a listing of all unmanaged reader object summaries using
    a GET request to
    [/unmanaged_object/reader_object](#operation/queryUnmanagedReaderObject).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/unmanaged_object/reader_object"
    ```
    The Rubrik REST API server returns a `ListResponse` object of unmanaged
    reader object summaries.
    ```bash
    {
      "data": [
        {
          "id": "$vm1_managed_id",
          "name": "$vm1_name",
          "objectType": "VirtualMachine",
          "physicalLocation": [
            {
              "managedId": "$location1_managed_id",
              "name": "$location1_name"
            }
          ],
          "unmanagedStatus": "Unprotected",
          "autoSnapshotCount": 20,
          "manualSnapshotCount": 0,
          "localStorage": 100,
          "archiveStorage": 0,
          "retentionSlaDomainId": "$gold_sla_id",
          "retentionSlaDomainName": "Gold"
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```
    ### Get all unmanaged object summaries
    Get a list of all objects with unmanaged snapshots using
    a GET request to
    [/unmanaged_object](#operation/queryUnmanagedObjectV1).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/unmanaged_object"
    ```
    The Rubrik REST API server returns a `ListResponse` object of objects with
     unmanaged snapshots.
    ```bash
    {
      "data": [
        {
          "id": "$vm1_managed_id",
          "name": "$vm1_name",
          "objectType": "VirtualMachine",
          "physicalLocation": [
            {
              "managedId": "$location1_managed_id",
              "name": "$location1_name"
            }
          ],
          "unmanagedStatus": "Unprotected",
          "snapshotCount": 20,
          "localStorage": 100,
          "archiveStorage": 0,
          "retentionSlaDomainId": "$gold_sla_id",
          "retentionSlaDomainName": "Gold"
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    ### Get summary of all snapshots for a given object
    Get summary of all snapshots for a given object using
    a GET request to
    [/unmanaged_object/{id}/snapshot](#operation/queryUnmanagedObjectSnapshotsV1).
    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/unmanaged_object/{id}/snapshot"
    ```
    The Rubrik REST API server return a `ListResponse` object of snapshot summaries
    for the given object.
    ```bash
    {
      "data": [
        {
          "id": "$snapshot_id",
          "date": "<timestamp>",
          "snapshotType": "PolicyBased",
          "snapshotRetentionInfo": {
            "localInfo": {
              "id": "location_id",
              "name": "local_cluster",
              "isSnapshotPresent": true,
              "isExpirationDateCalculated": true,
              "expirationTime": "<timestamp2>"
            },
            "archivalInfos": [],
            "replicationInfos": []
          }
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    ### Assign a retention SLA to unmanaged object.
    Assign a retention SLA to an unmanaged object to expire existing snapshots
    in a structured manner.

    Send a POST request to [/unmanaged_object/assign_retention_sla](#operation/assignToRetentionSlaAsync).

    **Example:** Assigning a retention SLA Domain with ID $slaId to a list of unmanaged objects - $snap1Id, $snap2Id

    ```bash
    curl -X POST \
      -d '{
        "slaDomainId": $slaId,
        "managedIds": [$snap1Id, $snap2Id]
      }' \
      "https://$cluster_address/api/v1/unmanaged_object/assign_retention_sla"
    ```

    ### Bulk tier existing snapshots to cold storage
    Schedules a job to tier existing snapshots of the selected objects to cold
    storage.

    Send a POST request to
    [/unmanaged_object/snapshot/bulk_archive_tier](#operation/bulkTierExistingSnapshots)

    **Example:** Tier existing snapshots for the objects - $object1Id, $object2Id

    ```bash
    curl -X POST \
      -d '{
        "objectIds": [$object1Id, $object2Id]
      }' \
      "https://$cluster_address/api/v1/unmanaged_object/snapshot/bulk_archive_tier"
    ```

    **Example:** Tier existing snapshots for the objects - $object1Id, $object2Id
    only in archival location $archivalLocationId

    ```bash
    curl -X POST \
      -d '{
        "objectIds": [$object1Id, $object2Id],
        "locationId": $archivalLocationId
      }' \
      "https://$cluster_address/api/v1/unmanaged_object/snapshot/bulk_archive_tier"

    An asynchronous request is returned and can be polled to retrieve the job status.

    ```bash
    {
      "id":"$request_id",
      "links": [
        {
          "href":"https://$cluster_address/api/v1/unmanaged_object/snapshot/bulk_archive_tier/request/$request_id",
          "rel":"result"
        },
      "status":"QUEUED"
    }
    ```

    # Data Source

    A data source is an object whose snapshots can be taken.

    ### Delete given snapshots for an object
    Delete snapshots identified by the given snapshot IDs for
    the specified object using a POST request to
    [
    `/data_source/{id}/snapshot/bulk_delete`
    ](#operation/bulkDeleteSnapshotsForObject).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/data_source/{id}/snapshot/bulk_delete"
    ```

    ### Delete all snapshots for given objects
    Delete all snapshots for given objects using
    a POST request to
    [`/data_source/snapshot/bulk_delete`](#operation/bulkDeleteSnapshots).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/data_source/snapshot/bulk_delete"
    ```

    ### Get information of expired snapshots which were explicitly assigned a SLA domain
    To get information on snapshots that expired according to their assigned
    SLA domain, send a GET request to
    [`/data_source/{id}/expired_custom_retention_snapshots`](#operation/expiredCustomRetentionSnapshots).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/data_source/{id}/expired_custom_retention_snapshots"
    ```

    # SAP HANA databases

    ## Get SAP HANA database summary

    Request a list of SAP HANA discovered databases by sending a GET
    request to [`/sap_hana/db`](#operation/querySapHanaDatabases).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/sap_hana/db"
    ```

    ```bash
    {
      "data": [
        {
          "id": "$db_id",
          "name": "$db_name",
          "dbStatus": "ACTIVE",
          "dbType": "TENANT",
          "dataPathType": "GCP"
          "logBackupJobFrequencyMins": 30
          "sapHanaSystemId": "$sap_hana_system_id",
          "sid": "SC1",
          "instanceNumber": "03",
          "primaryClusterId": "$cluster_id",
          "isRelic": False,
          "isArchived": False
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    Further details are acquired from
    [`/sap_hana/db/{id}`](#operation/getSapHanaDatabase).

    ```
    curl -X GET "https://$cluster_address/api/v1/sap_hana/db/$db_id"
    ```

    ```bash
    {
          "id": "$db_id",
          "name": "$db_name",
          "dbStatus": "ACTIVE",
          "dbType": "TENANT",
          "dataPathType": "GCP"
          "logBackupJobFrequencyMins": 30
          "sapHanaSystemId": "$sap_hana_system_id",
          "sid": "SC1",
          "instanceNumber": "03",
          "primaryClusterId": "$cluster_id",
          "isRelic": False,
          "isArchived": False,
          "previousFailedBackupPrefixes": [
            "abcd", "defg"
          ],
          "snapShotCount": 3
    }
    ```

    Update SLA Domain assigned to SAP HANA database by using
    [`/sap_hana/db/{id}`](#operation/patchSapHanaDatabase). The API returns with
    the summary of the SAP HANA database.

    ```bash
    curl -X PATCH "https://$cluster_address/api/v1/sap_hana/db/$db_id"
    ```

    ```bash
    {
          "id": "$db_id",
          "name": "$db_name",
          "dbStatus": "ACTIVE",
          "dbType": "TENANT",
          "dataPathType": "GCP"
          "logBackupJobFrequencyMins": 30
          "sapHanaSystemId": "$sap_hana_system_id",
          "sid": "SC1",
          "instanceNumber": "03",
          "primaryClusterId": "$cluster_id",
          "isRelic": False,
          "isArchived": False,
          "previousFailedBackupPrefixes": [
            "abcd", "defg"
          ],
          "snapShotCount": 3
    }
    ```

    ## System copy restore

    System copy restore is a type of restore that is used across different SAP HANA
    databases.

    ### Configuring system copy restore

    To initiate a task to configure a system copy restore on a SAP HANA database,
    send a POST request to [`/sap_hana/db/{id}/configure_restore`](#operation/configureSapHanaRestore)
    where, {id} is the ID of the target SAP HANA database.

    ```bash
    curl -X POST \
      -d '{
        "source_config": {
            "snappable_id": "$source_db_id"
          }
        }' \
    "https://$cluster_address/api/v1/sap_hana/db/$target_db_id/configure_restore"
    ```

    The Rubrik REST API server initiates the configuration task and responds with a
    request object.

    ```bash
    {
          "id": "$request_id",
          "status": "QUEUED",
          "error": "None",
          "progress": 0,
          "startTime": "$start_timestamp",
          "endTime": "$end_timestamp",
          "links": [
            {
              "href": "https://$cluster_address/api/v1/sap_hana/db/request/$request_id",
              "rel": "self"
            }
          ]
    }
    ```

    ### Unconfiguring system copy restore

    To initiate a task to reset the configuration for a system copy restore on a
    SAP HANA database, send a POST request to
    [`/sap_hana/db/{id}/unconfigure_restore`](#operation/unconfigureSapHanaRestore)
    where, {id} is the ID of the target SAP HANA database.

    ```bash
    curl -X POST "https://$cluster_address/api/v1/sap_hana/db/$target_db_id/unconfigure_restore"
    ```
    The Rubrik REST API server initiates the task to reset the configuration for the
    system copy restore and responds with a request object.

    ```bash
    {
          "id": "$request_id",
          "status": "QUEUED",
          "error": "None",
          "progress": 0,
          "startTime": "$start_timestamp",
          "endTime": "$end_timestamp",
          "links": [
            {
              "href": "https://$cluster_address/api/v1/sap_hana/db/request/$request_id",
              "rel": "self"
            }
          ]
    }
    ```

    ## SAP HANA system apis

    Request a list of SAP HANA systems on a cluster by sending a GET
    request to [`/sap_hana/system`](#operation/querySapHanaSystems).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/sap_hana/system"
    ```

    ```bash
    {
      "data": [
        {
          "id": "$system_id",
          "sid": "SC1",
          "numDbs": 3,
          "containerType": "SINGLE_CONTAINER",
          "instanceNumber": "03",
          "status": "OK",
          "username": "$system_username",
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    Adds an entry for SAP HANA system to database. To add a SAP HANA system entry,
    send a POST request to [`/sap_hana/system`](#operation/addSapHanaSystem).

    ```bash
    curl -X POST \
      -d '{
        "username": "$username",
        "password": "$password",
        "sid": "$sid",
        "instance": "$instance",
        "hostIdList": [
          "$host_id"
        ],
        "dataPathSpec": {
          "$dataPathType": "GCP"
        } }' \
      "https://$cluster_address/api/v1/sap_hana/system"
    ```
    The Rubrik REST API server responds with the ID of the added SAP HANA system and
    the status of the scheduled system refresh job.

    ```bash
    {
          "id": "$system_id",
          "sid": "SC1",
          "numDbs": 3,
          "containerType": "SINGLE_CONTAINER",
          "instanceNumber": "03",
          "status": "OK",
          "username": "$system_username",
    }
    ```

    Further details are acquired by
    [`/sap_hana/system/{id}`](#operation/getSapHanaSystem).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/sap_hana/system/$db_id"
    ```

    ```bash
    {
          "id": "$system_id",
          "sid": "SC1",
          "numDbs": 3,
          "containerType": "SINGLE_CONTAINER",
          "instanceNumber": "03",
          "status": "OK",
          "username": "$system_username",
    }
    ```

    Update the SlA Domain assigned to the SAP HANA system by calling the
    [`/sap_hana/system/{id}`](#operation/patchSapHanaSystem) endpoint. The API
    returns the summary of the SAP HANA system.

    ```bash
    curl -X PATCH "https://$cluster_address/api/v1/sap_hana/system/$db_id"
    ```

    ```bash
    {
          "id": "$system_id",
          "sid": "SC1",
          "numDbs": 3,
          "containerType": "SINGLE_CONTAINER",
          "instanceNumber": "03",
          "status": "OK",
          "username": "$system_username",
    }
    ```

    Delete a SAP HANA system by calling the
    [`/sap_hana/system/{id}`](#operation/deleteSapHanaSystem) endpoint. The API
    initiates a delete job and responds with a request object.

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/sap_hana/system/$id"
    ```

    ```bash
    {
          "id": "$request_id",
          "status": "RUNNING",
          "error": "None",
          "progress": 0,
          "startTime": "$start_timestamp",
          "endTime": "$end_timestamp",
          "links": [
            {
              "href": "https://$cluster_address/api/v1/sap_hana/system/request/$request_id",
              "rel": "self"
            }
          ]
    }
    ```

    Using the information provided in the request object, send a GET request to the
    [`/sap_hana/system/request/{id}`](#operation/getSapHanaSystemAsyncRequestStatus)
    endpoint to poll the task status. When the value of `status` in the task object
    is `SUCCEEDED`, the task finished successfully.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/sap_hana/system/request/$id"
    ```

    ```bash
    {
          "id": "$request_id",
          "status": "SUCCEEDED",
          "error": "None",
          "progress": 0,
          "startTime": "$start_timestamp",
          "endTime": "$end_timestamp",
          "links": [
            {
              "href": "https://$cluster_address/api/v1/sap_hana/system/request/$request_id",
              "rel": "self"
            }
          ]
    }
    ```

    Refresh the metadata of a SAP HANA system object by calling the
    [`/sap_hana/system/{id}/refresh`](#operation/createSapHanaSystemRefresh)
    endpoint. The API initiates a refresh job and responds with a request object.

    ```bash
    curl -X POST "https://$cluster_address/api/v1/sap_hana/system/$id/refresh"
    ```

    ```bash
    {
          "id": "$request_id",
          "status": "RUNNING",
          "error": "None",
          "progress": 0,
          "startTime": "$start_timestamp",
          "endTime": "$end_timestamp",
          "links": [
            {
              "href": "https://$cluster_address/api/v1/sap_hana/system/request/$request_id",
              "rel": "self"
            }
          ]
    }
    ```

    Create a full data snapshot of a SAP HANA system object by
    sending a POST request to the
    [`/sap_hana/db/{id}/snapshot`](#operation/createOnDemandSapHanaBackup)
    endpoint. The API initiates a data backup job and responds with a request
    object.

    ```bash
    curl -X POST "https://$cluster_address/api/v1/sap_hana/db/{id}/snapshot"
    ```

    ```bash
    {
          "id": "$request_id",
          "status": "QUEUED",
          "error": "None",
          "progress": 0,
          "startTime": "$start_timestamp",
          "endTime": "$end_timestamp",
          "links": [
            {
              "href": "https://$cluster_address/api/v1/sap_hana/db/request/$request_id",
              "rel": "self"
            }
          ]
    }
    ```

    Using the information provided in the request object, send a
    GET request to the
    [`/sap_hana/db/request/{id}`](#operation/getSapHanaDbAsyncRequestStatus))
    endpoint to poll the task status. When the value of `status` in
    the task object is `SUCCEEDED`, the task finished successfully.
    The response also includes the `$snapshot_id`.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/sap_hana/db/request/{id}"
    ```

    ```bash
    {
          "id": "$request_id",
          "status": "SUCCEEDED",
          "error": "None",
          "progress": 0,
          "startTime": "$start_timestamp",
          "endTime": "$end_timestamp",
          "links": [
            {
              "href": "https://$cluster_address/api/v1/sap_hana/db/snapshot/$snapshot_id",
              "rel": "result"
            },
            {
              "href": "https://$cluster_address/api/v1/sap_hana/db/request/$request_id",
              "rel": "self"
            }
          ]
    }
    ```

    Request a list of summary of snapshots of a SAP HANA database by
    sending a GET request to the
    [`/sap_hana/db/{id}/snapshot`](#operation/querySapHanaDbSnapshot)
    endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/sap_hana/db/{id}/snapshot"
    ```

    ```bash
    {
      "data": [
        {
          "id": "$db_id",
          "date": "2019-12-16T23:21:53.377Z",
          "sourceObjectType": "SapHanaDatabase",
          "isOnDemandSnapshot": true,
          "isCustomRetentionApplied": false
          "cloudState": 0
          "replicationLocationIds": [
            "string"
          ],
          "archivalLocationIds": [
            "string"
          ],
          "slaId": "string",
          "slaName": "string",
          "isRetainedByRetentionLockSla": true,
          "backupId": 949363200000,
          "backupType": "FULL",
          "sapHanaStartTime": "2019-12-16T23:21:53.377Z",
          "sapHanaEndTime": "2019-12-16T23:21:53.377Z",
          "rubrikSnapshotStartTime": "2019-12-16T23:21:53.377Z",
          "rubrikSnapshotEndTime": "2019-12-16T23:21:53.377Z",
          "backupPrefix": "RUBRIK_949363200000_ON_DEMAND",
          "isExternalBackup": false,
          "isRubrikTriggeredOnDemandBackup": false
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    Request SAP HANA database snapshot details by sending a
    GET request to the
    [`/sap_hana/db/snapshot/{id}`](#operation/getSapHanaDbSnapshot) endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/sap_hana/db/snapshot/{id}"
    ```

    ```bash
    {
          "isCorrupt": false,
          "id": "$db_id",
          "date": "2019-12-16T23:21:53.377Z",
          "sourceObjectType": "SapHanaDatabase",
          "isOnDemandSnapshot": true,
          "isCustomRetentionApplied": false
          "cloudState": 0
          "replicationLocationIds": [
            "string"
          ],
          "archivalLocationIds": [
            "string"
          ],
          "slaId": "string",
          "slaName": "string",
          "isRetainedByRetentionLockSla": true,
          "backupId": 949363200000,
          "backupType": "FULL",
          "sapHanaStartTime": "2019-12-16T23:21:53.377Z",
          "sapHanaEndTime": "2019-12-16T23:21:53.377Z",
          "rubrikSnapshotStartTime": "2019-12-16T23:21:53.377Z",
          "rubrikSnapshotEndTime": "2019-12-16T23:21:53.377Z",
          "backupPrefix": "RUBRIK_949363200000_ON_DEMAND",
          "isExternalBackup": false,
          "isRubrikTriggeredOnDemandBackup": false
    }
    ```

    Request details of recoverable ranges of a SAP HANA database
    by sending a GET request to the
    [`/sap_hana/db/{id}/recoverable_range`](#operation/getSapHanaDbRecoverableRanges)
    endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/sap_hana/db/{id}/recoverable_range"
    ```

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "beginTime": "2017-02-02T18:53:12.694Z",
          "endTime": "2017-02-02T20:53:12.694Z"
        }
      ],
      "total": 1
    }
    ```

    Delete a full snapshot with a DELETE request to the
     [`/sap_hana/db/snapshot/{id}`](#operation/deleteSapHanaDbSnapshot) endpoint

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/sap_hana/db/snapshot/{id}"
    ```
    Request details of missed snapshots of a SAP HANA database
    by sending a GET request to the
    [`/sap_hana/db/{id}/missed_snapshot`](#operation/getMissedSapHanaDbSnapshots)
    endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/sap_hana/db/{id}/missed_snapshot"
    ```

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "archivalLocationType": [
            "string"
          ],
          "missedSnapshotTime": "2020-08-06T14:23:13.666Z",
          "missedSnapshotTimeUnits": [
            {
              "timeUnit": "Minute",
              "frequency": 0,
              "retention": 0,
              "dayOfTime": "Monday"
            }
          ]
        }
      ],
      "total": 0
    }
    ```

    # Volume Groups

    Rubrik clusters can protect Windows volumes on a host as a Volume Group.

    ## Getting a list of Volume Groups

    To retrieve a current list of Volume Groups, send a GET request to
    [`/volume_group`](#operation/queryVolumeGroup).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/volume_group"
    ```

    The Rubrik REST API server responds with a list of summary objects
    of Volume Groups.

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "string",
          "name": "string",
          "configuredSlaDomainId": "string",
          "configuredSlaDomainName": "string",
          "primaryClusterId": "string",
          "isConfiguredSlaDomainRetentionLocked": true,
          "effectiveSlaDomainId": "string",
          "effectiveSlaDomainName": "string",
          "isEffectiveSlaDomainRetentionLocked": true,
          "effectiveSlaDomainPolarisManagedId": "string",
          "effectiveSlaSourceObjectId": "string",
          "effectiveSlaSourceObjectName": "string",
          "slaAssignment": "Derived",
          "hostname": "string",
          "hostId": "string",
          "isRelic": true
        }
      ],
      "total": 0
    }
    ```

    ## Getting Volume Group Details

    To retrieve the details of a Volume Group, send a GET request to
    [`/volume_group/{id}`](#operation/getVolumeGroup)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/volume_group/{id}"
    ```

    The Rubrik REST API server responds with the details of the Volume Group.

    ```bash
    {
      "id": "string",
      "name": "string",
      "configuredSlaDomainId": "string",
      "configuredSlaDomainName": "string",
      "primaryClusterId": "string",
      "isConfiguredSlaDomainRetentionLocked": true,
      "effectiveSlaDomainId": "string",
      "effectiveSlaDomainName": "string",
      "isEffectiveSlaDomainRetentionLocked": true,
      "effectiveSlaDomainPolarisManagedId": "string",
      "effectiveSlaSourceObjectId": "string",
      "effectiveSlaSourceObjectName": "string",
      "slaAssignment": "Derived",
      "hostname": "string",
      "hostId": "string",
      "isRelic": true,
      "blackoutWindowStatus": {
        "isGlobalBlackoutActive": true,
        "isSnappableBlackoutActive": true
      },
      "blackoutWindows": {
        "globalBlackoutWindows": [
          {
            "startTime": "string",
            "endTime": "string"
          }
        ],
        "snappableBlackoutWindows": [
          {
            "startTime": "string",
            "endTime": "string"
          }
        ]
      },
      "isPaused": true,
      "volumes": [
        {
          "id": "string",
          "fileSystemType": "NTFS",
          "mountPoints": [
            "string"
          ],
          "size": 0,
          "naturalId": "string",
          "volumeGroupId": "string",
          "isCurrentlyPresentOnSystem": true
        }
      ]
    }
    ```

    ## Patching Volume Group Details

    To modify the details of a Volume Group, send a PATCH request to
    [`/volume_group/{id}`](#operation/patchVolumeGroup)

    ```bash
    curl -X POST "https://$cluster_address/api/v1/volume_group/{id}"
    ```

    ## Getting a list of all snapshots of a Volume Group

    To get a list of all snapshots of a Volume Group, send a GET request to
    [`/volume_group/{id}/snapshot`](#operation/queryVolumeGroupSnapshot)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/volume_group/{id}/snapshot"
    ```

    The Rubrik REST API server responses with a list of snapshots of the
    Volume Group.

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "string",
          "date": "2019-12-16T23:21:53.446Z",
          "expirationDate": "2019-12-16T23:21:53.446Z",
          "sourceObjectType": "string",
          "isOnDemandSnapshot": true,
          "cloudState": 0,
          "consistencyLevel": "string",
          "indexState": 0,
          "replicationLocationIds": [
            "string"
          ],
          "archivalLocationIds": [
            "string"
          ],
          "slaId": "string",
          "slaName": "string",
          "isRetainedByRetentionLockSla": true,
          "cloudStorageTier": "Hot",
          "volumeGroupId": "string",
          "name": "string",
          "includedVolumes": [
            {
              "id": "string",
              "fileSystemType": "NTFS",
              "mountPoints": [
                "string"
              ],
              "size": 0
            }
          ]
        }
      ],
      "total": 0
    }
    ```

    ## Creating on-demand snapshot of a Volume Group

    To create an on-demand snapshot of a Volume Group, send a POST request to
    [`/volume_group/{id}/snapshot`](#operation/createOnDemandVolumeGroupBackup)

    ```bash
    curl -X POST "https://$cluster_address/api/v1/volume_group/{id}/snapshot"
    ```

    The Rubrik REST API server initiates the asynchronous snapshot task and
    responds with a task object.

    ```
    {
      "id": "string",
      "status": "string",
      "progress": 0,
      "startTime": "2019-12-16T23:21:53.450Z",
      "endTime": "2019-12-16T23:21:53.450Z",
      "nodeId": "string",
      "error": {
        "message": "string"
      },
      "links": [
        {
          "href": "string",
          "rel": "string"
        }
      ]
    }
    ```

    ## Getting the forced full snapshot configuration of a Volume Group

    To retrieve the configuration used to force a full snapshot of a Volume
    Group, send a GET request to
    [`/volume_group/{id}/request/force_full_snapshot`](#operation/getVolumeGroupForceFullSpec)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/volume_group/{id}/request/force_full_snapshot"
    ```

    The Rubrik REST API server responds with the Volume Group force full
    response object. The response object contains the latest configuration,
    unless it was cleared by a backup job of the Volume Group or it was
    never set.

    ```bash
    {
      "volumeGroupId": "VolumeGroup:::fe9470a4-4057-4357-ac1f-ae99ff735439",
      "volumeInfos": [
        {
          "volumeId": "872bdd28-4d5d-4831-8698-59d692a822fc",
          "shouldDedupe": false
        },
        {
          "volumeId": "39f61483-9cf5-11e9-80b9-00155d094203",
          "shouldDedupe": true
        }
      ]
    }
    ```

    ## Requesting a forced full snapshot for a Volume Group

    To request a forced full snapshot of a Volume Group, send a POST request to
    [`/volume_group/{id}/request/force_full_snapshot`](#operation/requestVolumeGroupForceFullSnapshot)

    ```bash
    curl -X POST "https://$cluster_address/api/v1/volume_group/{id}/request/force_full_snapshot"
    ```

    The Rubrik REST API server persists the configuration for forcing a
    full snapshot until the next backup job, which takes a full snapshot
    and clears the configuration.

    ```
    {
      "volumeGroupId": "VolumeGroup:::fe9470a4-4057-4357-ac1f-ae99ff735439",
      "volumeInfos": [
        {
          "volumeId": "872bdd28-4d5d-4831-8698-59d692a822fc",
          "shouldDedupe": false
        },
        {
          "volumeId": "39f61483-9cf5-11e9-80b9-00155d094203",
          "shouldDedupe": true
        }
      ]
    }
    ```

    ## Getting details of a Volume Group snapshot

    To get the details of a Volume Group snapshot, send a GET request to
    [`/volume_group/snapshot/{id}`](#operation/getVolumeGroupSnapshot)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/volume_group/snapshot/{id}"
    ```

    The The Rubrik REST API server responds with the details of a snapshot.

    ```
    {
      "id": "string",
      "date": "2019-12-16T23:21:53.395Z",
      "expirationDate": "2019-12-16T23:21:53.395Z",
      "sourceObjectType": "string",
      "isOnDemandSnapshot": true,
      "cloudState": 0,
      "consistencyLevel": "string",
      "indexState": 0,
      "replicationLocationIds": [
        "string"
      ],
      "archivalLocationIds": [
        "string"
      ],
      "slaId": "string",
      "slaName": "string",
      "isRetainedByRetentionLockSla": true,
      "cloudStorageTier": "Hot",
      "volumeGroupId": "string",
      "name": "string",
      "includedVolumes": [
        {
          "id": "string",
          "fileSystemType": "NTFS",
          "mountPoints": [
            "string"
          ],
          "size": 0
        }
      ]
    }
    ```

    ## Getting summary information of all Volume Group mounts

    To get summary information of all Volume Group mounts, send a GET request to
    [`/volume_group/snapshot/mount`](#operation/queryVolumeGroupSnapshotMount)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/volume_group/snapshot/mount"
    ```

    The Rubrik REST API server returns summary information for all mounts.

    ```
    {
      "hasMore": true,
      "data": [
        {
          "id": "string",
          "name": "string",
          "sourceVolumeGroupId": "string",
          "sourceHostId": "string",
          "sourceHostName": "string",
          "snapshotDate": "2019-12-16T23:21:53.377Z",
          "snapshotSourceVersion": "WithLayoutInfo",
          "mountedDate": "2019-12-16T23:21:53.377Z",
          "mountedVolumes": [
            {
              "id": "string",
              "originalMountPoints": [
                "string"
              ],
              "size": 0,
              "fileSystemType": "NTFS",
              "smbPath": "string",
              "hostMountedPath": "string"
            }
          ],
          "targetHostId": "string",
          "targetHostName": "string",
          "mountRequestId": "string",
          "unmountRequestId": "string",
          "isReady": true,
          "restoreScriptSmbPath": "string"
        }
      ],
      "total": 0
    }
    ```

    ## Getting summary information of one mount

    To retrieve summary information of one Volume Group mount, send a GET
    request to
    [`/volume_group/snapshot/mount/{id}`](#operation/getVolumeGroupSnapshotMount)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/volume_group/snapshot/mount/{id}"
    ```

    The Rubrik REST API server returns summary information of the mount.

    ```
    {
      "id": "string",
      "name": "string",
      "sourceVolumeGroupId": "string",
      "sourceHostId": "string",
      "sourceHostName": "string",
      "snapshotDate": "2019-12-16T23:21:53.387Z",
      "snapshotSourceVersion": "WithLayoutInfo",
      "mountedDate": "2019-12-16T23:21:53.388Z",
      "mountedVolumes": [
        {
          "id": "string",
          "originalMountPoints": [
            "string"
          ],
          "size": 0,
          "fileSystemType": "NTFS",
          "smbPath": "string",
          "hostMountedPath": "string"
        }
      ],
      "targetHostId": "string",
      "targetHostName": "string",
      "mountRequestId": "string",
      "unmountRequestId": "string",
      "isReady": true,
      "restoreScriptSmbPath": "string"
    }

    ```


    ## Getting summary information of the latest snapshot of a Volume Group

    Send a GET request to
    [`/volume_group/{id}/latest_snapshot`]\
    (#operation/queryVolumeGroupLatestSnapshot)
    to receive a summary of the latest snapshot of a Volume Group.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/volume_group/{id}/latest_snapshot"
    ```

    The Rubrik REST API server returns summary information of the snapshot.
    ```bash
    [
      {
        "id": "string",
        "date": "2019-12-16T23:21:53.446Z",
        "expirationDate": "2019-12-16T23:21:53.446Z",
        "sourceObjectType": "string",
        "isOnDemandSnapshot": true,
        "cloudState": 0,
        "consistencyLevel": "string",
        "indexState": 0,
        "replicationLocationIds": [
          "string"
        ],
        "archivalLocationIds": [
          "string"
        ],
        "slaId": "string",
        "slaName": "string",
        "isRetainedByRetentionLockSla": true,
        "cloudStorageTier": "Hot",
        "volumeGroupId": "string",
        "name": "string",
        "includedVolumes": [
          {
            "id": "string",
            "fileSystemType": "NTFS",
            "mountPoints": [
              "string"
            ],
            "size": 0
          }
        ]
      }
    ]
    ```

    # Snapshot Stats

    ### Return storage stats of a snapshot
    To receive the storage statistics of a snapshot, send a GET request to
     [`/snapshot/{id}/storage/stats`]\
    (#operation/getSnapshotStorageStatsV1).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/snapshot/{id}/storage/stats"
    ```

    # Hierarchy

    ### Return the list of descendant objects with SLA conflicts in bulk
    To bulk get the list of descendant objects with SLA conflicts, send a POST
     request to
     [`/hierarchy/bulk_sla_conflicts`]\
    (#operation/bulkHierarchySlaConflictsV1).

    ```bash
    curl -X POST "https://$cluster_address/api/v1/hierarchy/bulk_sla_conflicts"
    ```

    # Backup Verification

    Backup verification checks the validity of a backup
    based on the specified snapshot ID and object ID.

    ### Verify the validity of a given snapshot
    Verify the validity of the snapshot identified
    by the specified snapshot ID and object ID.
    [
    `/backup/verify`
    ](#operation/verifySnapshot).

    ```bash
    curl -X POST \
      -d '{
        "objectId": "$objectId",
        "snapshotIdsOpt": "$snapshotIdsOpt",
        "locationIdOpt": "$locationIdOpt",
        "shouldVerifyAfterOpt": "$shouldVerifyAfterOpt" }' \
      "https://$cluster_address/api/v1/backup/verify/"
    ```

    ### Get asynchronous request details for Backup Verification
    Get the details of an asynchronous request
    for a backup verification job.
    [
    `/backup/verify/{id}`
    ](#operation/getBackupVerificationAsyncRequestStatus).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/backup/verify/$id"
    ```

    ### Reschedule unsuccessful backup tasks
    [
    `/backup/retry`
    ](#operation/createBackupRemediationAsyncTask).

    ```bash
    curl -X POST \
      -d '{
        "spec": [
          {
            "objectId": "$objectId",
            "eventSeriesId": "$eventSeriesId"
          }
        ],
        "config": {
          "runNow": "$runNow"
        }
      }' \
      "https://$cluster_address/api/v1/backup/retry/"
    ```

    ### Get status of reschedule operation
    [
    `/backup/retry/{id}`
    ](#operation/getBackupRemediationAsyncTaskStatus).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/backup/retry/$id"
    ```

    # Exclusion pattern

    An exclusion pattern is a regular expression pattern that enables Rubrik clusters to exclude files and folders, with names that match the regular expression pattern, from search results. Once created, the Rubrik cluster applies the exclusion pattern to the global search results and the snapshot level search results. The exclusion patterns also exclude matching files and folders from the recovery process.

    A Rubrik cluster can apply the exclusion pattern on a particular [Fileset](#section/Filesets) or on all the filesets associated with a particular [Host](#section/Hosts).

    The exclusion patterns are either mutable or immutable. By default, the exclusion patterns are mutable or editable upon creation.

    The Rubrik REST API exposes endpoints to:

    * create a single exclusion pattern
    * create multiple exclusion patterns, in bulk
    * get details of all the existing exclusion patterns
    * view details of a specific exclusion pattern
    * update an existing exclusion pattern
    * delete a single exclusion pattern
    * delete multiple exclusion patterns, in bulk

    ## Adding an exclusion pattern
    To create a new exclusion pattern, send a POST request to [/exclusion_pattern](#operation/createExclusionPattern).
    The request payload must include the following attributes required to create an exclusion pattern:
    * `sourceId` - The ID for a fileset or a host to which the pattern will apply.
    * `pattern` - The regular expression pattern.

    ```bash
    curl -X POST \
      -d '{
        "sourceId": "$sourceId",
        "pattern": "$pattern" }' \
      "https://$cluster_address/api/v1/exclusion_pattern"
    ```

    The Rubrik REST API server responds with the details of the new exclusion pattern.

    ```bash
    {
      "id": "$id",
      "sourceId": "$sourceId",
      "pattern": "$pattern",
      "isMutable": true,
      "patternStatus": "Queued",
      "isActive": true,
      "primaryClusterId": "$primaryClusterId"
    }
    ```

    ## Bulk adding exclusion patterns
    To create exclusion patterns in bulk, send a POST request to [/exclusion_pattern/bulk](#operation/bulkCreateExclusionPattern).
    The request payload must be an array. The array contains one set of required attributes for every exclusion pattern that will be created. See [Adding an exclusion pattern](#adding-an-exclusion-pattern) for a list of required attributes.

    ```bash
    curl -X POST \
      -d '{
        [{ "sourceId": "$sourceId1", "pattern": "$pattern1"}, { "sourceId": "$sourceId2", "pattern": "$pattern2"}] }' \
      "https://$cluster_address/api/v1/exclusion_pattern/bulk"
    ```

    The Rubrik REST API server responds with the details of the new exclusion patterns.

    ```bash
    {
      "exclusionPatternDetails": [
        {
          "id": "$id",
          "sourceId": "$sourceId1",
          "pattern": "$pattern1",
          "isMutable": true,
          "patternStatus": "Queued",
          "isActive": true,
          "primaryClusterId": "$primaryClusterId"
        },
        {
          "id": "$id",
          "sourceId": "$sourceId2",
          "pattern": "$pattern2",
          "isMutable": true,
          "patternStatus": "Queued",
          "isActive": true,
          "primaryClusterId": "$primaryClusterId"
        }
      ]
    }
    ```

    ## Retrieving all exclusion patterns
    To retrieve a summary of all the exclusion patterns that have been added to the Rubrik cluster, send a GET request to [/exclusion_pattern](#operation/queryExclusionPattern).
    The GET /exclusion_pattern endpoint exposes a number of parameters to filter the list of exclusion patterns returned by the endpoint. The endpoint can be used with or without any of the available parameters.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/exclusion_pattern"
    ```

    The Rubrik REST API server responds with a ListResponse object that contains the current list of exclusion patterns and their details.

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "$id",
          "sourceId": "$sourceId",
          "pattern": "$pattern",
          "isMutable": true,
          "patternStatus": "Applied",
          "isActive": true,
          "primaryClusterId": "$primaryClusterId"
        }
      ],
      "total": 1
    }
    ```

    ## Retrieving a specific exclusion pattern
    To retrieve the details of a specific exclusion pattern, send a GET request to [/exclusion_pattern/{id}](#operation/getExclusionPattern).
    The {id} represents the ID for the exclusion pattern and has the form - ExclusionPattern:::{uuid}.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/exclusion_pattern/$exclusion_pattern_id"
    ```

    The Rubrik REST API server responds with the details of the specified exclusion pattern.

    ```bash
    {
      "id": "$exclusion_pattern_id",
      "sourceId": "$sourceId",
      "pattern": "$pattern",
      "isMutable": true,
      "patternStatus": "Applied",
      "isActive": true,
      "primaryClusterId": "$primaryClusterId"
    }
    ```

    ## Updating an exclusion pattern
    To update a specific exclusion pattern, send a POST request to [/exclusion_pattern/{id}](#operation/updateExclusionPattern).
    Note that the Rubrik cluster allows updating only the exclusion patterns that have `"isMutable": true`.
    The {id} represents the ID for the exclusion pattern to be updated and has the form - ExclusionPattern:::{uuid}.

    The attributes that can be updated are all or a subset of the following attributes:

    * pattern
    * isActive
    * isMutable

    ```bash
    curl -X POST \
      -d '{
        "pattern": "$pattern",
        "isActive": false,
        "isMutable": true }' \
      "https://$cluster_address/api/v1/exclusion_pattern/$exclusion_pattern_id"
    ```

    The Rubrik REST API server responds with the details of the updated exclusion pattern.

    ```bash
    {
      "id": "$exclusion_pattern_id",
      "sourceId": "$sourceId",
      "pattern": "$pattern",
      "isMutable": true,
      "patternStatus": "Queued",
      "isActive": true,
      "primaryClusterId": "$primaryClusterId"
    }
    ```

    ## Deleting an exclusion pattern
    To delete a specific exclusion pattern, send a DELETE request to [/exclusion_pattern/{id}](#operation/deleteExclusionPattern).
    Note that the Rubrik cluster only allows the deletion of the exclusion patterns that have `"isMutable": true`.
    The {id} represents the ID for the exclusion pattern to be deleted and has the form - ExclusionPattern:::{uuid}.

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/exclusion_pattern/$exclusion_pattern_id"
    ```
    The Rubrik REST API server responds with a 204 HTTP response code to indicate the successful deletion of the specified exclusion pattern.

    ## Bulk deleting exclusion patterns
    To delete exclusion patterns in bulk, send a DELETE request to [/exclusion_pattern/bulk](#operation/bulkDeleteExclusionPattern) with the IDs for the exclusion patterns to be deleted.
    Note that the Rubrik cluster only allows the deletion of the exclusion patterns that have `"isMutable": true`.

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/exclusion_pattern/bulk?ids=$exclusion_pattern_id1,$exclusion_pattern_id2"
    ```
    The Rubrik REST API server responds with a 204 HTTP response code to indicate the successful deletion of the specified exclusion patterns.

    # Hyper-V VMs 

    ## Getting the forced full snapshot configuration of a Hyperv VM

    To retrieve the configuration used to force a full snapshot
    of a Hyperv virtual machine, send a GET request to:
    [`/hyperv/vm/{id}/request/force_full_snapshot`](#operation/getHypervVirtualMachineForceFullSpec)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/hyperv/vm/{id}/request/force_full_snapshot"
    ```

    The Rubrik REST API server responds with the Hyperv virtual machine force full
    response object. The response object contains the latest configuration,
    unless it was cleared by a backup job of the Hyperv virtual machine or was
    never set.

    ```bash
    {
      "vmId": "HypervVirtualMachine:::fe9470a4-4057-4357-ac1f-ae99ff735439",
      "virtualDiskInfos": [
        {
          "virtualDiskId": "872bdd28-4d5d-4831-8698-59d692a822fc",
          "shouldDedupe": false
        },
        {
          "virtualDiskId": "39f61483-9cf5-11e9-80b9-00155d094203",
          "shouldDedupe": true
        }
      ]
    }
    ```

    ## Requesting a forced full snapshot for a Hyperv VM

    To request a forced full snapshot of a Hyperv virtual machine, send a POST
    request to:
    [`/hyperv/vm/{id}/request/force_full_snapshot`](#operation/requestHypervVirtualMachineForceFullSnapshot)

    ```bash
    curl -X POST "https://$cluster_address/api/v1/hyperv/vm/{id}/request/force_full_snapshot"
    ```

    The Rubrik REST API server persists the configuration to force a
    full snapshot until the next backup job, which takes a full snapshot
    and clears the configuration.

    ```bash
    {
      "vmId": "HypervVirtualMachine:::fe9470a4-4057-4357-ac1f-ae99ff735439",
      "virtualDiskInfos": [
        {
          "virtualDiskId": "872bdd28-4d5d-4831-8698-59d692a822fc",
          "shouldDedupe": false
        },
        {
          "virtualDiskId": "39f61483-9cf5-11e9-80b9-00155d094203",
          "shouldDedupe": true
        }
      ]
    }
    ```

    # Health monitor
    The Rubrik REST API endpoints for health monitor will allow users to get insight
    into the health of individual nodes or the entire Rubrik cluster.
    Currently, the endpoints support following operations:
    * Retrieve a list of available health monitor policies.
    * Enforce health monitor policies on one or more nodes of the Rubrik cluster.
    * Retrieve the status of the health monitor policies.

    ## Get health monitor policies
    To retrieve a list of health monitor policies, send GET request to
    GET ['/health_monitor/policies'](#operation/getPolicies) endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/health_monitor/policies"
    ```
    The Rubrik REST API server responds with a list of the available health monitor
    policies. Following output displays the response for Sdfs policy.
    ```bash
    [
      {
        "policyId": "Sdfs",
        "policyType": "CHECKER",
        "policyName": "Sdfs Check",
        "description": "Verify /sd is accessible and the SDFS service is responding",
        "script": "$policyScript",
        "scope": "NODE",
        "runInState": [
          "OK",
          "BAD"
        ],
        "isEnabled": true,
        "isHidden": false,
        "scheduleFreqInSec": 20,
        "causes": [],
        "remedies": [],
        "configParams": [],
        "notificationConfig": {
          "name": "Sdfs Check Failure",
          "notificationType": "DIAGNOSTIC",
          "notificationMessage": "Sdfs check failed",
          "criticalDetails": {
            "numFailures": 150,
            "failureWindow": 3000,
            "action": {
              "actionString": "$criticalActionScript",
              "isEnabled": true
            }
          },
          "warnDetails": {
            "numFailures": 75,
            "failureWindow": 2000,
            "action": {
              "actionString": "$warnActionScript",
              "isEnabled": true
            }
          }
        },
        "dependencies": []
      }
    ]

    ```

    ## Run health monitor Policies
    To enforce health monitor policies on selected nodes or the entire Rubrik
    cluster send a POST Request to
    ['/health_monitor/$runPolicy'](#operation/runPolicies) endpoint.

    ```bash
    curl -X POST
      -d '{
        "policyIds": ["policy_id1", "policy_id2"],
        "nodeIds": ["node_id1, node_id2"]}' \
      "https://$cluster_address>/api/v1/health_monitor/runPolicy"
    ```
    The Rubrik REST API server responds with the result of running the health
    monitor policies. Following output displays the Sdfs policy enforcement response.
    ```
    [
      {
        "nodeId": "$node_id1",
        "checkResults": [
          {
            "nodeId": "$node_id1",
            "policyId": "Sdfs",
            "isCheckPassed": true
          }
        ]
      },
      {
        "nodeId": "$node_id2",
        "checkResults": [
          {
            "nodeId": "$node_id2",
            "policyId": "Sdfs",
            "isCheckPassed": true
          }
        ]
      },
      {
        "nodeId": "$node_id3",
        "checkResults": [
          {
            "nodeId": "$node_id3",
            "policyId": "Sdfs",
            "isCheckPassed": true
          }
        ]
      }

    ```
    ## Health monitor policy enforcement status
    To retrieve the status of the policy enforcement, send a GET request to
    GET ['/health_monitor/policyStatus'](#operation/getPolicyStatus) endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/health_monitor/policyStatus?
    node_ids=<node_id1,node_id2>&policy_ids=policy_id1,policy_id2&has_detailed_status=true"
    ```
    The Rubrik REST API server responds with the status of running the policies on
    the selected nodes or the entire Rubrik cluster.
    ```
    [
      {
        "nodeId": "$node_id1",
        "checkResults": [
          {
            "nodeId": "$node_id1",
            "policyId": "Sdfs",
            "isCheckPassed": true,
            "checkOutput": "Passed last 12 attempts."
          }
        ]
      },
      {
        "nodeId": "$node_id2",
        "checkResults": [
          {
            "nodeId": "$node_id2",
            "policyId": "Sdfs",
            "isCheckPassed": true,
            "checkOutput": "Passed last 12 attempts."
          }
        ]
      },
      {
        "nodeId": "$node_id3",
        "checkResults": [
          {
            "nodeId": "$node_id3",
            "policyId": "Sdfs",
            "isCheckPassed": true,
            "checkOutput": "Passed last 12 attempts."
          }
        ]
      }
    ]
    ```

    # Job Monitoring

    ## Get summary information for protection and recovery jobs that are currently
    ## running, scheduled to run, or completed in the last 24 hours.
    To get summary information for protection and recovery jobs that are currently
    running, scheduled to run, or completed in the last 24 hours, send a GET request
    to [`/job_monitoring`](#operation/getJobMonitoringInfo) endpoint with optional
    query parameters. The optional query parameters are job_event_status, job_type,
    is_first_full, nclude_log_related_job, object_type, object_name, node_name,
    effective_sla_domain_id, last_update_time, after_id, sort_by, sort_order
    and limit. The default sort sort_by is start time with sort_order as asc.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/job_monitoring?job_event_status=Active,Queued&limit=1&sort_by=StartTime&sort_order=asc"
    ```

    The list of jobs matching the filters is returned.
    ```bash
    {
      "jobMonitoringInfoList": [
        {
          "jobMonitoringState": "Active",
          "jobStatus": "Queued",
          "jobType": "Replication",
          "objectId": "ObjectId,
          "objectType": "VmwareVirtualMachine",
          "objectName": "object name",
          "locationId": "location id",
          "locationName": "location name",
          "slaDomainId": "6d29f271-d706-47a5-a706-f4411ae5555a",
          "slaDomainName": "Sla name",
          "startTime": "2019-10-28T22:15:14.868Z",
          "isFirstFullSnapshot": false,
          "retryCount": 0,
          "eventSeriesId": "b3a00c13-74de-4508-80cd-822d5f2960fe",
          "duration": 1802576,
          "nodeId": "node_id",
          "warningCount": 0,
          "lastUpdatedTime": "2019-10-28T22:15:15.088Z"
        }
      ],
      "jobEventStatus": ["Active","Queued"],
      "shouldIncludeLogRelatedJob": false,
      "afterId": "afterId",
      "hasMore": true
    }
    ```
    ## Get job summary information for protection and recovery jobs separated by
    ## job type that have been scheduled, are currently running, or completed in
    ## the past 24 hours.
    To get job summary information for protection and recovery jobs separated by
    job type that have been scheduled, are currently running, or completed in the
    past 24 hours,send a GET request to
    [`/job_monitoring/summary_by_job_type`](#operation/getMonitoringJobCountByJobType)
    with the required job_monitoring_state parameter.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/job_monitoring/summary_by_job_type?job_monitoring_state=Active"
    ```

    The reponse is the the number of jobs for the given state separated by job_type.

    ```bash
    {
      "jobMonitoringState": "Active",
      "objectCounts": {
        "total": 37,
        "archival": 10,
        "backup": 15,
        "instantiate": 0,
        "recovery": 0,
        "replication": 12,
        "logBackup": 0,
        "logArchival": 0,
        "logReplication": 0,
        "logShipping": 0
      }
    }
    ```
    ## Get job summary information separated by job state for all running jobs,
    ## jobs that have been scheduled, and jobs that are complete, for protection
    ## and recovery jobs in the past 24 hours.
    To get job summary information separated by job state for all running jobs,
    jobs that have been scheduled, and jobs that are complete, for protection and
    recovery jobs in the past 24 hours, send a GET request to
    [`/job_monitoring/get_summary_by_job_state`](#operation/getMonitoringJobCountByJobState)
    with the optional parameter job_types to get the count only for a
    specific state.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/job_monitoring/get_summary_by_job_state"
    ```

    The response is the number of jobs in each state.

    ```bash
    {
      "jobTypes": [
        "Instantiate",
        "LogReplication",
        "Archival",
        "Replication",
        "LogBackup",
        "LogShipping",
        "Backup",
        "Recovery",
        "LogArchival"
      ],
      "objectCounts": {
        "total": 52,
        "failure": 2,
        "active": 15,
        "scheduled": 10,
        "success": 25
      }
    }
    ```

    ## Get a link to to download the job summary information as a CSV file, with
    ## the same filters as in the `GET /job_monitoring/` API.
    To get a link to to download the job summary information as a CSV file, send a
    GET request to
    [`/job_monitoring/csv_download_link`](#operation/getJobMonitoringInfoCsvDownloadLink)
     with require parameter job_monitoring_state.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/job_monitoring/csv_download_link?job_monitoring_state=Active"
    ```

    The link to the file is returned.

    ```bash
    {
      "downloadLink": "https://$cluster_address/report_dir/name.csv",
      "jobMonitoringState": "Active"
    }
    ```

    ## Create an email subscription to the monitoring page with user-specified
    ## job states.
    To create an email subscription to the monitoring page, send a
    POST request to
    [`/job_monitoring/subscription`](#operation/createMonitoringSubscription)
     with required parameter subscription_request.

    ```bash
    curl -X POST -d '{
      "timeAttributes": "$timeAttributes",
      "emailAddresses": "$emailAddresses",
      "attachments": "$attachments",
      "jobStates": "$jobStates"
    }' "https://$cluster_address/api/v1/job_monitoring/subscription"
    ```

    The summary of the created monitoring email subscription is returned.

    ```bash
    {
      "timeAttributes": {"dailyScheduleHour": 7},
      "emailAddresses": ["abcde@rubrik.com"],
      "attachments": ["Csv"],
      "jobStates": ["Active"],
      "id": "b3a00c13-74de-4508-80cd-822d5f2960fe",
      "status": "Active",
      "owner": {
        "userId": "6d29f271-d706-47a5-a706-f4411ae5555a",
        "userName": "Owner"
      }
    }
    ```

    ## Get all monitoring page email subscriptions.
    To get all email subscriptions to the monitoring page, send a
    GET request to [`/job_monitoring/subscription`]
    (#operation/getMonitoringSubscriptions)
     with no parameters.

    ```bash
    curl -X GET
    "https://$cluster_address/api/v1/job_monitoring/subscription"
    ```

    A summary of all unarchived email subscriptions for monitoring
      page in a list of summaries sorted by creation time (earliest
      created first).
      Each summary contains information for each subscription
      -- Time attributes - when to send the email
      -- Email addresses - who to send the email
      -- Attachments - what attachments should the email include
      -- Job states - which job states to include in the email
          (Failure, Scheduled, Success, Active, Canceled).
      -- Id - the tring that identifies the subscription
      -- Status - the status of the subscription
          (Active, Suspended, or Unknown)
      -- Owner - information about the owner of the subscription
        -- user id - unique id used to identify the owner
        -- user name - human-readable name of user
           the time schedule to send the subscription

    ```bash
    [
      {
        "timeAttributes": {"dailyScheduleHour": 7},
        "emailAddresses": ["abcde@rubrik.com"],
        "attachments": ["Csv"],
        "jobStates": ["Active"],
        "id": "b3a00c13-74de-4508-80cd-822d5f2960fe",
        "status": "Suspended",
        "owner": {
          "userId": "6d29f271-d706-47a5-a706-f4411ae5555a",
          "userName": "Owner"
        }
      },
      {
        "timeAttributes": {"dailyScheduleHour": 20},
        "emailAddresses": ["dummy@rubrik.com"],
        "attachments": ["Csv"],
        "jobStates": ["Failure", "Canceled"],
        "id": "b3a00c13-74de-4508-80cd-822d5f2960fe",
        "status": "Active",
        "owner": {
          "userId": "499aeb71-f114-45a5-8456-91b9f6c45ddd",
          "userName": "Owner"
        }
      },
    ]
    ```

    ## Get a monitoring page email subscription.
    To get an email subscription to the monitoring page, send a
    GET request to
    [`/job_monitoring/subscription/{subscription_id}`]
    (#operation/getMonitoringSubscription)
     with required parameter subscription_id.

    ```bash
    curl -X GET
    "https://$cluster_address/api/v1/job_monitoring/subscription/$subscription_id"
    ```

    The summary of the created monitoring email subscription is returned.

    ```bash
    {
      "timeAttributes": {"dailyScheduleHour": 7},
      "emailAddresses": ["abcde@rubrik.com"],
      "attachments": ["Csv"],
      "jobStates": ["Active"],
      "id": "b3a00c13-74de-4508-80cd-822d5f2960fe",
      "status": "Active",
      "owner": {
        "userId": "6d29f271-d706-47a5-a706-f4411ae5555a",
        "userName": "Owner"
      }
    }
    ```

    ## Update an existing monitoring page email subscription.
    To update an email subscription to the monitoring page, send a
    PATCH request to
    [`/job_monitoring/subscription/{subscription_id}`]
    (#operation/updateMonitoringSubscription)
     with required parameter subscription_id.

    ```bash
    curl -X PATCH -d '{
      "timeAttributes": "$timeAttributes",
      "emailAddresses": "$emailAddresses",
      "attachments": "$attachments",
      "jobStates": "$jobStates",
      "id": "$id",
      "assumeOwnership": "$assumeOwnership"
    }'
    "https://$cluster_address/api/v1/job_monitoring/subscription/$subscription_id"
    ```

    The summary of the updated monitoring email subscription is returned.

    ```bash
    {
      "timeAttributes": {"dailyScheduleHour": 7},
      "emailAddresses": ["abcde@rubrik.com"],
      "attachments": ["Csv"],
      "jobStates": ["Active"],
      "id": "b3a00c13-74de-4508-80cd-822d5f2960fe",
      "status": "Active",
      "owner": {
        "userId": "6d29f271-d706-47a5-a706-f4411ae5555a",
        "userName": "Owner"
      }
    }
    ```

    ## Delete an existing monitoring page email subscription.
    To delete an email subscription to the monitoring page, send a
    DELETE request to
    [`/job_monitoring/subscription/{subscription_id}`]
    (#operation/deleteMonitoringSubscription)
     with required parameter subscription_id.

    ```bash
    curl -X DELETE
    "https://$cluster_address/api/v1/job_monitoring/subscription/$subscription_id"
    ```

    # Rubrik syslog management

    Rubrik CDM clusters include the capability to add export rules to forward
    syslog information to remote servers.

    # Managing the Rubrik cluster syslog settings

    To view all the currently configured syslog export rules, send a GET request to
    the [`/syslog/export`](#operation/getSyslogExportRules) endpoint.

    **Example:** Retrieving the currently configured syslog export rules for a
    Rubrik cluster.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/syslog/export"
    ```

    To add a new syslog export rule, send a POST request to the
    [`/syslog/export`](#operation/addSyslogExportRule) endpoint.

    **Example:** Adding a new syslog export rule for a Rubrik cluster

    ```bash
    curl -X POST "https://$cluster_address/api/v1/syslog/export"
    ```

    To retrieve a syslog export rule, send a GET request with the export rule ID to
    the [`/syslog/export/{id}`](#operation/getSyslogExportRule) endpoint.

    To modify a syslog export rule, send a PATCH request with the export rule ID to
    the [`/syslog/export/{id}`](#operation/updateSyslogExportRule) endpoint.

    To remove a syslog export rule, send a DELETE request with the export rule ID to
    the [`/syslog/export/{id}`](#operation/deleteSyslogExportRule) endpoint.

    **Example:** Managing individual syslog export rules for a Rubrik cluster

    ```bash
    curl -X GET "https://$cluster_address/api/v1/syslog/export/{id}"
    curl -X PATCH "https://$cluster_address/api/v1/syslog/export/{id}"
    curl -X DELETE "https://$cluster_address/api/v1/syslog/export/{id}"
    ```

    To test a syslog export rule, send a POST request with the export rule
    information to the [`/syslog/export/test`](#operation/testSyslogExportRule)
    endpoint.

    **Example:** Testing a syslog export rule for a Rubrik cluster

    ```bash
    curl -X POST "https://$cluster_address/api/v1/syslog/export/test"
    ```

    # Rubrik user management

    Rubrik CDM clusters include the capability to manage access to resources
    using local users.

    # Managing the Rubrik local user account lockout

    To view the current local user account lockout configuration, send a GET
    request to
    the [`/user/lockout`](#operation/getUserAccountLockoutSettings) endpoint.

    **Example:** Retrieving the current local user account lockout configuration
    for a Rubrik cluster

    ```bash
    curl -X GET "https://$cluster_address/api/v1/user/lockout"
    ```

    To update the lockout configuration, send a PATCH request to the
    [`/user/lockout`](#operation/manageUserAccountLockoutSettings) endpoint.

    **Example:** Updating the local user account lockout configuration for a
    Rubrik cluster.

    ```bash
    curl -X PATCH "https://$cluster_address/api/v1/user/lockout"
    ```

    ## Unlocking a locked user
    To unlock a locked user, send a POST request to the
    [`/user/{id}/unlock`](#operation/unlockUser) endpoint

    **Example:** Unlocking a locked local user on CDM cluster
    ```bash
    curl -X POST "https://$cluster_address/api/v1/user/{id}/unlock"
    ```

    # Configuring users with TOTP as 2FA

    To fetch the TOTP status for an account, send a GET request to the
    [`/user/{id}/totp/status`](#operation/getTotpStatus) endpoint.

    **Example:** Retrieving TOTP status

    ```bash
    curl -X GET "https://$cluster_address/api/v1/user/{id}/totp/status"
    ```

    To configure and enable TOTP for an account, send a PUT request to the
    [`/user/{id}/totp/config`](#operation/setupTotp) endpoint.

    **Example:** Configure TOTP
    ```bash
    curl -X PUT "https://$cluster_address/api/v1/user/{id}/totp/config"
    ```

    To reset and disable TOTP for an account, send a DELETE request to the
    [`/user/{id}/totp/config`](#operation/resetTotp) endpoint.

    **Example:** Reset TOTP
    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/user/{id}/totp/config"
    ```

    To generate TOTP secret for an account, send a POST request to the
    [`/user/{id}/totp/new_secret`](#operation/generateTotpSecret) endpoint.

    **Example:** Generate TOTP secret
    ```bash
    curl -X POST "https://$cluster_address/api/v1/user/{id}/totp/new_secret"
    ```

    # MFA Servers

    An MFA Server is a server that Rubrik can be configured with in order to support
    integrations with external multi-factor authentication services.

    ## Adding a server
    To add an MFA Server to the cluster, send a POST request to the
    [`/mfa/rsa/server`](#operation/createRsaMfaServer) endpoint.

    ```bash
    curl -X POST -d \
      '
      {
      "name": "string",
      "timeout": 0,
      "baseUrl": "string",
      "clientId": "string",
      "assurancePolicyName": "string",
      "ldapUsernameAttribute": "string",
      "certificateId": "string",
      "restApiKey": "string",
      "restApiAccessId": "string"
      }
      ' \
      "https://$cluster_address/api/v1/mfa/rsa/server"
    ```
    ```bash
    {
      "name": "string",
      "timeout": 0,
      "baseUrl": "string",
      "clientId": "string",
      "assurancePolicyName": "string",
      "ldapUsernameAttribute": "string",
      "certificateId": "string",
      "id": "string"
    }
    ```
    ## Getting MFA Servers
    To get all MFA Servers configured on the cluster, leverage a GET request on the
    [`/mfa/rsa/server`](#operation/queryRsaMfaServers) endpoint.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mfa/rsa/server"
    ```
    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "name": "string",
          "timeout": 0,
          "baseUrl": "string",
          "clientId": "string",
          "assurancePolicyName": "string",
          "ldapUsernameAttribute": "string",
          "certificateId": "string",
          "id": "string"
        }
      ],
      "total": 0
    }
    ```

    ## Deleting MFA Server Integrations
    In order to delete a specific MFA Server integration, make a DELETE call to the
    [`/mfa/rsa/server/{id}`](#operation/deleteRsaMfaServer) endpoint.

    ```bash
    curl -X DELETE \
      -d '{
        "id": "$server_id" }' \
      "https://$cluster_address/api/v1/mfa/rsa/server/{id}"
    ```

    ## Getting an MFA Server
    In order to retrieve a specific MFA server integration, make a GET call to the
    [`/mfa/rsa/server/{id}`](#operation/getRsaMfaServer) endpoint.

    ```bash
    curl -X POST \
      -d '{
        "id": "server_id" }' \
      "https://$cluster_address/api/v1/mfa/rsa/server/{id}"
    ```
    ```bash
    {
      "name": "string",
      "timeout": 0,
      "baseUrl": "string",
      "clientId": "string",
      "assurancePolicyName": "string",
      "ldapUsernameAttribute": "string",
      "certificateId": "string",
      "id": "string"
    }
    ```

    ## Updating an MFA Server
    In order to update a specific MFA Server integration, make a PATCH call to the
    [`/mfa/rsa/server/{id}`](#operation/updateRsaMfaServer) endpoint.

    ```bash
    curl -X PATCH \
      -d '{
    {
      "name": "string",
      "timeout": 0,
      "baseUrl": "string",
      "restApiKey": "string",
      "clientId": "string",
      "assurancePolicyName": "string",
      "restApiAccessId": "string",
      "ldapUsernameAttribute": "string",
      "certificateId": "string"
    }
        ' \
      "https://$cluster_address/api/v1/mfa/rsa/server/{id}"
    ```
    ```bash
    {
      "name": "string",
      "timeout": 0,
      "baseUrl": "string",
      "clientId": "string",
      "assurancePolicyName": "string",
      "ldapUsernameAttribute": "string",
      "certificateId": "string",
      "id": "string"
    }
    ```

    # Legal

    ## Copyright

    Rubrik REST API - Copyright © 2017-2021 Rubrik Inc.
    All rights reserved.

    This documentation may be used free of charge. Selling without prior written consent is prohibited.
    Obtain permission before redistributing. In all cases, this copyright notice and disclaimer must remain
    intact.


    ## Disclaimer

    THE CONTENTS OF THIS DOCUMENTATION ARE PROVIDED "AS IS," AND COPYRIGHT HOLDERS MAKE NO
    REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
    WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, OR
    TITLE; THAT THE CONTENTS OF THE DOCUMENTATION ARE SUITABLE FOR ANY PURPOSE; THAT THE
    IMPLEMENTATION OF SUCH CONTENTS WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS,
    TRADEMARKS OR OTHER RIGHTS.
    COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL
    DAMAGES ARISING OUT OF ANY USE OF THE DOCUMENTATION OR THE PERFORMANCE OR IMPLEMENTATION OF
    THE CONTENTS THEREOF.

    ## Trademarks

    Rubrik, the Rubrik logo, Rubrik Envision, and Rubrik Edge are trademarks or registered trademarks of Rubrik, Inc. in the U.S. and/or other countries. All other trademarks are the property of their respective owners.

    # Report Config

    ## Update the config parameters related to Reports
    Send a PATCH request to [`/report/config`](#operation/setReportConfig)
    This request updates the configuration parameters related to the reporting framework.
    `cleanupReportJobInstanceForLogJobs` specifies an interval in days. Log jobs in report job instances are retained for the specified interval.

    ```bash
    curl -X PATCH "https://$cluster_address/api/v1/report/config"
    ```

    ## Get summary information for backup compliance based on each 24 hour time period
    Send a GET request to [`/report/compliance_summary`](#operation/getComplianceSummaryV1)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/report/compliance_summary"
    ```

    ## Get summary information for backup compliance based on snapshot range
    Send a GET request to
     [`/report/compliance_summary_sla`](#operation/getComplianceSummarySLAV1)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/report/compliance_summary_sla"
    ```

    #Database log backup report

    #Get the database log report summary

    To get the database log report summary, send a GET request to the
    [`/database/log_report`](#operation/queryLogReport) end point

    **Example:** Retrieving the database log report summary

    ```bash
    curl -X GET "https://$cluster_address/api/v1/database/log_report"
    ```
    ```bash
    {
      "total": 1,
      "data": [
        {
          "effectiveSlaDomainName": "sla_name",
          "id": "$db_id",
          "name": "$db_name",
          "location": "$location_name",
          "databaseType": "$db_type",
          "primaryClusterId": "$cluster_id",
          "logBackupFrequency": 3600,
          "lastSnapshotTime": "2020-11-10T22:21:43.000Z",
          "effectiveSlaDomainId": "$sla_id"
        }
      ],
      "hasMore": false
    }
    ```

    #Get the database log report properties

    To get the database log report properties, send a GET request to the
    [`/database/log_report/defaults`](#operation/queryReportProperties) end point

     **Example:** Retrieving the database log report properties

    ```bash
    curl -X GET "https://$cluster_address/api/v1/database/log_report/defaults"
    ```
    ```bash
    {
      "logDelayNotificationFrequencyInMin": 720,
      "logDelayThresholdInMin": 720,
      "enableDelayNotification": false
    }
    ```

    #Update the database log report properties

    To update the database log report properties, send a PATCH request to the
    [`/database/log_report/defaults`](#operation/updateReportProperties) end point

     **Example:** Update the database log report properties

    ```bash
    curl -X PATCH "https://$cluster_address/api/v1/database/log_report/defaults" -d\
    '{
        "logDelayNotificationFrequencyInMin": 360,
        "logDelayThresholdInMin": 120,
        "enableDelayNotification": true
     }'
    ```

    # Organization

    ## Create a list of Rubrik Envoy objects
    To create a list of Rubrik Envoy objects, send a POST request to the
    [`/organization/{id}/envoy/bulk`](#operation/bulkCreateEnvoys) endpoint. The
    request takes an ID for the Organization and the information about the Rubrik
    Envoy objects.

    ```bash
    curl -X POST "https://$cluster_address/api/v1/organization/{id}/envoy/bulk"
    ```

    The Rubrik REST API server responds with a `ListResponse` object.
    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "string",
          "ipAddress": "string",
          "port": 1234,
          "organizationId": "string",
          "status": "Connected",
        },
      ]
    }
    ```

    ## Remove a list of Rubrik Envoy objects
    To remove a list of Rubrik Envoy objects, send a DELETE request to the
    [`/organization/{id}/envoy/bulk`](#operation/bulkDeleteEnvoys) endpoint. The
    request takes an ID for the Organization and a list of IDs for Rubrik Envoy
    objects.

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/organization/{id}/envoy/bulk"
    ```

    The Rubrik REST API server responds with HTTP response code 204. This indicates
    the request succeeded and the response body is empty.

    ## Update a list of Rubrik Envoy objects
    To update a list of Rubrik Envoy objects, send a PATCH request to the
    [`/organization/{id}/envoy/bulk`](#operation/bulkUpdateEnvoys) endpoint. The
    request takes an ID for the Organization and the information about the Rubrik
    Envoy objects.

    ```bash
    curl -X PATCH "https://$cluster_address/api/v1/organization/{id}/envoy/bulk"
    ```

    The Rubrik REST API server responds with a `ListResponse` object.
    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "string",
          "ipAddress": "string",
          "port": 1234,
          "organizationId": "string",
          "status": "Connected",
        },
      ]
    }
    ```
  title: Rubrik REST API
  version: v1
  x-apisguru-categories:
    - security
    - storage
  x-logo:
    url: https://www.rubrik.com/wp-content/uploads/2016/11/Rubrik-Snowflake-small.png
  x-origin:
    - format: swagger
      url: https://rubrikinc.github.io/api-doc-v1-6.0/openapi.json
      version: "2.0"
  x-providerName: rubrikinc.github.io
security:
  - BasicAuth: []
  - Bearer: []
tags:
  - name: Endpoint reference
    x-traitTag: true
  - description: Archival.
    name: /archive
    x-displayName: /archive
  - description: Authorization.
    name: /authorization
    x-displayName: /authorization
  - description: Backup.
    name: /backup
    x-displayName: /backup
  - description: Blackout windows.
    name: /blackout_window
    x-displayName: /blackout_window
  - description: Certificates.
    name: /certificate
    x-displayName: /certificate
  - description: Cloud utilization.
    name: /cloud_utilization
    x-displayName: /cloud_utilization
  - description: Cluster configuration and health.
    name: /cluster
    x-displayName: /cluster
  - description: Configuration update history.
    name: /config/history
    x-displayName: /config/history
  - description: Certificate signing requests.
    name: /csr
    x-displayName: /csr
  - description: Database log backup report.
    name: /database/log_report
    x-displayName: /database/log_report
  - description: Data Sources.
    name: /data_source
    x-displayName: /data_source
  - description: Events.
    name: /event
    x-displayName: /event
  - description: Event Series.
    name: /event_series
    x-displayName: /event_series
  - description: Exclusion patterns.
    name: /exclusion_pattern
    x-displayName: /exclusion_pattern
  - description: Failover clusters.
    name: /failover_cluster
    x-displayName: /failover_cluster
  - description: Failover cluster apps.
    name: /failover_cluster/failover_cluster_app
    x-displayName: /failover_cluster/failover_cluster_app
  - description: Failover cluster hierarchy.
    name: /failover_cluster/hierarchy
    x-displayName: /failover_cluster/hierarchy
  - description: File system filesets.
    name: /fileset
    x-displayName: /fileset
  - description: File system fileset templates.
    name: /fileset_template
    x-displayName: /fileset_template
  - description: HDFS.
    name: /hdfs
    x-displayName: /hsfs
  - description: HDFS templates.
    name: /hdfs_template
    x-displayName: /hdfs_template
  - description: Health monitor operations.
    name: /health_monitor
    x-displayName: /health_monitor
  - description: Linux hosts and Windows hosts.
    name: /host
    x-displayName: /host
  - description: Network shares.
    name: /host/share
    x-displayName: /host/share
  - description: Host hierarchy.
    name: /host/hierarchy
    x-displayName: /host/hierarchy
  - description: IdP authentication domains.
    name: /idp_auth_domain
    x-displayName: /idp_auth_domain
  - description: Job monitoring.
    name: /job_monitoring
    x-displayName: /job_monitoring
  - description: LDAP services.
    name: /ldap_service
    x-displayName: /ldap_service
  - description: Legal Hold.
    name: /legal_hold
    x-displayName: /legal_hold
  - description: Managed volumes.
    name: /managed_volume
    x-displayName: /managed_volume
  - description: SQL Server instances and databases.
    name: /mssql
    x-displayName: /mssql
  - description: Oracle.
    name: /oracle
    x-displayName: /oracle
  - description: Organization.
    name: /organization
    x-displayName: /organization
  - description: Principal Actions.
    name: /principal
    x-displayName: /principal
  - description: Replication.
    name: /replication
    x-displayName: /replication
  - description: Report.
    name: /reports
    x-displayName: /reports
  - description: Role management.
    name: /role
    x-displayName: /role
  - description: SAML SSO Authentication.
    name: /saml
    x-displayName: /saml
  - description: SAP HANA.
    name: /sap_hana
    x-displayName: /sap_hana
  - description: User session management.
    name: /session
    x-displayName: /session
  - description: SLA Domains.
    name: /sla_domain
    x-displayName: /sla_domain
  - description: Unmanaged Objects.
    name: /unmanaged_object
    x-displayName: /unmanaged_object
  - description: User management.
    name: /user
    x-displayName: /user
  - description: User-defined resource tag management.
    name: /user_defined_tag
    x-displayName: /user_defined_tag
  - description: vCloud cluster.
    name: /vcd/cluster
    x-displayName: /vcd/cluster
  - description: vCloud hierarchy.
    name: /vcd/hierarchy
    x-displayName: /vcd/hierarchy
  - description: vCloud Director vApps.
    name: /vcd/vapp
    x-displayName: /vcd/vapp
  - description: VMware hypervisor hosts.
    name: /vmware/host
    x-displayName: /vmware/host
  - description: VMware vCenter.
    name: /vmware/vcenter
    x-displayName: /vmware/vcenter
  - description: VMware virtual machines.
    name: /vmware/vm
    x-displayName: /vmware/vm
  - description: VMware compute clusters.
    name: /vmware/compute_cluster
    x-displayName: /vmware/compute_cluster
  - description: VMware resource pool.
    name: /vmware/resource_pool
    x-displayName: /vmware/resource_pool
  - description: VMware hierarchy.
    name: /vmware/hierarchy
    x-displayName: /vmware/hierarchy
  - description: Volume Groups.
    name: /volume_group
    x-displayName: /volume_group
  - description: Windows clusters.
    name: /windows_cluster
    x-displayName: /windows_cluster
paths:
  "/archive/aws/s3/{id}/account_id":
    get:
      description: Get the AWS account ID of an AWS S3 archival location.
      operationId: getAwsAccountId
      parameters:
        - description: ID of an AWS archival location that uses the S3 protocol.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"
          description: Account ID of the AWS account of the archival location.
      summary: Get the AWS account ID of an AWS S3 archival location
      tags:
        - /archive
      x-group: archival
  "/archive/location/{id}/owner/disable":
    post:
      description: |
        Disables archiving and any changes to the data for the specified archival location. This operation disables snapshot upload, snapshot expiration, consolidation, and garbage collection operations on the archival location.
      operationId: disableArchivalLocation
      parameters:
        - description: ID assigned to an archival location object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: |
            Archival location successfully disabled.
      summary: Disable location for archival and modification operations
      tags:
        - /archive
      x-group: archival
  "/archive/location/{id}/owner/enable":
    post:
      description: |
        Enable archiving and other operations that were previously disabled on the specified archival location.
      operationId: enableArchivalLocation
      parameters:
        - description: ID assigned to an archival location object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: |
            Archival location successfully enabled.
      summary: Enable archival location for archival and modification operations
      tags:
        - /archive
      x-group: archival
  "/archive/location/{location_id}/reader/refresh/data_sources":
    post:
      description: |
        Update the current Rubrik CDM cluster with information about the changes made to a list of data sources in an archival location by the Rubrik CDM cluster that owns the archival location.
      operationId: refreshArchivalLocationDataSources
      parameters:
        - description: ID assigned to an archival location object.
          in: path
          name: location_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReaderRefreshDataSourcesRequest"
        description: |
          A set of local and archival IDs for data sources to refresh. For a data source, either a local or archival data source ID should be specified. The operation will fail if `none` is specified.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: |
            The request ID for an asynchronous request to refresh archival information.
      summary: Refresh archive information for a list of data sources
      tags:
        - /archive
      x-group: archival
  /authorization/cache:
    delete:
      description: Clears the node of cached authorization information for the current user.
      operationId: deleteAuthzCache
      responses:
        "204":
          description: Successfully deleted cached authorization information.
      summary: Clear cached authorization information
      tags:
        - /authorization
      x-group: role_authorization
  /backup/retry:
    post:
      description: |
        Create an asynchronous task for rescheduling unsuccessful backup tasks.
      operationId: createBackupRemediationAsyncTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemediationRequest"
        description: |
          Parameters required to reschedule unsuccessful backup tasks.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemediationResponse"
          description: Status details of the async request.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestFailedException"
          description: The re-scheduling API failed.
      summary: Reschedule unsuccessful backup tasks
      tags:
        - /backup
      x-group: backup_remediation
  "/backup/retry/{id}":
    get:
      description: |
        Retrieve the details of a specified asynchronous task to use for rescheduling unsuccessful tasks.
      operationId: getBackupRemediationAsyncTaskStatus
      parameters:
        - description: Async request id.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status details of async request.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestFailedException"
          description: The status API failed.
      summary: Get status of reschedule attempt
      tags:
        - /backup
      x-group: backup_remediation
  /backup/verify:
    post:
      description: |
        This REST API triggers the job "BACKUP_INTEGRITY_VERIFICATION", which verifies whether or not the specified snapshot is restorable.
      operationId: verifySnapshot
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerificationParameters"
        description: |
          Parameters needed to schedule a snapshot verification job.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerificationResponse"
          description: Sucessfully scheduled the job to verify the snapshot.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestFailedException"
          description: The verification API failed.
      summary: Trigger a job for snapshot verification
      tags:
        - /backup
      x-group: backup_verification
  "/backup/verify/{id}":
    get:
      description: |
        Get the details of an asynchronous request for a backup verification job.
      operationId: getBackupVerificationAsyncRequestStatus
      parameters:
        - description: ID of the asynchronous request.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerificationResponse"
          description: Status of the asynchronous request.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestFailedException"
          description: The status retrieval API failed.
      summary: Get asynchronous request details for Backup Verification
      tags:
        - /backup
      x-group: backup_verification
  /blackout_window:
    get:
      description: Determine whether global blackout window is currently active.
      operationId: getBlackoutWindowStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalBlackoutWindowStatus"
          description: Current status of blackout window.
      summary: Get current status of global blackout window
      tags:
        - /blackout_window
      x-group: blackout_window
    patch:
      description: Returns whether or not the system is in a blackout window.
      operationId: toggleBlackoutWindow
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GlobalBlackoutWindowStatus"
        description: Whether to start or stop the global blackout window.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalBlackoutWindowStatus"
          description: Returned the updated blackout window status.
      summary: Starts or stops the global blackout window in local Rubrik cluster
      tags:
        - /blackout_window
      x-group: blackout_window
  /certificate:
    get:
      description: Get all certificates.
      operationId: queryCertificates
      parameters:
        - description: Search by certificate name.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: |
            Search certificates by whether or not they contain a private key.
          in: query
          name: has_key
          required: false
          schema:
            type: boolean
        - description: Search certificates by description.
          in: query
          name: description
          required: false
          schema:
            type: string
        - description: Search certificates by expiration.
          in: query
          name: expiration
          required: false
          schema:
            type: string
        - description: Specifies whether to include expired certificates. The default is false.
          in: query
          name: include_expired
          required: false
          schema:
            type: boolean
        - description: Attribute by which the list of certificates is sorted.
          in: query
          name: sort_by
          required: false
          schema:
            default: Name
            enum:
              - name
              - description
              - hasKey
              - expiration
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateSummaryListResponse"
          description: List of certificates.
      summary: Get all certificates
      tags:
        - /certificate
      x-group: certificate
    post:
      description: Import a certificate.
      operationId: importCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CertificateImportRequest"
        description: Request to import a certificate.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateSummary"
          description: Summary of the certificate.
      summary: Import a certificate
      tags:
        - /certificate
      x-group: certificate
  /certificate/agent:
    get:
      description: Get all certificates that have been added to the cluster and qualify to be secondary cluster certificates for the Rubrik Backup Service. This call retrieves any certificates that are detected to be Rubrik cluster certificates.
      operationId: queryAgentSecondaryCertificate
      parameters:
        - description: Filter based on whether or not certificates have been marked for use by agents.
          in: query
          name: is_agent_enabled
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentSecondaryCertificateInfoListResponse"
          description: List of certificates.
      summary: Get all potential agent secondary cluster certificates
      tags:
        - /certificate/agent
      x-group: certificate
    post:
      description: Mark a secondary cluster certificate to be asynchronously synced to all Rubrik Backup Service instances for which this cluster is the primary.
      operationId: markAgentSecondaryCertificate
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: ID of certificate to add.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentSecondaryCertificateInfo"
          description: Information about the certificate
      summary: Mark a certificate to be added to agents
      tags:
        - /certificate/agent
      x-group: certificate
  "/certificate/agent/{id}":
    delete:
      description: Unmark a previously marked secondary cluster certificate to be asynchronously removed from all Rubrik Backup Service instances for which this cluster is the primary.
      operationId: unmarkAgentSecondaryCertificate
      parameters:
        - description: ID of certificate to remove.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successfully removed the certificate.
      summary: Unmark a certificate that was previously marked
      tags:
        - /certificate/agent
      x-group: certificate
  "/certificate/{id}":
    delete:
      description: Deletes an imported certificate.
      operationId: deleteCertificate
      parameters:
        - description: The certificate ID.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successfully removed the certificate.
      summary: Delete imported certificate object
      tags:
        - /certificate
      x-group: certificate
    get:
      description: Get a certificate summary.
      operationId: exportCertificate
      parameters:
        - description: ID of certificate to export.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateSummary"
          description: Summary of the certificate to export.
      summary: Get a certificate summary to export
      tags:
        - /certificate
      x-group: certificate
    patch:
      description: Provide updated information for a certificate object.
      operationId: updateCertificate
      parameters:
        - description: ID of certificate object to update.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CertificatePatchRequest"
        description: Patch request to update a certificate object.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateSummary"
          description: Updated certificate object.
      summary: Update a certificate entry
      tags:
        - /certificate
      x-group: certificate
  /cloud_utilization/cloud_out_forecast:
    post:
      description: Forecast of the cloud storage and compute utilization on cloud archival location according to the SLA Domain parameters.
      operationId: doCloudOutForecast
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CloudOutForecastRequest"
        description: Object that contains the CloudOut forecast request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudOutForecastSummary"
          description: Object that contains the CloudOut forecast summary.
      summary: Forecast of the cloud utilization for CloudOut
      tags:
        - /cloud_utilization
      x-group: cloud_utilization
  /cluster/me/upgrade/monitor_events:
    get:
      description: |
        Gets notifications about events from a specified set of possible events.
      operationId: monitorEvents
      parameters:
        - description: Specifies a list of events to monitor for notifications.
          explode: false
          in: query
          name: event_notification_query
          required: true
          schema:
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/EventNotification"
                type: array
          description: |
            Name and timestamp of an event sent as a notification.
      summary: Get event notifications
      tags:
        - /cluster
      x-group: cluster
  "/cluster/{id}":
    get:
      description: Retrieve public information about the Rubrik cluster.
      operationId: getPublicClusterInfo
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterInfo"
          description: Information about the cluster.
      summary: Get cluster details
      tags:
        - /cluster
      x-group: cluster
    patch:
      description: Change the properties of a specified Rubrik cluster. Changes to cluster name could take upto 10 minutes to be propagated to all nodes.
      operationId: updateCluster
      parameters:
        - description: ID of a Rubrik cluster object, or use *me* for the Rubrik cluster that is hosting the current API session.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClusterUpdate"
        description: Array that contains the changed information for the Rubrik cluster object.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterInfo"
          description: Updated information for a specified Rubrik cluster.
      summary: Change Rubrik cluster properties
      tags:
        - /cluster
      x-group: cluster
  "/cluster/{id}/api_version":
    get:
      description: Retrieves software version of the Rubrik cluster.
      operationId: getClusterApiVersion
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterApiVersion"
          description: REST API version running on the cluster.
      security: []
      summary: Get cluster REST API version
      tags:
        - /cluster
      x-group: cluster
      x-unauthenticated: true
  "/cluster/{id}/certificate":
    get:
      description: Returns the cluster certificate.
      operationId: getClusterCertificate
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterCertificate"
          description: Returns the cluster certificate.
      summary: Get the cluster certificate
      tags:
        - /cluster
      x-group: cluster
  "/cluster/{id}/manual_discover":
    post:
      description: Manually specifies mDNS discovery data. Output for this endpoint is identical to the output of the 'discover' endpoint.
      operationId: manualDiscover
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ManualDiscoveryNodeInfo"
        description: Manual discovery input data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManualDiscoveryNodeInfo"
          description: List of nodes available to bootstrap into the specified cluster along with their IPv6 addresses.
      summary: Manually discover nodes
      tags:
        - /cluster
      x-group: cluster
      x-unauthenticated: true
  "/cluster/{id}/manual_discover_ipv4":
    post:
      description: Manually specifies discovery data. This endpoint output is identical to the output of the 'discover' endpoint.
      operationId: manualDiscoverIpv4
      parameters:
        - description: ID of the Rubrik cluster, or *me* for the current cluster.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ManualDiscoveryNodeIpv4Info"
        description: Manual discovery input data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManualDiscoveryNodeIpv4Info"
          description: List of nodes available to bootstrap into the specified cluster, including their link-local IPv4 addresses.
      summary: Manually discover nodes over IPv4 address
      tags:
        - /cluster
      x-group: cluster
      x-unauthenticated: true
  "/cluster/{id}/node_hostname":
    get:
      description: |
        Retrieve the ID to hostname mapping for all the nodes that belong to a specified Rubrik cluster.
      operationId: getClusterNodeHostnames
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeHostnameInfoListResponse"
          description: List of node ID to hostname mappings.
      summary: |
        Get the node ID to hostname mapping for all the nodes in a Rubrik cluster
      tags:
        - /cluster
      x-group: cluster
    post:
      description: |
        Change hostnames for multiple nodes at a time, for a specified Rubrik cluster.
      operationId: changeClusterNodeHostnames
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/NodeHostnameInfo"
              type: array
        description: Node ID to hostname mapping.
        required: true
      responses:
        "204":
          description: |
            Successfully changed hostnames for all the specified nodes in the Rubrik cluster.
      summary: Change hostname for nodes in a Rubrik cluster
      tags:
        - /cluster
      x-group: cluster
  "/cluster/{id}/node_id":
    get:
      description: Retrieve the list of node IDs for the nodes in this Rubrik CDM cluster.
      operationId: getClusterNodeIds
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/NodeId"
                type: array
          description: List of node IDs.
      summary: Get the name of the nodes in the cluster
      tags:
        - /cluster
      x-group: cluster
  "/cluster/{id}/rubrik_support_portal_credentials":
    get:
      description: |
        Check whether the specified Rubrik cluster has an existing set of credentials for the Rubrik support portal.
      operationId: hasRubrikSupportPortalCredentials
      parameters:
        - description: |
            The ID of a Rubrik cluster, or use *me* for the Rubrik cluster that is hosting the current session.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BooleanResponse"
          description: |
            Returns 'True' if the specified Rubrik cluster already has credentials for the Rubrik support portal.
      summary: Check credentials to the Rubrik support portal
      tags:
        - /cluster
      x-group: cluster
    post:
      description: |
        Update credentials for the specified Rubrik cluster to connect to the Rubrik support portal.
      operationId: updateRubrikSupportPortalCredentials
      parameters:
        - description: |
            The ID of a Rubrik cluster, or use *me* for the Rubrik cluster that is hosting the current session.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommunityUserCredentials"
        description: |
          The credentials used to connect to the Rubrik support portal.
        required: true
      responses:
        "204":
          description: |
            Successfully updated Rubrik support portal credentials.
      summary: Update credentials to the Rubrik support portal
      tags:
        - /cluster
      x-group: cluster
  "/cluster/{id}/security/cors":
    get:
      description: Get the current CORS support configuration for a web server.
      operationId: getCorsConfiguration
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CorsConfiguration"
          description: The current CORS support configuration for a web server.
      summary: Get CORS configuration
      tags:
        - /cluster
      x-group: security
    patch:
      description: Update the CORS support configuration for a web server.
      operationId: updateCorsConfiguration
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CorsConfigurationPatch"
        description: CORS configuration.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CorsConfiguration"
          description: The updated CORS support configuration for a web server.
      summary: Update CORS configuration
      tags:
        - /cluster
      x-group: security
  "/cluster/{id}/security/encryption":
    get:
      description: Get the current encryption at rest status of the cluster.
      operationId: getEncryptionStatus
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionStatus"
          description: The current encryption at rest status for the cluster.
      summary: Get encryption at rest status
      tags:
        - /cluster
      x-group: security
  "/cluster/{id}/security/fips":
    get:
      description: Returns the current status of FIPS on the specified cluster. When the status is true, FIPS is enabled.
      operationId: getFips
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FipsStatus"
          description: The current FIPS enablement status for a cluster.
      summary: Get FIPS enablement status
      tags:
        - /cluster
      x-group: security
    patch:
      description: Update the current FIPS enablement status for a cluster.
      operationId: updateFips
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FipsStatusPatch"
        description: Update FIPS enablement status.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FipsStatus"
          description: The current FIPS enablement status for a cluster.
      summary: Update FIPS enablement status
      tags:
        - /cluster
      x-group: security
  "/cluster/{id}/security/kmip/client":
    get:
      description: Return the currently configured KMIP client information. The response object contains empty fields when KMIP is not configured.
      operationId: getKmipClient
      parameters:
        - description: ID assigned to a Rubrik cluster. Use *me* to refer to the Rubrik cluster that is hosting the current API session.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KmipClientDetail"
          description: Current KMIP client configuration detail.
      summary: Get the KMIP client configuration
      tags:
        - /cluster
      x-group: security
    put:
      description: Specify KMIP client credentials for each of the Rubrik cluster nodes.
      operationId: setKmipClient
      parameters:
        - description: ID assigned to a Rubrik cluster. Use *me* to refer to the Rubrik cluster that is hosting the current API session.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KmipClientConfiguration"
        description: KMIP client configuration.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the request for setting client configuration.
      summary: Specify KMIP client credentials for nodes
      tags:
        - /cluster
      x-group: security
  "/cluster/{id}/security/kmip/server":
    delete:
      description: Remove the server with the specified server address from the set of active KMIP servers.
      operationId: deleteKmipServer
      parameters:
        - description: ID assigned to a Rubrik cluster. Use *me* to refer to the Rubrik cluster that is hosting the current API session.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
        - description: IPv4 address or FQDN (fully qualified domain name) of the KMIP server.
          in: query
          name: server_address
          required: true
          schema:
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the request for removing the KMIP server.
      summary: Remove the specified KMIP server
      tags:
        - /cluster
      x-group: security
    get:
      description: Returns the KMIP server information for the specified server address. When no server address is specified, this call returns information on all active KMIP servers. The response array is empty when KMIP is not configured or when the server address cannot be found.
      operationId: getKmipServer
      parameters:
        - description: ID assigned to a Rubrik cluster. Use *me* to refer to the Rubrik cluster that is hosting the current API session.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
        - description: The address of the KMIP server.
          in: query
          name: server_address
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/KmipServerDetail"
                type: array
          description: Information for the specified KMIP server(s).
      summary: Get KMIP server information
      tags:
        - /cluster
      x-group: security
    put:
      description: Add the specified KMIP server to the set of active KMIP servers.
      operationId: addKmipServer
      parameters:
        - description: ID assigned to a Rubrik cluster. Use *me* to refer to the Rubrik cluster that is hosting the current API session.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KmipServerConfiguration"
        description: Object containing the configuration details for a KMIP server.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the request for setting configuration.
      summary: Add a KMIP server
      tags:
        - /cluster
      x-group: security
  "/cluster/{id}/security/password_requirements":
    get:
      description: Query user password requirements for a cluster.
      operationId: queryPasswordRequirements
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordRequirementsSummary"
          description: Active password requirements.
      summary: Get password requirements
      tags:
        - /cluster
      x-group: security
    patch:
      description: Update user password requirements for a cluster.
      operationId: patchPasswordRequirements
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordRequirementsPatchRequest"
        description: Password requirements.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordRequirementsSummary"
          description: Succesfully patched password requirements.
      summary: Set password requirements
      tags:
        - /cluster
      x-group: security
  "/cluster/{id}/security/totp/setting":
    get:
      description: Returns TOTP global setting, including whether TOTP is enforced or not.
      operationId: getTotpGlobalSetting
      parameters:
        - description: ID assigned to a Rubrik cluster. Use *me* to refer to the Rubrik cluster that is hosting the current API session.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TotpGlobalSetting"
          description: TOTP global setting for the specified Rubrik cluster.
      summary: Get global TOTP setting
      tags:
        - /cluster
      x-group: security
    put:
      description: Update TOTP global setting, including whether TOTP is enforced or not.
      operationId: updateTotpGlobalSetting
      parameters:
        - description: ID assigned to a Rubrik cluster. Use *me* to refer to the Rubrik cluster that is hosting the current API session.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TotpGlobalSettingUpdate"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TotpGlobalSetting"
          description: Updated TOTP global setting for the specified Rubrik cluster.
      summary: Update TOTP global setting
      tags:
        - /cluster
      x-group: security
  "/cluster/{id}/security/truststore":
    delete:
      description: Remove certificate associated with specified truststore.
      operationId: unsetTruststoreCertificate
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
        - description: Comma separated list of truststore types.
          explode: false
          in: query
          name: truststores
          required: true
          schema:
            items:
              enum:
                - System
                - Gcp
              type: string
            type: array
          style: form
      responses:
        "204":
          description: OK on success.
      summary: Remove certificate associated with specified truststore
      tags:
        - /cluster
      x-group: security
    get:
      description: Get summary of all truststores.
      operationId: getTruststores
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TruststoreSummaryListResponse"
          description: List of truststore summaries.
      summary: Get summary of all truststores
      tags:
        - /cluster
      x-group: security
    patch:
      description: Setting the given certificate for each node's truststores.
      operationId: setTruststoreCertificate
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/TruststorePayload"
              type: array
        description: Request to update certificate for truststore.
        required: true
      responses:
        "204":
          description: OK on success.
      summary: Set certificates for one or more truststores
      tags:
        - /cluster
      x-group: security
  "/cluster/{id}/security/web_signed_cert":
    delete:
      description: Resetting the customer-given certificate for each node's web server.
      operationId: resetWebSignedCertificate
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the request for resetting the certificate.
      summary: Reset the signed certificate for Web server
      tags:
        - /cluster
      x-group: security
    get:
      description: If the web server uses a signed certificate, fetch it.
      operationId: getWebSignedCertificate
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebServerCertificateSummary"
          description: Signed certificate of the web server.
      summary: Get the signed certificate for Web server
      tags:
        - /cluster
      x-group: security
    put:
      description: Setting the given certificate for each node's web server to use.
      operationId: setWebSignedCertificate
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebServerCertificatePayload"
        description: Request to update certificate for web server.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the request for setting certificate.
      summary: Set a signed certificate for Web server
      tags:
        - /cluster
      x-group: security
  "/cluster/{id}/snmp_mib_link":
    get:
      description: Retrieve the download link for the Rubrik SNMP MIB file. The retrieval is a synchronous operation.
      operationId: getRubrikSnmpMibDownloadLink
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RubrikMibFileDownloadLink"
          description: Download link for the Rubrik SNMP MIB file.
      summary: Get the link for Rubrik SNMP MIB file
      tags:
        - /cluster
      x-group: cluster
  "/cluster/{id}/syslog_msg_mib_link":
    get:
      description: Retrieve the download link for the SYSLOG-MSG-MIB file. The retrieval is a synchronous operation.
      operationId: getSyslogMsgSnmpMibDownloadLink
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyslogMsgMibFileDownloadLink"
          description: Download link for the SYSLOG-MSG-MIB file.
      summary: Get the link for SYSLOG-MSG-MIB file
      tags:
        - /cluster
      x-group: cluster
  "/cluster/{id}/syslog_tc_mib_link":
    get:
      description: Retrieve the download link for the SYSLOG-TC-MIB file. The retrieval is a synchronous operation.
      operationId: getSyslogTcSnmpMibDownloadLink
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyslogTcMibFileDownloadLink"
          description: Download link for the SYSLOG-TC-MIB file.
      summary: Get the link for SYSLOG-TC-MIB file
      tags:
        - /cluster
      x-group: cluster
  "/cluster/{id}/upgrade/available_version":
    get:
      description: Retrieve a list of Rubrik CDM versions available to upgrade the Rubrik cluster.
      operationId: availableVersion
      parameters:
        - description: The ID of the Rubrik cluster. To query the local cluster, use *me*.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
        - description: A string that filters the results based on the prefix. For example, the string "5.1" filters all releases in the 5.1 family. If more than one result is desired then this parameter can be used in conjunction with the `show_all` parameter.
          in: query
          name: filter_version
          required: false
          schema:
            type: string
        - description: |
            Include a download URL for the single version passed in the 'filter_version' parameter. A link response will not be provided if the chosen version is locally available, or if 'filter_version' is not specified.
          in: query
          name: fetch_links
          required: false
          schema:
            default: false
            type: boolean
        - description: |
            The source version of Rubrik CDM used for the upgradeability check if 'filter_upgradable' if specified. If 'filter_upgradable' is not specified, this parameter is ignored.
          in: query
          name: source_version
          required: false
          schema:
            type: string
        - description: If specified, ignore locally available versions.
          in: query
          name: ignore_local
          required: false
          schema:
            default: false
            type: boolean
        - description: |
            If specified, ignore versions available in the Rubrik remote central repository.
          in: query
          name: ignore_remote
          required: false
          schema:
            default: false
            type: boolean
        - description: If specified, ignore versions currently being downloaded.
          in: query
          name: ignore_downloading
          required: false
          schema:
            default: true
            type: boolean
        - description: |
            If specified, filter results for downloading versions to the provided job instance ID.
          in: query
          name: download_job_instance_id
          required: false
          schema:
            type: string
        - description: |
            When this parameter is set, the query only returns versions of the Rubrik CDM that can be upgraded to from the version specified in the 'source_version' parameter. If 'source_version' is not specified, we use the cluster version as the source_version.
          in: query
          name: filter_upgradable
          required: false
          schema:
            default: true
            type: boolean
        - description: |
            When this parameter is set, the query shows all patch releases including releases with a newer version released in the same family. When set to false, the query returns only the latest version from each release family.
          in: query
          name: show_all
          required: false
          schema:
            default: false
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AvailableVersionInfo"
                type: array
          description: List of available software versions.
      summary: Retrieve CDM versions available for upgrade
      tags:
        - /cluster
      x-group: cluster
  "/cluster/{id}/upgrade/precheck_status":
    get:
      description: |
        Get the result of the latest run of the upgrade prechecks.
      operationId: getPeriodicUpgradePrechecksStatus
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
        - description: |
            If specified, fetch information corresponding to next upgrade prechecks job instance. If an upgrade prechecks job instance is currently running, results corresponding to it are returned.
          in: query
          name: fetch_next_run_info
          required: false
          schema:
            default: false
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrecheckStatusResponse"
          description: |
            Returns the list of precheck failures during the latest run of the upgrade prechecks job.
      summary: Get the result of the latest run of the upgrade prechecks
      tags:
        - /cluster
      x-group: cluster
    post:
      description: |
        Start an on demand run of the prechecks.
      operationId: runPeriodicUpgradePrechecks
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of an asynchronous request.
      summary: Start an on demand run of the prechecks
      tags:
        - /cluster
      x-group: cluster
  "/cluster/{id}/upgrade/request/{request_id}":
    get:
      description: Get asynchronous request details for an upgrade request.
      operationId: getAsyncRequestStatusForUpgrade
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
        - description: ID of the request.
          in: path
          name: request_id
          required: true
          schema:
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of an asynchronous request.
      summary: Get asynchronous request details
      tags:
        - /cluster
      x-group: cluster
  "/cluster/{id}/upgrade/stage_cdm_software":
    post:
      description: Stage software corresponding to a given CDM version on the cluster, in preparation for an upgrade.
      operationId: stageCdmSoftware
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StageCdmSoftwareInfo"
        description: Information about the provided CDM software package.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: ID of the stage CDM software job.
      summary: Stage software on CDM for upgrade
      tags:
        - /cluster
      x-group: cluster
  "/cluster/{id}/version":
    get:
      description: Retrieves software version of the Rubrik cluster.
      operationId: getClusterVersion
      parameters:
        - description: ID of the Rubrik cluster or *me* for self.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterVersion"
          description: Software version running on the cluster.
      security: []
      summary: Get cluster software version
      tags:
        - /cluster
      x-group: cluster
      x-unauthenticated: true
  /config/history/list_updates:
    get:
      description: View a list of cluster configuration options that have updated within a specified time window.
      operationId: queryConfigurationHistoryUpdates
      parameters:
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Ignore these many matches in the beginning.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: The username of the account. Applies a filter to the configuration updates performed by the specified username.
          in: query
          name: api_user
          required: false
          schema:
            type: string
        - description: The node ID. Applies a filter to the configuration updates for the specified node. When no node_id is specified, the filter shows both local and cluster-wide configurations. Specify 'cluster' for filtering out cluster-wide configuration updates.
          in: query
          name: node_id
          required: false
          schema:
            type: string
        - description: The configuration namespace. Applies a filter to the configuration updates for the specified namespace.
          in: query
          name: namespace
          required: false
          schema:
            type: string
        - description: Name of the configuration. Applies a filter to the configuration updates for the specified configuration name.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Source for configuration updates. Applies a filter to the configuration updates for the specified source.
          in: query
          name: source
          required: false
          schema:
            enum:
              - Unknown
              - CustomerApi
              - Upgrade
              - ResetNode
              - Software
              - Init
            type: string
        - description: The earliest time configuration history is needed. Applies a filter that only shows configuration updates after the specified time.
          in: query
          name: after_time
          required: false
          schema:
            format: date-time
            type: string
        - description: The latest time configuration history is needed. Applies filter to display only configuration updates prior to the specified time. The default value is the current time.
          in: query
          name: before_time
          required: false
          schema:
            format: date-time
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigurationUpdateSummaryListResponse"
          description: A summary of configuration updates that satisfy the filters in place.
      summary: View a list of filtered configuration updates
      tags:
        - /config/history
      x-group: config_history
  /config/history/ondate:
    get:
      description: View a list of configurations and their values on a given date.
      operationId: retrieveConfigurationValues
      parameters:
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Ignore these many matches in the beginning.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: The name of the node that require configuration values. Applies a filter specific to the name of node. When no node_id is specified, the filter shows both local and cluster-wide configurations.
          in: query
          name: node_id
          required: false
          schema:
            type: string
        - description: The configuration namespace. Applies a filter to the configuration updates for the specified namespace.
          in: query
          name: namespace
          required: true
          schema:
            type: string
        - description: The name of the configuration option. Applies a filter to the configuration updates for the specified option.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: The timestamp for which to retrieve configuration values.
          in: query
          name: on_date
          required: true
          schema:
            format: date-time
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigurationSummaryListResponse"
          description: Summary of the values of configuration options, as of a specified timestamp, that match the filters in place.
      summary: View a list of configurations and their values on a given date
      tags:
        - /config/history
      x-group: config_history
  /csr:
    get:
      description: Returns a list of summaries for every outstanding certificate signing request (CSR).
      operationId: getAllCsrs
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CsrSummaryListResponse"
          description: List of certifcate signing requests.
      summary: Get all certificate signing requests
      tags:
        - /csr
      x-group: certificate
    post:
      description: Generates a new private key and returns a base64 encoded PKCS#10 certificate signing request (CSR).
      operationId: generateCsr
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenericCsrRequest"
        description: Information for client certificate request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CsrSummary"
          description: Certificate signing request.
      summary: Generate a new private key and return a certificate signing request
      tags:
        - /csr
      x-group: certificate
  "/csr/{id}":
    delete:
      description: Deletes a certificate signing request corresponding to the provided ID.
      operationId: deleteCsr
      parameters:
        - description: Certificate signing request ID.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Returned if delete completes successfully.
      summary: Delete a certificate signing request
      tags:
        - /csr
      x-group: certificate
  /data_source/snapshot/bulk_delete:
    post:
      description: |
        This endpoint deletes all snapshots from all locations for the objects with the IDs specified by the 'objectIds' parameter. API returning success does not guarantee that the snapshots will be expired.
      operationId: bulkDeleteSnapshots
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkDeleteSnapshotsConfig"
        description: |
          A list of object IDs.
        required: true
      responses:
        "204":
          description: |
            OK on success, success doesn't imply all snapshots will be deleted.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestFailedException"
          description: Returned if delete API fails.
      summary: Bulk delete all snapshots for the given objects
      tags:
        - /data_source
      x-group: data_source
  "/data_source/{id}/expired_custom_retention_snapshots":
    get:
      description: |
        Gets a list of the snapshots of a specified data source that have expired according to the snapshot-level SLA Domain assignments. This list does not include remote snapshots.
      operationId: expiredCustomRetentionSnapshots
      parameters:
        - description: The object ID.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpiredCustomRetentionSnapshots"
          description: |
            Array containing information of snapshots which have been expired due to snapshot-level SLA Domain assignments.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestFailedException"
          description: The API call has failed.
      summary: |
        Returns a list of snapshots that have expired according to their snapshot-level SLA Domain assignments
      tags:
        - /data_source
      x-group: data_source
  "/data_source/{id}/snapshot/bulk_delete":
    post:
      description: |
        Bulk deletion of the snapshots specified by a list of snapshot IDs for a given object. Object type is required. Location ID is optional. API returning success does not guarantee that the snapshot will be expired.
      operationId: bulkDeleteSnapshotsForObject
      parameters:
        - description: ID of the object.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkDeleteObjectSnapshotsConfig"
        description: |
          A list of snapshot IDs specifying snapshots to delete. Optionally specifies a location ID. Snapshot deletion is global when the location ID is absent.
        required: true
      responses:
        "204":
          description: |
            OK on success, success doesn't imply all snapshots will be deleted.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestFailedException"
          description: Returned if delete API fails.
      summary: Bulk delete specified snapshots for the given object
      tags:
        - /data_source
      x-group: data_source
  /database/log_report:
    get:
      description: Get the database log backup delay information.
      operationId: queryLogReport
      parameters:
        - description: Filter by effective SLA domain.
          in: query
          name: effective_sla_domain_id
          required: false
          schema:
            type: string
        - description: Filter by the database name substring.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Filter by the database type.
          in: query
          name: database_type
          required: false
          schema:
            type: string
        - description: Filter by the database location.
          in: query
          name: location
          required: false
          schema:
            type: string
        - description: Filter by the database log backup delay in seconds, greater than this value.
          in: query
          name: log_backup_delay
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Integer specifying the number of initial matches to ignore.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Specifies the attribute to use while sorting the summary information. Performs an ASCII sort using the specified attribute, in the order specified by sort_order.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - effectiveSlaDomainName
              - name
              - location
              - databaseType
              - logBackupFrequency
              - lastSnapshotTime
              - latestRecoveryTime
              - logBackupDelay
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DbLogReportSummaryListResponse"
          description: If the query was successful, Returns the array of DbLogReportSummary objects.
      summary: Get the database log backup delay information
      tags:
        - /database/log_report
      x-group: database_log_report
  /database/log_report/defaults:
    get:
      description: Get the properties for the database (SQL and Oracle) log backup delay email notification creation. The properties are logDelayThresholdInMin and logDelayNotificationFrequencyInMin.
      operationId: queryReportProperties
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DbLogReportProperties"
          description: Returns the current properties of logDelayThresholdInMin and logDelayNotificationFrequencyInMin.
      summary: Get the database log backup report properties
      tags:
        - /database/log_report
      x-group: database_log_report
    patch:
      description: Update the properties for the database (SQL and Oracle) log backup delay email notification creation. The properties are logDelayThresholdInMin and logDelayNotificationFrequencyInMin.
      operationId: updateReportProperties
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DbLogReportPropertiesUpdate"
        description: Updated report properties.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DbLogReportProperties"
          description: Returns the updated properties of logDelayThresholdInMin and logDelayNotificationFrequencyInMin.
      summary: Update the database log backup report properties
      tags:
        - /database/log_report
      x-group: database_log_report
  /event:
    get:
      description: Returns information for all events. Only Global or Read Only Admins and Support users have authorization to use this endpoint. Accepts filters. For similar functionality to the previous /internal/event endpoint, use the /v1/event/latest endpoint.
      operationId: queryEventV1
      parameters:
        - description: Maximum number of events retrieved.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: An (event_id, time) tuple. When specified, returns all events with timestamps that come after the time value of after_id based on the sort order defined by the order_by_time parameter.
          in: query
          name: after_id
          required: false
          schema:
            type: string
        - description: Filter the events occurring after the specified date.
          in: query
          name: before_date
          required: false
          schema:
            format: date-time
            type: string
        - description: Filter the events occurring before the specified date.
          in: query
          name: after_date
          required: false
          schema:
            format: date-time
            type: string
        - description: The events are ordered by timestamp. Specify desc to show the latest entries first. Specify asc to show the oldest entries first. The default behavior is asc.
          in: query
          name: order_by_time
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
        - description: A Boolean value that determines whether to include event series summary for every event. If set to 'true', a list of event series summary will be returned and each summary has an empty list of events. If set to 'false', an empty list of event series summary will be returned. The default value is 'false'. Setting it to 'true' will increase the response time.
          in: query
          name: should_include_event_series
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventsAndSeriesSummariesV1"
          description: Returns information for the events that match the query parameters.
      summary: Get information for all events
      tags:
        - /event
      x-group: events
  /event/csv_download_link:
    get:
      description: "Download summary of the related events that match the value specified in the following categories: event type, status, object name or ID, eventSeriesId, object type, and limit events by dates."
      operationId: getEventsCsvDownloadLink
      parameters:
        - description: Maximum number of events to retrieve. Default value is 100.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Filter by the current status of the event series.
          in: query
          name: event_series_status
          required: false
          schema:
            enum:
              - Success
              - Failure
              - Scheduled
              - Active
              - Canceling
              - Canceled
              - SuccessWithWarnings
            type: string
        - description: Filter by the status of the latest event in the event series.
          in: query
          name: event_status
          required: false
          schema:
            enum:
              - Failure
              - Warning
              - Info
              - Running
              - Queued
              - Success
              - Canceled
              - Canceling
              - TaskSuccess
            type: string
        - description: Filter by the type of the latest event in the event series.
          in: query
          name: event_type
          required: false
          schema:
            enum:
              - Archive
              - Audit
              - AuthDomain
              - AwsEvent
              - Backup
              - Classification
              - CloudNativeSource
              - CloudNativeVm
              - Configuration
              - Connection
              - Conversion
              - Diagnostic
              - Discovery
              - Failover
              - Fileset
              - Hardware
              - HostEvent
              - HypervScvmm
              - HypervServer
              - Index
              - Instantiate
              - LegalHold
              - Maintenance
              - NutanixCluster
              - Recovery
              - Replication
              - ResourceOperations
              - Storage
              - StorageArray
              - StormResource
              - Support
              - System
              - TestFailover
              - Upgrade
              - VCenter
              - Vcd
              - VolumeGroup
              - UnknownEventType
            type: string
        - description: Filter by the severity of the latest event in the event series.
          in: query
          name: event_severity
          required: false
          schema:
            enum:
              - Critical
              - Warning
              - Informational
            type: string
        - description: Filter the object IDs in the latest event series by matches to a comma-separated list of object IDs.
          explode: false
          in: query
          name: object_ids
          required: false
          schema:
            items:
              type: string
            type: array
          style: form
        - description: Filter the events in the event series by a specified object type.
          in: query
          name: object_type
          required: false
          schema:
            enum:
              - AggregateAhvVm
              - AggregateAwsAzure
              - AggregateHypervVm
              - AggregateLinuxUnixHosts
              - AggregateNasShares
              - AggregateOracleDb
              - AggregateSapHanaDb
              - AggregateStorageArrays
              - AggregateVcdVapps
              - AggregateVsphereVm
              - AggregateWindowsHosts
              - AppBlueprint
              - AppFlows
              - AuthDomain
              - AwsAccount
              - AwsEventType
              - Certificate
              - Cluster
              - ComputeInstance
              - DataLocation
              - Ec2Instance
              - Envoy
              - Host
              - HypervScvmm
              - HypervServer
              - HypervVm
              - JobInstance
              - Ldap
              - LinuxHost
              - LinuxFileset
              - ManagedVolume
              - Mssql
              - NasHost
              - NutanixCluster
              - NutanixVm
              - OracleDb
              - OracleHost
              - OracleRac
              - PublicCloudMachineInstance
              - SamlSso
              - SapHanaDb
              - SapHanaSystem
              - ShareFileset
              - SlaDomain
              - SmbDomain
              - StorageArray
              - StorageArrayVolumeGroup
              - Storm
              - SupportBundle
              - UnknownObjectType
              - Upgrade
              - UserActionAudit
              - Vcd
              - VcdVapp
              - Vcenter
              - VmwareVm
              - VolumeGroup
              - WindowsHost
              - WindowsFileset
            type: string
        - description: Filter latest events according to the provided name using prefix search for resources and exact search for usernames.
          in: query
          name: object_name
          required: false
          schema:
            type: string
        - description: An (event_series_id, time) tuple. When specified, returns all event series whose latest event timestamp comes after the time value of after_id based on the sort order defined by the order_by_time parameter.
          in: query
          name: after_id
          required: false
          schema:
            type: string
        - description: Filter out event series that have events occurring after the specified date.
          in: query
          name: before_date
          required: false
          schema:
            format: date-time
            type: string
        - description: Filter out event series that have events occurring before the specified date.
          in: query
          name: after_date
          required: false
          schema:
            format: date-time
            type: string
        - description: The events in a series are ordered by timestamp. Specify desc to show the latest entries first. Specify asc to show the oldest entries first. The default behavior is desc.
          in: query
          name: order_by_time
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventCsvDownloadResponse"
          description: Returns the download link of the csv.
      summary: Download summary of events as a CSV file
      tags:
        - /event
      x-group: events
  /event/latest:
    get:
      description: Get the latest event, event series status, and the number of warning events for all event series. This endpoint has similar/enhanced functionality to the previously deprecated /internal/event endpoint.
      operationId: queryLatestEventsV1
      parameters:
        - description: Maximum number of events retrieved.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Filter by the current status of the event series.
          in: query
          name: event_series_status
          required: false
          schema:
            enum:
              - Success
              - Failure
              - Scheduled
              - Active
              - Canceling
              - Canceled
              - SuccessWithWarnings
            type: string
        - description: Filter by the status of the latest event in the event series.
          in: query
          name: event_status
          required: false
          schema:
            enum:
              - Failure
              - Warning
              - Info
              - Running
              - Queued
              - Success
              - Canceled
              - Canceling
              - TaskSuccess
            type: string
        - description: Filter by the type of the latest event in the event series.
          in: query
          name: event_type
          required: false
          schema:
            enum:
              - Archive
              - Audit
              - AuthDomain
              - AwsEvent
              - Backup
              - Classification
              - CloudNativeSource
              - CloudNativeVm
              - Configuration
              - Connection
              - Conversion
              - Diagnostic
              - Discovery
              - Failover
              - Fileset
              - Hardware
              - HostEvent
              - HypervScvmm
              - HypervServer
              - Index
              - Instantiate
              - LegalHold
              - Maintenance
              - NutanixCluster
              - Recovery
              - Replication
              - ResourceOperations
              - Storage
              - StorageArray
              - StormResource
              - Support
              - System
              - TestFailover
              - Upgrade
              - VCenter
              - Vcd
              - VolumeGroup
              - UnknownEventType
            type: string
        - description: Filter by the severity of the latest event in the event series.
          in: query
          name: event_severity
          required: false
          schema:
            enum:
              - Critical
              - Warning
              - Informational
            type: string
        - description: Filter the object IDs in the latest event series by matches to a comma-separated list of object IDs.
          explode: false
          in: query
          name: object_ids
          required: false
          schema:
            items:
              type: string
            type: array
          style: form
        - description: Filter the events in the event series by a specified object type.
          in: query
          name: object_type
          required: false
          schema:
            enum:
              - AggregateAhvVm
              - AggregateAwsAzure
              - AggregateHypervVm
              - AggregateLinuxUnixHosts
              - AggregateNasShares
              - AggregateOracleDb
              - AggregateSapHanaDb
              - AggregateStorageArrays
              - AggregateVcdVapps
              - AggregateVsphereVm
              - AggregateWindowsHosts
              - AppBlueprint
              - AppFlows
              - AuthDomain
              - AwsAccount
              - AwsEventType
              - Certificate
              - Cluster
              - ComputeInstance
              - DataLocation
              - Ec2Instance
              - Envoy
              - Host
              - HypervScvmm
              - HypervServer
              - HypervVm
              - JobInstance
              - Ldap
              - LinuxHost
              - LinuxFileset
              - ManagedVolume
              - Mssql
              - NasHost
              - NutanixCluster
              - NutanixVm
              - OracleDb
              - OracleHost
              - OracleRac
              - PublicCloudMachineInstance
              - SamlSso
              - SapHanaDb
              - SapHanaSystem
              - ShareFileset
              - SlaDomain
              - SmbDomain
              - StorageArray
              - StorageArrayVolumeGroup
              - Storm
              - SupportBundle
              - UnknownObjectType
              - Upgrade
              - UserActionAudit
              - Vcd
              - VcdVapp
              - Vcenter
              - VmwareVm
              - VolumeGroup
              - WindowsHost
              - WindowsFileset
            type: string
        - description: Filter latest events according to the provided name using prefix search for resources and exact search for usernames.
          in: query
          name: object_name
          required: false
          schema:
            type: string
        - description: An (event_series_id, time) tuple. When specified, returns all event series whose latest event timestamp comes after the time value of after_id based on the sort order defined by the order_by_time parameter.
          in: query
          name: after_id
          required: false
          schema:
            type: string
        - description: Filter out event series that have events occurring after the specified date.
          in: query
          name: before_date
          required: false
          schema:
            format: date-time
            type: string
        - description: Filter out event series that have events occurring before the specified date.
          in: query
          name: after_date
          required: false
          schema:
            format: date-time
            type: string
        - description: The events in a series are ordered by timestamp. Specify desc to show the latest entries first. Specify asc to show the oldest entries first. The default behavior is desc.
          in: query
          name: order_by_time
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
        - description: A Boolean value that determines whether to include all events in the event series. The default value is 'false'. Setting it to 'true' will significantly increase the response time.
          in: query
          name: should_include_event_series
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityLogSummaryV1ListResponse"
          description: Returns information for the events that match the query parameters.
      summary: Get latest events with their associated event series information
      tags:
        - /event
      x-group: events
  "/event_series/{id}":
    get:
      description: Gets all events, event series, SLA Domain, and object information that is associated with a specified event series ID.
      operationId: queryEventSeriesByIdV1
      parameters:
        - description: The ID of the event series.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventSeriesSummaryV1"
          description: Returns the list of events by event series ID and a summary of the event series.
      summary: Get all events and relevant information associated with an event series ID
      tags:
        - /event_series
      x-group: events
  /exclusion_pattern:
    get:
      description: Get a summary of all exclusion patterns.
      operationId: queryExclusionPattern
      parameters:
        - description: Filter a response by making an infix comparison of the exclusion patttern in the response with the specified value.
          in: query
          name: pattern
          required: false
          schema:
            type: string
        - description: Filter a response based on the mutability of the pattern.
          in: query
          name: is_mutable
          required: false
          schema:
            type: boolean
        - description: Filter a response based on the protectable object to which the exclusion pattern applies.
          in: query
          name: source_id
          required: false
          schema:
            type: string
        - description: Limit a response to the results that have the specified primary cluster value.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Limit the summary information to a specified maximum number of matches. Optionally, use with offset to start the count at a specified point. Optionally, use with sort_by to perform sort on given attributes. Include sort_order to determine the ascending or descending direction of the sort.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Starting position in the list of matches. The response includes the specified numbered entry and all higher numbered entries. Use with limit to retrieve the response as smaller groups of entries, for example for paging of results.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Specifies a comma-separated list of attributes to use in sorting the matches. Performs an ASCII sort of the values in the response using each specified attribute, in the order specified.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - pattern
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExclusionPatternDetailListResponse"
          description: Successful query results for exclusion pattern.
      summary: Get a summary of all exclusion patterns
      tags:
        - /exclusion_pattern
      x-group: exclusion_pattern
    post:
      description: Create a exclusion pattern.
      operationId: createExclusionPattern
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExclusionPatternCreateConfig"
        description: Create configuration parameters for a exclusion pattern.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExclusionPatternDetail"
          description: Details of the new exclusion pattern.
        "404":
          description: Failed to create exclusion pattern.
        "422":
          description: Failed to create exclusion pattern on replication target cluster.
      summary: Create an exclusion pattern
      tags:
        - /exclusion_pattern
      x-group: exclusion_pattern
  /exclusion_pattern/bulk:
    delete:
      description: Bulk deletes the mutable patterns in a specified set of exclusion patterns.
      operationId: bulkDeleteExclusionPattern
      parameters:
        - description: The ID of each exclusion pattern to delete.
          explode: false
          in: query
          name: ids
          required: true
          schema:
            items:
              type: string
            type: array
          style: form
      responses:
        "204":
          description: Successfully deleted all the specified exclusion patterns.
        "404":
          description: The exclusion pattern deletion failed for at least one exclusion pattern.
      summary: Bulk delete the provided mutable exclusion patterns
      tags:
        - /exclusion_pattern
      x-group: exclusion_pattern
    post:
      description: Bulk create exclusion patterns.
      operationId: bulkCreateExclusionPattern
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/ExclusionPatternCreateConfig"
              type: array
        description: Create configuration parameters for a exclusion pattern.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExclusionPatternDetailList"
          description: Details of new exclusion patterns.
        "404":
          description: Failed to create exclusion pattern.
        "422":
          description: Failed to create exclusion pattern on replication target cluster.
      summary: Bulk create exclusion patterns
      tags:
        - /exclusion_pattern
      x-group: exclusion_pattern
  "/exclusion_pattern/{id}":
    delete:
      description: Deletes an exclusion pattern if that pattern is mutable.
      operationId: deleteExclusionPattern
      parameters:
        - description: ID of the exclusion pattern.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successfully deleted the specified exclusion pattern.
        "403":
          description: Failed to delete a immutable exclusion pattern.
        "404":
          description: Failed to delete exclusion pattern.
      summary: Delete a mutable exclusion pattern
      tags:
        - /exclusion_pattern
      x-group: exclusion_pattern
    get:
      description: Get details of a exclusion pattern.
      operationId: getExclusionPattern
      parameters:
        - description: ID of the exclusion pattern.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExclusionPatternDetail"
          description: Details about the exclusion pattern.
        "404":
          description: Failed to get exclusion pattern.
      summary: Get details of a exclusion pattern
      tags:
        - /exclusion_pattern
      x-group: exclusion_pattern
    post:
      description: Update mutable exclusion pattern with specified properties. The exclusion pattern which is mutable can be modified.
      operationId: updateExclusionPattern
      parameters:
        - description: ID of exclusion pattern.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExclusionPatternUpdateConfig"
        description: Properties to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExclusionPatternDetail"
          description: Return details about the exclusion pattern.
        "403":
          description: Failed to update a immutable exclusion pattern.
        "404":
          description: Failed to update exclusion pattern.
      summary: Update a mutable exclusion pattern
      tags:
        - /exclusion_pattern
      x-group: exclusion_pattern
  /failover_cluster:
    get:
      description: Get a summary of all failover clusters.
      operationId: queryFailoverCluster
      parameters:
        - description: Filter a response by making an infix comparison of the failover cluster name in the response, with the specified value.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Filter a response based on the operating system type.
          in: query
          name: operating_system_type
          required: false
          schema:
            enum:
              - ANY
              - AIX
              - HPUX
              - Linux
              - SunOS
              - UnixLike
              - Windows
            type: string
        - description: Limit a response to the results that have the specified SLA Domain assignment type.
          in: query
          name: sla_assignment
          required: false
          schema:
            enum:
              - Derived
              - Direct
              - Unassigned
            type: string
        - description: Limit a response to the results that have the specified primary cluster value.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Limit the summary information to a specified maximum number of matches. Optionally, use with offset to start the count at a specified point. Optionally, use with sort_by to perform sort on given attributes. Include sort_order to determine the ascending or descending direction of the sort.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Starting position in the list of matches. The response includes the specified numbered entry and all higher numbered entries. Use with limit to retrieve the response as smaller groups of entries, for example for paging of results.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Specifies a comma-separated list of attributes to use in sorting the matches. Performs an ASCII sort of the values in the response using each specified attribute, in the order specified.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - name
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailoverClusterSummaryListResponse"
          description: Successful query results for failover cluster.
      summary: Get a summary of all failover clusters
      tags:
        - /failover_cluster
      x-group: failover_cluster
    post:
      description: Create a failover cluster.
      operationId: createFailoverCluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FailoverClusterConfig"
        description: Create configuration parameters for a failover cluster.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailoverClusterDetail"
          description: Details of the new failover cluster.
      summary: Create a failover cluster
      tags:
        - /failover_cluster
      x-group: failover_cluster
  /failover_cluster/bulk:
    delete:
      description: Delete the provided failover clusters.
      operationId: bulkDeleteFailoverCluster
      parameters:
        - description: The ID of each failover cluster to delete.
          explode: false
          in: query
          name: ids
          required: true
          schema:
            items:
              type: string
            type: array
          style: form
        - description: Specifies whether to preserve the snapshots of the fileset which belong to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true'.
          in: query
          name: preserve_snapshots
          required: false
          schema:
            type: boolean
      responses:
        "204":
          description: Successfully deleted all the specified failover clusters.
        "404":
          description: The failover cluster deletion failed for at least one failover cluster.
      summary: Delete the provided failover clusters
      tags:
        - /failover_cluster
      x-group: failover_cluster
  /failover_cluster/failover_cluster_app:
    get:
      description: Get a summary of all failover cluster apps.
      operationId: queryFailoverClusterApp
      parameters:
        - description: Filter the response by comparing the failover cluster app name with the specified value.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Limit a response to the results that have the specified SLA Domain assignment type.
          in: query
          name: sla_assignment
          required: false
          schema:
            enum:
              - Derived
              - Direct
              - Unassigned
            type: string
        - description: Limit a response to the results that have the specified primary cluster value.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Filter a response based on the failover cluster operating system type.
          in: query
          name: operating_system_type
          required: false
          schema:
            enum:
              - ANY
              - AIX
              - HPUX
              - Linux
              - SunOS
              - UnixLike
              - Windows
            type: string
        - description: Limit the summary information to a specified maximum number of matches. Optionally, use with offset to start the count at a specified point. Optionally, use with sort_by to perform sort on given attributes. Include sort_order to determine the ascending or descending direction of the sort.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Starting position in the list of matches. The response includes the specified numbered entry and all higher numbered entries. Use with limit to retrieve the response as smaller groups of entries, for example for paging of results.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Specifies a comma-separated list of attributes to use in sorting the matches. Performs an ASCII sort of the values in the response using each specified attribute, in the order specified.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - name
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailoverClusterAppSummaryListResponse"
          description: Successful query results for failover cluster app.
      summary: Get a summary of all failover cluster apps
      tags:
        - /failover_cluster/failover_cluster_app
      x-group: failover_cluster_app
    post:
      description: Create a failover cluster app.
      operationId: createFailoverClusterApp
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FailoverClusterAppConfig"
        description: Create configuration parameters for a failover cluster app.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailoverClusterAppSummary"
          description: Details of the new failover cluster app.
      summary: Create a failover cluster app
      tags:
        - /failover_cluster/failover_cluster_app
      x-group: failover_cluster_app
  /failover_cluster/failover_cluster_app/bulk:
    delete:
      description: Delete failover cluster applications from Rubrik cluster.
      operationId: bulkDeleteFailoverClusterApp
      parameters:
        - description: The ID of each failover cluster application to delete.
          explode: false
          in: query
          name: ids
          required: true
          schema:
            items:
              type: string
            type: array
          style: form
        - description: Specifies whether to preserve the snapshots of the fileset that belongs to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true'.
          in: query
          name: preserve_snapshots
          required: false
          schema:
            type: boolean
      responses:
        "204":
          description: Successfully deleted all the specified failover cluster applications.
        "404":
          description: The failover cluster application deletion failed for at least one failover cluster application.
      summary: Delete failover cluster applications
      tags:
        - /failover_cluster/failover_cluster_app
      x-group: failover_cluster_app
  "/failover_cluster/failover_cluster_app/{id}":
    delete:
      description: Delete a failover cluster app.
      operationId: deleteFailoverClusterApp
      parameters:
        - description: ID of the failover cluster app.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: A Boolean that specifies whether to preserve the snapshots of the fileset which belong to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true'.
          in: query
          name: preserve_snapshots
          required: false
          schema:
            type: boolean
      responses:
        "204":
          description: Successfully deleted the specified failover cluster app.
      summary: Delete a failover cluster app
      tags:
        - /failover_cluster/failover_cluster_app
      x-group: failover_cluster_app
    get:
      description: Get details of a failover cluster app.
      operationId: getFailoverClusterApp
      parameters:
        - description: ID of the failover cluster app.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailoverClusterAppDetail"
          description: Details about the failover cluster app.
      summary: Get details of a failover cluster app
      tags:
        - /failover_cluster/failover_cluster_app
      x-group: failover_cluster_app
    patch:
      description: Update the failover cluster app with specified properties.
      operationId: updateFailoverClusterApp
      parameters:
        - description: ID of failover cluster app.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FailoverClusterAppConfig"
        description: Properties to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailoverClusterAppSummary"
          description: Return details about the failover cluster app.
      summary: Update a failover cluster app
      tags:
        - /failover_cluster/failover_cluster_app
      x-group: failover_cluster_app
  "/failover_cluster/hierarchy/{id}":
    get:
      description: Retrieve details for the specified hierarchy object.
      operationId: getFailoverClusterHierarchyObject
      parameters:
        - description: ID of the hierarchy object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailoverClusterHierarchyObjectSummary"
          description: Details of the hierarchy object.
      summary: Get summary of a hierarchy object
      tags:
        - /failover_cluster/hierarchy
      x-group: failover_cluster_hierarchy
  "/failover_cluster/hierarchy/{id}/children":
    get:
      description: Retrieve the list of immediate descendant objects for the specified parent.
      operationId: getFailoverClusterHierarchyChildren
      parameters:
        - description: Filter a response by making an infix comparison of the failover cluster name or failover cluster app name.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Filter a response based on the failover cluster operating system type.
          in: query
          name: operating_system_type
          required: false
          schema:
            enum:
              - ANY
              - AIX
              - HPUX
              - Linux
              - SunOS
              - UnixLike
              - Windows
            type: string
        - description: ID of the parent failover cluster hierarchy object. To get top-level nodes, use **root** as the ID.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Filter by node object type.
          in: query
          name: object_type
          required: false
          schema:
            enum:
              - FailoverClusterApp
              - Fileset
              - HostFailoverCluster
              - WindowsCluster
            type: string
        - description: Filter by primary cluster ID, or **local**.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: An integer that specifies the maximum number of matches to return.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: An integer that specifies a number of initial matches to ignore.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Filter by configured SLA domain.
          in: query
          name: configured_sla_domain_id
          required: false
          schema:
            type: string
        - description: Filter by SLA assignment type.
          in: query
          name: sla_assignment
          required: false
          schema:
            enum:
              - Derived
              - Direct
              - Unassigned
            type: string
        - description: Attribute to sort the results on.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - name
              - effectiveSlaDomainName
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailoverClusterHierarchyObjectSummaryListResponse"
          description: Summary list of descendant objects.
      summary: Get list of immediate descendant objects
      tags:
        - /failover_cluster/hierarchy
      x-group: failover_cluster_hierarchy
  "/failover_cluster/hierarchy/{id}/descendants":
    get:
      description: Retrieve the list of descendant objects for the specified parent.
      operationId: getFailoverClusterHierarchyDescendants
      parameters:
        - description: Filter a response by making an infix comparison of the failover cluster name or failover cluster app name.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Filter a response based on the failover cluster operating system type.
          in: query
          name: operating_system_type
          required: false
          schema:
            enum:
              - ANY
              - AIX
              - HPUX
              - Linux
              - SunOS
              - UnixLike
              - Windows
            type: string
        - description: ID of the parent failover cluster hierarchy object. To get top-level nodes, use **root** as the ID.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Filter by node object type.
          in: query
          name: object_type
          required: false
          schema:
            enum:
              - FailoverClusterApp
              - Fileset
              - HostFailoverCluster
              - WindowsCluster
            type: string
        - description: Filter by primary cluster ID, or **local**.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: An integer that specifies the maximum number of matches to return.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: An integer that specifies a number of initial matches to ignore.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Filter by configured SLA domain.
          in: query
          name: configured_sla_domain_id
          required: false
          schema:
            type: string
        - description: Filter by SLA assignment type.
          in: query
          name: sla_assignment
          required: false
          schema:
            enum:
              - Derived
              - Direct
              - Unassigned
            type: string
        - description: Attribute to sort the results on.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - name
              - effectiveSlaDomainName
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailoverClusterHierarchyObjectSummaryListResponse"
          description: Summary list of descendant objects.
      summary: Get list of descendant objects
      tags:
        - /failover_cluster/hierarchy
      x-group: failover_cluster_hierarchy
  "/failover_cluster/{id}":
    delete:
      description: Delete a failover cluster.
      operationId: deleteFailoverCluster
      parameters:
        - description: ID of the failover cluster.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: A Boolean that specifies whether to preserve the snapshots of the fileset which belong to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true'.
          in: query
          name: preserve_snapshots
          required: false
          schema:
            type: boolean
      responses:
        "204":
          description: Successfully deleted the specified failover cluster.
      summary: Delete a failover cluster
      tags:
        - /failover_cluster
      x-group: failover_cluster
    get:
      description: Get details of a failover cluster.
      operationId: getFailoverCluster
      parameters:
        - description: ID of the failover cluster.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailoverClusterDetail"
          description: Details about the failover cluster.
      summary: Get details of a failover cluster
      tags:
        - /failover_cluster
      x-group: failover_cluster
    patch:
      description: Update failover cluster with specified properties.
      operationId: updateFailoverCluster
      parameters:
        - description: ID of failover cluster.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FailoverClusterConfig"
        description: Properties to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailoverClusterDetail"
          description: Return details about the failover cluster.
      summary: Update a failover cluster
      tags:
        - /failover_cluster
      x-group: failover_cluster
  /fileset:
    get:
      description: Retrieve summary information for each fileset. Optionally, filter the retrieved information.
      operationId: queryFileset
      parameters:
        - description: |-
            Filter the summary information based on the primary_cluster_id of the primary Rubrik cluster.
            Use **_local_** as the primary_cluster_id of the Rubrik cluster that is hosting the current REST API session.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Filter the summary information based on the ID of the host referenced by the fileset.
          in: query
          name: host_id
          required: false
          schema:
            type: string
        - description: |-
            Filter the summary information based on the ID of the host share referenced by the fileset.
            Use **_NONE_** to only return information for filesets that were not created based on a host share.
            Use **_ANY_** to only return information for filesets that were created based on a host share.
          in: query
          name: share_id
          required: false
          schema:
            type: string
        - description: Filter the summary information based on the relic status of the fileset. Returns both relic and non relic if the parameter is not set.
          in: query
          name: is_relic
          required: false
          schema:
            type: boolean
        - description: |-
            Filter the summary information based on the ID of the effective SLA Domain inherited by a fileset.
            Use **_UNPROTECTED_** to only return information for filesets that do not have an effective SLA Domain.
            Use **_PROTECTED_** to only return information for filesets that do have an effective SLA Domain.
          in: query
          name: effective_sla_domain_id
          required: false
          schema:
            type: string
        - description: |-
            Filter the summary information based on the ID of a fileset template.

            Use **_NONE_** to only return information for filesets that were not created from a fileset template.

            Use **_ANY_** to only return information for filesets that were created from a fileset template.
          in: query
          name: template_id
          required: false
          schema:
            type: string
        - description: |-
            Limit the summary information to a specified maximum number of filesets.

            Optionally, use with **_offset_** to start the count at a specified point.

            Optionally, use with **_sort_by_** to perform sort on given attributes. Include **_sort_order_** to determine the ascending or descending direction of sort.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Starting position in the list of fileset entries contained in the response. The summary information includes the specified numbered entry and all higher numbered entries. Use with **_limit_** to retrieve the summary information as smaller groups of entries, e.g. for paging of results.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Retrieve filesets with a name matching the provided name. The search is performed as a case-insensitive infix search.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Retrieve filesets with a host name matching the provided name. The search is performed as a case-insensitive infix search.
          in: query
          name: host_name
          required: false
          schema:
            type: string
        - description: |-
            Specifies a comma-separated list of fileset attributes to use in sorting the fileset summary information. Performs an ASCII sort of the summary information using each specified attribute, in the order specified.

            Valid attributes are: **_name_**, **_hostName_**, **_templateType_**, **_slaName_**, **_includes_**, **_excludes_**, and **_exceptions_**. Requires **_sort_order_**.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - name
              - hostName
              - templateId
              - effectiveSlaDomainName
              - includes
              - excludes
              - exceptions
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesetSummaryListResponse"
          description: Summary information for filesets.
      summary: Get summary information for all filesets
      tags:
        - /fileset
      x-group: fileset
    post:
      description: Create a fileset for a network host. A fileset is a fileset template applied to a host.
      operationId: createFileset
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilesetCreate"
        description: Specify a template ID and either a host ID or a share ID. When a share ID is provided, the host ID is derived from the host share. Also specify whether or not this backup is a direct archive backup.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesetDetail"
          description: Details of the new fileset.
      summary: Create one fileset for a host
      tags:
        - /fileset
      x-group: fileset
  "/fileset/request/{id}":
    get:
      description: Get details about a fileset related async request.
      operationId: getFilesetAsyncRequestStatus
      parameters:
        - description: ID of the request.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the async request.
      summary: Get details about an async request
      tags:
        - /fileset
      x-group: fileset
  "/fileset/snapshot/{id}":
    delete:
      description: Delete a fileset snapshot. A snapshot is deleted only if it is an on-demand snapshot, a snapshot of an unprotected fileset or a local snapshot that was downloaded from an archive location.
      operationId: deleteFilesetSnapshot
      parameters:
        - description: ID of snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Snapshot location to delete. Use **_local_** to delete all local snapshots and **_all_** to delete the snapshot in all locations.
          in: query
          name: location
          required: true
          schema:
            enum:
              - all
              - local
            type: string
      responses:
        "204":
          description: Snapshot sucessfully deleted.
      summary: Delete a fileset snapshot
      tags:
        - /fileset
      x-group: fileset
    get:
      description: Retrieve summary information for a fileset snapshot by specifying the snapshot ID.
      operationId: getFilesetSnapshot
      parameters:
        - description: ID of snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Whether or not to fetch verbose fileset snapshot information. The performance of this endpoint will decrease if set to true.
          in: query
          name: verbose
          required: false
          schema:
            default: false
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesetSnapshotDetail"
          description: Detailed information for the specified fileset snapshot.
      summary: Get information for a fileset snapshot
      tags:
        - /fileset
      x-group: fileset
  "/fileset/snapshot/{id}/browse":
    get:
      description: Lists all files and directories in a given path.
      operationId: browseFilesetSnapshot
      parameters:
        - description: ID of snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The absolute path of the starting point for the directory listing.
          in: query
          name: path
          required: true
          schema:
            type: string
        - description: Starting position in the list of path entries contained in the query results, sorted by lexicographical order. The response includes the specified numbered entry and all higher numbered entries.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
        - description: Maximum number of entries in the response.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrowseResponseListResponse"
          description: List of files and directories at the specified path.
      summary: Lists all files and directories in a given path
      tags:
        - /fileset
      x-group: fileset
  "/fileset/snapshot/{id}/download":
    post:
      description: Create a download fileset snapshot from archival request.
      operationId: createDownloadFilesetSnapshotFromCloud
      parameters:
        - description: ID of snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the download request.
      summary: Create a download fileset snapshot from archival request
      tags:
        - /fileset
      x-group: fileset
  "/fileset/snapshot/{id}/download_file":
    post:
      description: |-
        Initiate a job to download a file from a backup of a fileset. Returns a job instance ID.
        An email notification will be sent out when the download is ready. When the download is ready, the file can be downloaded from the corresponding event which includes the job instance ID as the value of **jobInstanceId**.
      operationId: createFilesetDownloadFileJob
      parameters:
        - description: ID of snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilesetDownloadFileJobConfig"
        description: Configuration for a download job.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the download request.
      summary: Create a file download job from a fileset backup
      tags:
        - /fileset
      x-group: fileset
  "/fileset/snapshot/{id}/export_file":
    post:
      description: Initiate a job to copy a file or folder from a fileset backup to a destination host other than the source host. Returns the job instance ID.
      operationId: createFilesetExportFileJob
      parameters:
        - description: ID of snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilesetExportFileJobConfig"
        description: Configuration for job to export a file or folder from a fileset backup.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the export request.
      summary: Create export job
      tags:
        - /fileset
      x-group: fileset
  "/fileset/snapshot/{id}/restore_file":
    post:
      description: Initiate a job to copy a file or folder from a fileset backup to the source host. Returns the job instance ID.
      operationId: createFilesetRestoreFileJob
      parameters:
        - description: ID of snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilesetRestoreFileJobConfig"
        description: Configuration for job to restore a file or folder from a fileset backup.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the restore request.
      summary: Create restore job
      tags:
        - /fileset
      x-group: fileset
  "/fileset/{id}":
    delete:
      description: Delete a fileset by specifying the fileset ID.
      operationId: deleteFileset
      parameters:
        - description: Provide a fileset ID to delete.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Flag to indicate whether to preserve snapshots of the fileset or to delete them. Default behavior is to preserve them.
          in: query
          name: preserve_snapshots
          required: false
          schema:
            type: boolean
      responses:
        "204":
          description: Deleted the specified fileset.
        "404":
          description: Fileset deletion failed.
      summary: Delete a fileset
      tags:
        - /fileset
      x-group: fileset
    get:
      description: Retrieve summary information for a fileset by specifying the fileset ID.
      operationId: getFileset
      parameters:
        - description: Specify the fileset ID.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesetDetail"
          description: Detailed information for the specified fileset.
      summary: Get information for a single fileset
      tags:
        - /fileset
      x-group: fileset
    patch:
      description: Update a Fileset with the specified properties.
      operationId: updateFileset
      parameters:
        - description: ID of the Fileset. to update.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilesetUpdate"
        description: Properties to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesetDetail"
          description: Returned if the update was successful.
      summary: Update a Fileset
      tags:
        - /fileset
      x-group: fileset
  "/fileset/{id}/missed_snapshot":
    get:
      description: Retrieve summary information about all missed snapshots for a fileset.
      operationId: getMissedFilesetSnapshots
      parameters:
        - description: ID of the fileset.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissedSnapshotListResponse"
          description: Summary information about missed snapshots for the specified fileset.
      summary: Get missed snapshots for a fileset
      tags:
        - /fileset
      x-group: fileset
  "/fileset/{id}/search":
    get:
      description: Search for a file within the fileset. Search via full path prefix or filename prefix.
      operationId: searchFileset
      parameters:
        - description: Fileset ID to search.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The path query. Either path prefix or filename prefix.
          in: query
          name: path
          required: true
          schema:
            type: string
        - description: Maximum number of entries in the response.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: Pagination cursor returned by the previous request.
          in: query
          name: cursor
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponseListResponse"
          description: Search results.
      summary: Search for a file within the fileset
      tags:
        - /fileset
      x-group: fileset
  "/fileset/{id}/snapshot":
    delete:
      description: |-
        Delete all snapshots that were created based on a fileset by providing the fileset ID.
        Requires an unprotected fileset. Remove the fileset from all SLA Domains.
      operationId: deleteFilesetSnapshots
      parameters:
        - description: ID of the fileset.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successfully removed all snapshots for the fileset.
      summary: Delete all snapshots of a fileset
      tags:
        - /fileset
      x-group: fileset
    post:
      description: Create an on-demand backup request for the given fileset.
      operationId: createFilesetBackupJob
      parameters:
        - description: ID of the Fileset.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/BaseOnDemandSnapshotConfig"
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the backup request.
      summary: Initiate an on-demand backup for a fileset
      tags:
        - /fileset
      x-group: fileset
  /fileset_template:
    get:
      description: "Retrieve summary information for all fileset templates, including: ID and name of the fileset template, fileset template creation timestamp, array of the included filepaths, array of the excluded filepaths."
      operationId: queryFilesetTemplate
      parameters:
        - description: |-
            Filter the summary information based on the primary_cluster_id of the primary Rubrik cluster.
            Use **_local_** as the primary_cluster_id of the Rubrik cluster that is hosting the current REST API session.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: |-
            Filter the summary information based on the operating system type of the fileset. Accepted values: 'Windows', 'UnixLike', 'ANY', 'NONE'.
            Use **_NONE_** to only return information for fileset templates that do not have operating system type set.
            Use **_ANY_** to only return information for fileset templates that have operating system type set.
          in: query
          name: operating_system_type
          required: false
          schema:
            enum:
              - UnixLike
              - Windows
              - ANY
              - NONE
            type: string
        - description: |-
            Filter the summary information based on the share type where the fileset is assigned to. Accepted values: 'NFS', 'SMB', 'ANY', 'NONE'.
            Use **_NONE_** to only return information for fileset templates that do not have share type set.
            Use **_ANY_** to only return information for fileset templates that have share type set.
          in: query
          name: share_type
          required: false
          schema:
            enum:
              - NFS
              - SMB
              - ANY
              - NONE
            type: string
        - description: Retrieve fileset templates with a name matching the provided name. The search is performed as a case-insensitive infix search.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: |-
            Specifies a comma-separated list of fileset attributes to use in sorting the fileset summary information. Performs an ASCII sort of the summary information using each specified attribute, in the order specified.

            Valid attributes are: **_name_**, **_includes_**, **_excludes_**, **_exceptions_**, **_hostCount_**, **_shareType_**. Default sort_order is ascending.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - name
              - hostCount
              - includes
              - excludes
              - exceptions
              - shareType
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesetTemplateDetailListResponse"
          description: Summary information for all fileset templates.
      summary: Get summary information for all fileset templates
      tags:
        - /fileset_template
      x-group: fileset
    post:
      description: |-
        Create a fileset template. The template is applied to the host.  Each template is a set of paths on the host.

        A template uses full paths and wildcards to define the objects to include, exclude, and exempt from exclusion.

        The **_exceptions_** value specifies paths that should not be excluded from the fileset by the **_exclude_** value.

        Specify an array of full path descriptions for each property **_include_**, **_exclude_**, and **_exceptions_**.

        Acceptable wildcard characters are.
        + **_\*_** Single asterisk matches zero or more characters up to a path deliminator.
        + **_\*\*_** Double asterisk matches zero or more characters.

        The following rules apply to path descriptions.
        + Accepts UTF-8 characters.
        + Case sensitive.
        + Forward slash character **_/_** is the path deliminator.
        + Symbolic links must point to a subset of a non symbolic link path.
        + Paths that do not start with **_/_** are modified to start with **_\*\*/_**.
        + Paths that do not end with **_\*_** are modified to end with **_/\*\*_**.
      operationId: createFilesetTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilesetTemplateCreate"
        description: Provide an object with the fileset template definition.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesetTemplateDetail"
          description: Summary information for the created fileset template.
      summary: Create a fileset template
      tags:
        - /fileset_template
      x-group: fileset
  "/fileset_template/{id}":
    delete:
      description: Deletes the specfied fileset template. All associated filesets are deleted.
      operationId: deleteFilesetTemplate
      parameters:
        - description: ID of the fileset template to remove.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Flag to indicate whether to convert snapshots of all filesets of this template to relics or to delete them.  Default is true.
          in: query
          name: preserve_snapshots
          required: false
          schema:
            type: boolean
      responses:
        "204":
          description: Successfully removed the specified fileset template.
      summary: Delete a fileset template
      tags:
        - /fileset_template
      x-group: fileset
    get:
      description: Retrieve summary information for a specified fileset template.
      operationId: getFilesetTemplate
      parameters:
        - description: The ID of the fileset template.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesetTemplateDetail"
          description: Summary information for the specified fileset template.
      summary: Get information for a fileset template
      tags:
        - /fileset_template
      x-group: fileset
    patch:
      description: Modify the values of specified fileset template.
      operationId: updateFilesetTemplate
      parameters:
        - description: ID of the fileset template to update.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilesetTemplatePatch"
        description: Provide an object with the fileset template definition.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilesetTemplateDetail"
          description: Detailed information for modified fileset template.
      summary: Modify a fileset template
      tags:
        - /fileset_template
      x-group: fileset
  /hdfs:
    get:
      description: Retrieve summary information for each HDFS directory. Optionally, filter the retrieved information.
      operationId: queryHdfs
      parameters:
        - description: |-
            Filter the summary information based on the primary_cluster_id of the primary Rubrik cluster.
            Use **_local_** as the primary_cluster_id of the Rubrik cluster that is hosting the current REST API session.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Filter the summary information based on the ID of the host referenced by the HDFS directory (name node).
          in: query
          name: host_id
          required: false
          schema:
            type: string
        - description: Filter the summary information based on the relic status of the HDFS directory. When this parameter is not set, the returned HDFS directory summary information is not filtered by relic status.
          in: query
          name: is_relic
          required: false
          schema:
            type: boolean
        - description: |-
            Filter the summary information based on the ID of the effective SLA Domain inherited by a HDFS directory.
            Use **_UNPROTECTED_** to only return information for HDFS directories that do not have an effective SLA Domain.
            Use **_PROTECTED_** to only return information for HDFS directories that have an effective SLA Domain.
          in: query
          name: effective_sla_domain_id
          required: false
          schema:
            type: string
        - description: |-
            Filter the summary information based on the ID of a HDFS directory template.
            Use **_NONE_** to only return information for HDFS directories that were not created from a HDFS directory template.
            Use **_ANY_** to only return information for HDFS directories that were created from a HDFS directory template.
          in: query
          name: template_id
          required: false
          schema:
            type: string
        - description: |-
            Limit the summary information to a specified maximum number of HDFS directories.
            Optionally, use with **_offset_** to start the count at a specified point.
            Optionally, use with **_sort_by_** to perform sort on given attributes. Include **_sort_order_** to determine the ascending or descending direction of sort.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Starting position in the list of HDFS directory entries contained in the response. The summary information includes the specified numbered entry and all higher numbered entries. Use with **_limit_** to retrieve the summary information as a collection of grouped entries for paging.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Retrieve HDFS directories with a name matching the provided name. The search is performed as a case-insensitive infix search.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Retrieve HDFS directories with a host name (name node) matching the provided name. The search is performed as a case-insensitive infix search.
          in: query
          name: host_name
          required: false
          schema:
            type: string
        - description: |-
            Specifies a comma-separated list of HDFS directory attributes to use in sorting the HDFS directory summary information. Performs an ASCII sort of the summary information using each specified attribute, in the order specified.
            Valid attributes are: **_name_**, **_hostName_**, **_templateType_**, **_slaName_**, **_includes_**, **_excludes_**, and **_exceptions_**. Requires **_sort_order_**.
          in: query
          name: sort_by
          required: false
          schema:
            default: name
            enum:
              - name
              - hostName
              - templateId
              - effectiveSlaDomainName
              - includes
              - excludes
              - exceptions
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HdfsSummaryListResponse"
          description: Summary information for HDFS directories.
      summary: Get summary information for all HDFS directories
      tags:
        - /hdfs
      x-group: hdfs
    post:
      description: Create a HDFS directory for a network host. A HDFS directory is a HDFS directory template applied to a host.
      operationId: createHdfs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HdfsCreate"
        description: Specify a template ID and a host ID.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HdfsDetail"
          description: Details of the new HDFS directory.
      summary: Create one HDFS directory for a host
      tags:
        - /hdfs
      x-group: hdfs
  "/hdfs/request/{id}":
    get:
      description: Get details about a hdfs related asynchronous request.
      operationId: getHdfsAsyncRequestStatus
      parameters:
        - description: ID of the request.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the asynchronous request.
      summary: Get details about an asynchronous request
      tags:
        - /hdfs
      x-group: hdfs
  "/hdfs/snapshot/{id}":
    delete:
      description: Delete a HDFS directory snapshot. A snapshot is deleted only if it is an on-demand snapshot, or a snapshot of an unprotected HDFS directory.
      operationId: deleteHdfsSnapshot
      parameters:
        - description: ID of snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Snapshot sucessfully deleted.
      summary: Delete a HDFS directory snapshot
      tags:
        - /hdfs
      x-group: hdfs
    get:
      description: Retrieve summary information for a HDFS directory snapshot by specifying the snapshot ID.
      operationId: getHdfsSnapshot
      parameters:
        - description: ID of snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HdfsSnapshotDetail"
          description: Detailed information for the specified HDFS directory snapshot.
      summary: Get information for a HDFS directory snapshot
      tags:
        - /hdfs
      x-group: hdfs
  "/hdfs/snapshot/{id}/browse":
    get:
      description: Lists all files and directories in a given path.
      operationId: browseHdfsSnapshot
      parameters:
        - description: ID of snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The absolute path of the starting point for the directory listing.
          in: query
          name: path
          required: true
          schema:
            type: string
        - description: Starting position in the list of path entries contained in the query results, sorted by lexicographical order. The response includes the specified numbered entry and all higher numbered entries.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
        - description: Maximum number of entries in the response.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrowseResponseListResponse"
          description: List of files and directories at the specified path.
      summary: Lists all files and directories in a given path
      tags:
        - /hdfs
      x-group: hdfs
  "/hdfs/snapshot/{id}/export_file":
    post:
      description: Initiate a job to copy a file or folder from a hdfs backup to a destination host other than the source host. Returns the job instance ID.
      operationId: createHdfsExportFileJob
      parameters:
        - description: ID of snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HdfsExportFileJobConfig"
        description: Configuration for job to export a file or folder from a hdfs backup.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the export request.
      summary: Create export job
      tags:
        - /hdfs
      x-group: hdfs
  "/hdfs/snapshot/{id}/restore_file":
    post:
      description: Initiate a job to copy a file or folder from a HDFS directory backup to the source host. Returns the job instance ID.
      operationId: createHdfsRestoreFileJob
      parameters:
        - description: ID of snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HdfsRestoreFileJobConfig"
        description: Configuration for job to restore a file or folder from a HDFS directory backup.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the restore request.
      summary: Create restore job
      tags:
        - /hdfs
      x-group: hdfs
  "/hdfs/{id}":
    delete:
      description: Delete a HDFS directory by specifying the HDFS directory ID.
      operationId: deleteHdfs
      parameters:
        - description: Provide a HDFS directory ID to delete.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: A flag that indicates whether the snapshots of the HDFS directory are preserved or deleted. By default, snapshots are preserved.
          in: query
          name: preserve_snapshots
          required: false
          schema:
            type: boolean
      responses:
        "204":
          description: Deleted the specified HDFS directory.
        "404":
          description: HDFS directory deletion failed.
      summary: Delete a HDFS directory
      tags:
        - /hdfs
      x-group: hdfs
    get:
      description: Retrieve summary information for a HDFS directory by specifying the HDFS directory ID.
      operationId: getHdfs
      parameters:
        - description: Specify the HDFS directory ID.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HdfsDetail"
          description: Detailed information for the specified HDFS directory.
      summary: Get information for a single HDFS directory
      tags:
        - /hdfs
      x-group: hdfs
    patch:
      description: Update a HDFS directory with the specified properties.
      operationId: updateHdfs
      parameters:
        - description: ID of the HDFS directory to update.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HdfsUpdate"
        description: Properties to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HdfsDetail"
          description: Returned if the update was successful.
      summary: Update a HDFS directory
      tags:
        - /hdfs
      x-group: hdfs
  "/hdfs/{id}/missed_snapshot":
    get:
      description: Retrieve summary information about all missed snapshots for a HDFS directory.
      operationId: getMissedHdfsSnapshots
      parameters:
        - description: ID of the HDFS directory.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissedSnapshotListResponse"
          description: Summary information about missed snapshots for the specified HDFS directory.
      summary: Get missed snapshots for a HDFS directory
      tags:
        - /hdfs
      x-group: hdfs
  "/hdfs/{id}/search":
    get:
      description: Search for a file within the HDFS directory. Search using full path prefix or filename prefix.
      operationId: searchHdfs
      parameters:
        - description: HDFS directory ID to search.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The path query. The query can be a path refix or a filename prefix.
          in: query
          name: path
          required: true
          schema:
            type: string
        - description: Maximum number of entries in the response.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: Pagination cursor returned by the previous request.
          in: query
          name: cursor
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponseListResponse"
          description: Search results.
      summary: Search for a file within the HDFS directory
      tags:
        - /hdfs
      x-group: hdfs
  "/hdfs/{id}/snapshot":
    delete:
      description: |-
        Delete all snapshots that were created based on a hdfs by providing the HDFS directory ID.
        Requires an unprotected HDFS directory. Remove the HDFS directory from all SLA Domains.
      operationId: deleteHdfsSnapshots
      parameters:
        - description: ID of the HDFS directory.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successfully removed all snapshots for the HDFS directory.
      summary: Delete all snapshots of a HDFS directory
      tags:
        - /hdfs
      x-group: hdfs
    post:
      description: Create on-demand backup request for HDFS directory.
      operationId: createHdfsBackupJob
      parameters:
        - description: ID of the HDFS directory.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/BaseOnDemandSnapshotConfig"
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the backup request.
      summary: Initiate an on-demand backup for a HDFS directory
      tags:
        - /hdfs
      x-group: hdfs
  /hdfs_template:
    get:
      description: "Retrieve summary information for all HDFS directory templates, including: ID and name of the HDFS directory template, HDFS directory template creation timestamp, array of the included filepaths, array of the excluded filepaths."
      operationId: queryHdfsTemplate
      parameters:
        - description: |-
            Filter the summary information based on the primary_cluster_id of the primary Rubrik cluster.
            Use **_local_** as the primary_cluster_id of the Rubrik cluster that is hosting the current REST API session.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Retrieve HDFS directory templates with a name matching the provided name. The search is performed as a case-insensitive infix search.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: |-
            Specifies a comma-separated list of HDFS directory attributes to use in sorting the HDFS directory summary information. Performs an ASCII sort of the summary information using each specified attribute, in the order specified.
            Valid attributes are: **_name_**, **_includes_**, **_excludes_**, **_exceptions_**, **_hostCount_**. Default sort_order is ascending.
          in: query
          name: sort_by
          required: false
          schema:
            default: name
            enum:
              - name
              - hostCount
              - includes
              - excludes
              - exceptions
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HdfsTemplateDetailListResponse"
          description: Summary information for all HDFS directory templates.
      summary: Get summary information for all HDFS directory templates
      tags:
        - /hdfs_template
      x-group: hdfs
    post:
      description: |-
        Create a HDFS directory template. The template is applied to the host.  Each template is a set of paths on the host.
        A template uses full paths and wildcards to define the objects to include, exclude, and exempt from exclusion.
        The **_exceptions_** value specifies paths that should not be excluded from the HDFS directory by the **_exclude_** value.
        Specify an array of full path descriptions for each property **_include_**, **_exclude_**, and **_exceptions_**.
        Acceptable wildcard characters are.
        + **_\*_** Single asterisk matches zero or more characters up to a path deliminator.
        + **_\*\*_** Double asterisk matches zero or more characters.
        The following rules apply to path descriptions.
        + Accepts UTF-8 characters.
        + Case sensitive.
        + Forward slash character **_/_** is the path deliminator.
        + Symbolic links must point to a subset of a non symbolic link path.
        + Paths that do not start with **_/_** are modified to start with **_\*\*/_**.
        + Paths that do not end with **_\*_** are modified to end with **_/\*\*_**.
      operationId: createHdfsTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HdfsTemplateCreate"
        description: Provide an object with the HDFS directory template definition.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HdfsTemplateDetail"
          description: Summary information for the created HDFS directory template.
      summary: Create a HDFS directory template
      tags:
        - /hdfs_template
      x-group: hdfs
  "/hdfs_template/{id}":
    delete:
      description: Deletes the specfied HDFS directory template. All associated HDFS directories are deleted.
      operationId: deleteHdfsTemplate
      parameters:
        - description: ID of the HDFS directory template to remove.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: A flag that indicates whether the snapshots of the HDFS directories of this template are converted to relics or deleted. By default, snapshots are converted. Set this flag to 'false' to delete the snapshots.
          in: query
          name: preserve_snapshots
          required: false
          schema:
            type: boolean
      responses:
        "204":
          description: Successfully removed the specified HDFS directory template.
      summary: Delete a HDFS directory template
      tags:
        - /hdfs_template
      x-group: hdfs
    get:
      description: Retrieve summary information for a specified HDFS directory template.
      operationId: getHdfsTemplate
      parameters:
        - description: The ID of the HDFS directory template.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HdfsTemplateDetail"
          description: Summary information for the specified HDFS directory template.
      summary: Get information for a HDFS directory template
      tags:
        - /hdfs_template
      x-group: hdfs
    patch:
      description: Modify the values of specified HDFS directory template.
      operationId: updateHdfsTemplate
      parameters:
        - description: ID of the HDFS directory template to update.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HdfsTemplatePatch"
        description: Provide an object with the HDFS directory template definition.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HdfsTemplateDetail"
          description: Detailed information for modified HDFS directory template.
      summary: Modify a HDFS directory template
      tags:
        - /hdfs_template
      x-group: hdfs
  /health_monitor/policies:
    get:
      description: Retrieves the details of all the health monitor policies when policy IDs are not specified in the query parameter. If the request includes a list of policy IDs in the query parameter, the response will include the details of the specified policies.
      operationId: getPolicies
      parameters:
        - description: Optional list of policy IDs.
          explode: false
          in: query
          name: policy_ids
          required: false
          schema:
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/HealthMonitorPolicy"
                type: array
          description: List of health monitor policies.
      summary: Get details of health monitor policies
      tags:
        - /health_monitor
      x-group: health_monitor
  /health_monitor/policy_status:
    get:
      description: Retrieves the status of the policy enforcement for a list of nodes if specified. If nodes are not specified, the response includes the policy enforcement status for all the nodes on the Rubrik cluster.
      operationId: getPolicyStatus
      parameters:
        - description: Optional list of policy IDs. If not provided, the response includes the status of all the policies.
          explode: false
          in: query
          name: policy_ids
          required: false
          schema:
            items:
              type: string
            type: array
          style: form
        - description: Optional list of Node IDs. If not provided, the response includes the status of all the nodes.
          explode: false
          in: query
          name: node_ids
          required: false
          schema:
            items:
              type: string
            type: array
          style: form
        - description: Indicates if the policy enforcement status should include expanded result for each policy.
          in: query
          name: has_detailed_status
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/NodePolicyCheckResult"
                type: array
          description: Enforcement status of policies.
      summary: Get the status of health monitor policy enforcement
      tags:
        - /health_monitor
      x-group: health_monitor
  /health_monitor/run_policy:
    post:
      description: Triggers on-demand enforcement of the set of policies specified in the request body. If a list of nodes is provided, policies are run against these nodes, otherwise the policies are run on all active nodes of the Rubrik cluster.
      operationId: runPolicies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunPolicyArg"
        description: The request object.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/NodePolicyCheckResult"
                type: array
          description: Policy enforcement result.
      summary: Enforce health monitor policies
      tags:
        - /health_monitor
      x-group: health_monitor
  /hierarchy/bulk_sla_conflicts:
    post:
      description: Retrieve the list of descendant objects with an explicitly configured SLA domain, or inherit an SLA domain from a different parent for each managed ID.
      operationId: bulkHierarchySlaConflictsV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HierarchyObjectIds"
        description: List of hierarchy object IDs.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkSlaConflictsSummary"
          description: |
            List of SLA domain conflict summaries for the specified managed IDs.
      summary: Retrieve the list of descendant objects with SLA conflicts in bulk
      tags:
        - /hierarchy
      x-group: hierarchy_v1
  /host:
    get:
      description: Retrieve summary information for all hosts that are registered with a Rubrik cluster.
      operationId: queryHost
      parameters:
        - description: |-
            Filter the summary information based on the operating system type. Accepted values are 'Windows', 'UnixLike', 'ANY', 'NONE'.
            Use **_NONE_** to only return information for hosts templates that do not have operating system type set.
            Use **_ANY_** to only return information for hosts that have operating system type set.
          in: query
          name: operating_system_type
          required: false
          schema:
            enum:
              - ANY
              - NONE
              - UnixLike
              - Windows
            type: string
        - description: |-
            Filter the summary information based on the operating system.
            Use **_AIX_**, **_Linux_** or **_Solaris_** to restrict the returned information to hosts with operating systems within the specified operating system family.
            Use a specific operating system release version to restrict the returned information to hosts with operating systems that match the specified version.
          in: query
          name: operating_system
          required: false
          schema:
            type: string
        - description: Filters the summary information based on the Rubrik cluster specified by the value of primary_cluster_id. Use 'local' for the Rubrik cluster that is hosting the current REST API session.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Retrieve hosts with a host name matching the provided name. The search type is infix.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: (Deprecated) Retrieve hosts with a host name matching the provided name. The search type is infix.
          in: query
          name: hostname
          required: false
          schema:
            type: string
        - description: |-
            Specifies the host attribute to use in sorting the host summary information. Performs an ASCII sort of the summary information using the specified attribute, in the order specified.
            Valid attributes are 'hostname'.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - hostname
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
        - description: Determines whether to fetch hosts with additional privilege checks.
          in: query
          name: snappable_status
          required: false
          schema:
            enum:
              - Protectable
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HostSummaryListResponse"
          description: Summary information for registered hosts.
      summary: Get summary information for hosts
      tags:
        - /host
      x-group: hosts
    post:
      description: Register a host.
      operationId: registerHost
      requestBody:
        $ref: "#/components/requestBodies/HostRegister"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HostDetail"
          description: Summary information from registration of the host.
      summary: Register a host
      tags:
        - /host
      x-group: hosts
  /host/background:
    post:
      description: Register a host and perform discovery for databases and Microsoft SQL Server instances. When called, this API returns a success message, but completes the host registration in the background. Monitor the status of the background host discovery with the "status" field in GET API on /hosts. The POST API on /hosts can take longer for discovery, depending on the number of hosts on the system. POST on this API can be used instead to perform the discovery in the background and quickly register the host. Doing this requires that you install RBS for Linux and Windows hosts, similar to regular register using POST on /hosts.
      operationId: registerHostAsync
      requestBody:
        $ref: "#/components/requestBodies/HostRegister"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HostDetail"
          description: Summary host registration information.
      summary: Register a host
      tags:
        - /host
      x-group: hosts
  /host/bulk_background:
    post:
      description: Register multiple hosts and perform discovery for databases and Microsoft SQL Server instances. When called, this API returns a success message, but completes the host registration in the background. Monitor the status of the background host discovery with the "status" field in GET API on /hosts. The POST API on /hosts can take longer for discovery, depending on the number of hosts on the system. POST on this API can be used instead to perform the discovery in the background and quickly register the host. Doing this requires that you install RBS for Linux and Windows hosts, similar to regular register using POST on /hosts.
      operationId: bulkRegisterHostAsync
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/HostRegister"
              type: array
        description: Registration definition for each host.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/HostDetail"
                type: array
          description: Summary information from host registration.
      summary: Register hosts
      tags:
        - /host
      x-group: hosts
  "/host/certificate/{id}":
    put:
      description: Provide an updated certificate for a specified host.
      operationId: updateCertificateHost
      parameters:
        - description: ID of the host.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HostDetail"
          description: Returns a detailed view of the update host.
      summary: Update certificate
      tags:
        - /host
      x-group: hosts
  "/host/hierarchy/{id}":
    get:
      description: |
        Retrieve details for the specified object in the host/share hierarchy.
      operationId: getHostHierarchyObject
      parameters:
        - description: ID of the host hierarchy object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HostHierarchyObjectSummary"
          description: Details of the hierarchy object.
      summary: Get summary of a host/share hierarchy object
      tags:
        - /host/hierarchy
      x-group: host_hierarchy
  "/host/hierarchy/{id}/children":
    get:
      description: Retrieve the list of immediate descendant objects for the specified parent.
      operationId: getHostHierarchyChildren
      parameters:
        - description: ID of the parent host hierarchy object. To get top-level nodes, use **root** as the ID.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Search object by object name.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Filter by node object type.
          in: query
          name: object_type
          required: false
          schema:
            enum:
              - Host
              - Share
            type: string
        - description: Filter by ID of effective SLA domain.
          in: query
          name: effective_sla_domain_id
          required: false
          schema:
            type: string
        - description: Filter by primary cluster ID, or **local**.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Limit a response to the results that have the specified SLA Domain assignment type.
          in: query
          name: sla_assignment
          required: false
          schema:
            enum:
              - Derived
              - Direct
              - Unassigned
            type: string
        - description: Filter by fileset template ID.
          in: query
          name: template_id
          required: false
          schema:
            type: string
        - description: Filter by NAS vendor.
          in: query
          name: vendor_type
          required: false
          schema:
            enum:
              - Isilon
              - NetApp
              - FlashBlade
            type: string
        - description: Search object by export point.
          in: query
          name: export_point
          required: false
          schema:
            type: string
        - description: |-
            Filter the summary information based on the operating system type. Accepted values are 'Windows', 'UnixLike', 'ANY', 'NONE'.
            Use **_NONE_** to only return information for hosts templates that do not have operating system type set.
            Use **_ANY_** to only return information for hosts that have operating system type set.
          in: query
          name: operating_system_type
          required: false
          schema:
            enum:
              - ANY
              - NONE
              - UnixLike
              - Windows
            type: string
        - description: Attribute to sort the results on.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - Status
              - Name
              - ExportPoint
              - ShareType
              - Hostname
            type: string
        - description: Order for sorting the results, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Number of matches to ignore from the beginning of the results.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HostHierarchyObjectSummaryListResponse"
          description: Summary list of immediate descendant objects.
      summary: Get immediate descendant objects
      tags:
        - /host/hierarchy
      x-group: host_hierarchy
  /host/make_primary:
    post:
      description: Migrate the primary cluster with which the agent is able to perform regular operations (backup, restore etc). This can be done on a specified set of hosts or for all hosts that currently have a specified primary cluster for disaster recovery. Specify exactly one of `ids` or `oldPrimaryClusterUuid`.
      operationId: hostMakePrimary
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HostMakePrimaryRequest"
        description: Description of hosts to migrate.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Asynchronous request for making this cluster primary.
      summary: Make this cluster the primary for agents on a set of hosts
      tags:
        - /host
      x-group: hosts
  /host/rbs:
    get:
      description: Get the details of the Rubrik Backup Service (RBS) installed on a specific host. Specify the details of the host to check whether RBS is installed on the host or not. If RBS is installed, the response will include the RBS details.
      operationId: getRbsHostInfo
      parameters:
        - description: IP address or hostname of the host.
          in: query
          name: name
          required: true
          schema:
            type: string
        - description: Name of the user account that has sudo/admin privileges on the RBS host. This is required to install/uninstall/upgrade RBS packages on the RBS host.
          in: query
          name: username
          required: true
          schema:
            type: string
        - description: Password associated with the username that has access to the host.
          in: query
          name: password
          required: true
          schema:
            type: string
          x-secret: true
        - description: Number of seconds after which the operation is terminated if it has not completed execution. Default value is 600 seconds.
          in: query
          name: operation_timeout
          required: false
          schema:
            default: 600
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RbsHostSummary"
          description: Rubrik Backup Service details for the specified host.
        "404":
          description: Rubrik Backup Service is not installed on the host.
        "422":
          description: Failed to get Rubrik Backup Service details for the specified host.
      summary: Get the Rubrik Backup Service details for a host
      tags:
        - /host
      x-group: hosts
  /host/rbs/install:
    post:
      description: Install Rubrik Backup Service on a host.
      operationId: rbsInstall
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RbsHostOperationRequest"
        description: Configuration parameters to install RBS on a host.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RbsHostOperationResponse"
          description: Response for the Rubrik Backup Service installation request.
        "408":
          description: Rubrik Backup Service install operation timed out on the host.
        "422":
          description: Failed to install Rubrik Backup Service on the host.
      summary: Install Rubrik Backup Service on a host
      tags:
        - /host
      x-group: hosts
  /host/rbs/uninstall:
    post:
      description: Uninstall Rubrik Backup Service from a host.
      operationId: rbsUninstall
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RbsHostOperationRequest"
        description: Configuration parameters to uninstall RBS from a host.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RbsHostOperationResponse"
          description: Successfully uninstalled RBS from the host.
        "408":
          description: Rubrik Backup Service uninstall operation timed out on the host.
        "422":
          description: Failed to uninstall Rubrik Backup Service from the host.
      summary: Uninstall Rubrik Backup Service from a host
      tags:
        - /host
      x-group: hosts
  /host/rbs/upgrade:
    post:
      description: Upgrade Rubrik Backup Service on a host.
      operationId: rbsUpgrade
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RbsHostOperationRequest"
        description: Configuration parameters to upgrade RBS on a host.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RbsHostOperationResponse"
          description: Rubrik Backup Service upgrade response.
        "408":
          description: Rubrik Backup Service upgrade operation timed out on the host.
        "422":
          description: Failed to upgrade Rubrik Backup Service on the host.
      summary: Upgrade Rubrik Backup Service on a host
      tags:
        - /host
      x-group: hosts
  /host/share/bulk:
    patch:
      description: Update the properties of the objects that represent the specified network share.
      operationId: bulkUpdateHostShare
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/HostShareUpdate"
              type: array
        description: Properties to use for the update of network share objects.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/HostShareDetail"
                type: array
          description: Returns a detailed view of all updated network share objects.
      summary: Update network shares
      tags:
        - /host/share
      x-group: hosts
    post:
      description: Add NAS shares for a NAS host to the Rubrik cluster in bulk. This operation does not validate share credentials. If the default share credentials are incorrect, the share status on shares UI displays as "Wrong credential". Use the PATCH /v1/host/share/bulk endpoint to enter the correct credentials when this status displays.
      operationId: bulkAddHostShares
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NasSharesToAdd"
        description: The properties used to add the NAS Shares to the Rubrik cluster.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkShareAddResponse"
          description: Returns a detailed view of all added network share objects and status of the job that validates the default credentials added to each object.
      summary: Add NAS shares in bulk
      tags:
        - /host/share
      x-group: hosts
  "/host/{id}":
    delete:
      description: Delete host by specifying the host ID.
      operationId: deleteHost
      parameters:
        - description: ID of the host to delete.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deleted specified host.
      summary: Delete a registered host
      tags:
        - /host
      x-group: hosts
    get:
      description: Retrieve summary information for a registered host.
      operationId: getHost
      parameters:
        - description: ID of the registered host.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HostDetail"
          description: Summary information for the specified host.
      summary: Get summary information for a host
      tags:
        - /host
      x-group: hosts
    patch:
      description: Change the FQDN and IPv4 address that is assigned to a host object. Enable or disable pre-transfer data compression. Enable or disable change block tracking (CBT) for backups of SQL Server databases on Windows hosts. Enable or disable volume filter driver (VFD) for volume backups on Windows hosts. Set an Oracle user with sysdba privileges to permit Oracle discovery queries.
      operationId: updateHost
      parameters:
        - description: ID of the registered host.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HostUpdate"
        description: Properties of host to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HostDetail"
          description: Summary information for the specified host.
      summary: Modify information for a registered host
      tags:
        - /host
      x-group: hosts
  "/host/{id}/nas_share_discover":
    get:
      description: Discover and return all shares on the identified NAS host.
      operationId: discoverNasShares
      parameters:
        - description: The discoverable NAS host ID.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DiscoveredNasShare"
                type: array
          description: The discovered NAS shares.
      summary: Discover and return all shares on a NAS host
      tags:
        - /host
      x-group: hosts
  "/host/{id}/refresh":
    post:
      description: Refresh the properties of a host object when changes on the host are not seen in the Rubrik web UI.
      operationId: refreshHost
      parameters:
        - description: ID assigned to a host object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HostDetail"
          description: Refreshed the properties shown for the specified host.
      summary: Refresh a host
      tags:
        - /host
      x-group: hosts
  "/host/{id}/search":
    get:
      description: Search for a file within the host. Search via full path prefix or filename prefix.
      operationId: searchHost
      parameters:
        - description: ID of the host to search.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The path query. Either path prefix or filename prefix.
          in: query
          name: path
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponseListResponse"
          description: Search results.
      summary: Search for a file within the host
      tags:
        - /host
      x-group: hosts
  "/host/{id}/volume":
    get:
      description: Retrieve summary information for each volume on a specified Volume Group host.
      operationId: queryHostVolume
      parameters:
        - description: The ID of the host.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HostVolumeSummaryListResponse"
          description: Get volume summary from the host.
      summary: Get list of Volume Group volumes
      tags:
        - /host
      x-group: volume_group
  "/hyperv/vm/{id}/request/force_full_snapshot":
    get:
      description: Retrieve the configuration created to force a full snapshot for a Hyper-V Virtual Machine.
      operationId: getHypervVirtualMachineForceFullSpec
      parameters:
        - description: The ID of the Hyper-V virtual machine.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HypervVirtualMachineForceFullResponse"
          description: Return the configuration created to force a full snapshot on the Hyper-V virtual machine.
      summary: Retrieve the configuration which has been set for forcing a full snapshot for a Hyper-V Virtual Machine
      tags:
        - /hyperv/vm
      x-group: hyperv_vm
    post:
      description: Request a full snapshot during the next backup job of a Hyper-V virtual machine.
      operationId: requestHypervVirtualMachineForceFullSnapshot
      parameters:
        - description: ID of the Hyper-V virtual machine.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HypervVirtualMachineForceFullRequest"
        description: Configuration created to force a full snapshot on the Hyper-V virtual machine.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HypervVirtualMachineForceFullResponse"
          description: Returns the Hyper-V virtual machine force full response containing the configuration for each virtual disk that requested a forced full snapshot.
      summary: Request a full snapshot during next backup job of a Hyper-V virtual machine
      tags:
        - /hyperv/vm
      x-group: hyperv_vm
  /idp_auth_domain:
    get:
      description: Get a list of IdP authentication domains.
      operationId: queryIdProviderAuthDomain
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdProviderAuthDomainSummaryListResponse"
          description: Returns the list of IdP authentication domains.
      summary: Get a list of IdP authentication domains
      tags:
        - /idp_auth_domain
      x-group: idp_auth_domain
    post:
      description: Add a new IdP authentication domain.
      operationId: createIdProviderAuthDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdProviderAuthDomainInfo"
        description: Information for joining an IdP authentication domain.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdProviderAuthDomainSummary"
          description: Returns a summary of the newly created IdP authentication domain.
      summary: Add a new IdP authentication domain
      tags:
        - /idp_auth_domain
      x-group: idp_auth_domain
      x-rk-block-api-tokens: true
  "/idp_auth_domain/{id}":
    delete:
      description: Delete an IdP authentication domain for the given ID.
      operationId: deleteIdProviderAuthDomain
      parameters:
        - description: ID of the IdP authentication domain to be deleted.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Delete Successful.
      summary: Delete an IdP authentication domain for the given ID
      tags:
        - /idp_auth_domain
      x-group: idp_auth_domain
      x-rk-block-api-tokens: true
    get:
      description: Get an IdP authentication domain for the given id.
      operationId: getIdProviderAuthDomain
      parameters:
        - description: ID of the IdP Authentication Domain to be retrieved.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdProviderAuthDomainSummary"
          description: Returns a summary of the requested IdP authentication domain.
      summary: Get an IdP authentication domain for the given id
      tags:
        - /idp_auth_domain
      x-group: idp_auth_domain
    patch:
      description: Update an existing IdP authentication domain.
      operationId: updateIdProviderAuthDomain
      parameters:
        - description: ID of the IdP authentication domain to be updated.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdProviderAuthDomainInfoUpdate"
        description: Information for updating an IdP authentication domain.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdProviderAuthDomainSummary"
          description: Returns a summary of the newly updated IdP authentication domain.
      summary: Update an existing IdP authentication domain
      tags:
        - /idp_auth_domain
      x-group: idp_auth_domain
      x-rk-block-api-tokens: true
  /job_monitoring:
    get:
      description: Get the job summary for protection and recovery jobs that are currently running, scheduled to run, or completed in the past 24 hours.
      operationId: getJobMonitoringInfo
      parameters:
        - description: Maximum number of entries to retrieve. The default value is 25. Value needs to be a positive number.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: Filters results by the current event status of the job. The filters should be separated by ','.
          explode: false
          in: query
          name: job_event_status
          required: false
          schema:
            items:
              type: string
            type: array
          style: form
        - description: Filters results by job type.
          in: query
          name: job_type
          required: false
          schema:
            enum:
              - Archival
              - Backup
              - Conversion
              - Recovery
              - Replication
              - Index
              - LogBackup
              - LogArchival
              - LogReplication
              - LogShipping
            type: string
        - description: A Boolean that specifies whether or not to include log- related jobs. Default value is 'false'.
          in: query
          name: should_include_log_related_job
          required: false
          schema:
            type: boolean
        - description: Filter results by first full status.
          in: query
          name: is_first_full
          required: false
          schema:
            type: boolean
        - description: Filters results by a specified object type.
          in: query
          name: object_type
          required: false
          schema:
            enum:
              - AppBlueprint
              - Ec2Instance
              - Hdfs
              - HypervVirtualMachine
              - LinuxFileset
              - ManagedVolume
              - Mssql
              - NutanixVirtualMachine
              - OracleDatabase
              - SapHanaDatabase
              - ShareFileset
              - StorageArrayVolumeGroup
              - VcdVapp
              - VmwareVirtualMachine
              - WindowsFileset
              - WindowsVolumeGroup
            type: string
        - description: Filters results by the provided value for object_name, using infix search.
          in: query
          name: object_name
          required: false
          schema:
            type: string
        - description: Filter results by node name.
          in: query
          name: node_name
          required: false
          schema:
            type: string
        - description: Filters results by the provided sla doimain id.
          in: query
          name: effective_sla_domain_id
          required: false
          schema:
            type: string
        - description: Filters results according to their on-demand status.
          in: query
          name: is_on_demand
          required: false
          schema:
            type: boolean
        - description: All rows updated at or after this time will be returned.
          in: query
          name: last_update_time
          required: false
          schema:
            format: date-time
            type: string
        - description: Fetches all rows after given row cursor.
          in: query
          name: after_id
          required: false
          schema:
            type: string
        - description: The column by which to sort the entries.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - StartTime
              - JobStatus
              - JobType
              - ObjectType
              - SlaDomainName
              - EndTime
              - ObjectLogicalSize
              - DataTransferred
              - Duration
              - ObjectName
            type: string
        - description: The sorting order.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobMonitoringResponse"
          description: Returns job information.
      summary: Get job monitoring information
      tags:
        - /job_monitoring
      x-group: job_monitoring
  /job_monitoring/csv_download_link:
    get:
      description: Download the job summary for protection and recovery jobs that are currently running, scheduled to run, or completed in the past 24 hours as a CSV file. This is a synchronous operation.
      operationId: getJobMonitoringInfoCsvDownloadLink
      parameters:
        - description: State of the jobs in the CSV.
          in: query
          name: job_monitoring_state
          required: true
          schema:
            enum:
              - Failure
              - Scheduled
              - Success
              - Active
              - Canceled
            type: string
        - description: Filters results by the current event status of the job.
          in: query
          name: job_event_status
          required: false
          schema:
            enum:
              - Failure
              - Success
              - Queued
              - Scheduled
              - Active
              - Canceling
              - Canceled
              - SuccessfulWithWarnings
              - CancelingScheduled
            type: string
        - description: Filters results by job type.
          in: query
          name: job_type
          required: false
          schema:
            enum:
              - Archival
              - Backup
              - Conversion
              - Recovery
              - Replication
              - Index
              - LogBackup
              - LogArchival
              - LogReplication
              - LogShipping
            type: string
        - description: A Boolean that specifies whether or not to include log- related jobs. Default value is 'false'.
          in: query
          name: should_include_log_related_job
          required: false
          schema:
            type: boolean
        - description: Filters results by a specified object type.
          in: query
          name: object_type
          required: false
          schema:
            enum:
              - AppBlueprint
              - Ec2Instance
              - Hdfs
              - HypervVirtualMachine
              - LinuxFileset
              - ManagedVolume
              - Mssql
              - NutanixVirtualMachine
              - OracleDatabase
              - SapHanaDatabase
              - ShareFileset
              - StorageArrayVolumeGroup
              - VcdVapp
              - VmwareVirtualMachine
              - WindowsFileset
              - WindowsVolumeGroup
            type: string
        - description: Filters results by the provided value for object_name, using infix search.
          in: query
          name: object_name
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobMonitoringCsvDownloadResponse"
          description: Download link of the requested CSV file.
      summary: Download job monitoring information as a CSV file
      tags:
        - /job_monitoring
      x-group: job_monitoring
  /job_monitoring/subscription:
    get:
      description: Return all unarchived email subscriptions for monitoring page in a list of summaries sorted by creation time (earliest created first). Each summary contains information for each subscription -- Time attributes - when to send the email -- Email addresses - who to send the email -- Attachments - what attachments should the email include -- Job states - which job states to include in the email (Failure, Scheduled, Success, Active, Canceled). -- Id - the tring that identifies the subscription -- Status - the status of the subscription (Active, Suspended, or Unknown) -- Owner - information about the owner of the subscription -- user id - unique id used to identify the owner -- user name - human-readable name of user the time schedule to send the subscription.
      operationId: getMonitoringSubscriptions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MonitoringSubscriptionSummary"
                type: array
          description: Summary of email subscriptions for the monitoring page.
      summary: Returns all email subscriptions for the monitoring page
      tags:
        - /job_monitoring
      x-group: job_monitoring
    post:
      description: Creates an email subscription to the job monitoring page, which provides information on jobs based on their type (active, in progress, canceled, scheduled, or succeeded). Users can choose which job states to include in the subscription. The email summarizes the job counts by type in the body, and includes the option to include CSV attachments for every job state selected.
      operationId: createMonitoringSubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitoringEmailSubscriptionRequest"
        description: All information required to create a job-monitoring email subscription.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitoringSubscriptionSummary"
          description: Summary of the email subscription.
      summary: Create an email subscription to the job monitoring page
      tags:
        - /job_monitoring
      x-group: job_monitoring
  "/job_monitoring/subscription/{subscription_id}":
    delete:
      description: Deletes the specified monitoring page email subscription.
      operationId: deleteMonitoringSubscription
      parameters:
        - description: ID of the monitoring subscription to delete.
          in: path
          name: subscription_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Monitoring email subscription was successfully deleted.
      summary: Delete a monitoring page email subscription
      tags:
        - /job_monitoring
      x-group: job_monitoring
    get:
      description: Returns a summary of the provided monitoring subscription.
      operationId: getMonitoringSubscription
      parameters:
        - description: ID of the monitoring subscription to acquire.
          in: path
          name: subscription_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitoringSubscriptionSummary"
          description: Summary of the email subscription.
      summary: Get a specific monitoring email subscription by id
      tags:
        - /job_monitoring
      x-group: job_monitoring
    patch:
      description: Updates the monitoring email subscription with the subscription ID provided.
      operationId: updateMonitoringSubscription
      parameters:
        - description: ID of the monitoring subscription.
          in: path
          name: subscription_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitoringEmailSubscriptionUpdate"
        description: Information required to update a monitoring subscription.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitoringSubscriptionSummary"
          description: Summary of the email subscription.
      summary: Update a monitoring email subscription
      tags:
        - /job_monitoring
      x-group: job_monitoring
  /job_monitoring/summary_by_job_state:
    get:
      description: Get job summary separated by job state for all running jobs, jobs that have been scheduled and jobs that are complete, for protection and recovery jobs in the past 24 hours.
      operationId: getMonitoringJobCountByJobState
      parameters:
        - description: Filter by a comma separated list of job types.
          explode: false
          in: query
          name: job_types
          required: false
          schema:
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobMonitoringSummaryByState"
          description: Returns information about the job counts for the events that match the query parameters.
      summary: Get job monitoring summary information separated by job state
      tags:
        - /job_monitoring
      x-group: job_monitoring
  /job_monitoring/summary_by_job_type:
    get:
      description: Get job summaries for protection and recovery jobs, separated by job type, that have been scheduled, are currently running, or completed in the past 24 hours.
      operationId: getMonitoringJobCountByJobType
      parameters:
        - description: Filter by job state.
          in: query
          name: job_monitoring_state
          required: true
          schema:
            enum:
              - Failure
              - Scheduled
              - Success
              - Active
              - Canceled
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobMonitoringSummaryByType"
          description: Returns information about the job counts for the events that match the query parameters.
      summary: Get job monitoring summary information separated by job type
      tags:
        - /job_monitoring
      x-group: job_monitoring
  /ldap_service:
    get:
      description: Get a list of LDAP services.
      operationId: queryLdapService
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LdapServiceSummaryListResponse"
          description: Returns the list of authentication domains.
      summary: Get a list of LDAP services
      tags:
        - /ldap_service
      x-group: ldap_service
    post:
      description: Add a new authentication domain.
      operationId: createLdapService
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LdapServiceInfo"
        description: Information for joining an authentication domain.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LdapServiceSummary"
          description: Returns a summary of the newly created authentication. domain.
      summary: Add a new authentication domain
      tags:
        - /ldap_service
      x-group: ldap_service
      x-rk-block-api-tokens: true
  "/ldap_service/{id}":
    delete:
      description: Delete an authentication domain for the given ID.
      operationId: deleteLdapService
      parameters:
        - description: ID of the authentication domain to be deleted.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Delete successful.
      summary: Delete an authentication domain for the given ID
      tags:
        - /ldap_service
      x-group: ldap_service
      x-rk-block-api-tokens: true
    get:
      description: Get a LDAP service for the given ID.
      operationId: getLdapService
      parameters:
        - description: ID of the authentication domain to be retrieved.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LdapServiceSummary"
          description: Returns a summary of the requested authentication domain.
      summary: Get a LDAP service for the given ID
      tags:
        - /ldap_service
      x-group: ldap_service
    patch:
      description: Modify the values of a specified authentication domain object.
      operationId: patchLdapService
      parameters:
        - description: ID of the authentication domain to be updated.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/LdapServiceInfoUpdate"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LdapServiceSummary"
          description: Returns a summary of the newly updated authentication domain.
      summary: Update an existing authentication domain
      tags:
        - /ldap_service
      x-group: ldap_service
      x-rk-block-api-tokens: true
    put:
      description: Replace the values of a specified authentication domain object.
      operationId: putLdapService
      parameters:
        - description: ID of the authentication domain to be updated.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/LdapServiceInfoUpdate"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LdapServiceSummary"
          description: Returns a summary of the newly updated authentication domain.
      summary: Replace the values of an authentication domain
      tags:
        - /ldap_service
      x-group: ldap_service
      x-rk-block-api-tokens: true
  /legal_hold/object:
    get:
      description: Returns the object details for object with snapshots under legal hold.
      operationId: getLegalHoldObjects
      parameters:
        - description: Limit the list to a particular object.
          in: query
          name: object_id
          required: false
          schema:
            type: string
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Specifies a number of initial matches to ignore.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Limits the list to objects that match a specified value for the object name.
          in: query
          name: object_name
          required: false
          schema:
            type: string
        - description: Limits the list to objects that match a specified type.
          in: query
          name: object_type
          required: false
          schema:
            type: string
        - description: The attribute used to sort summary information. The optional parameter _sort_order_ specifies ascending or descending sort order.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - objectName
              - objectType
              - numberOfSnapshotsHeld
            type: string
        - description: Specifies ascending or descending sort order. Summary results are sorted in ascending order when this parameter is not specified.
          in: query
          name: sort_order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectHoldSummaryListResponse"
          description: List of details for objects with snasphots in a legal hold status.
      summary: Get objects part of Legal Hold
      tags:
        - /legal_hold
      x-group: legal_hold
  "/legal_hold/object/{id}/dissolve":
    post:
      description: Dissolve a collection of snapshots of specified data source from Legal Hold.
      operationId: dissolveLegalHoldSnapshots
      parameters:
        - description: ID of the data source.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DissolveLegalHoldDefinition"
        description: An object that contains the IDs of the snapshots to remove from legal hold status.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DissolveLegalHoldResponse"
          description: List of snapshots whose legal holds have been successfully dissolved.
      summary: Dissolve a collection of snapshots of specified data source from Legal Hold
      tags:
        - /legal_hold
      x-group: legal_hold
  /legal_hold/snapshot:
    get:
      description: Get summary for snapshots under legal hold. If object_id is passed, return summary information only for snapshots of the object under legal hold else return summary for all snapshots under legal hold.
      operationId: queryLegalHold
      parameters:
        - description: Limit the list to snapshot for the particular object.
          in: query
          name: object_id
          required: false
          schema:
            type: string
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: An integer that specifies a number of initial matches to ignore.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Limits the list to objects that match a specified value for the object name.
          in: query
          name: object_name
          required: false
          schema:
            type: string
        - description: Limits the list to objects that match a specified type.
          in: query
          name: object_type
          required: false
          schema:
            type: string
        - description: Limits the list to snapshots with holds created before a specified date.
          in: query
          name: before_date
          required: false
          schema:
            format: date-time
            type: string
        - description: Limits the list to snapshots with holds created after a specified date.
          in: query
          name: after_date
          required: false
          schema:
            format: date-time
            type: string
        - description: Limits the list to snapshots which were placed on legal hold before a specified date.
          in: query
          name: placed_on_hold_before_date
          required: false
          schema:
            format: date-time
            type: string
        - description: Limits the list to snapshots which were placed on legal hold after a specified date.
          in: query
          name: placed_on_hold_after_date
          required: false
          schema:
            format: date-time
            type: string
        - description: The attribute used to sort summary information. The optional parameter **_sort_order_** specifies ascending or descending sort order.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - SnapshotTime
              - PlaceOnHoldTime
              - SnapshotType
            type: string
        - description: Specifies ascending or descending sort order. Summary results are sorted in ascending order when this parameter is not specified.
          in: query
          name: sort_order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
        - description: Specifies the type of snapshots to be returned.
          in: query
          name: snapshot_type
          required: false
          schema:
            enum:
              - OnDemand
              - Scheduled
              - Protected
              - Unprotected
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LegalHoldSummaryListResponse"
          description: Summary information for legal holds.
      summary: Get snasphots held under legal hold
      tags:
        - /legal_hold
      x-group: legal_hold
    post:
      description: Places a snapshot on legal hold by specifying the hold requirements.
      operationId: applyLegalHold
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplyLegalHoldDefinition"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LegalHoldSummary"
          description: Summary of the hold which has just been created.
      summary: Apply a Legal Hold
      tags:
        - /legal_hold
      x-group: legal_hold
  "/managed_volume/snapshot/export/{id}/script":
    post:
      description: Start an asynchronous job to generate and download a script to unify export paths across channels in managed volume export.
      operationId: createManagedVolumeGenerateScriptJob
      parameters:
        - description: ID of snapshot export.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of an asynchronous job to generate unified view script.
      summary: Generate and download unified view script
      tags:
        - /managed_volume
      x-group: managed_volume
  /mfa/rsa/server:
    get:
      description: Get RSA server configuration.
      operationId: queryRsaMfaServers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RsaMfaServerDetailListResponse"
          description: Configuration summary of known RSA servers.
      summary: Get RSA server configuration
      tags:
        - /mfa/rsa
      x-group: mfa
    post:
      description: Register a new RSA server using specified configuration.
      operationId: createRsaMfaServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RsaMfaServerConfig"
        description: Configuration of RSA server.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RsaMfaServerDetail"
          description: Added a new RSA server.
      summary: Register a new RSA server
      tags:
        - /mfa/rsa
      x-group: mfa
  "/mfa/rsa/server/{id}":
    delete:
      description: Delete RSA server configuration.
      operationId: deleteRsaMfaServer
      parameters:
        - description: ID of the RSA server.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: RSA server configuration removed.
      summary: Delete RSA server
      tags:
        - /mfa/rsa
      x-group: mfa
      x-rk-block-api-tokens: true
    get:
      description: Get RSA server configuration.
      operationId: getRsaMfaServer
      parameters:
        - description: ID of the RSA server.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RsaMfaServerDetail"
          description: Configuration summary of known RSA servers.
      summary: Get RSA server configuration
      tags:
        - /mfa/rsa
      x-group: mfa
    patch:
      description: Update an existing RSA server using specified configuration.
      operationId: updateRsaMfaServer
      parameters:
        - description: ID of the RSA server.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RsaMfaServerConfigUpdate"
        description: Configuration of RSA server.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RsaMfaServerDetail"
          description: Updated RSA server configuration.
      summary: Update RSA server configuration
      tags:
        - /mfa/rsa
      x-group: mfa
      x-rk-block-api-tokens: true
  /mssql/availability_group:
    get:
      description: Returns a list of summary information for Microsoft SQL availability groups.
      operationId: queryMssqlAvailabilityGroupV1
      parameters:
        - description: Filter by primary cluster.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlAvailabilityGroupSummaryListResponse"
          description: Returned if the query was successful.
      summary: Returns summary information for Microsoft SQL availability groups
      tags:
        - /mssql
      x-group: mssql_availability_group
  "/mssql/availability_group/{id}":
    get:
      description: Returns a detailed view of a Microsoft SQL availability group.
      operationId: getMssqlAvailabilityGroupV1
      parameters:
        - description: ID of the Microsoft SQL availability group to fetch.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlAvailabilityGroupDetail"
          description: Returned if the query was successful.
      summary: Returns detailed information for a Microsoft SQL availability group
      tags:
        - /mssql
      x-group: mssql_availability_group
    patch:
      description: Update a Microsoft SQL availability group with the specified properties.
      operationId: updateMssqlAvailabilityGroupV1
      parameters:
        - description: ID of the Microsoft SQL availability group to update.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MssqlAvailabilityGroupUpdate"
        description: Properties to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlAvailabilityGroupDetail"
          description: Returned if the update was successful.
      summary: Update a Microsoft SQL availability group
      tags:
        - /mssql
      x-group: mssql_availability_group
  /mssql/db:
    get:
      description: Returns a list of summary information for Microsoft SQL databases.
      operationId: queryMssqlDb
      parameters:
        - description: Filter by Microsoft SQL instance.
          in: query
          name: instance_id
          required: false
          schema:
            type: string
        - description: Filter by the `id` of an Always On Availability Group.
          in: query
          name: availability_group_id
          required: false
          schema:
            type: string
        - description: Filter by effective SLA domain.
          in: query
          name: effective_sla_domain_id
          required: false
          schema:
            type: string
        - description: Filter by primary cluster.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Filter by a substring of the database name.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: SLA Assignment of the database.
          in: query
          name: sla_assignment
          required: false
          schema:
            type: string
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: An integer that specifies a number of initial matches to ignore.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Filter database summary information by the value of the `isRelic` field.
          in: query
          name: is_relic
          required: false
          schema:
            type: boolean
        - description: Filter database summary information by the value of the `isLiveMount` field.
          in: query
          name: is_live_mount
          required: false
          schema:
            type: boolean
        - description: Filter database summary information by the value of the `isLogShippingSecondary` field.
          in: query
          name: is_log_shipping_secondary
          required: false
          schema:
            type: boolean
        - description: Specifies the SQL Server Database attribute to use in sorting the summary information. Performs an ASCII sort using the specified attribute, in the order specified by sort_order.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - copyOnly
              - effectiveSlaDomainName
              - logBackupRetentionHours
              - name
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
        - description: Include backup task information in response.
          in: query
          name: include_backup_task_info
          required: false
          schema:
            default: false
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlDbSummaryListResponse"
          description: Returned if the query was successful.
      summary: Get summary information for SQL Server databases
      tags:
        - /mssql
      x-group: mssql
  /mssql/db/bulk:
    patch:
      description: Update multiple Microsoft SQL databases with the specified properties.
      operationId: bulkUpdateMssqlDbV1
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/MssqlDbUpdateId"
              type: array
        description: Properties to update for each database.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MssqlDbDetail"
                type: array
          description: Returns a detailed view of all updated databases.
      summary: Update multiple Microsoft SQL databases
      tags:
        - /mssql
      x-group: mssql
  /mssql/db/bulk/snapshot:
    post:
      description: Take an on-demand backup of one or more Microsoft SQL databases. Set the forceFullSnapshot property to true to force a full snapshot for every database that is specified. Only one snapshot will be taken for each database, even if a database is included multiple times in the fields of the request body. To check the result of the request, poll /mssql/request/{id}.
      operationId: createOnDemandMssqlBatchBackupV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MssqlBatchBackupJobConfig"
        description: Configuration for the on-demand backups.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Returns the async request for the initiated on-demand backups.
      summary: Take an on-demand backup of multiple Microsoft SQL databases
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/bulk/snapshot/{id}":
    get:
      description: Returns the details for an on-demand backup of multiple Microsoft SQL databases. This only returns details for requests that have finished successfully. To check the status of the request, poll /mssql/request/{id}.
      operationId: getOnDemandMssqlBatchBackupResultV1
      parameters:
        - description: ID of the on-demand backup request.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlBatchBackupSummary"
          description: Result of the on-demand backup request.
      summary: Returns details for an on-demand backup of multiple Microsoft SQL databases
      tags:
        - /mssql
      x-group: mssql
  /mssql/db/count:
    get:
      description: Returns a count of Microsoft SQL databases.
      operationId: countMssqlDbV1
      parameters:
        - description: Include only instances that belong to this root.
          in: query
          name: root_id
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProtectedObjectsCount"
          description: Returned if the query was successful.
      summary: Returns a count of Microsoft SQL databases
      tags:
        - /mssql
      x-group: mssql
  /mssql/db/defaults:
    get:
      description: The default properties are Log Backup Frequency (in seconds), Log Retention Time (in hours) and CBT status. New databases added to the Rubrik cluster are provided the log backup frequency value and log backup retention value by default. New hosts added to the Rubrik cluster are provided the CBT status by default.
      operationId: getDefaultDbPropertiesV1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlDbDefaults"
          description: Returns the current default properties.
      summary: Returns the current default properties for Microsoft SQL databases
      tags:
        - /mssql
      x-group: mssql
    patch:
      description: The default properties are Log Backup Frequency (in seconds), Log Retention Time (in hours) and CBT status. New databases added to the Rubrik cluster are provided the log backup frequency value and log backup retention value by default. New hosts added to the Rubrik cluster are provided the CBT status by default.
      operationId: updateDefaultDbPropertiesV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MssqlDbDefaultsUpdate"
        description: Updated default properties.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlDbDefaults"
          description: Returns the updated default properties.
      summary: Update the default properties for Microsoft SQL databases
      tags:
        - /mssql
      x-group: mssql
  /mssql/db/log_shipping:
    get:
      description: Retrieves all log shipping configuration objects. Results can be filtered and sorted.
      operationId: queryLogShippingConfigurations
      parameters:
        - description: ID of a primary database object.
          in: query
          name: primary_database_id
          required: false
          schema:
            type: string
        - description: Filter log shipping configuration objects by performing an infix search using the name of a primary database.
          in: query
          name: primary_database_name
          required: false
          schema:
            type: string
        - description: Filter log shipping configuration objects by performing an infix search using the name of a secondary database.
          in: query
          name: secondary_database_name
          required: false
          schema:
            type: string
        - description: Filter log shipping configuration objects by performing an infix search using the location string value (host/instance) for a secondary database.
          in: query
          name: location
          required: false
          schema:
            type: string
        - description: Filter log shipping configuration objects based on the status value for the secondary database.
          in: query
          name: status
          required: false
          schema:
            enum:
              - OK
              - Broken
              - Initializing
              - Stale
            type: string
        - description: Limit the summary information to a specified maximum number of results.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Starting position in the list of results contained in the response. The summary information includes the specified numbered result and all higher numbered results.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Specifies an attribute used to ASCII-sort the results. Sorting by the last_applied attribute represents the timestamp as an ISO 8601-encoded string.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - secondaryDatabaseName
              - primaryDatabaseName
              - lastAppliedPoint
              - location
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlLogShippingSummaryListResponse"
          description: Summary list of descendant objects.
      summary: Get log shipping configurations
      tags:
        - /mssql
      x-group: mssql_log_shipping
  "/mssql/db/log_shipping/{id}":
    delete:
      description: Deletes the specified log shipping configuration.
      operationId: deleteLogShippingConfiguration
      parameters:
        - description: ID of a log shipping configuration object.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Boolean value that determines whether to attempt to delete the secondary database associated with the specified log shipping configuration. The default value is false. When set to false, no attempt is made to delete the secondary database. When set to true, starts an asynchronous job to delete the secondary database.
          in: query
          name: delete_secondary_database
          required: false
          schema:
            type: boolean
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Returns with the request ID of an async job to delete a log shipping configuration object and, if specified, a secondary database.
      summary: Delete a specified log shipping configuration
      tags:
        - /mssql
      x-group: mssql_log_shipping
    get:
      description: Retrieves a particular log shipping configuration with all the details of the configuration.
      operationId: getLogShippingConfiguration
      parameters:
        - description: ID of a log shipping configuration.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlLogShippingDetail"
          description: Returned when the request for the log shipping configuration details is successful.
      summary: Get a log shipping configuration
      tags:
        - /mssql
      x-group: mssql_log_shipping
    patch:
      description: Updates a specified log shipping configuration.
      operationId: updateLogShippingConfiguration
      parameters:
        - description: ID of a log shipping configuration object.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MssqlLogShippingUpdate"
        description: Configuration parameters for the update operation.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Returns the request ID of an asynchronous job that updates a log shipping configuration object.
      summary: Update a specified log shipping configuration
      tags:
        - /mssql
      x-group: mssql_log_shipping
  "/mssql/db/log_shipping/{id}/reseed":
    post:
      description: Starts an asynchronous job to reseed a secondary database. Reseeding restores the data in the secondary database based on a log shipping configuration.
      operationId: reseedSecondary
      parameters:
        - description: ID of the log shipping configuration object for the specified secondary database.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MssqlLogShippingReseedConfig"
        description: Configuration parameters for the reseed operation.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Returns with a request ID for the async job to reseed a secondary database.
      summary: Reseed a secondary database
      tags:
        - /mssql
      x-group: mssql_log_shipping
  /mssql/db/mount:
    get:
      description: Returns a list with summary information for all Live Mount SQL Server databases.
      operationId: queryMssqlMount
      parameters:
        - description: Filters by the ID of the source SQL Server database.
          in: query
          name: source_database_id
          required: false
          schema:
            type: string
        - description: Filters by the name of the source SQL Server database using infix search.
          in: query
          name: source_database_name
          required: false
          schema:
            type: string
        - description: Filters by the ID of the target SQL Server instance.
          in: query
          name: target_instance_id
          required: false
          schema:
            type: string
        - description: Filters by the name of the mounted SQL Server database using infix search.
          in: query
          name: mounted_database_name
          required: false
          schema:
            type: string
        - description: Specifies the SQL Server Live Mount attribute to use in sorting the summary information. Performs an ASCII sort using the specified attribute, in the order specified by sort_order.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - sourceDatabaseName
              - sourceRecoveryPoint
              - mountedDatabaseName
              - creationDate
            type: string
        - description: Specifies the sort order, either ascending or descending. Default order is ascending.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
        - description: Returns the portion of the ordered list that starts after the element specified by the offset number.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Sets the maximum number of a elements to include in the data array of the response.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlMountSummaryListResponse"
          description: Returns summary information for all Live Mounts.
      summary: Get summary information for all Live Mounts SQL Server databases
      tags:
        - /mssql
      x-group: mssql_mount
  "/mssql/db/mount/{id}":
    delete:
      description: Create an async request to delete a Live Mount of a SQL Server database. Poll the task status by using /mssql/request/{id}.
      operationId: createMssqlUnmount
      parameters:
        - description: ID of the Live Mount to delete.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Remove all data within the Rubrik cluster related to the Live Mount, even if the SQL Server database cannot be contacted. Default value is false.
          in: query
          name: force
          required: false
          schema:
            type: boolean
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Returns the task object for the async request to delete the Live Mount of a SQL Server database.
      summary: Delete a Live Mount of a SQL Server database
      tags:
        - /mssql
      x-group: mssql_mount
    get:
      description: Returns detailed information for the specified Live Mount of a SQL Server database.
      operationId: getMssqlMount
      parameters:
        - description: ID of the Live Mount to fetch.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlMountDetail"
          description: Returns detailed information for a specified Live Mount of a SQL Server database.
      summary: Get detailed information for a Live Mount of a SQL Server database
      tags:
        - /mssql
      x-group: mssql_mount
  "/mssql/db/recoverable_range/download/{id}":
    get:
      description: Get the details of the progress made in deleting recoverable ranges. The recoverable ranges to delete are those specified by the DELETE request to /mssql/db/{id}/recoverable_range/download which yielded the response with the job id.
      operationId: getDeleteMssqlDbRecoverableRangesStatusV1
      parameters:
        - description: Job ID of the deletion for which to check progress.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalJobInstanceDetail"
          description: Returns the progress made in deleting the recoverable ranges.
      summary: Get the deletion status of downloaded recoverable ranges
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/snapshot/{id}":
    get:
      description: Returns detailed information about a Microsoft SQL database snapshot.
      operationId: getMssqlDbSnapshot
      parameters:
        - description: ID of the snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlDbSnapshotDetail"
          description: Returns details about a Microsoft SQL database snapshot.
      summary: Get details information about a Microsoft SQL database snapshot
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/{id}":
    get:
      description: Returns a detailed view of a Microsoft SQL database.
      operationId: getMssqlDb
      parameters:
        - description: ID of the Microsoft SQL database to fetch.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlDbDetail"
          description: Returned if the query was successful.
      summary: Get detailed information for a Microsoft SQL database
      tags:
        - /mssql
      x-group: mssql
    patch:
      description: Update a Microsoft SQL database with the specified properties.
      operationId: updateMssqlDb
      parameters:
        - description: ID of the Microsoft SQL database to update.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MssqlDbUpdate"
        description: Properties to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlDbDetail"
          description: Returned if the update was successful.
      summary: Update a Microsoft SQL database
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/{id}/browse":
    post:
      description: |
        When a recovery point is set, this API endpoint returns the snapshot and list of logs needed to restore the database to the recovery point. When a time range or LSN range is specified, this API endpoint returns the snapshots and logs that overlap the specified range.
        Specify only a recovery point or a range. Specify only LSNs or times.
        This endpoint is only used to fetch data, but uses POST instead of GET due to limitations on parameters used in the body of a GET request. The parameter set for this endpoint is shared with the download_file endpoint.
      operationId: browseMssqlBackupFiles
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MssqlBackupSelection"
        description: Configuration for the browse request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlBackups"
          description: List of backups requested.
      summary: List snapshots and logs from a Microsoft SQL database
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/{id}/compatible_instance":
    get:
      description: Returns all compatible instances for export for the specified recovery time.
      operationId: getCompatibleMssqlInstancesV1
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Time, in ISO8601 format, to recover to. For example "2016-01-01T01:23:45.678Z". If this is not specified, the latest recoverable time is used.
          in: query
          name: recovery_time
          required: false
          schema:
            format: date-time
            type: string
        - description: Recovery type.
          in: query
          name: recovery_type
          required: true
          schema:
            enum:
              - Mount
              - Export
              - Restore
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlInstanceSummaryListResponse"
          description: Returns summary information for all compatible Microsoft SQL instances for export.
      summary: Get compatible instances for the recovery of a Microsoft SQL database
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/{id}/download":
    post:
      description: |
        Starts an asynchronous request to download snapshots and logs from archival for a given database and recovery point.
        If the specified point in time is already available locally, this endpoint throws an error.
      operationId: downloadFromArchive
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MssqlDownloadFromArchiveConfig"
        description: Configuration for the archive download request.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the download request.
      summary: Download snapshots and log backups from archival
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/{id}/download_files":
    post:
      description: |
        Starts an asynchronous request to download a set of backup files as a single compressed zipfile.
        When a recovery point is set, this API endpoint returns the snapshot and list of logs that Rubrik CDM would use to restore the database to the recovery point. When a time range or LSN range is specified, this API endpoint returns the snapshots and logs that overlap the specified range.
        Specify only a point in time or a range. Specify only LSNs or times.
      operationId: createDownloadMssqlBackupFiles
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MssqlBackupSelection"
        description: Configuration for a download files job.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the download request.
      summary: Download snapshots and logs backups from a Microsoft SQL Database
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/{id}/download_files_by_id":
    post:
      description: Downloads a list of snapshot and log backups from a Microsoft SQL database.
      operationId: createDownloadMssqlBackupFilesById
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DownloadMssqlBackupFilesByIdJobConfig"
        description: Configuration for a download files by id job.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the download request.
      summary: Downloads a list of snapshot and log backups from a Microsoft SQL database
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/{id}/export":
    post:
      description: Create a request to export a Microsoft SQL database. To check the result of the request, poll /mssql/request/{id}.
      operationId: createExportMssqlDb
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportMssqlDbJobConfig"
        description: Configuration for the export.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Returns the async request for the initiated export.
      summary: Export a Microsoft SQL database to a new location
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/{id}/log_backup":
    post:
      description: Take an on-demand log backup for a Microsoft SQL database.
      operationId: createOnDemandMssqlLogBackup
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Returns the async request for the initiated on-demand log backup.
      summary: Take an on-demand log backup for a Microsoft SQL database
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/{id}/log_shipping":
    post:
      description: Create a log shipping configuration between a specified primary database and a specified secondary database. The transaction logs from the primary database are regularly restored to the secondary database in order to maintain the secondary database as a point-in-time copy of the primary database. The primary database must have log backups configured, and it must be in the full or bulk-logged recovery model.
      operationId: createLogShippingConfiguration
      parameters:
        - description: ID of the primary database object.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MssqlLogShippingCreateConfig"
        description: Object containing the values of a log shipping configuration.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Returned when the specified log shipping configuration is successfully applied.
      summary: Create a log shipping configuration
      tags:
        - /mssql
      x-group: mssql_log_shipping
  "/mssql/db/{id}/missed_recoverable_range":
    get:
      description: Retrieve a list of missed recoverable ranges for a Microsoft SQL database. For each run of one type of error, the first and last occurrence of the error are given.
      operationId: getMssqlDbMissedRecoverableRanges
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Filter the missed ranges to end after this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678".
          in: query
          name: after_time
          required: false
          schema:
            format: date-time
            type: string
        - description: Filter the missed ranges to start before this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678".
          in: query
          name: before_time
          required: false
          schema:
            format: date-time
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlMissedRecoverableRangeListResponse"
          description: Returns the missed recoverable ranges for the Microsoft SQL database.
      summary: Get missed recoverable ranges of a Microsoft SQL database
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/{id}/missed_snapshot":
    get:
      description: Returns a list of summary information for the missed snapshots of a Microsoft SQL database, including the time of day and the locations where the snapshot was missed.
      operationId: getMissedMssqlDbSnapshots
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Filter snapshots to those missed on or after this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678".
          in: query
          name: after_time
          required: false
          schema:
            format: date-time
            type: string
        - description: Filter snapshots to those missed on or before this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678".
          in: query
          name: before_time
          required: false
          schema:
            format: date-time
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissedSnapshotListResponse"
          description: Returns details about the missed snapshots.
      summary: Get summary information for missed snapshots of a SQL database
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/{id}/mount":
    post:
      description: Create an asynchronous request to create a Live Mount SQL Server database. Poll the task status by using /mssql/request/{id}.
      operationId: createMssqlMount
      parameters:
        - description: ID of the SQL Server database.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MountMssqlDbConfig"
        description: Configuration for the Live Mount.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Returns the asynchronous task object for the Live Mount request.
      summary: Live Mount SQL Server database from a point in time copy
      tags:
        - /mssql
      x-group: mssql_mount
  "/mssql/db/{id}/recoverable_range":
    get:
      description: Retrieve the recoverable ranges for a specified Microsoft SQL database. A begin and/or end timestamp can be provided to retrieve only the ranges that fall within the window.
      operationId: getMssqlDbRecoverableRanges
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Filter ranges to end after this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678Z".
          in: query
          name: after_time
          required: false
          schema:
            format: date-time
            type: string
        - description: Filter ranges to start before this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678".
          in: query
          name: before_time
          required: false
          schema:
            format: date-time
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlRecoverableRangeListResponse"
          description: Returns the recoverable ranges for the Microsoft SQL database.
      summary: Get recoverable ranges of a Microsoft SQL database
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/{id}/recoverable_range/download":
    delete:
      description: Deletes all local snapshots and logs that have previously been downloaded. Provide a begin or end time to delete only the downloaded snapshots and logs that fall within this time frame. The time is relative to when the snapshot or log backup was originally taken, not downloaded. Parts of the window may not be deleted if certain log files must be kept to preserve times outside the window. Data is deleted in the background. To check the status of the deletion, poll /mssql/db/recoverable_range/download/{id}.
      operationId: deleteDownloadedMssqlDbRecoverableRangesV1
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Delete only the downloaded snapshots and logs taken after this time. The date-time string should be in ISO8601 format. For example, "2016-01-01T01:23:45.678".
          in: query
          name: after_time
          required: false
          schema:
            format: date-time
            type: string
        - description: Delete only the downloaded snapshots and logs taken before this time. The date-time string should be in ISO8601 format. For example, "2016-01-01T01:23:45.678".
          in: query
          name: before_time
          required: false
          schema:
            format: date-time
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobScheduledResponse"
          description: Returns the job ID to check the progress of deleting the downloaded snapshots and logs.
      summary: Delete downloaded recoverable ranges of a Microsoft SQL database
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/{id}/restore":
    post:
      description: Create a request to restore a SQL Server database. To check the result of the request, poll /mssql/request/{id}.
      operationId: createRestoreMssqlDb
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestoreMssqlDbJobConfig"
        description: Restore configuration.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Returns the async request for the initiated restore.
      summary: Restore a Microsoft SQL database
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/{id}/restore_estimate":
    get:
      description: Provides an estimate of resources needed for the specified restore or export operation.
      operationId: mssqlRestoreEstimateV1
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Time, in ISO8601 date-time format, to recover to. For example, "2016-01-01T01:23:45.678". This value or the LSN are required.
          in: query
          name: time
          required: false
          schema:
            format: date-time
            type: string
        - description: LSN to recover to. This value or the LSN are required.
          in: query
          name: lsn
          required: false
          schema:
            type: string
        - description: Recovery fork GUID of LSN to recover to. Meaningful only when lsn is specified.
          in: query
          name: recovery_fork_guid
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlRestoreEstimateResult"
          description: Returns the esimate for a restore or export to the specified recovery point.
      summary: Returns a size estimate for a restore or export
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/{id}/restore_files":
    get:
      description: Provides a list of database files to be restored for the specified restore or export operation.
      operationId: mssqlGetRestoreFilesV1
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Time, in ISO8601 date-time format, to recover to. For example, "2016-01-01T01:23:45.678". This value or the LSN are required.
          in: query
          name: time
          required: false
          schema:
            format: date-time
            type: string
        - description: LSN to recover to. This value or the time are required.
          in: query
          name: lsn
          required: false
          schema:
            type: string
        - description: Recovery fork GUID of LSN to recover to. Meaningful only when lsn is specified.
          in: query
          name: recovery_fork_guid
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MssqlRestoreFile"
                type: array
          description: Database files to be restored.
      summary: Returns a list all database files to be restored
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/{id}/snappable_id":
    get:
      description: Returns the snappableId for a Microsoft SQL database.
      operationId: mssqlGetSnappableIdV1
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlSnappableId"
          description: Returns the snappableId.
      summary: Returns the snappableId for a Microsoft SQL database
      tags:
        - /mssql
      x-group: mssql
  "/mssql/db/{id}/snapshot":
    delete:
      description: Deletes all snapshots of a Microsoft SQL database. The database must be unprotected for the operation to succeed.
      operationId: deleteMssqlDbSnapshots
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Returned if all snapshots for the Microsoft SQL database were successfully removed.
      summary: Delete all snapshots of a Microsoft SQL database
      tags:
        - /mssql
      x-group: mssql
    get:
      description: Returns a list of summary information for snapshots of a Microsoft SQL database.
      operationId: queryMssqlDbSnapshot
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Filter snapshots to those taken on or after this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678".
          in: query
          name: after_time
          required: false
          schema:
            format: date-time
            type: string
        - description: Filter snapshots to those taken before or on this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678".
          in: query
          name: before_time
          required: false
          schema:
            format: date-time
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlDbSnapshotSummaryListResponse"
          description: Returns summary information for snapshots.
      summary: Get summary information for snapshots of a Microsoft SQL database
      tags:
        - /mssql
      x-group: mssql
    post:
      description: Take an on-demand backup of a Microsoft SQL database. The forceFullSnapshot property can be set to true to force a full snapshot. To check the result of the request, poll /mssql/request/{id}.
      operationId: createOnDemandMssqlBackup
      parameters:
        - description: ID of the Microsoft SQL database.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MssqlBackupJobConfig"
        description: Configuration for the on-demand backup.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Returns the async request for the initiated on-demand backup.
      summary: Take an on-demand backup of a Microsoft SQL database
      tags:
        - /mssql
      x-group: mssql
  "/mssql/hierarchy/{id}":
    get:
      description: |
        Retrieve details for the specified object in the SQL Server hierarchy.
      operationId: getMssqlHierarchyObject
      parameters:
        - description: ID of the SQL Server hierarchy object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlHierarchyObjectSummary"
          description: Details of the hierarchy object.
      summary: Get summary of a SQL Server hierarchy object
      tags:
        - /mssql
      x-group: mssql
  "/mssql/hierarchy/{id}/children":
    get:
      description: Retrieve the list of immediate descendant objects for the specified parent.
      operationId: getMssqlHierarchyChildren
      parameters:
        - description: |
            ID of the parent SQL Server hierarchy object. To get top-level nodes, use **root** as the ID.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Filter by the ID of the effective SLA Domain.
          in: query
          name: effective_sla_domain_id
          required: false
          schema:
            type: string
        - description: |
            Filter by a comma-separated list of node object types.
          explode: false
          in: query
          name: object_type
          required: false
          schema:
            items:
              enum:
                - Host
                - MssqlInstance
                - MssqlDatabase
                - WindowsCluster
                - MssqlAvailabilityGroup
              type: string
            type: array
          style: form
        - description: Filter by primary cluster ID, or **local**.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: |
            An integer that specifies the number of initial matches to ignore.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Filter children by provided name.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Filter by the value of the `isRelic` field for nodes with object type MssqlDatabase.
          in: query
          name: is_relic
          required: false
          schema:
            type: boolean
        - description: Filter database by the value of the `isLiveMount` field for nodes with object type MssqlDatabase.
          in: query
          name: is_live_mount
          required: false
          schema:
            type: boolean
        - description: Filter by the value of the `isLogShippingSecondary` field for nodes with object type MssqlDatabase.
          in: query
          name: is_log_shipping_secondary
          required: false
          schema:
            type: boolean
        - description: Filter by the value of the `isClustered` field for nodes with object type MssqlDatabase or MssqlInstance.
          in: query
          name: is_clustered
          required: false
          schema:
            type: boolean
        - description: Boolean that filters top-level nodes with the Host or WindowsCluster object type by whether or not the nodes have children MssqlInstance nodes. When this value is 'true,' the filter shows only nodes with children MssqlInstance nodes. When this value is 'false,' the filter shows only nodes without children MssqlInstance nodes.
          in: query
          name: has_instances
          required: false
          schema:
            type: boolean
        - description: Filter by SLA assignment type.
          in: query
          name: sla_assignment
          required: false
          schema:
            enum:
              - Derived
              - Direct
              - Unassigned
            type: string
        - description: Attribute to sort the results on.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - name
              - descendantCount.MssqlInstance
              - descendantCount.MssqlDatabase
              - logBackupRetentionHours
              - copyOnly
              - effectiveSlaDomainName
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
        - description: Determines whether SQL Server instances are fetched with additional privilege checks.
          in: query
          name: snappable_status
          required: false
          schema:
            enum:
              - Protectable
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlHierarchyObjectSummaryListResponse"
          description: Summary list of children objects.
      summary: Get list of immediate descendant objects
      tags:
        - /mssql
      x-group: mssql
  "/mssql/hierarchy/{id}/descendants":
    get:
      description: Retrieve the list of descendant objects for the specified parent.
      operationId: getMssqlHierarchyDescendants
      parameters:
        - description: |
            ID of the parent SQL server hierarchy object. To get top-level nodes, use **root** as the ID.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Filter by the ID of the effective SLA Domain.
          in: query
          name: effective_sla_domain_id
          required: false
          schema:
            type: string
        - description: |
            Filter by a comma-separated list of node object types.
          explode: false
          in: query
          name: object_type
          required: false
          schema:
            items:
              enum:
                - Host
                - MssqlInstance
                - MssqlDatabase
                - WindowsCluster
                - MssqlAvailabilityGroup
              type: string
            type: array
          style: form
        - description: Filter by primary cluster ID, or **local**.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: |
            An integer that specifies the number of initial matches to ignore.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Filter descendants by provided name.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Filter by the value of the `isRelic` field for nodes with MssqlDatabase as the value of the object type field.
          in: query
          name: is_relic
          required: false
          schema:
            type: boolean
        - description: Filter database by the value of the `isLiveMount` field for nodes with MssqlDatabase as the value of the object type field.
          in: query
          name: is_live_mount
          required: false
          schema:
            type: boolean
        - description: Filter by the value of the `isLogShippingSecondary` field for nodes with MssqlDatabase as the value of the object type field.
          in: query
          name: is_log_shipping_secondary
          required: false
          schema:
            type: boolean
        - description: Filter by the value of the `isClustered` field for nodes with object type MssqlDatabase or MssqlInstance.
          in: query
          name: is_clustered
          required: false
          schema:
            type: boolean
        - description: Boolean that filters top-level nodes with the Host or WindowsCluster object type by whether or not the nodes have children MssqlInstance nodes. When this value is 'true,' the filter shows only nodes with children MssqlInstance nodes. When this value is 'false,' the filter shows only nodes without children MssqlInstance nodes.
          in: query
          name: has_instances
          required: false
          schema:
            type: boolean
        - description: Filter by SLA Domain assignment type.
          in: query
          name: sla_assignment
          required: false
          schema:
            enum:
              - Derived
              - Direct
              - Unassigned
            type: string
        - description: Attribute to sort the results on.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - name
              - descendantCount.MssqlInstance
              - descendantCount.MssqlDatabase
              - logBackupRetentionHours
              - copyOnly
              - effectiveSlaDomainName
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
        - description: Determines whether SQL Server instances are fetched with additional privilege checks.
          in: query
          name: snappable_status
          required: false
          schema:
            enum:
              - Protectable
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlHierarchyObjectSummaryListResponse"
          description: Summary list of descendant objects.
      summary: Get list of descendant objects
      tags:
        - /mssql
      x-group: mssql
  /mssql/host/configuration:
    get:
      description: Returns a list of customized SQL Server host configurations.
      operationId: queryMssqlHostConfig
      parameters:
        - description: IDs of the hosts.
          explode: false
          in: query
          name: host_id
          required: false
          schema:
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlHostConfigurationWithHostIdListResponse"
          description: Summary of SQL Server host configurations.
      summary: Get the summary of SQL Server host configurations
      tags:
        - /mssql
      x-group: mssql
    post:
      description: Creates a SQL Server host configuration.
      operationId: createMssqlHostConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MssqlHostConfigurationWithHostId"
        description: Parameters for creating a SQL Server host configuration.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlHostConfiguration"
          description: Details of the new SQL Server host configuration.
      summary: Create a SQL Server host configuration
      tags:
        - /mssql
      x-group: mssql
  "/mssql/host/configuration/{host_id}":
    delete:
      description: Deletes the SQL Server host configuration. The host falls back to use values from the global configuration.
      operationId: deleteMssqlHostConfig
      parameters:
        - description: ID of the host.
          in: path
          name: host_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: SQL Server host configuration deleted successfully.
      summary: Delete the SQL Server host configuration
      tags:
        - /mssql
      x-group: mssql
    get:
      description: Returns the configuration for the specified SQL Server host.
      operationId: getMssqlHostConfig
      parameters:
        - description: ID of the host.
          in: path
          name: host_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlHostConfiguration"
          description: Configuration details of the specified SQL Server host.
      summary: Get the configuration for a specific host
      tags:
        - /mssql
      x-group: mssql
    patch:
      description: Updates the configuration for a specified host.
      operationId: updateMssqlHostConfig
      parameters:
        - description: ID of the SQL Server host to update the host configuration.
          in: path
          name: host_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MssqlHostConfiguration"
        description: SQL Server host configuration properties to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlHostConfiguration"
          description: Details of the updated SQL Server host configuration.
      summary: Update host configuration
      tags:
        - /mssql
      x-group: mssql
  /mssql/instance:
    get:
      description: Returns a list of summary information for Microsoft SQL instances.
      operationId: queryMssqlInstance
      parameters:
        - description: Include only instances that belong to this root.
          in: query
          name: root_id
          required: false
          schema:
            type: string
        - description: Limits the instances returned within one cluster specified by primary_cluster_id.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Determines whether SQL Server instances are fetched with additional privilege checks.
          in: query
          name: snappable_status
          required: false
          schema:
            enum:
              - Protectable
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlInstanceSummaryListResponse"
          description: Returned if the query was successful.
      summary: Get summary information for Microsoft SQL instances
      tags:
        - /mssql
      x-group: mssql
  /mssql/instance/count:
    get:
      description: Returns a count of all Microsoft SQL instances.
      operationId: countMssqlInstanceV1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountResponse"
          description: Returned if the query was successful.
      summary: Returns a count of Microsoft SQL instances
      tags:
        - /mssql
      x-group: mssql
  "/mssql/instance/{id}":
    get:
      description: Returns a detailed view of a Microsoft SQL instance.
      operationId: getMssqlInstance
      parameters:
        - description: ID of the Microsoft SQL instance.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlInstanceDetail"
          description: Returned if the query was successful.
      summary: Get detailed information for a Microsoft SQL instance
      tags:
        - /mssql
      x-group: mssql
    patch:
      description: Update a Microsoft SQL instance with specified properties.
      operationId: updateMssqlInstance
      parameters:
        - description: ID of the Microsoft SQL instance.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MssqlInstanceUpdate"
        description: Properties to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MssqlInstanceDetail"
          description: Returned if the update was successful.
      summary: Update a Microsoft SQL instance
      tags:
        - /mssql
      x-group: mssql
  "/mssql/request/{id}":
    get:
      description: Returns the task object for an async request related to SQL Server databases.
      operationId: getMssqlAsyncRequestStatus
      parameters:
        - description: ID of the async request.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the async request.
      summary: Get details for an async request
      tags:
        - /mssql
      x-group: mssql
  /mssql/sla_domain/assign:
    post:
      description: |
        Assigns SLA Domain properties to SQL Server objects. Hosts and Windows clusters cannot be assigned SLA Domains directly. The SLA Domains are instead applied to the SQL Server child objects within the Host or Windows Cluster object. Newly discovered SQL Server objects within a given Host or Windows Cluster object do not inherit SLA Domain properties from other child SQL Server objects with the same parent object.
      operationId: assignMssqlSlaProperties
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MssqlSlaDomainAssignInfo"
        description: Update information.
        required: true
      responses:
        "204":
          description: Successfully assigned SLA Domain properties.
      summary: Assign SLA properties to SQL Server objects
      tags:
        - /mssql
      x-group: mssql
  /oracle/aco_example_download_link:
    get:
      description: Link to download the Advanced Recovery Options example file which can be used to customize Oracle recoveries.
      operationId: getExampleAcoDownloadLink
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OracleFileDownloadLink"
          description: Link to download the example Advanced Recovery Options file.
      summary: Link to download the Advanced Recovery Options example file
      tags:
        - /oracle
      x-group: oracle_db
  /oracle/aco_parameter_list:
    get:
      description: Get the list of supported Advanced Cloning Options (ACO) parameters.
      operationId: getAcoParameterList
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OracleAcoParameterList"
          description: List of supported Advanced Cloning Options (ACO) parameters.
      summary: List of supported Advanced Cloning Options
      tags:
        - /oracle
      x-group: oracle_db
  "/oracle/data_guard_group/{id}":
    patch:
      description: Update properties of an Oracle Data Guard group object.
      operationId: updateOracleDataGuardGroup
      parameters:
        - description: ID assigned to an Oracle Data Guard group object.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OracleDataGuardGroupUpdate"
        description: Properties to use for the update of an Oracle Data Guard group object.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OracleDbDetail"
          description: Successfully updated the Oracle Data Guard group object.
      summary: Update an Oracle Data Guard group
      tags:
        - /oracle
      x-group: oracle_data_guard_group
  /oracle/db:
    get:
      description: Retrieves an array containing summary information about the Oracle database objects in the Rubrik cluster.
      operationId: queryOracleDbV1
      parameters:
        - description: Filters a response by making an infix comparison of the database name, SID, and tablespaces in the response with the specified value.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Limits the response to Oracle databases that are protected by the specified type of SLA Domain assignment.
          in: query
          name: sla_assignment
          required: false
          schema:
            enum:
              - Derived
              - Direct
              - Unassigned
            type: string
        - description: Filters by effective SLA Domain ID.
          in: query
          name: effective_sla_domain_id
          required: false
          schema:
            type: string
        - description: Limits the response to Oracle databases that have the specified primary cluster value.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Limits the response to Oracle databases that have the specified isRelic value.
          in: query
          name: is_relic
          required: false
          schema:
            type: boolean
        - description: Limits the response to Oracle databases that have the specified isLiveMount value.
          in: query
          name: is_live_mount
          required: false
          schema:
            type: boolean
        - description: Limits the summary information to the specified number of matches. Optionally, it can be used with offset to begin the count of matches at the number specified in the offset parameter, and with sort_by to sort the results by the specified attribute.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Determines the elements to include in the response starting with the element at the index number specified here. Optionally used with limit to enable paging of the results by retrieving a smaller number of elements in the response.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Specifies a comma-separated list of attributes to use in sorting the matches. Performs an ASCII sort of the values in the response using each specified attribute, in the order specified.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - effectiveSlaDomainName
              - name
            type: string
        - description: Specifies the ascending or descending order to sort the elements in the response by the attributes specified in the sort_by parameter.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
        - description: Specifies whether to include the backup task information in the response.
          in: query
          name: include_backup_task_info
          required: false
          schema:
            default: false
            type: boolean
        - description: Limits the response to Oracle databases that have the specified value for the isDataGuardGroup flag.
          in: query
          name: is_data_guard_group
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OracleDbSummaryListResponse"
          description: Summary of Oracle databases.
      summary: Get summary information for Oracle databases
      tags:
        - /oracle
      x-group: oracle_db
  /oracle/db/bulk:
    patch:
      description: Update the properties of the objects that represent the specified Oracle Databases.
      operationId: bulkUpdateOracleDb
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OracleBulkUpdate"
        description: Properties to use for the update of Oracle Database objects.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkOracleDbDetails"
          description: Successfully updated Oracle Database objects.
      summary: Update Oracle Databases
      tags:
        - /oracle
      x-group: oracle_db
  "/oracle/db/{id}":
    get:
      description: Retrieves detailed information for a specified Oracle database object.
      operationId: getOracleDbV1
      parameters:
        - description: ID of an Oracle database object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OracleDbDetail"
          description: Detailed information for the specified Oracle database.
      summary: Get Oracle database information
      tags:
        - /oracle
      x-group: oracle_db
    patch:
      description: Updates the properties of a specified Oracle database object.
      operationId: updateOracleDbV1
      parameters:
        - description: ID of an Oracle database object.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OracleUpdate"
        description: Properties of the Oracle database object to be updated. object.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OracleDbDetail"
          description: Detailed information for the updated Oracle database.
      summary: Update an Oracle database
      tags:
        - /oracle
      x-group: oracle_db
  "/oracle/db/{id}/downloaded_snapshots":
    delete:
      description: Requests an asynchronous job to expire downloaded database snapshots taken during a specified time period as well as log snapshots that contain any logs with timestamps within that time period.
      operationId: deleteDownloadedSnapshots
      parameters:
        - description: ID of the Oracle database.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Uses the ISO 8601 format to specify the start of the time period used by the asynchronous snapshot expiration job, as in the example "2016-01-01T01:23:45.678".
          in: query
          name: after_time
          required: false
          schema:
            format: date-time
            type: string
        - description: Uses the ISO 8601 format to specify the end of the time period used by the asynchronous snapshot expiration job, as in the example "2016-01-01T01:23:45.678".
          in: query
          name: before_time
          required: false
          schema:
            format: date-time
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: The request status of the asynchronous job that deletes downloaded Oracle database snapshots and log snapshots.
      summary: Delete downloaded Oracle database snapshots and log snapshots
      tags:
        - /oracle
      x-group: oracle_db
  "/oracle/db/{id}/restore_estimate":
    get:
      description: The estimated size of the data to download from an archival location in order to perform a specified restore or export operation.
      operationId: oracleRestoreEstimate
      parameters:
        - description: ID of the Oracle database.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: ID of the snapshot to recover to.
          in: query
          name: snapshot_id
          required: false
          schema:
            type: string
        - description: The date and time for the recovery restore point, specified in the ISO 8601 format, as in the example "2016-01-01T01:23:45.678".
          in: query
          name: recovery_time
          required: false
          schema:
            format: date-time
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OracleRestoreEstimateResult"
          description: Returns the estimate for a restore or export to the specified recovery point.
      summary: Get a size estimate for a restore or export
      tags:
        - /oracle
      x-group: oracle_db
  "/oracle/db/{id}/validate":
    post:
      description: Queue a job to validate Oracle backups for a database snapshot or a specified timestamp.
      operationId: createOracleValidateBackupJob
      parameters:
        - description: ID of the database to be validated.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OracleValidateConfig"
        description: Configuration parameters for a job to validate an Oracle backups.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Request status for the queued job to validate Oracle backups for a specified timestamp.
      summary: Validate Oracle database backups
      tags:
        - /oracle
      x-group: oracle_db
  /oracle/host/bulk:
    patch:
      description: Update properties to Oracle Host objects.
      operationId: bulkUpdateOracleHost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OracleBulkUpdate"
        description: Properties to use for the update of Oracle Host objects.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkOracleHostDetails"
          description: Successfully updated Oracle Host objects.
      summary: Update Oracle Hosts
      tags:
        - /oracle
      x-group: oracle_host
  /oracle/rac/bulk:
    patch:
      description: Update the properties of the objects that represent the specified Oracle RAC.
      operationId: bulkUpdateOracleRac
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OracleBulkUpdate"
        description: Properties to use for the update of Oracle RAC objects.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkOracleRacDetails"
          description: Successfully updated Oracle RAC objects.
      summary: Update Oracle RACs
      tags:
        - /oracle
      x-group: oracle_rac
  /oracle/validate_aco_file:
    post:
      description: Validate the provided Oracle ACO (Advanced Cloning Options) file.
      operationId: validateOracleAcoFile
      parameters:
        - description: Boolean that determines whether the ACO file is being used for a Live Mount.
          in: query
          name: is_live_mount
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Contents of the Advanced Cloning Options file in base64 encoded format.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OracleAcoValidationResult"
          description: Validation result of the provided ACO file.
      summary: Validate Oracle ACO file
      tags:
        - /oracle
      x-group: oracle_db
  "/organization/{id}/envoy/bulk":
    delete:
      description: Remove a list of Rubrik Envoy objects from an organization and delete the objects from the Rubrik cluster.
      operationId: bulkDeleteEnvoys
      parameters:
        - description: ID assigned to an organization object.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnvoyIdList"
        description: A list of Rubrik Envoy objects IDs.
        required: true
      responses:
        "204":
          description: Successfully deleted a list of Rubrik Envoy objects.
      summary: Remove a list of Rubrik Envoy objects
      tags:
        - /organization
      x-group: organization_resource
    patch:
      description: Change one or more of the properties of a list of Rubrik Envoy objects.
      operationId: bulkUpdateEnvoys
      parameters:
        - description: ID assigned to an organization object.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/EnvoyBulkUpdate"
              type: array
        description: Properties to assign to the Rubrik Envoy objects.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnvoyDetailList"
          description: Returns a detailed view of all updated Rubrik Envoy objects.
      summary: Update a list of Rubrik Envoy objects
      tags:
        - /organization
      x-group: organization_resource
    post:
      description: Create a list of Rubrik Envoy objects for a specified organization and specify the properties to assign to the Rubrik Envoy objects.
      operationId: bulkCreateEnvoys
      parameters:
        - description: ID assigned to an organization object.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/EnvoyCreate"
              type: array
        description: Properties to assign to the Rubrik Envoy objects.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnvoyDetailList"
          description: Returns a detailed view of all created Rubrik Envoy objects.
      summary: Create a list of Rubrik Envoy objects
      tags:
        - /organization
      x-group: organization_resource
  /principal:
    get:
      description: Search for principals based on the specified parameters.
      operationId: searchPrincipalsV1
      parameters:
        - description: Maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Starting offset of the results to return.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Attribute by which to sort. Default is "name".
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - Name
              - PrincipalType
              - Description
              - FirstName
              - LastName
              - EmailAddress
              - DisplayName
            type: string
        - description: Sort order. Default order is ascending.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
        - description: ID of the authentication domain that contains the principal.
          in: query
          name: auth_domain_id
          required: false
          schema:
            type: string
        - description: ID of the organization of which the principal is a member.
          in: query
          name: organization_id
          required: false
          schema:
            type: string
        - description: |
            A Boolean that specifies whether the principal has any roles assigned or is a local user. When a principal is a local user, or when the principal has any roles assigned, this value is 'true'.
          in: query
          name: is_assigned_roles_or_is_local
          required: false
          schema:
            type: boolean
        - description: ID of a role assigned to the principal.
          in: query
          name: role_id
          required: false
          schema:
            type: string
        - description: The name of the principal.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: The type of principal.
          in: query
          name: principal_type
          required: false
          schema:
            enum:
              - User
              - Group
            type: string
        - description: |
            Indicates if the principal has TOTP authentication enabled. Returns the users with TOTP authentication enabled when the value is true.
          in: query
          name: is_totp_enabled
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrincipalSummaryV1ListResponse"
          description: The list of matching principals.
      summary: Search for principals
      tags:
        - /principal
      x-group: principal
  /principal/role:
    get:
      description: |
        Get a list of role information for all roles assigned to the principals.
      operationId: getRolesForPrincipals
      parameters:
        - description: IDs of the principals.
          explode: false
          in: query
          name: principals
          required: true
          schema:
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PrincipalWithRoleInfo"
                type: array
          description: List of roles assigned to the principal.
      summary: Get roles assigned to principals
      tags:
        - /principal
      x-group: principal
    post:
      description: Assign a set of roles to the specified principals.
      operationId: assignRolesToPrincipals
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleAssignmentRequest"
        description: |
          A set of roles and a set of principals to which the roles should be granted.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/RoleInfo"
                type: array
          description: |
            Role information for roles assigned to the principal.
      summary: Assign roles to principals
      tags:
        - /principal
      x-group: principal
  /principal/role/bulk_revoke:
    post:
      description: |
        Revoke a set of roles from the specified principals.
      operationId: revokeRolesFromPrincipals
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleAssignmentRequest"
        description: A set of roles to revoke from a set of principals.
        required: true
      responses:
        "204":
          description: Successfuly revoked roles from principals.
      summary: Revoke roles from principals
      tags:
        - /principal
      x-group: principal
  /replication/location_pause/disable:
    post:
      description: |
        A single Rubrik cluster can be the replication target for multiple source Rubrik clusters. For each source cluster specified, this resumes replication from that source cluster to the target cluster. This call must be made on the target cluster.
      operationId: disablePerLocationPause
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DisablePerLocationPause"
        description: |
          A configuration value that specifies which source clusters resume replication. Snapshots taken before or during the replication pause can be skipped.
        required: true
      responses:
        "204":
          description: |
            Successfully resumed replication from all specified source clusters.
      summary: Resume replication from specified source clusters
      tags:
        - /replication
      x-group: replication
  /replication/location_pause/enable:
    post:
      description: |
        A single Rubrik cluster can be the replication target for multiple source Rubrik clusters. For each source cluster specified, this pauses replication from that source cluster to the target cluster. This call must be made on the target cluster.
      operationId: enablePerLocationPause
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnablePerLocationPause"
        description: |
          A configuration value that specifies which source clusters pause replication. Replication jobs can be canceled immediately or be allowed to finish.
        required: true
      responses:
        "204":
          description: |
            Successfully paused replication from all specified source clusters.
      summary: Pause replication from specified source clusters
      tags:
        - /replication
      x-group: replication
  /report/compliance_summary:
    get:
      description: Returns the compliance summary information for all protected objects based on a time-based requirement of at least one snapshot in each 24 hour report period. This view ignores the policies assigned to protected objects through SLA Domains.
      operationId: getComplianceSummaryV1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComplianceSummaryV1"
          description: Data from the report data source.
      summary: Get compliance summary information
      tags:
        - /reports
      x-group: reports
  /report/compliance_summary_sla:
    get:
      description: Returns the compliance summary information for all protected objects based on whether the last expected snapshot was successful. This requirement is based on the SLA Domain assigned to the objects.
      operationId: getComplianceSummarySLAV1
      parameters:
        - description: An SLA Domain-based range of snapshots. Compliance is calculated for snapshots in the range.
          in: query
          name: snapshot_range
          required: true
          schema:
            enum:
              - LastSnapshot
              - Last2Snapshots
              - Last3Snapshots
              - AllSnapshots
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComplianceSummarySLAV1"
          description: Data from the report data source.
      summary: Get compliance summary information
      tags:
        - /reports
      x-group: reports
  /report/config:
    patch:
      description: Set the different report config parameters.
      operationId: setReportConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportConfigPatch"
        description: Specifies the new report config parameters.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportConfigResponse"
          description: The new duration, in days, of the retention period for report job instances for log jobs.
      summary: Modify the report config
      tags:
        - /reports
      x-group: config_report
  /role:
    get:
      description: |
        Get a list of role information for all roles in the specified organization.
      operationId: getRoles
      parameters:
        - description: Maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Starting offset of the results to return.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Attribute used to sort the role list.
          in: query
          name: sort_by
          required: false
          schema:
            default: Name
            enum:
              - Name
              - Description
              - RoleTemplate
            type: string
        - description: Sort order used, ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
        - description: |
            The ID of the organization the roles are a part of. When empty, the Rubrik cluster infers the organization from the session.
          in: query
          name: organization_id
          required: false
          schema:
            type: string
        - description: The name of the role.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: |
            List of comma-separated role templates by which to filter the roles.
          explode: false
          in: query
          name: role_template
          required: false
          schema:
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleInfoListResponse"
          description: Information about the requested roles.
      summary: Get all roles in an organization
      tags:
        - /role
      x-group: role
    post:
      description: Create a new role in the current organization.
      operationId: createRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleInfoCreate"
        description: Information about the role.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleInfo"
          description: Information about the newly created role.
      summary: Create a new role
      tags:
        - /role
      x-group: role
  "/role/{id}":
    delete:
      description: Delete the role with the specified ID.
      operationId: deleteRole
      parameters:
        - description: ID of the role.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successfully deleted role.
      summary: Delete a role
      tags:
        - /role
      x-group: role
    get:
      description: Get role information for the role with the specified ID.
      operationId: getRole
      parameters:
        - description: ID of the role.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleInfo"
          description: Information about the role.
      summary: Get role information for the specified role
      tags:
        - /role
      x-group: role
    patch:
      description: Update the role information for the specified role.
      operationId: updateRole
      parameters:
        - description: ID of the role.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleInfoUpdate"
        description: Information about the role.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleInfo"
          description: Information about the updated role.
      summary: Update role information
      tags:
        - /role
      x-group: role
  "/saml/authn_request/{idp_name}":
    post:
      description: Make a SAML authentication request for a specified IdP Authentication Domain.
      operationId: makeSamlAuthnRequest
      parameters:
        - description: Name of the IdP Authentication Domain to authenticate with.
          in: path
          name: idp_name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SamlSsoAuthnRequestInfo"
        description: Additional information associated with a single sign-on (SSO) authentication request.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SamlSsoAuthnRequestDetail"
          description: Return the necessary data for constructing SAML authentication request.
      summary: Make SAML authentication request
      tags:
        - /saml
      x-group: saml
      x-unauthenticated: true
  /saml/rubrik_metadata:
    post:
      description: Configure and generate the SAML metadata for this Rubrik cluster. The call returns the download URL for the metadata.
      operationId: configRubrikSamlMetadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RubrikSamlMetadataInfo"
        description: Information for generating Rubrik SAML metadata file.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RubrikSamlMetadataSummary"
          description: Returns the URL for downloading the Rubrik SAML metadata.
      summary: Configure and generate Rubrik SAML metadata
      tags:
        - /saml
      x-group: saml
  /saml/sso_status:
    get:
      description: An object that contains two values. A Boolean value that determines whether or not SSO is enabled and an optional String value that indicates the name of the default IdP authentication domain for SSO login. When the boolean value is 'true,' SAML SSO is enabled. When the Boolean value is 'false,' SAML SSO is disabled.
      operationId: getSamlSsoStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SamlSsoStatus"
          description: Return an object containing SAML SSO status.
      summary: Check SAML SSO Status
      tags:
        - /saml
      x-group: saml
      x-unauthenticated: true
  /sap_hana/db:
    get:
      description: Returns summary information for SAP HANA databases connected to the CDM cluster.
      operationId: querySapHanaDatabases
      parameters:
        - description: The ID of the SLA Domain that controls the protection of the host.
          in: query
          name: effective_sla_domain_id
          required: false
          schema:
            type: string
        - description: The ID of the Rubrik cluster that provides primary protection for the SAP HANA databases.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: The name of the SAP HANA database.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: The name of the SLA Domain that controls the protection of the SAP HANA database.
          in: query
          name: sla_assignment
          required: false
          schema:
            type: string
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: An integer that specifies a number of initial matches to ignore.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Specify whether the SAP HANA database is accessible on the Rubrik cluster.
          in: query
          name: is_relic
          required: false
          schema:
            type: boolean
        - description: Specifies the SAP HANA Database attribute to use in sorting the summary information.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - effectiveSlaDomainName
              - name
              - sapHanaSystemName
            type: string
        - description: The order to sort the responses by. Valid choices are asc (ascending) and desc (descending).
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SapHanaDatabaseSummaryListResponse"
          description: If the query is successful, returns summary information for SAP HANA databases connected to the cluster.
      summary: Get summary information for discovered SAP HANA databases
      tags:
        - /sap_hana
      x-group: sap_hana_db
  "/sap_hana/db/request/{id}":
    get:
      description: Get details about a SAP HANA database related request which includes the status of data backup job.
      operationId: getSapHanaDbAsyncRequestStatus
      parameters:
        - description: ID of the request.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the async request.
      summary: Get the status of a SAP HANA database request
      tags:
        - /sap_hana
      x-group: sap_hana_db
  "/sap_hana/db/snapshot/{id}":
    delete:
      description: Initiates a request to delete a particular full snapshot of a SAP HANA database. If the log retention period for the database is still in effect, the snapshot will be deleted when the log retention period ends.
      operationId: deleteSapHanaDbSnapshot
      parameters:
        - description: ID assigned to a SAP HANA database full snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successfully initiated the request to delete the specified SAP HANA database snapshot and there is nothing to return.
      summary: Delete a particular full snapshot of a SAP HANA database
      tags:
        - /sap_hana
      x-group: sap_hana_db
    get:
      description: Retrieve detailed information about a full or an incremental snapshot of a SAP HANA database.
      operationId: getSapHanaDbSnapshot
      parameters:
        - description: ID of snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SapHanaDatabaseSnapshotDetail"
          description: Returns details about a snapshot.
      summary: Get SAP HANA database snapshot details
      tags:
        - /sap_hana
      x-group: sap_hana_db
  "/sap_hana/db/{id}":
    get:
      description: Returns a detailed view of the SAP HANA database.
      operationId: getSapHanaDatabase
      parameters:
        - description: The ID of the SAP HANA database.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SapHanaDatabaseDetail"
          description: If the query is successful, returns a detailed view of the SAP HANA database.
      summary: Get detailed information for an SAP HANA database
      tags:
        - /sap_hana
      x-group: sap_hana_db
    patch:
      description: Update the SLA Domain that is configured for an SAP HANA database.
      operationId: patchSapHanaDatabase
      parameters:
        - description: The ID of the SAP HANA database.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SapHanaDatabasePatch"
        description: Object containing updated SAP HANA database SLA Domain ID.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SapHanaDatabaseDetail"
          description: If the API call is successful, the SAP HANA database object is updated and summary of the object is returned.
      summary: Update the SLA Domain for an SAP HANA database
      tags:
        - /sap_hana
      x-group: sap_hana_db
  "/sap_hana/db/{id}/configure_restore":
    post:
      description: Initiates a job to configure the specified target database for a system copy restore by sending metadata about the source database. System copy restore in SAP HANA is done across different databases.
      operationId: configureSapHanaRestore
      parameters:
        - description: ID of the target SAP HANA database to be configured.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SapHanaRestoreSourceConfig"
        description: The object containing configuration related metadata for the source SAP HANA database.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the request.
      summary: Configure the target database for system copy restore
      tags:
        - /sap_hana
      x-group: sap_hana_db
  "/sap_hana/db/{id}/missed_snapshot":
    get:
      description: Returns a summary of information for the missed snapshots of a SAP HANA database. Retrieve only the missed snapshots that occur between the beginning and ending timestamps.
      operationId: getMissedSapHanaDbSnapshots
      parameters:
        - description: ID of the SAP HANA database.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Filter for snapshots that are missed on or after this time. The date-time string must be in ISO8601 format, for example, "2016-01-01T01:23:45.678".
          in: query
          name: after_time
          required: false
          schema:
            format: date-time
            type: string
        - description: Filter for snapshots that are missed on or before this time. The date-time string must be in ISO8601 format, for example, "2016-01-01T01:23:45.678".
          in: query
          name: before_time
          required: false
          schema:
            format: date-time
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissedSnapshotListResponse"
          description: Returns details about missed snapshots.
      summary: Retrieve summary information for missed snapshots of a SAP HANA database
      tags:
        - /sap_hana
      x-group: sap_hana_db
  "/sap_hana/db/{id}/recoverable_range":
    get:
      description: Retrieve the recoverable ranges for a specified SAP HANA database. Provide a beginning and/or ending timestamp to retrieve only the recoverable ranges that fall within this period of time.
      operationId: getSapHanaDbRecoverableRanges
      parameters:
        - description: ID of the SAP HANA database.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Filter ranges to end after this time. The date-time string should be in an ISO8601 format. For example, "2016-01-01T01:23:45.678Z".
          in: query
          name: after_time
          required: false
          schema:
            format: date-time
            type: string
        - description: Filter ranges to start before this time. The date-time string should be in an ISO8601 format. For example, "2016-01-01T01:23:45.678Z".
          in: query
          name: before_time
          required: false
          schema:
            format: date-time
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SapHanaRecoverableRangeListResponse"
          description: Returns the recoverable ranges for the SAP HANA database.
      summary: Get recoverable ranges of a SAP HANA database
      tags:
        - /sap_hana
      x-group: sap_hana_db
  "/sap_hana/db/{id}/snapshot":
    get:
      description: Retrieve summary information about the full and incremental snapshots of a specified SAP HANA database.
      operationId: querySapHanaDbSnapshot
      parameters:
        - description: ID assigned to a SAP HANA database object.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Filter snapshots to those of a particular backup type.
          in: query
          name: backup_type
          required: false
          schema:
            enum:
              - FULL
              - INCREMENTAL
            type: string
        - description: Filter snapshots to those taken on or after this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678".
          in: query
          name: after_time
          required: false
          schema:
            format: date-time
            type: string
        - description: Filter snapshots to those taken before or on this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678".
          in: query
          name: before_time
          required: false
          schema:
            format: date-time
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SapHanaDatabaseSnapshotSummaryListResponse"
          description: Returns summary information for all snapshots.
      summary: Get a summary list of snapshots for a SAP HANA database
      tags:
        - /sap_hana
      x-group: sap_hana_db
    post:
      description: Initiates a job to take an on demand full snapshot of a specified SAP HANA database object. The GET /sap_hana/db/request/{id} endpoint can be used to monitor the progress of the job.
      operationId: createOnDemandSapHanaBackup
      parameters:
        - description: ID assigned to a SAP HANA database object.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BaseOnDemandSnapshotConfig"
        description: Configuration for the on demand backup.
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the backup request.
      summary: Create on demand database snapshot
      tags:
        - /sap_hana
      x-group: sap_hana_db
  "/sap_hana/db/{id}/unconfigure_restore":
    post:
      description: Initiates a job to reset the configuration for the system copy restore on the specified target database. System copy restore in SAP HANA is done across different databases.
      operationId: unconfigureSapHanaRestore
      parameters:
        - description: ID assigned to target SAP HANA database object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the request.
      summary: Reset the configuration for system copy restore on target database
      tags:
        - /sap_hana
      x-group: sap_hana_db
  /sap_hana/system:
    get:
      description: Returns summary information for SAP HANA systems.
      operationId: querySapHanaSystems
      parameters:
        - description: The ID of the Rubrik cluster that provides primary protection for the SAP HANA databases.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: The SAP System Identification (SID) code for the SAP HANA system.
          in: query
          name: sid
          required: false
          schema:
            type: string
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: An integer that specifies a number of initial matches to ignore.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: The SAP HANA system attribute to use in sorting the responses.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - sid
            type: string
        - description: The order to sort the responses by. Valid choices are asc (ascending) and desc (descending).
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SapHanaSystemSummaryListResponse"
          description: If query is successful, returns summary information for SAP HANA systems.
      summary: Get summary information for added SAP HANA systems
      tags:
        - /sap_hana
      x-group: sap_hana_system
    post:
      description: Add a SAP HANA system to the Rubrik cluster.
      operationId: addSapHanaSystem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SapHanaSystemConfig"
        description: Add a SAP HANA system to the Rubrik cluster. Contains parameters like username, list of hosts, password required while adding a SAP HANA system.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SapHanaAddSystemResponse"
          description: Adds the SAP HANA system and returns its ID and the status of the scheduled system refresh job.
      summary: Add a SAP HANA system
      tags:
        - /sap_hana
      x-group: sap_hana_system
  "/sap_hana/system/request/{id}":
    get:
      description: Get details about a SAP HANA system related request which includes the status of delete or refresh system job.
      operationId: getSapHanaSystemAsyncRequestStatus
      parameters:
        - description: The ID of the request object used to poll the status.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the request.
      summary: Get the status of a SAP HANA system request
      tags:
        - /sap_hana
      x-group: sap_hana_system
  "/sap_hana/system/{id}":
    delete:
      description: Initiates a job to delete a SAP HANA system object. GET /sap_hana/system/request/{id} endpoint can be used to monitor the progress of the job.
      operationId: deleteSapHanaSystem
      parameters:
        - description: The ID of the SAP HANA system.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the request.
      summary: Delete a SAP HANA system
      tags:
        - /sap_hana
      x-group: sap_hana_system
    get:
      description: Returns a summary view of a SAP HANA system.
      operationId: getSapHanaSystem
      parameters:
        - description: The ID of the SAP HANA system.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SapHanaSystemSummary"
          description: Returns summary information.
      summary: Get summary information for a SAP HANA system
      tags:
        - /sap_hana
      x-group: sap_hana_system
    patch:
      description: Update the SLA Domain that is configured for a SAP HANA system.
      operationId: patchSapHanaSystem
      parameters:
        - description: The ID of the SAP HANA system.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SapHanaSystemPatch"
        description: An object that contains the updated SLA Domain ID for the SAP HANA system.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SapHanaPatchSystemResponse"
          description: Updates the SAP HANA system and returns its summary and the status of the scheduled system refresh job.
      summary: Update the SLA Domain for a SAP HANA system
      tags:
        - /sap_hana
      x-group: sap_hana_system
  "/sap_hana/system/{id}/refresh":
    post:
      description: Initiates a job to refresh metadata of a SAP HANA system object. The GET /sap_hana/system/request/{id} endpoint can be used to monitor the progress of the job.
      operationId: createSapHanaSystemRefresh
      parameters:
        - description: The ID of the SAP HANA system.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the request.
      summary: Refresh SAP HANA system metadata
      tags:
        - /sap_hana
      x-group: sap_hana_system
  /session:
    post:
      description: Open a user session.
      operationId: createSession
      parameters:
        - description: Bind the new session to the specified organization. When this parameter is not specified, the session will be bound to an organization chosen according to the user's preferences and authorizations.
          in: query
          name: organization_id
          required: false
          schema:
            type: string
        - description: Bind the new session to the specified directory. When this parameter is unspecified, the session will be bound to local domain.
          in: query
          name: realm
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionSummary"
          description: Session creation successful.
      summary: Create user session
      tags:
        - /session
      x-group: session
      x-rk-block-api-tokens: true
  "/session/{id}":
    delete:
      description: Close a user session and invalidate the session token.
      operationId: deleteSession
      parameters:
        - description: Session ID or  *me* for session of bearer token.
          in: path
          name: id
          required: true
          schema:
            default: me
            type: string
      responses:
        "204":
          description: Invalidation successful.
      summary: Delete user session
      tags:
        - /session
      x-group: session
  /sla_domain:
    get:
      description: Retrieve summary information for all SLA Domains.
      operationId: querySlaDomain
      parameters:
        - description: Limits the information retrieved to those SLA Domains that are associated with the Rubrik cluster ID that is specified by primary_cluster_id. Use **local** for the Rubrik cluster that is hosting the current REST API session.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Limit the list information to those SLA Domains which match the specified SLA Domain 'name' value.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Attribute to use to sort the SLA Domains summary information. Optionally use **_sort_order_** to specify whether to sort in ascending or descending order.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - name
            type: string
        - description: Sort order, either ascending or descending. If not specified, SLA Domain summary results will be sorted in ascending order.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
        - description: Limit the list information to SLA Domains that can be assigned to specified data sources.
          explode: false
          in: query
          name: data_sources
          required: false
          schema:
            items:
              type: string
            type: array
          style: form
        - description: Limit the list information to SLA Domains that can be assigned to specified snapshots.
          explode: false
          in: query
          name: snapshot_ids
          required: false
          schema:
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SlaDomainSummaryListResponse"
          description: Summary information for SLA Domains.
      summary: Get list of SLA Domains
      tags:
        - /sla_domain
      x-group: sla_domain
    post:
      description: Create a new SLA Domain on a Rubrik cluster by specifying Domain Rules and policies. Only Managed Volume objects support minute frequency to take transaction log backup. SLA assignment on other objects will be disallowed.
      operationId: createSlaDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SlaDomainDefinition"
        description: SLA Domain definition. The SLA domain accepts two backup windows, one for a regular backup or snapshot and one for the first full backup or snapshot. Specify times using Rubrik cluster timezone.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SlaDomainSummary"
          description: Summary of newly created SLA Domain.
      summary: Create SLA Domain
      tags:
        - /sla_domain
      x-group: sla_domain
  /sla_domain/assign_to_downloaded_snapshots:
    post:
      description: Assigns an SLA Domain to a list of downloaded snapshots. The SLA Domain manages retention for the snapshots in the downloaded location. The assignment does not affect the retention of the snapshots in other locations.
      operationId: assignSlaToDownloadedSnapshots
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DownloadedSnapshotSlaAssignmentInfo"
        description: An object ID and a list of IDs for the downloaded snapshots. The specified SLA Domain manages retention for the downloaded copy of snapshots assigned to the specified IDs.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchAsyncRequestStatus"
          description: Queued asynchronous requests for assigning SLA Domains to downloaded snapshots.
      summary: Assign retention SLA Domain to the downloaded snapshots of a single object
      tags:
        - /sla_domain
      x-group: sla_domain
  "/sla_domain/{id}":
    delete:
      description: Delete an SLA Domain from a Rubrik cluster. The SLA Domain must not be assigned to any VMs, filesets or databases.
      operationId: deleteSlaDomain
      parameters:
        - description: ID of the SLA Domain.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Removed the specified SLA Domain.
      summary: Remove SLA Domain
      tags:
        - /sla_domain
      x-group: sla_domain
    get:
      description: Retrieve summary information for a specified SLA Domain.
      operationId: getSlaDomain
      parameters:
        - description: ID of the SLA Domain.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SlaDomainSummary"
          description: Object containing information about the SLA Domain.
      summary: Get SLA Domain details
      tags:
        - /sla_domain
      x-group: sla_domain
    patch:
      deprecated: true
      description: (DEPRECATED) Patch the properties of an SLA Domain. The recommended endpoint is v3/sla_domain/{id}.
      operationId: patchSlaDomain
      parameters:
        - description: ID of the SLA Domain.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: A Boolean that determines whether the new configuration retains existing snapshots of data sources that are currently retained by this SLA Domain. The value is 'true' by default.
          in: query
          name: should_apply_to_existing_snapshots
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SlaDomainPatchDefinition"
        description: Object containing the fields to be edited for SLA Domain. The SLA Domain accepts two backup windows, one for a regular backup or snapshot and one for the first full backup or snapshot. Specify times using the Rubrik cluster timezone. Remote SLA Domain only supports edit to the archival specification.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SlaDomainSummary"
          description: Object containing the patched SLA Domain.
      summary: Patch SLA Domain
      tags:
        - /sla_domain
      x-group: sla_domain
    put:
      description: Update the properties of an SLA Domain.
      operationId: updateSlaDomain
      parameters:
        - description: ID of the SLA Domain.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: A Boolean that determines whether the new configuration retains existing snapshots of data sources that are currently retained by this SLA Domain. The value is 'true' by default.
          in: query
          name: should_apply_to_existing_snapshots
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SlaDomainDefinition"
        description: Object containing the updated SLA Domain. The SLA domain accepts two backup windows, one for a regular backup or snapshot and one for the first full backup or snpashot. Specify times using the Rubrik cluster time zone.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SlaDomainSummary"
          description: Object containing updated SLA Domain.
      summary: Update SLA Domain
      tags:
        - /sla_domain
      x-group: sla_domain
  "/snapshot/{id}/storage/stats":
    get:
      description: Returns the storage statistics for a snapshot.
      operationId: getSnapshotStorageStatsV1
      parameters:
        - description: ID assigned to a snapshot object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnapshotStorageStats"
          description: Returns storage stats for a snapshot.
      summary: Returns storage stats for a snapshot
      tags:
        - /snapshot
      x-group: snapshot_v1
  /syslog/export:
    get:
      description: Return the list of all configured syslog export rules.
      operationId: getSyslogExportRules
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyslogExportRuleSummaryListResponse"
          description: List of all configured syslog export rules.
      summary: Get the configured syslog export rules
      tags:
        - /cluster
      x-group: syslog
    post:
      description: |
        Adds a new rule specifying where to export the specified syslog information.
      operationId: addSyslogExportRule
      requestBody:
        $ref: "#/components/requestBodies/SyslogExportRuleFull"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyslogExportRuleSummary"
          description: Summary of the newly added syslog export rule.
      summary: Add a new syslog export rule
      tags:
        - /cluster
      x-group: syslog
  /syslog/export/test:
    post:
      description: |
        Send a test message using the syslog export rule specified by the given id.
      operationId: testSyslogExportRule
      requestBody:
        $ref: "#/components/requestBodies/SyslogExportRuleFull"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyslogServerTestResult"
          description: Syslog export rule was tested successfully.
      summary: Test the specified syslog export rule
      tags:
        - /cluster
      x-group: syslog
  "/syslog/export/{id}":
    delete:
      description: Delete the syslog export rule specified by the given id.
      operationId: deleteSyslogExportRule
      parameters:
        - description: The ID of the syslog export rule.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Syslog server export rule successfully deleted.
      summary: Delete the specified syslog export rule
      tags:
        - /cluster
      x-group: syslog
    get:
      description: |
        Get the summary of the syslog export rule specified by the given id.
      operationId: getSyslogExportRule
      parameters:
        - description: The ID of syslog export rule.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyslogExportRuleSummary"
          description: Summary of the syslog export rule.
      summary: Get the specified syslog export rule
      tags:
        - /cluster
      x-group: syslog
    patch:
      description: Update the syslog export rule specified by the given id.
      operationId: updateSyslogExportRule
      parameters:
        - description: The ID of syslog export rule.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SyslogExportRulePartial"
        description: Syslog export rule.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyslogExportRuleSummary"
          description: Updated syslog export rule.
      summary: Update the specified syslog export rule
      tags:
        - /cluster
      x-group: syslog
  /unmanaged_object:
    get:
      description: Get summary of all the objects with unmanaged snapshots.
      operationId: queryUnmanagedObjectV1
      parameters:
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: First unmanaged object after which objects should be retrieved.
          in: query
          name: after_id
          required: false
          schema:
            type: string
        - description: Filters by the object name using infix search.
          in: query
          name: search_value
          required: false
          schema:
            type: string
        - description: Filters by object status. Valid status are Protected, Unprotected, and Relic.
          in: query
          name: unmanaged_status
          required: false
          schema:
            enum:
              - Protected
              - Relic
              - Unprotected
              - ReplicatedRelic
              - RemoteUnprotected
            type: string
        - description: Filter by the type of the unmanaged object.
          in: query
          name: object_type
          required: false
          schema:
            enum:
              - VirtualMachine
              - MssqlDatabase
              - LinuxFileset
              - WindowsFileset
              - ShareFileset
              - NutanixVirtualMachine
              - HypervVirtualMachine
              - ManagedVolume
              - Ec2Instance
              - StorageArrayVolumeGroup
              - VcdVapp
              - LinuxHost
              - WindowsHost
              - OracleDatabase
              - VolumeGroup
              - AppBlueprint
            type: string
        - description: Sort the result by given attribute.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - Name
              - UnmanagedStatus
              - Location
              - UnmanagedSnapshotCount
              - LocalStorage
              - ArchiveStorage
              - RetentionSlaDomainName
              - ObjectType
              - SnapshotCount
              - AutoSnapshotCount
              - ManualSnapshotCount
            type: string
        - description: The sort order. The default sort order is ascending.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnmanagedObjectDetailsListResponse"
          description: Get page summary about objects with unmanaged snapshots.
      summary: Get summary of all the objects with unmanaged snapshots
      tags:
        - /unmanaged_object
      x-group: unmanaged_object
  /unmanaged_object/assign_retention_sla:
    post:
      description: Assign relic/unmanaged entities to the specified SLA Domain for managing retention. The assignment event runs asynchronously.
      operationId: assignToRetentionSlaAsync
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnmanagedObjectSlaAssignmentInfo"
        description: Object with SLA Domain ID and a comma-separated list of the IDs of the relic/unmanaged entities being assigned to the SLA Domain.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ManagedObjectPendingSlaInfo"
                type: array
          description: Pending SLA Domains resulting from this assignment.
      summary: Assign relic/unmanaged entities to an SLA Domain for managing retention asynchronously
      tags:
        - /unmanaged_object
      x-group: unmanaged_object
  /unmanaged_object/reader_object:
    get:
      description: A summary of all unmanaged objects recovered from reader archival locations.
      operationId: queryUnmanagedReaderObject
      parameters:
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Retrieve objects after the unmanaged object with the specified ID.
          in: query
          name: after_id
          required: false
          schema:
            type: string
        - description: Search object by object name.
          in: query
          name: object_name
          required: false
          schema:
            type: string
        - description: Filters by object status. Valid status are Protected, Unprotected, and Relic.
          in: query
          name: unmanaged_status
          required: false
          schema:
            enum:
              - Protected
              - Relic
              - Unprotected
              - ReplicatedRelic
              - RemoteUnprotected
            type: string
        - description: Filter by the type of the unmanaged object.
          in: query
          name: object_type
          required: false
          schema:
            enum:
              - VirtualMachine
              - MssqlDatabase
              - LinuxFileset
              - WindowsFileset
              - ShareFileset
              - NutanixVirtualMachine
              - HypervVirtualMachine
              - ManagedVolume
              - Ec2Instance
              - StorageArrayVolumeGroup
              - VcdVapp
              - LinuxHost
              - WindowsHost
              - OracleDatabase
              - VolumeGroup
              - AppBlueprint
            type: string
        - description: Sort the result by given attribute.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - Name
              - UnmanagedStatus
              - Location
              - UnmanagedSnapshotCount
              - LocalStorage
              - ArchiveStorage
              - RetentionSlaDomainName
              - ObjectType
              - SnapshotCount
              - AutoSnapshotCount
              - ManualSnapshotCount
            type: string
        - description: The sort order. The default sort order is ascending.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnmanagedObjectSummaryListResponse"
          description: Returns a page summary of the unmanaged objects recovered from reader archival locations.
      summary: Get summary of all unmanaged reader objects
      tags:
        - /unmanaged_object
      x-group: unmanaged_object
  /unmanaged_object/snapshot/bulk_archive_tier:
    post:
      description: Schedules a job to tier existing snapshots of the specified objects to cold storage.
      operationId: bulkTierExistingSnapshots
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkTierSnapshotsConfig"
        description: A list of object IDs to tier. Optionally specifies a location ID.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Job ID of the TIER_EXISTING_SNAPSHOTS job scheduled.
      summary: Bulk tier existing snapshots to cold storage
      tags:
        - /unmanaged_object
      x-group: unmanaged_object
  "/unmanaged_object/{id}/snapshot":
    get:
      description: Gets summary information for all snapshots of the object with the specified object ID.
      operationId: queryUnmanagedObjectSnapshotsV1
      parameters:
        - description: ID of a object.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Ignore these many matches in the beginning.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Search snapshot by date and time.
          in: query
          name: search_value
          required: false
          schema:
            type: string
        - description: Filter by snapshot type. Valid types are OnDemand, PolicyBased, Retrieved.
          in: query
          name: snapshot_type
          required: false
          schema:
            enum:
              - OnDemand
              - PolicyBased
              - Retrieved
            type: string
        - description: Filter all the snapshots before a date.
          in: query
          name: before_date
          required: false
          schema:
            format: date-time
            type: string
        - description: Filter all the snapshots after a date.
          in: query
          name: after_date
          required: false
          schema:
            format: date-time
            type: string
        - description: Sort by given attribute.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - SnapshotDateAndTime
              - LocalExpirationDate
              - ArchivalLocation
            type: string
        - description: The sort order. The default sort order is ascending.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnapshotSummaryListResponse"
          description: Get page summary about snapshots for a given object.
      summary: Get summary of all the snapshots for a given object
      tags:
        - /unmanaged_object
      x-group: unmanaged_object
  /user/lockout:
    get:
      description: |
        Get the local user account lockout settings which are used to configure whether user accounts will be locked on failed logins, when they will be locked and the duration for which they will stay locked.
      operationId: getUserAccountLockoutSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocalUserAccountLockoutStatus"
          description: |
            Get the local user account lockout settings which are used to configure whether user accounts will be locked on failed logins, when they will be locked and the duration for which they will stay locked.
      summary: Get the local user account lockout settings
      tags:
        - /user
      x-group: user
    patch:
      description: |
        Update the local user account lockout settings which are used to configure whether user accounts will be locked on failed logins, when they will be locked and the duration for which they will stay locked.
      operationId: manageUserAccountLockoutSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocalUserAccountLockoutConfig"
        description: Update the local user account lockout settings.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocalUserAccountLockoutStatus"
          description: |
            Current configuration for local user account lockout feature.
      summary: Update the local user account lockout settings
      tags:
        - /user
      x-group: user
  "/user/{id}/totp/config":
    delete:
      description: |
        Reset the TOTP settings to the default disabled state for the specified user account.
      operationId: resetTotp
      parameters:
        - description: The user account object ID.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successfully reset the TOTP.
      summary: Reset the TOTP for the given user
      tags:
        - /user
      x-group: user
    put:
      description: |
        Use this endpoint to configure the time-based one time password (TOTP) secret for a specified user account. The endpoint replaces an existing secret with the new one. The Rubrik cluster checks the secret against a one time password (OTP) to ensure validity.
      operationId: setupTotp
      parameters:
        - description: The user account object ID.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TotpConfigUpdateRequest"
        description: The time-based one time password (TOTP) configuration.
        required: true
      responses:
        "204":
          description: |
            Successfully configured the TOTP settings for the specified user account.
      summary: Configure the TOTP secret for the given user
      tags:
        - /user
      x-group: user
  "/user/{id}/totp/new_secret":
    post:
      description: |
        Use this endpoint to generate the time-based one time password (TOTP) secret key for a specified user account. The secret is a key value encoded in Base32 and includes a URI for generating a scannable QR code.
      operationId: generateTotpSecret
      parameters:
        - description: The user account object ID.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TotpSecret"
          description: Successfully generated TOTP secret.
      summary: Generate a TOTP secret key for the given user
      tags:
        - /user
      x-group: user
  "/user/{id}/totp/status":
    get:
      description: |
        Get the time-based one time password (TOTP) status for a specified user account. The TOTP status specifies whether that account has TOTP enabled and whether TOTP is being enforced for that account.
      operationId: getTotpStatus
      parameters:
        - description: The user account object ID.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TotpStatus"
          description: |
            The TOTP status of the user.
      summary: Get the TOTP status for the given user
      tags:
        - /user
      x-group: user
  "/user/{id}/unlock":
    post:
      description: Unlock a user account that has been locked because of too many failed login attempts.
      operationId: unlockUser
      parameters:
        - description: The ID of the user account that has been locked.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successfully unlocked the user.
      summary: Unlock a user account
      tags:
        - /user
      x-group: user
  /user_defined_tag:
    delete:
      description: |
        Delete a list of user-defined resource tags in one delete operation.
      operationId: deleteUserDefinedTagBulk
      parameters:
        - description: |
            An array of IDs of the user-defined resource tags to be deleted. Any non-existent ID in the array will be ignored.
          explode: false
          in: query
          name: ids
          required: true
          schema:
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceTagDeleteResponse"
          description: Return a list of IDs that were deleted successfully.
      summary: Delete a list of user-defined resource tags
      tags:
        - /user_defined_tag
      x-group: user_defined_tag
    get:
      description: |
        Get user-defined resource tags for the cloud compute resources created by CloudOn and CloudOut.
      operationId: queryUserDefinedTag
      parameters:
        - description: Filter results by resource tag.
          in: query
          name: key
          required: false
          schema:
            type: string
        - description: Filter results by archival location id.
          in: query
          name: scope_ref_id
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceTagGetResponse"
          description: List of user-defined resource tags.
      summary: Get user-defined resource tags
      tags:
        - /user_defined_tag
      x-group: user_defined_tag
    post:
      description: |
        Create a user-defined resource tag for tagging cloud compute resources created by CloudOn and CloutOut.
      operationId: createUserDefinedTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceTagDefinition"
        description: |
          The definition of a new user-defined resource tag to be created.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceTagDetail"
          description: Return the successfully created ResourceTag details.
      summary: Create a user-defined resource tag for tagging cloud compute resources
      tags:
        - /user_defined_tag
      x-group: user_defined_tag
  "/user_defined_tag/{id}":
    delete:
      description: Delete a user-defined resource tag.
      operationId: deleteUserDefinedTag
      parameters:
        - description: ID of the user-defined resource tag.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Result of the delete request.
      summary: Delete a user-defined resource tag
      tags:
        - /user_defined_tag
      x-group: user_defined_tag
    get:
      description: Retrieve details of a user-defined resource tag.
      operationId: getUserDefinedTag
      parameters:
        - description: ID of the user-defined resource tag.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceTagDetail"
          description: resource tag detail.
      summary: Get user-defined tag
      tags:
        - /user_defined_tag
      x-group: user_defined_tag
    patch:
      description: |
        Update the value of a user-defined resource tag.
      operationId: updateUserDefinedTag
      parameters:
        - description: ID of the user-defined resource tag.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceTagUpdate"
        description: Properties to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceTagDetail"
          description: Updated resource tag detail.
      summary: Update the value of a user-defined resource tag
      tags:
        - /user_defined_tag
      x-group: user_defined_tag
  /vcd/cluster:
    get:
      description: Retrieve summary information for all vCD cluster objects.
      operationId: queryVcdClusterV1
      parameters:
        - description: Search for a vCD Cluster object by name.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Filter the results using the status value of the vCD Cluster objects.
          in: query
          name: status
          required: false
          schema:
            enum:
              - Disconnected
              - Refreshing
              - Connected
              - BadlyConfigured
              - Deleting
              - Remote
            type: string
        - description: Attribute to sort the results on.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - Name
              - Status
            type: string
        - description: Order for sorting the results, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VcdClusterSummaryListResponse"
          description: Summary information for vCD clusters.
      summary: Get summary for all vCD Clusters
      tags:
        - /vcd/cluster
      x-group: vcd_cluster
    post:
      description: Create a vCD Cluster object by providing the address of the vCD Cluster and the credentials for an account on the vCD Cluster that has administrator privileges. This request initiates an asynchronous job to connect with the vCD Cluster and retrieve the required metadata.
      operationId: createVcdClusterV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VcdClusterConfig"
        description: IP address and account credentials of the vCD Cluster, and ID of the managing Rubrik cluster.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of an async request to add a vCD Cluster.
      summary: Add a vCD Cluster
      tags:
        - /vcd/cluster
      x-group: vcd_cluster
  "/vcd/cluster/request/{id}":
    get:
      description: Retrieve the details of a specified asynchronous job for a vCD Cluster.
      operationId: getVcdClusterAsyncRequestStatusV1
      parameters:
        - description: ID assigned to an asynchronous job.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of a vCD Cluster asynchronous job.
      summary: Get vCD Cluster job status
      tags:
        - /vcd/cluster
      x-group: vcd_cluster
  "/vcd/cluster/{id}":
    delete:
      description: Start an asynchronous job to remove a vCD Cluster object.
      operationId: deleteVcdClusterV1
      parameters:
        - description: ID assigned to a vCD Cluster object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of a job to delete a vCD Cluster.
      summary: Remove vCD Cluster
      tags:
        - /vcd/cluster
      x-group: vcd_cluster
    get:
      description: Retrieve detailed information for a vCD Cluster object.
      operationId: getVcdClusterV1
      parameters:
        - description: ID assigned to a vCD Cluster object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VcdClusterDetail"
          description: Details for a vCD Cluster object.
      summary: Get vCD Cluster details
      tags:
        - /vcd/cluster
      x-group: vcd_cluster
    patch:
      description: Modify the hostname and credentials of a specified vCD Cluster object.
      operationId: updateVcdClusterV1
      parameters:
        - description: ID assigned to a vCD Cluster object.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VcdClusterPatch"
        description: Updated hostname and credentials for a specified vCD Cluster object.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VcdClusterDetail"
          description: Details of an updated vCD Cluster object.
      summary: Change vCD Cluster object
      tags:
        - /vcd/cluster
      x-group: vcd_cluster
  "/vcd/cluster/{id}/refresh":
    post:
      description: Start an asynchronous job to refresh the metadata for a specified vCD Cluster object.
      operationId: refreshVcdClusterV1
      parameters:
        - description: ID assigned to a vCD Cluster object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of a vCD Cluster metadata refresh job.
      summary: Refresh a vCD Cluster
      tags:
        - /vcd/cluster
      x-group: vcd_cluster
  "/vcd/cluster/{id}/vimserver":
    get:
      description: Retrieves the VimServer representation of the vCenter Servers that are attached to a specified vCD Cluster object.
      operationId: queryVcdVimServerV1
      parameters:
        - description: ID assigned to a vCD Cluster object.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Attribute to sort the results on.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - Name
              - Status
            type: string
        - description: Order for sorting the results, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VimserverSummaryListResponse"
          description: Summary information for VimServer objects.
      summary: Get VimServers of a vCD Cluster
      tags:
        - /vcd/cluster
      x-group: vcd_cluster
  "/vcd/hierarchy/{id}":
    get:
      description: Retrieve details for the specified object in the vCD hierarchy.
      operationId: getVcdHierarchyObjectV1
      parameters:
        - description: ID of the vCD hierarchy object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VcdHierarchyObjectSummary"
          description: Details of the hierarchy object.
      summary: Get summary of a vCD hierarchy object
      tags:
        - /vcd/hierarchy
      x-group: vcd_hierarchy
  "/vcd/hierarchy/{id}/children":
    get:
      description: Retrieve the list of immediate descendant objects for the specified parent.
      operationId: getVcdHierarchyChildrenV1
      parameters:
        - description: ID of the parent vCD hierarchy object. To get top-level nodes, use **root** as the ID.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Attribute to sort the results on.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - Name
              - EffectiveSlaDomainName
              - SlaAssignment
              - ConnectionStatus
              - VappCount
            type: string
        - description: Order for sorting the results, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Number of matches to ignore from the beginning of the results.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Search object by object name.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Filter by isRelic field of vCD vApp hierarchy object. Return both relic and non-relic children when this value is not specified.
          in: query
          name: is_relic
          required: false
          schema:
            type: boolean
        - description: Filter by ID of effective SLA domain.
          in: query
          name: effective_sla_domain_id
          required: false
          schema:
            type: string
        - description: Filter by node object type.
          in: query
          name: object_type
          required: false
          schema:
            enum:
              - Cluster
              - VimServer
              - Org
              - OrgVdc
              - Catalog
              - vApp
            type: string
        - description: Filter by primary cluster ID, or **local**.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Filter by SLA assignment type.
          in: query
          name: sla_assignment
          required: false
          schema:
            enum:
              - Derived
              - Direct
              - Unassigned
            type: string
        - description: Filters vCD hierarchy objects based on the specified query value.
          in: query
          name: snappable_status
          required: false
          schema:
            enum:
              - Protectable
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VcdHierarchyObjectSummaryListResponse"
          description: Summary list of immediate descendant objects.
      summary: Get immediate descendant objects
      tags:
        - /vcd/hierarchy
      x-group: vcd_hierarchy
  "/vcd/hierarchy/{id}/descendants":
    get:
      description: Retrieve the list of descendant objects for the specified parent.
      operationId: getVcdHierarchyDescendantsV1
      parameters:
        - description: ID of the parent vCD hierarchy object. To get top-level nodes, use **root** as the ID.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Attribute to sort the results on.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - Name
              - EffectiveSlaDomainName
              - SlaAssignment
              - ConnectionStatus
              - VappCount
            type: string
        - description: Order for sorting the results, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Ignore these many matches in the beginning.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Search object by object name.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Filter by isRelic field of vCD vApp hierarchy object. Return both relic and non-relic descendants if this query is not set.
          in: query
          name: is_relic
          required: false
          schema:
            type: boolean
        - description: Filter by ID of effective SLA domain.
          in: query
          name: effective_sla_domain_id
          required: false
          schema:
            type: string
        - description: Filter by node object type.
          in: query
          name: object_type
          required: false
          schema:
            enum:
              - Cluster
              - VimServer
              - Org
              - OrgVdc
              - Catalog
              - vApp
            type: string
        - description: Filter by primary cluster ID, or **local**.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Filter by SLA assignment type.
          in: query
          name: sla_assignment
          required: false
          schema:
            enum:
              - Derived
              - Direct
              - Unassigned
            type: string
        - description: Filters vCD hierarchy objects based on the specified query value.
          in: query
          name: snappable_status
          required: false
          schema:
            enum:
              - Protectable
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VcdHierarchyObjectSummaryListResponse"
          description: Summary list of descendant objects.
      summary: Get list of descendant objects
      tags:
        - /vcd/hierarchy
      x-group: vcd_hierarchy
  /vcd/vapp:
    get:
      description: Retrieve summary information for all vCD vApp objects.
      operationId: queryVcdVappsV1
      parameters:
        - description: Attribute to sort the vCD vApp list on.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - Name
              - EffectiveSlaDomainName
              - SlaAssignment
            type: string
        - description: Order for sorting the results, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Number of matches to ignore from the beginning of the results.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Search for a vCD vApp object by name.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Filter by isRelic field of vCD vApp object. Return both relic and non-relic vApps when this value is not specified.
          in: query
          name: is_relic
          required: false
          schema:
            type: boolean
        - description: Filter by ID of the effective SLA domain.
          in: query
          name: effective_sla_domain_id
          required: false
          schema:
            type: string
        - description: Filter by primary cluster ID, or **local**.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Filter by SLA assignment type.
          in: query
          name: sla_assignment
          required: false
          schema:
            enum:
              - Derived
              - Direct
              - Unassigned
            type: string
        - description: Include backup task information in response.
          in: query
          name: include_backup_task_info
          required: false
          schema:
            default: false
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VcdVappSummaryListResponse"
          description: Summary information for vCD vApps.
      summary: Get summary for vApps
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
  "/vcd/vapp/request/{id}":
    get:
      description: Retrieve the details of a specified asynchronous job for a vApp.
      operationId: getVappAsyncRequestStatusV1
      parameters:
        - description: ID assigned to an asynchronous job.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of a vApp asynchronous job.
      summary: Get vApp job status
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
  "/vcd/vapp/snapshot/{id}":
    delete:
      description: Designate a vApp snapshot as expired and available for garbage collection. The snapshot must be an on-demand snapshot or a snapshot from a vApp that is not assigned to an SLA Domain.
      operationId: deleteVappSnapshotV1
      parameters:
        - description: ID assigned to a snapshot object.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Location of the snapshot to delete. Use _local_ to delete only the local copy of the snapshot. Use _all_ to delete the snapshot locally, on a replication target, and at an archival location.
          in: query
          name: location
          required: true
          schema:
            enum:
              - all
              - local
            type: string
      responses:
        "204":
          description: Snapshot successfully deleted.
      summary: Delete a vApp snapshot
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
    get:
      description: Retrieve detailed information about a specified snapshot for a vApp object.
      operationId: getVappSnapshotV1
      parameters:
        - description: ID assigned to a snapshot object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VcdVappSnapshotDetail"
          description: Details for a vApp snapshot.
      summary: Get vApp snapshot details
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
  "/vcd/vapp/snapshot/{id}/download":
    post:
      description: Provides a method for retrieving a snapshot that is not available locally, from an archival location.
      operationId: createVcdVappDownloadSnapshotFromCloudV1
      parameters:
        - description: ID of snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the download request.
      summary: Download snapshot from archive
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
  "/vcd/vapp/snapshot/{snapshot_id}/export":
    post:
      description: Export the specified vApp snapshot into a new vApp or an existing vApp.
      operationId: createVappExportV1
      parameters:
        - description: ID assigned to the vApp snapshot object.
          in: path
          name: snapshot_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VappExportSnapshotJobConfig"
        description: Configuration for the request to export the specified vApp snapshot.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Accepted request for asynchronous job to export a vApp snapshot.
      summary: Export vApp snapshot
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
  "/vcd/vapp/snapshot/{snapshot_id}/export/options":
    get:
      description: Retrieve summary information for the vApp networks that are available for network connections from the virtual machines in the exported vApp snapshot. The summary also specifies the default vApp network for each virtual machine network connection.
      operationId: getVappSnapshotExportOptionsV1
      parameters:
        - description: ID assigned to the vApp snapshot object to export.
          in: path
          name: snapshot_id
          required: true
          schema:
            type: string
        - description: Target type for the specified vApp export.
          in: query
          name: export_mode
          required: true
          schema:
            enum:
              - ExportToNewVapp
              - ExportToTargetVapp
            type: string
        - description: ID assigned to the target vApp object, when the export is into an existing vApp. When the export is not into a target vApp, remove the 'target_vapp_id' member.
          in: query
          name: target_vapp_id
          required: false
          schema:
            type: string
        - description: ID assigned to a target organization VDC object. Use the ID when exporting a vApp snapshot to create a new vApp on the specified target organization VDC. When the exported vApp snapshot is not used to create a new vApp on a target organization VDC, remove the 'target_org_vdc_id' member.
          in: query
          name: target_org_vdc_id
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VappExportOptions"
          description: vApp snapshot export options.
      summary: Get exportable network configurations
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
  "/vcd/vapp/snapshot/{snapshot_id}/instant_recover":
    post:
      description: Use Instant Recovery to recover specified vApp virtual machines.
      operationId: createVappInstantRecoveryV1
      parameters:
        - description: ID assigned to the vApp snapshot object.
          in: path
          name: snapshot_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VappInstantRecoveryJobConfig"
        description: Configuration for a request to recover specified virtual machines from a vApp snapshot.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the async request initiated for the Instant Recovery job for virtual machines in a vApp snapshot.
      summary: Instant Recovery of vApp virtual machines
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
  "/vcd/vapp/snapshot/{snapshot_id}/instant_recover/options":
    get:
      description: Retrieve the available vApp network connections and the default vApp network connection for the virtual machines in a vApp snapshot. Use this information to configure an Instant Recovery of specified virtual machines in the vApp snapshot.
      operationId: getVappSnapshotInstantRecoveryOptionsV1
      parameters:
        - description: ID assigned to a vApp snapshot object.
          in: path
          name: snapshot_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VappInstantRecoveryOptions"
          description: vApp Instant Recovery options.
      summary: Get Instant Recovery information
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
  "/vcd/vapp/template/snapshot/{snapshot_id}/export":
    post:
      description: Export a vApp template snapashot to a catalog. Use the options endpoint to confirm that exporting to the catalog defaults or the original organization vDC storage profile is possible.
      operationId: createVappTemplateSnapshotExport
      parameters:
        - description: ID assigned to a vApp snapshot object.
          in: path
          name: snapshot_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VappTemplateExportJobConfig"
        description: Configuration for a request to export a vApp template snapshot to a specific catalog.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Request status for asynchronous Export job for vApp template snapshot.
      summary: Export of a vApp template snapshot
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
  "/vcd/vapp/template/snapshot/{snapshot_id}/export/options":
    get:
      description: Retrieve the available choices vApp template storage profile and organization vDC choices in case of exporting to either original organization vDC defaults of the target catalog. In case advanced option of manually deciding org vdc is preferred, this also provides available storage profile choices.
      operationId: getVappTemplateSnapshotExportOptions
      parameters:
        - description: ID assigned to a vApp snapshot object.
          in: path
          name: snapshot_id
          required: true
          schema:
            type: string
        - description: ID of the target catalog object.
          in: query
          name: catalog_id
          required: true
          schema:
            type: string
        - description: Name of template object to create. This is used to verify the existence of a template with the given name. Templates must have unique names.
          in: query
          name: name
          required: true
          schema:
            type: string
        - description: ID assigned to a target organization vDC object. Use the ID when exporting a vApp template snapshot to a specified organization VDC. This ID is used to fetch the avaiable choices to pick the storage profile of the template. Leave this field empty to use the options from the original organization vDC or the target catalog defaults.
          in: query
          name: org_vdc_id
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VappTemplateExportOptionsUnion"
          description: vApp template snapshot export options.
      summary: Get Export information for a vApp template snapshot
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
  "/vcd/vapp/{id}":
    get:
      description: Retrieve detailed information for a specified vApp.
      operationId: getVcdVappV1
      parameters:
        - description: ID assigned to a vApp object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VcdVappDetail"
          description: Detailed information about a vApp object.
      summary: Get details of a specific vApp
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
    patch:
      description: Make changes to the parameters of a specified vApp object.
      operationId: updateVcdVappV1
      parameters:
        - description: ID assigned to a vApp object.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VcdVappPatch"
        description: Parameters to use to update the specified vApp object.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VcdVappDetail"
          description: Details of an updated vApp object.
      summary: Update vApp
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
  "/vcd/vapp/{id}/missed_snapshot":
    get:
      description: Retrieve the timestamp for each missed snapshot for a specified vApp.
      operationId: vcdMissedSnapshotsV1
      parameters:
        - description: ID of the vApp.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissedSnapshotListResponse"
          description: Details for missed snapshots for a vApp.
      summary: Get details about missed snapshots for a vApp
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
  "/vcd/vapp/{id}/search":
    get:
      description: Aggregated search for a file through snapshots of all virtual machines that are presently part of the vApp. Specify the file using a full path prefix or a filename prefix.
      operationId: searchVappV1
      parameters:
        - description: ID of the vApp.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The path query. Use either a path prefix or a filename prefix.
          in: query
          name: path
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppSearchResponseListResponse"
          description: File search results.
      summary: Search for a file in a vApp
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
  "/vcd/vapp/{id}/snapshot":
    delete:
      description: Delete all snapshots for a specified vApp object.
      operationId: deleteVappSnapshotsV1
      parameters:
        - description: ID assigned to a vApp object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Snapshots deleted successfully.
      summary: Delete all snapshots of vApp
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
    get:
      description: Retrieve summary information for each of the snapshot objects of a specified vApp object.
      operationId: queryVappSnapshotV1
      parameters:
        - description: ID assigned to a vApp object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VcdVappSnapshotSummaryListResponse"
          description: Summary information for all snapshots for a vApp object.
      summary: Get list of snapshots of vApp
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
    post:
      description: Start an asynchronous job to create an on-demand snapshot for a specified vApp object.
      operationId: createOnDemandSnapshotV1
      parameters:
        - description: ID assigned to a vApp object.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BaseOnDemandSnapshotConfig"
        description: Configuration for the on-demand backup of a specified vApp object.
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the async job for the on-demand snapshot of a vApp.
      summary: Create an on-demand snapshot for a vApp
      tags:
        - /vcd/vapp
      x-group: vcd_vapp
  /vmware/compute_cluster:
    get:
      description: Get all the clusters belonging to this datacenter.
      operationId: queryComputeCluster
      parameters:
        - description: Filter clusters on data center ID.
          in: query
          name: datacenter_id
          required: false
          schema:
            type: string
        - description: Filter on a primary cluster ID. Also accepts value 'local'.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Determines whether to fetch Compute Clusters with additional privilege checks.
          in: query
          name: snappable_status
          required: false
          schema:
            enum:
              - Protectable
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComputeClusterSummaryListResponse"
          description: Returns list of compute clusters subject to provided filters.
      summary: Get all the clusters belonging to this datacenter
      tags:
        - /vmware/compute_cluster
      x-group: compute_cluster
  "/vmware/compute_cluster/request/{id}":
    get:
      description: Get the details of an asynchronous request that involves a VMware compute cluster.
      operationId: getAsyncRequestStatusForComputeCluster
      parameters:
        - description: ID of an asynchronous request.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of an asynchronous request.
      summary: Get asynchronous request details for VMware cluster
      tags:
        - /vmware/compute_cluster
      x-group: compute_cluster
  "/vmware/compute_cluster/{id}":
    get:
      description: Get details for the compute cluster.
      operationId: getComputeCluster
      parameters:
        - description: ID of the compute cluster.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComputeClusterDetail"
          description: Details of the requested compute cluster.
      summary: Get details for the compute cluster
      tags:
        - /vmware/compute_cluster
      x-group: compute_cluster
    patch:
      description: Update the configuredSlaDomainId for a VMware compute cluster with a specific ID.
      operationId: updateComputeCluster
      parameters:
        - description: ID of the compute cluster.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ComputeClusterUpdate"
        description: Object with changes for the Compute Cluster information.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComputeClusterDetail"
          description: Details of the updated compute cluster.
      summary: Modify information for a VMware compute cluster
      tags:
        - /vmware/compute_cluster
      x-group: compute_cluster
  "/vmware/compute_cluster/{id}/install_io_filter":
    post:
      description: Install the latest version of Rubrik ioFilter to the VMware cluster with a specific ID. The cluster must be in maintenance mode to install the ioFilter successfully. The vCenter of the VMware compute cluster must be of version 6.7 and above.
      operationId: installIoFilter
      parameters:
        - description: ID of the VMware compute cluster.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/FullyQualifiedDomainNameInfo"
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the Rubrik ioFilter installation job.
        "404":
          description: Returned if there is no compute cluster with the given ID.
      summary: Install the Rubrik ioFilter to the VMware cluster with a specific ID
      tags:
        - /vmware/compute_cluster
      x-group: compute_cluster
  "/vmware/compute_cluster/{id}/io_filter":
    get:
      description: Get the summary of the ioFilters on the VMware compute cluster with a specific ID.
      operationId: getIoFilters
      parameters:
        - description: ID of the VMware compute cluster.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IoFilterSummaryListResponse"
          description: List of the ioFilters on the VMware compute cluster.
        "404":
          description: Returned if there is no compute cluster with the given ID.
      summary: Get the ioFilters on the VMware compute cluster with a specific ID
      tags:
        - /vmware/compute_cluster
      x-group: compute_cluster
  "/vmware/compute_cluster/{id}/uninstall_io_filter":
    post:
      description: Uninstall the Rubrik ioFilter from the VMware cluster with a specific ID. The cluster must be in maintenance mode to uninstall the ioFilter successfully. The vCenter of the VMware compute cluster must be of version 6.7 and above.
      operationId: uninstallIoFilter
      parameters:
        - description: ID of the VMware compute cluster.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the Rubrik ioFilter uninstallation job.
        "404":
          description: Returned if there is no compute cluster with the given id.
      summary: Uninstall the Rubrik ioFilter from the VMware cluster with a specific ID
      tags:
        - /vmware/compute_cluster
      x-group: compute_cluster
  "/vmware/compute_cluster/{id}/upgrade_io_filter":
    post:
      description: Upgrade the Rubrik ioFilter for a VMware cluster with a specific ID. The cluster must be in maintenance mode to upgrade the ioFilter successfully. The vCenter of the VMware compute cluster must be of version 6.7 and above.
      operationId: upgradeIoFilter
      parameters:
        - description: ID of the VMware compute cluster.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/FullyQualifiedDomainNameInfo"
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the Rubrik ioFilter upgrade.
        "404":
          description: Returned if there is no compute cluster with the given id.
      summary: Upgrade the Rubrik ioFilter for the VMware cluster with a specific ID
      tags:
        - /vmware/compute_cluster
      x-group: compute_cluster
  /vmware/config/cdp/get_preferred_cdp_network_protocol:
    get:
      description: Returns the current preference of CDM between IPv4 and IPv6 for CDP data transfer.
      operationId: getPreferredCdpNetworkProtocol
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreferredCdpNetworkProtocolObject"
          description: The preferred network protocol to use for transferring CDP data.
      summary: Returns the current preference of CDM between IPv4 and IPv6 for CDP data transfer
      tags:
        - /vmware/config
      x-group: vmware_config
  /vmware/config/cdp/set_preferred_cdp_network_protocol:
    patch:
      description: Set the current preference of CDM between IPv4 and IPv6 for CDP data transfer.
      operationId: setPreferredCdpNetworkProtocol
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PreferredCdpNetworkProtocol"
        description: The preferred network protocol to use for transferring CDP data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreferredCdpNetworkProtocolObject"
          description: The updated preferred network protocol to transfer CDP data over.
      summary: Set the current preference of CDM between IPv4 and IPv6 for CDP data transfer
      tags:
        - /vmware/config
      x-group: vmware_config
  /vmware/config/recovery/networks:
    get:
      description: Get all the networks for snapshot recovery for the specified compute resource.
      operationId: getVmwareRecoveryNetworks
      parameters:
        - description: Get VMware recovery networks for the compute resource ID.
          in: query
          name: compute_resource_id
          required: true
          schema:
            type: string
        - description: The type of the compute resource.
          in: query
          name: compute_resource_type
          required: true
          schema:
            enum:
              - ComputeCluster
              - Host
              - ResourcePool
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VmwareNetworkCollection"
          description: All the VMware networks for the compute resource.
      summary: Get all the VMware recovery networks for a compute resource ID
      tags:
        - /vmware/config
      x-group: vmware_config
  /vmware/hierarchy/export:
    get:
      description: Get VMware Clusters, Hosts, and Resource Pool hierarchy objects that are available as the target for Virtual Machine Export operations.
      operationId: getVmwareHierarchyExport
      parameters:
        - description: Get child objects of given root ID.
          in: query
          name: root_id
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VmwareHierarchyInfoListResponse"
          description: Information about Child Hierarchy Objects of Root.
      summary: Get Available VMware Hierarchy Objects for Export Operations
      tags:
        - /vmware/hierarchy
      x-group: vmware_hierarchy
  "/vmware/hierarchy/{id}/export":
    get:
      description: Get VMware Clusters, Hosts, and Resource Pool hierarchy object detail information by object ID.
      operationId: getVmwareHierarchyObject
      parameters:
        - description: Get VMware hierarchy objects of given ID.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VmwareHierarchyInfo"
          description: VMware hierarchy object details.
      summary: Get VMware Hierarchy Object Information
      tags:
        - /vmware/hierarchy
      x-group: vmware_hierarchy
  /vmware/host:
    get:
      description: Get summary of all the ESXi hypervisor.
      operationId: queryVmwareHost
      parameters:
        - description: ID of the Primary cluster.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Filter by ID of Compute Cluster.
          in: query
          name: compute_cluster_id
          required: false
          schema:
            type: string
        - description: Requests additional data about VMware Hosts based on the specified query value.
          in: query
          name: snappable_status
          required: false
          schema:
            enum:
              - Protectable
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VmwareHostSummaryListResponse"
          description: List of VMware host summaries.
      summary: Get summary of all the ESXi hypervisor
      tags:
        - /vmware/host
      x-group: vmware_host
  "/vmware/host/{id}":
    get:
      description: Get details of a ESXi hypervisor.
      operationId: getVmwareHost
      parameters:
        - description: ID of the VMWare host.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VmwareHostDetail"
          description: Details about the vmware host.
      summary: Get details of a ESXi hypervisor
      tags:
        - /vmware/host
      x-group: vmware_host
    patch:
      description: Update the SLA Domain that is configured for an ESXi hypervisor.
      operationId: updateVmwareHost
      parameters:
        - description: ID of the ESXi hypervisor.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VmwareHostUpdate"
        description: Object with changes for the ESXi hypervisor information.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VmwareHostDetail"
          description: Details for the ESXi hypervisor.
      summary: Update the SLA Domain for an ESXi hypervisor
      tags:
        - /vmware/host
      x-group: vmware_host
  "/vmware/host/{id}/datastore":
    get:
      description: Get details of datastores in a ESXi hypervisor.
      operationId: getVmwareHostDatastore
      parameters:
        - description: ID of the VMWare host.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VmwareHostDatastoreDetail"
          description: Details about the vmware host.
      summary: Get details of datastores in a ESXi hypervisor
      tags:
        - /vmware/host
      x-group: vmware_host
  /vmware/vcenter:
    get:
      description: "Retrieve information for each managed vCenter, including: ID, managed ID, address, username, SLA ID, and primary cluster ID."
      operationId: queryVcenter
      parameters:
        - description: Limits the information to the Rubrik cluster specified by the value of primary_cluster_id. Use 'local' for the Rubrik cluster that is hosting the current REST API session.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Determines whether to fetch vCenters with additional privilege checks.
          in: query
          name: snappable_status
          required: false
          schema:
            enum:
              - Protectable
            type: string
        - description: Don't ping vCenters for connection status. The connection_status field in the response is unusable.
          in: query
          name: ignore_connection_status
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VcenterSummaryListResponse"
          description: Summary information for managed vCenters.
      summary: Get list of vCenters
      tags:
        - /vmware/vcenter
      x-group: vcenter
    post:
      description: (DEPRECATED) Create a vCenter Server object by providing the address and account credentials of the vCenter Server. Initiates an asynchronous job to establish a connection with the vCenter Server and retrieve all metadata. Use GET /vcenter/{id}/status to check status. The recommended endpoint is /v2/vmware/vcenter. This endpoint will remain available in future releases despite deprecation.
      operationId: createVcenter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VcenterConfig"
        description: IP address and account credentials of the vCenter Server server, and ID of the managing Rubrik cluster.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the add vCenter Server request.
      summary: Add vCenter Server
      tags:
        - /vmware/vcenter
      x-group: vcenter
  /vmware/vcenter/hotadd/vm:
    get:
      description: Retrieve summary information for all HotAdd proxy virtual machines.
      operationId: queryHotAddProxyVm
      parameters:
        - description: Limit the list information to HotAdd proxy virtual machines that match the specified HotAdd proxy virtual machine 'name' value.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Attribute to use to sort the HotAdd proxy virtual machines summary information. Optionally use **_sort_order_** to specify whether to sort in ascending or descending order.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - name
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HotAddProxyVmInfoListResponse"
          description: Summary information for HotAdd proxy virtual machines.
      summary: Get a list of HotAdd proxy virtual machines
      tags:
        - /vmware/vcenter
      x-group: vcenter
  "/vmware/vcenter/request/{id}":
    get:
      description: Get details about a vcenter related async request.
      operationId: getVcenterAsyncRequestStatus
      parameters:
        - description: ID of the request.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the async request.
      summary: Get vCenter Server async request
      tags:
        - /vmware/vcenter
      x-group: vcenter
  "/vmware/vcenter/{id}":
    delete:
      description: Initiates an asynchronous job to remove a vCenter Server object. The vCenter Server cannot have VMs mounted through the Rubrik cluster.
      operationId: deleteVcenter
      parameters:
        - description: ID of the vCenter Server. to remove.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the async request.
      summary: Remove vCenter Server
      tags:
        - /vmware/vcenter
      x-group: vcenter
    get:
      description: Retrieve detailed information for a vCenter Server object.
      operationId: getVcenter
      parameters:
        - description: ID of the vCenter Server.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VcenterDetail"
          description: Details for a vCenter Server object.
      summary: Get the details of a vCenter Server
      tags:
        - /vmware/vcenter
      x-group: vcenter
    patch:
      description: Update the SLA Domain that is configured for a vCenter Server.
      operationId: patchVcenter
      parameters:
        - description: ID of the vCenter Server.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VcenterPatch"
        description: Object containing updated vCenter Server information.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VcenterSummary"
          description: Summary of the updated vCenter Server object.
      summary: Update the SLA Domain for a vCenter Server
      tags:
        - /vmware/vcenter
      x-group: vcenter
    put:
      description: Update the address, username and password of the specified vCenter Server object.
      operationId: updateVcenter
      parameters:
        - description: ID of the vCenter Server.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VcenterConfig"
        description: Object containing updated vCenter Server information.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VcenterSummary"
          description: Summary of the updated vCenter Server object.
      summary: Update vCenter Server
      tags:
        - /vmware/vcenter
      x-group: vcenter
  "/vmware/vcenter/{id}/hotadd/bandwidth":
    get:
      description: Get the ingest and export bandwidth limits in Mbps when using HotAdd with the vCenter. These limits are shared across all HotAdd proxies for the Center.
      operationId: getHotAddBandwidth
      parameters:
        - description: The ID of the vCenter server from which to derive the number of proxies needed.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HotAddBandwidthInfo"
          description: Ingest and export bandwidth limits for the vCenter.
      summary: Get the ingest and export bandwidth limits for HotAdd with the vCenter
      tags:
        - /vmware/vcenter
      x-group: vcenter
    post:
      description: Set the ingest and export bandwidth limits in Mbps when using HotAdd with the vCenter. These limits are shared across all HotAdd proxies for the Center.
      operationId: setHotAddBandwidth
      parameters:
        - description: ID of the vCenter server upon which the Rubrik cluster is setting the HotAdd bandwidth limits.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HotAddBandwidthInfo"
        description: The ingest and export bandwidth limits for the vCenter.
        required: true
      responses:
        "204":
          description: The bandwidth was set correctly.
      summary: Set the ingest and export bandwidth limits for HotAdd with the vCenter
      tags:
        - /vmware/vcenter
      x-group: vcenter
  "/vmware/vcenter/{id}/hotadd/needed":
    get:
      description: Get the number of HotAdd proxies that need to be deployed to the vCenter to support the maximum number of ingest jobs.
      operationId: getNumProxiesNeeded
      parameters:
        - description: The ID of the vCenter server for which to get the number of proxies needed.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HotAddProxiesNeededInfo"
          description: Number of HotAdd proxies needed for the vCenter.
      summary: Get the number of HotAdd proxies needed for the vCenter
      tags:
        - /vmware/vcenter
      x-group: vcenter
  "/vmware/vcenter/{id}/hotadd/network":
    get:
      description: Retrieve the user-configured network for HotAdd backup and recovery operations on VMware on AWS.
      operationId: getHotAddNetwork
      parameters:
        - description: ID of the vCenter server for which the Rubrik cluster is retrieving the configured HotAdd network information.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HotAddNetworkConfigWithName"
          description: Configured network information for the HotAdd proxy virtual machines.
      summary: Retrieve the user-configured network for HotAdd operations
      tags:
        - /vmware/vcenter
      x-group: vcenter
    post:
      description: Set the user-configured network for HotAdd backup and recovery operations on VMware on AWS.
      operationId: setHotAddNetwork
      parameters:
        - description: ID of the vCenter server for which the Rubrik cluster is setting the HotAdd network information.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HotAddNetworkConfigWithId"
        description: The information about a static IP address and user-configured vCenter network selected for HotAdd backup and recovery.
        required: true
      responses:
        "204":
          description: The network was set correctly.
      summary: Set the user-configured network for HotAdd backup and recovery
      tags:
        - /vmware/vcenter
      x-group: vcenter
  "/vmware/vcenter/{id}/networks":
    get:
      description: Get the names and IDs of the user configured networks in the vCenter. This information enables users to choose a desired network for backups to go through for VMware Cloud on AWS setups.
      operationId: getNetworks
      parameters:
        - description: The ID of the vCenter server for which to retrieve user-configured networks.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkInfoListResponse"
          description: List of network IDs and Names.
      summary: Get the user-configured networks in the vCenter
      tags:
        - /vmware/vcenter
      x-group: vcenter
  "/vmware/vcenter/{id}/refresh":
    post:
      description: Create a job to refresh the metadata for the specified vCenter Server.
      operationId: createRefresh
      parameters:
        - description: ID of the vCenter Server.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Job Instance ID of the scheduled vCenter Server refresh job.
      summary: Refresh vCenter Server metadata
      tags:
        - /vmware/vcenter
      x-group: vcenter
  "/vmware/vcenter/{id}/refresh_vm":
    post:
      description: Refresh the metadata for a single virtual machine controlled by vCenter.
      operationId: createRefreshVmV1
      parameters:
        - description: The ID of the vCenter server that controls the management of the virtual machine whose metadata will be refreshed.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: The vCenter managed object ID (MOID) of the virtual machine whose metadata will be refreshed.
        required: true
      responses:
        "204":
          description: The virtual machine metadata was refreshed successfully.
      summary: Refresh single virtual machine metadata in a vcenter
      tags:
        - /vmware/vcenter
      x-group: vcenter
  /vmware/vm:
    get:
      description: Get summary of all the VMs.
      operationId: queryVm
      parameters:
        - description: Filter by ID of effective SLA Domain.
          in: query
          name: effective_sla_domain_id
          required: false
          schema:
            type: string
        - description: Filter by primary cluster ID, or **local**.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Ignore these many matches in the beginning.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Filter by the isRelic field of the virtual machine. When this parameter is not set, return both relic and non-relic virtual machines.
          in: query
          name: is_relic
          required: false
          schema:
            type: boolean
        - description: Search by using a virtual machine name.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Search by using a virtual machine managed object ID.
          in: query
          name: moid
          required: false
          schema:
            type: string
        - description: Filter by SLA Domain assignment type.
          in: query
          name: sla_assignment
          required: false
          schema:
            enum:
              - Derived
              - Direct
              - Unassigned
            type: string
        - description: Filters by the name of operating system using infix search.
          in: query
          name: guest_os_name
          required: false
          schema:
            type: string
        - description: Sort results based on the specified attribute.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - effectiveSlaDomainName
              - name
              - moid
              - folderPath
              - infraPath
            type: string
        - description: Sort order, either ascending or descending.
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VirtualMachineSummaryListResponse"
          description: Virtual machine summary.
      summary: Get list of VMs
      tags:
        - /vmware/vm
      x-group: vm
  /vmware/vm/batch_mount:
    post:
      operationId: batchMountSnapshot
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchMountSnapshotJobConfig"
        description: Configuration object containing an array of virtual machine IDs, a way to indicate the snapshot to be chosen and mount configs.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchAsyncRequestStatus"
          description: Status of the Live Mount requests.
      summary: Live mount a snapshot each from a set of virtual machines
      tags:
        - /vmware/vm
      x-group: vm
  /vmware/vm/cdp:
    post:
      operationId: getVmwareCdpLiveInfo
      requestBody:
        content:
          application/json:
            schema:
              items:
                description: ID of the CDP-enabled virtual machine.
                type: string
              type: array
        description: The ID of each CDP-enabled virtual machine for which live info is being retrieved.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchVmwareCdpLiveInfo"
          description: Returns the live CDP info for the CDP-enabled virtual machines.
      summary: Returns the live CDP info for a set of CDP-enabled virtual machines
      tags:
        - /vmware/vm
      x-group: vm
  /vmware/vm/cdp_state:
    post:
      operationId: getVmwareCdpStateInfo
      requestBody:
        content:
          application/json:
            schema:
              items:
                description: ID of the virtual machine.
                type: string
              type: array
        description: The ID of each virtual machine for which CDP state info is being retrieved.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchVmwareCdpStateInfo"
          description: Returns CDP state info for the virtual machines.
      summary: Returns CDP state info for a set of virtual machines
      tags:
        - /vmware/vm
      x-group: vm
  /vmware/vm/make_primary:
    post:
      description: Migrate the primary cluster with which the agent is able to communicate. For disaster recovery when migrating everything over from another cluster, the /host/make_primary endpoint can be used with the oldPrimaryClusterUuid parameter.
      operationId: vmMakePrimary
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: IDs of hosts to migrate.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Asynchronous request for making this cluster primary.
      summary: Make this cluster the primary for agents on a set of VMs
      tags:
        - /vmware/vm
      x-group: vm
  /vmware/vm/missed_recoverable_range:
    post:
      operationId: getVmwareVmMissedRecoverableRangesInBatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchVmwareVmMissedRecoverableRangesRequest"
        description: The batch request and the date ranges (optional) as a filter. The batch request includes the ID of each CDP-enabled virtual machine for which missed recoverable ranges are being retrieved.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchVmwareVmMissedRecoverableRanges"
          description: Returns the missed recoverable ranges for a set of CDP-enabled virtual machines.
      summary: Returns the recoverable ranges that were missed for a set of CDP-enabled virtual machines
      tags:
        - /vmware/vm
      x-group: vm
  /vmware/vm/recoverable_range:
    post:
      operationId: getVmwareVmRecoverableRangesInBatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchVmwareVmRecoverableRangesRequest"
        description: The batch request, which includes the ID of each CDP-enabled virtual machine for which recoverable ranges are being retrieved, and optionally the date ranges as a filter.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchVmwareVmRecoverableRanges"
          description: Returns the recoverable ranges for a set of CDP-enabled virtual machines.
      summary: Returns the recoverable ranges for a set of CDP-enabled virtual machines
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/request/{id}":
    get:
      description: Get the details of an asynchronous request that involves a VMware virtual machine.
      operationId: getAsyncRequestStatus
      parameters:
        - description: ID of an asynchronous request.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of an asynchronous request.
      summary: Get asynchronous request details for VM
      tags:
        - /vmware/vm
      x-group: vm
  /vmware/vm/snapshot/bulk:
    post:
      description: Bulk operation of taking on-demand snapshot for given virtual machines.
      operationId: bulkCreateOnDemandBackup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkOnDemandSnapshotJobConfig"
        description: The IDs of the virtual machines for which to take an on-demand snapshot and the ID of the SLA Domain to assign to the resulting snapshot.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchAsyncRequestStatus"
          description: Status of the on-demand backup requests.
      summary: Take an on-demand snapshot of multiple virtual machines
      tags:
        - /vmware/vm
      x-group: vm
  /vmware/vm/snapshot/mount:
    get:
      description: Retrieve summary information about Live Mount activity.
      operationId: queryMountV1
      parameters:
        - description: Filters information by virtual machine ID.
          in: query
          name: vm_id
          required: false
          schema:
            type: string
        - description: Starting position in the list of Live Mount entries contained in the response. The summary information includes the specified numbered entry and all higher numbered entries. Use with **_limit_** to retrieve the summary information as smaller groups of entries, e.g. for paging of the results.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Limit the summary information to a specified maximum number of entries. Optionally, use with **_offset_** to start the count at a specified point. Default is 25.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VmwareVmMountSummaryV1ListResponse"
          description: Summary information for all Live Mounts.
      summary: Get Live Mount information
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/snapshot/mount/{id}":
    delete:
      description: Create a request to delete a Live Mount virtual machine.
      operationId: createUnmount
      parameters:
        - description: ID of a Live Mount.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Force unmount to remove metadata when the datastore of the Live Mount virtual machine was moved off of the Rubrik cluster.
          in: query
          name: force
          required: false
          schema:
            type: boolean
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the delete request.
      summary: Delete a Live Mount VM
      tags:
        - /vmware/vm
      x-group: vm
    get:
      description: Retrieve detailed information for a specified Live Mount.
      operationId: getMountV1
      parameters:
        - description: ID of a Live Mount.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VmwareVmMountDetailV1"
          description: Detailed information for the specified Live Mount.
      summary: Get information for a Live Mount
      tags:
        - /vmware/vm
      x-group: vm
    patch:
      description: Power a specified Live Mount virtual machine on or off. Pass **_true_** to power the virtual machine on and pass **_false_** to power the virtual machine off.
      operationId: updateMount
      parameters:
        - description: ID of a Live Mount.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMountConfig"
        description: Power state configuration.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VmwareVmMountDetailV1"
          description: Details of the Live Mount.
      summary: Power a Live Mount on and off
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/snapshot/mount/{id}/relocate":
    post:
      description: Run storage VMotion to relocate a specified Live Mount into another data store.
      operationId: relocateMount
      parameters:
        - description: ID of the live mount.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RelocateMountConfig"
        description: Configuration for the RelocateMount request to another data store.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of an asynchronous request to migrate datastore.
      summary: Relocate a virtual machine to another datastore
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/snapshot/{id}":
    delete:
      description: Designate a snapshot as expired and available for garbage collection. The snapshot must be an on-demand snapshot or a snapshot from a virtual machine that is not assigned to an SLA Domain.
      operationId: deleteVmwareSnapshot
      parameters:
        - description: ID of snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Location of the snapshot. Use **_local_** to delete only the local copy of the snapshot. Or use **_all_** to delete the snapshot locally, on a replication target, and at an archival location.
          in: query
          name: location
          required: true
          schema:
            enum:
              - all
              - local
            type: string
      responses:
        "204":
          description: Snapshot successfully deleted.
      summary: Delete VM snapshot
      tags:
        - /vmware/vm
      x-group: vm
    get:
      description: Retrieve detailed information about a virtual machine snapshot.
      operationId: getSnapshot
      parameters:
        - description: ID of a snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VmSnapshotDetail"
          description: Snapshot details.
      summary: Get VM snapshot details
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/snapshot/{id}/browse":
    get:
      description: For a virtual machine snapshot, list the directories and files that are beneath a specified file system path.
      operationId: browseVmwareSnapshot
      parameters:
        - description: ID of snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The absolute path of the starting point for the directory listing.
          in: query
          name: path
          required: true
          schema:
            type: string
        - description: Starting position in the list of path entries contained in the query results, sorted by lexicographical order. The response includes the specified numbered entry and all higher numbered entries.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
        - description: Maximum number of entries in the response.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrowseResponseListResponse"
          description: List of files and directories at the specified path.
      summary: List files in VM snapshot
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/snapshot/{id}/download":
    post:
      description: Provides a method for retrieving a snapshot, that is not available locally, from an archival location.
      operationId: createDownloadSnapshotFromCloud
      parameters:
        - description: ID of snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the download request.
      summary: Download snapshot from archive
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/snapshot/{id}/download_file":
    post:
      description: Create a request to download a file from a virtual machine snapshot.
      operationId: createDownloadFileJob
      parameters:
        - description: ID of a snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DownloadFileJobConfig"
        description: Configuration for the file download request.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the file download request.
      summary: Download file from VM snapshot
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/snapshot/{id}/export":
    post:
      description: Export a virtual machine from a snapshot, using a specified hypervisor host as the datastore.
      operationId: createExportV1
      parameters:
        - description: ID of a snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ExportSnapshotJobConfigV1"
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the export request.
      summary: Export VM snapshot
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/snapshot/{id}/export_with_download":
    post:
      description: Download a snapshot from an archival location and then export a virtual machine using the downloaded snapshot.
      operationId: createExportWithDownloadFromCloudV1
      parameters:
        - description: ID of a snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ExportSnapshotJobConfigV1"
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the download request.
      summary: Download a snapshot from an archival location, then export a virtual machine using the downloaded snapshot
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/snapshot/{id}/instant_recover":
    post:
      description: Instantly recovery a virtual machine from a snapshot. The Instant Recovery request starts the virtual machine with networking enabled and renames and powers off the source virtual machine, if it still exists.
      operationId: createInstantRecovery
      parameters:
        - description: ID of Snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstantRecoveryJobConfig"
        description: Configuration for the Instant Recovery request.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the Instant Recovery request.
      summary: Instantly recover a VM
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/snapshot/{id}/mount":
    post:
      description: Create a request to Live Mount a virtual machine from a snapshot using a specified configuration.
      operationId: createMountV1
      parameters:
        - description: ID of a snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MountSnapshotJobConfigV1"
        description: Configuration for the Live Mount request.
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the Live Mount request.
      summary: Live mount a VM from a snapshot
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/snapshot/{id}/restore_file":
    post:
      description: Create a request to restore a file or folder to the source virtual machine.
      operationId: createRestoreFileJob
      parameters:
        - description: ID of a snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestoreFileJobConfig"
        description: Configuration for the restore request.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status of the restore request.
      summary: Restore file from VM snapshot
      tags:
        - /vmware/vm
      x-group: vm
  /vmware/vm/snapshots:
    post:
      description: Retrieve snapshot summaries for a list of virtual machines.
      operationId: querySnapshotsForVms
      requestBody:
        content:
          application/json:
            schema:
              items:
                description: ID of the virtual machine.
                type: string
              type: array
        description: IDs of the virtual machines.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchVmSnapshotSummaries"
          description: Snapshot summaries for a list of virtual machines.
      summary: Get snapshot information for a list of virtual machines
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/virtual_disk/{id}":
    get:
      description: Detailed about the specific Virtual Disk.
      operationId: getVirtualDisk
      parameters:
        - description: ID of the Virtual Disk.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VirtualDiskDetail"
          description: Return details about the virtual disk.
      summary: Details about the specific Virtual Disk
      tags:
        - /vmware/vm
      x-group: virtual_disk
    patch:
      description: Update a specific Virtual Disk.
      operationId: updateVirtualDisk
      parameters:
        - description: ID of the Virtual Disk.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VirtualDiskUpdate"
        description: Virtual Disk update information.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VirtualDiskDetail"
          description: The updated Virtual Disk.
      summary: Update a specific Virtual Disk
      tags:
        - /vmware/vm
      x-group: virtual_disk
  "/vmware/vm/{id}":
    get:
      description: Retrieve details for a virtual machine.
      operationId: getVm
      parameters:
        - description: ID of the virtual machine.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VirtualMachineDetail"
          description: Virtual machine details.
      summary: Get VM details
      tags:
        - /vmware/vm
      x-group: vm
    patch:
      description: Update a virtual machine with specified properties. Use the guestCredential field to update the guest credential for a specified virtual machine.
      operationId: updateVm
      parameters:
        - description: ID of virtual machine.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VirtualMachineUpdateWithSecret"
        description: Properties to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VirtualMachineDetail"
          description: Virtual machine details.
      summary: Update VM
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/{id}/guest_script/run":
    post:
      description: Run the specified preBackup, postSnap, or postBackup script in the guest OS of a virtual machine. The script must exist and meet requirements.
      operationId: runGuestOsScript
      parameters:
        - description: ID of the virtual machine.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VmGuestScriptRunConfig"
        description: Configuration used to run the specified preBackup, postSnap, or postBackup guest OS script.
        required: true
      responses:
        "204":
          description: Guest OS script ran successfully and returned a 0 exit code.
      summary: Run guest OS script
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/{id}/missed_recoverable_range":
    get:
      description: Gets a list of time ranges to which a CDP-enabled virtual machine cannot perform a point-in-time recovery. The time ranges are indicated by start and end timestamps listed as date-time strings.
      operationId: getVmwareMissedRecoverableRanges
      parameters:
        - description: The virtual machine ID.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Filter ranges to end after this time. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.
          in: query
          name: after_time
          required: false
          schema:
            format: date-time
            type: string
        - description: Filter ranges to start before this time. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.
          in: query
          name: before_time
          required: false
          schema:
            format: date-time
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VmwareRecoverableRangeListResponse"
          description: Returns the missed recoverable ranges for the virtual machine.
      summary: Get missed time ranges for point in time recovery
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/{id}/missed_snapshot":
    get:
      description: Retrieve details about the missed snapshots for a virtual machine.
      operationId: missedSnapshots
      parameters:
        - description: ID of a virtual machine.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissedSnapshotListResponse"
          description: Missed snapshot details for a virtual machine.
      summary: Get details about missed snapshots for a VM
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/{id}/recoverable_range":
    get:
      description: Gets time ranges available for point-in-time recovery. The time ranges are indicated by start and end date-time strings.
      operationId: getVmwareRecoverableRanges
      parameters:
        - description: The virtual machine ID.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Filter ranges to end after this time. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.
          in: query
          name: after_time
          required: false
          schema:
            format: date-time
            type: string
        - description: Filter ranges to start before this time. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.
          in: query
          name: before_time
          required: false
          schema:
            format: date-time
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VmwareRecoverableRangeListResponse"
          description: Returns the recoverable ranges for the virtual machine.
      summary: Get available time ranges for point in time recovery
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/{id}/register_agent":
    post:
      description: Register the Rubrik Backup Service that is running on a specified host with the specified Rubrik cluster.
      operationId: vmRegisterAgent
      parameters:
        - description: ID assigned to a virtual machine object.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successfully registered the Rubrik Backup Service for a specified virtual machine.
      summary: Register Rubrik Backup Service
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/{id}/request/force_full_snapshot":
    get:
      description: Retrieve the configuration that has been set for forcing a full snapshot for a VMware virtual machine.
      operationId: getVmForceFullSpec
      parameters:
        - description: ID of the VMware virtual machine.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VmForceFullResponse"
          description: Return the configuration for forcing a full snapshot for the VMware virtual machine.
      summary: Retrieve the configuration for forcing a full snapshot of a VMware virtual machine
      tags:
        - /vmware/vm
      x-group: vm
    post:
      description: Request a full snapshot to be taken for the next backup job of a VMware virtual machine.
      operationId: requestVmForceFullSnapshot
      parameters:
        - description: ID of the VMware virtual machine.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VmForceFullRequest"
        description: Configuration for forcing a full snapshot on the VMware virtual machine.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VmForceFullResponse"
          description: Returns the response to the request for a forced full snapshot.
      summary: Request a full snapshot for the next backup job of a VMware virtual machine
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/{id}/search":
    get:
      description: Search for a file in the snapshots of a a virtual machine. Specify the file by full path prefix or filename prefix.
      operationId: searchVm
      parameters:
        - description: ID of the virtual machine.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The path query. Use either a path prefix or a filename prefix.
          in: query
          name: path
          required: true
          schema:
            type: string
        - description: Maximum number of entries in the response.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: Pagination cursor returned by the previous request.
          in: query
          name: cursor
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponseListResponse"
          description: File search results.
      summary: Search for a file from a VM
      tags:
        - /vmware/vm
      x-group: vm
  "/vmware/vm/{id}/snapshot":
    delete:
      description: Delete all of the snapshots from a virtual machine.
      operationId: deleteVmwareSnapshots
      parameters:
        - description: Virtual machine ID.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Snapshots successfully deleted.
      summary: Delete all snapshots of VM
      tags:
        - /vmware/vm
      x-group: vm
    get:
      description: Retrieve summary information for the snapshots of a virtual machine.
      operationId: querySnapshot
      parameters:
        - description: ID of the virtual machine.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VmSnapshotSummaryListResponse"
          description: Summary snapshot information for a virtual machine.
      summary: Get list of snapshots of VM
      tags:
        - /vmware/vm
      x-group: vm
    post:
      description: Use the ID of a virtual machine to create an on-demand snapshot.
      operationId: createOnDemandBackup
      parameters:
        - description: ID of the virtual machine.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BaseOnDemandSnapshotConfig"
        description: Configuration for the on-demand snapshot.
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: On-demand snapshot status.
      summary: Create an on-demand snapshot for a VM
      tags:
        - /vmware/vm
      x-group: vm
  /volume_group:
    get:
      description: Get summary of all Volume Groups.
      operationId: queryVolumeGroup
      parameters:
        - description: The ID of the SLA Domain that controls the protection of the Volume Group.
          in: query
          name: effective_sla_domain_id
          required: false
          schema:
            type: string
        - description: The ID of the Rubrik cluster that provides primary protection for the Volume Group.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Limit the number of matches returned.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Ignore these many matches in the beginning.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Specifies whether the results should contain only Volume Groups that are accessible on the Rubrik cluster.
          in: query
          name: is_relic
          required: false
          schema:
            type: boolean
        - description: The name of the Volume Group.
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: The type of SLA assigned to the Volume Group.
          in: query
          name: sla_assignment
          required: false
          schema:
            enum:
              - Derived
              - Direct
              - Unassigned
            type: string
        - description: The Volume Group attribute to use in storing the responses. Valid attributes are `name` and `effectiveSlaDomainName`.
          in: query
          name: sort_by
          required: false
          schema:
            default: name
            enum:
              - name
              - effectiveSlaDomainName
            type: string
        - description: The order to sort the responses. Valid choices are asc (ascending) or desc (descending).
          in: query
          name: sort_order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeGroupSummaryListResponse"
          description: Get Volume Groups summary list.
      summary: Get list of Volume Groups
      tags:
        - /volume_group
      x-group: volume_group
  /volume_group/snapshot/mount:
    get:
      description: Retrieves information for each Volume Group mount. The information returned includes the following items, when available. id (the unique ID of the mount), name (the name of the Volume Group), snapshotDate (the snapshot date), sourceVolumeGroupId (the ID of the Volume Group from which this snapshot was created), sourceHostId (the ID of the source host), sourceHostName (the name of the source host), mountedDate (the date when the mount was created), mountedVolumes (information on the mounted volumes), targetHostId (the ID of the mounted volumes host), targetHostName (the name of the mounted volumes host), mountRequestId (the ID of the job instance that initiated the mount), unmountRequestId (the ID of the job instance that initiated the request to remove the mount), isReady (whether the Volume Group mount is ready to use), and restoreScriptSmbPath (the link to the script that can perform bare-metal recovery).
      operationId: queryVolumeGroupSnapshotMount
      parameters:
        - description: The ID of the source Volume Group.
          in: query
          name: source_volume_group_id
          required: false
          schema:
            type: string
        - description: A prefix of the source host name. The prefix is used as a response filter when available.
          in: query
          name: source_host_name
          required: false
          schema:
            type: string
        - description: The Volume Group mount attribute used in sorting the responses. Valid choices are name, sourceHostName, snapshotDate, and mountedDate.
          in: query
          name: sort_by
          required: false
          schema:
            enum:
              - name
              - sourceHostName
              - snapshotDate
              - mountedDate
            type: string
        - description: The order to sort the responses. Valid choices are asc (ascending) or desc (descending).
          in: query
          name: sort_order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
        - description: Ignore these many matches in the beginning.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
        - description: Limit the number of matches returned. The default value is 25.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            minimum: 0
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeGroupMountSummaryListResponse"
          description: Returns summary information for all mounts.
      summary: Get summary information for all mounts
      tags:
        - /volume_group
      x-group: volume_group
  "/volume_group/snapshot/mount/{id}":
    get:
      description: Retrieve information on a Volume Group mount. The information returned includes the following items, when available. id (the unique ID of the mount), name (the name of the Volume Group), snapshotDate (the snapshot date), sourceVolumeGroupId (The ID of the Volume Group from which this snapshot was created), sourceHostId (the ID of the source host), sourceHostName (the name of the source host), mountedDate (the date when the mount was created), mountedVolumes (the mounted volumes information), targetHostId (the ID of the mounted volumes host), targetHostName (the name of the mounted volumes host), mountRequestId (the ID of the job instance that initiated the mount), unmountRequestId (the ID of the job instance that intiated the request to remove the mount), isReady (whether the Volume Group mount is ready to use), and restoreScriptSmbPath (the link to the script that can perform bare-metal recovery).
      operationId: getVolumeGroupSnapshotMount
      parameters:
        - description: The ID of the Volume Group mount.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeGroupMountSummary"
          description: Returns detail information for a specified live mount.
      summary: Get summary information for a mount
      tags:
        - /volume_group
      x-group: volume_group
  "/volume_group/snapshot/{id}":
    get:
      description: Retrieve detailed information about a snapshot.
      operationId: getVolumeGroupSnapshot
      parameters:
        - description: The ID of the Volume Group snapshot.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeGroupSnapshotDetail"
          description: Returns details about a snapshot.
      summary: Get Volume Group snapshot details
      tags:
        - /volume_group
      x-group: volume_group
  "/volume_group/{id}":
    get:
      description: Detailed view of a Volume Group.
      operationId: getVolumeGroup
      parameters:
        - description: The ID of the Volume Group.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeGroupDetail"
          description: Return details about the Volume Group.
      summary: Get Volume Group details
      tags:
        - /volume_group
      x-group: volume_group
    patch:
      description: Patch Volume Group with specified properties.
      operationId: patchVolumeGroup
      parameters:
        - description: The ID of Volume Group.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VolumeGroupPatch"
        description: Properties to update for this Volume Group.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeGroupDetail"
          description: Return details about the Volume Group.
      summary: Update Volume Group properties
      tags:
        - /volume_group
      x-group: volume_group
  "/volume_group/{id}/latest_snapshot":
    get:
      description: Retrieve the latest snapshot summary of a Volume Group.
      operationId: queryVolumeGroupLatestSnapshot
      parameters:
        - description: ID of the Volume Group.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/VolumeGroupSnapshotSummary"
                type: array
          description: |
            Returns a summary of a Volume Group's latest snapshot. Returns an empty array if there is no snapshot summary.
      summary: Get the latest snapshot of the Volume Group
      tags:
        - /volume_group
      x-group: volume_group
  "/volume_group/{id}/request/force_full_snapshot":
    get:
      description: Retrieve the configuration for forcing a full snapshot for a Volume Group.
      operationId: getVolumeGroupForceFullSpec
      parameters:
        - description: The ID of the Volume Group.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeGroupForceFullResponse"
          description: Return the configuration for forcing a full snapshot on the Volume Group.
      summary: Retrieve the configuration for forcing a full snapshot
      tags:
        - /volume_group
      x-group: volume_group
    post:
      description: Request a full snapshot to be taken during the next backup job of a Volume Group.
      operationId: requestVolumeGroupForceFullSnapshot
      parameters:
        - description: The ID of the Volume Group.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VolumeGroupForceFullRequest"
        description: Configuration for forcing a full snapshot on the Volume Group.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeGroupForceFullResponse"
          description: Return the configuration for forcing a full snapshot on the Volume Group.
      summary: Request a full snapshot on the next backup job of a Volume Group
      tags:
        - /volume_group
      x-group: volume_group
  "/volume_group/{id}/snapshot":
    get:
      description: Retrieve snapshot details for a Volume Group.
      operationId: queryVolumeGroupSnapshot
      parameters:
        - description: The ID of the Volume Group.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeGroupSnapshotSummaryListResponse"
          description: Returns summary information for all snapshots.
      summary: Get list of snapshots of the Volume Group
      tags:
        - /volume_group
      x-group: volume_group
    post:
      description: Create an on-demand snapshot for the given Volume Group ID.
      operationId: createOnDemandVolumeGroupBackup
      parameters:
        - description: The ID of the Volume Group.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VolumeGroupOnDemandSnapshotConfig"
        description: Configuration for the on-demand backup. Configuration values are `volumeIdsIncludedInSnapshot`, which specifies the unique ID of each volume that is part of this snapshot of the Volume Group, and `slaID`, the ID of the SLA Domain for the snapshot.
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncRequestStatus"
          description: Status for the backup request.
      summary: Create on-demand snapshot for the Volume Group
      tags:
        - /volume_group
      x-group: volume_group
  /windows_cluster:
    get:
      description: Returns a list of summary information for Windows server failover clusters.
      operationId: queryWindowsCluster
      parameters:
        - description: Filter by primary_cluster_id. Use **local** for the local cluster.
          in: query
          name: primary_cluster_id
          required: false
          schema:
            type: string
        - description: Filter by is_agentless flag.
          in: query
          name: is_agentless
          required: false
          schema:
            type: boolean
        - description: Determines whether Windows clusters are fetched with additional privilege checks.
          in: query
          name: snappable_status
          required: false
          schema:
            enum:
              - Protectable
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WindowsClusterSummaryListResponse"
          description: Returned if the query was successful.
      summary: Get summary information for Windows clusters
      tags:
        - /windows_cluster
      x-group: windows_cluster
  "/windows_cluster/{id}":
    get:
      description: Returns a detailed view of a Windows server failover cluster.
      operationId: getWindowsCluster
      parameters:
        - description: ID of the Windows cluster.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WindowsClusterDetail"
          description: Returned if the query was successful.
      summary: Get detailed information for a Windows cluster
      tags:
        - /windows_cluster
      x-group: windows_cluster
components:
  requestBodies:
    BaseOnDemandSnapshotConfig:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseOnDemandSnapshotConfig"
      description: Configuration for the on-demand backup.
    ExportSnapshotJobConfigV1:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ExportSnapshotJobConfigV1"
      description: Configuration for the export request.
      required: true
    FullyQualifiedDomainNameInfo:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FullyQualifiedDomainNameInfo"
      required: true
    HostRegister:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HostRegister"
      description: Registration definition for a host.
      required: true
    LdapServiceInfoUpdate:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LdapServiceInfoUpdate"
      description: Information for updating an authentication domain.
      required: true
    SyslogExportRuleFull:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SyslogExportRuleFull"
      description: Syslog export rule.
      required: true
  responses:
    RequestFailedException:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RequestFailedException"
      description: Request failed.
  schemas:
    ActionDetails:
      properties:
        actionString:
          description: Action script to run.
          type: string
        isEnabled:
          description: Flag to determine whether action script needs to be run.
          type: boolean
      required:
        - actionString
        - isEnabled
      type: object
    ActivityLogSummaryV1:
      properties:
        afterId:
          description: The serialized AfterId of the response, if any.
          type: string
        eventDetailList:
          description: List of the events in the event series.
          items:
            $ref: "#/components/schemas/EventSummaryV1"
          type: array
        eventSeriesStatus:
          $ref: "#/components/schemas/EventSeriesStatusV1"
        latestEvent:
          $ref: "#/components/schemas/EventSummaryV1"
        warningCount:
          description: The number of events in the same series as the specified event that have the warning status.
          format: int32
          type: integer
      required:
        - latestEvent
        - warningCount
      type: object
    ActivityLogSummaryV1ListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/ActivityLogSummaryV1"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    AdaptiveThrottlingSettingsVmwareFields:
      properties:
        vmwareThrottlingSettings:
          $ref: "#/components/schemas/VmwareAdaptiveThrottlingSettings"
      type: object
    AdvancedLdapConfiguration:
      properties:
        groupMaxLevel:
          description: Maximum level of groups to query. Set to 1 to query the immediate groups to which a user belongs. Leave blank to query all the groups to which a user belongs. Valid values are between 1 and 50 inclusive. When ldapSearchAcrossIntegrations is set to be true, this value is ignored. When this value is set, then for this ldap service, ldapActiveDirectoryDisableMatchingRuleInChain is ignored and assumed to be true.
          format: int32
          type: integer
        groupMemberAttribute:
          description: LDAP field that contains the group members. For example, Active Directory uses the field "member".
          type: string
        groupMembershipAttribute:
          description: Points to the group that this entry belongs to. For example, Active Directory uses the field "memberOf".
          type: string
        groupSearchFilter:
          description: A string representation of the LDAP group search filter in RFC4515 format. For example, a group search filter for Active Directory has the string representation (objectCategory=group).
          type: string
        userNameSearchAttribute:
          description: Specifies the user name. Active Directory searches can use the attributes sAMAccountName and userPrincipalName.
          type: string
        userSearchFilter:
          description: A string representation of the LDAP user search filter in RFC4515 format. For example, an Active Directory user search filter that selects all enabled user objects has the following string representation (&(objectCategory=person) (objectClass=user) (!(userAccountControl:1.2.840.113556.1.4.803:=2))).
          type: string
      type: object
    AdvancedUiConfigAttributes:
      properties:
        retentionType:
          $ref: "#/components/schemas/SlaTimeUnit"
        timeUnit:
          $ref: "#/components/schemas/SlaTimeUnit"
      required:
        - retentionType
        - timeUnit
      type: object
    AgentSecondaryCertificateInfo:
      properties:
        certId:
          description: ID of the certificate.
          type: string
        clusterUuid:
          description: Parsed cluster ID from the certificate.
          type: string
        isAgentEnabled:
          description: Whether this certificate has been marked for use by agents.
          type: boolean
        name:
          description: Display name for the certificate.
          type: string
      required:
        - certId
        - clusterUuid
        - isAgentEnabled
        - name
      type: object
    AgentSecondaryCertificateInfoListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/AgentSecondaryCertificateInfo"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    AgentStatus:
      properties:
        agentStatus:
          description: The agent connection status.
          type: string
        disconnectReason:
          description: The reason the agent disconnected.
          type: string
      required:
        - agentStatus
      type: object
    AppSearchResponse:
      allOf:
        - $ref: "#/components/schemas/SearchResponse"
        - properties:
            childObjectId:
              description: ID assigned to the child virtual machine of the vApp where this file was found.
              type: string
            childObjectName:
              description: Name of the child virtual machine of the vApp where this file was found.
              type: string
          required:
            - childObjectId
            - childObjectName
          type: object
    AppSearchResponseListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/AppSearchResponse"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    ApplyLegalHoldDefinition:
      properties:
        holdConfig:
          $ref: "#/components/schemas/HoldConfig"
        snapshotId:
          type: string
      required:
        - holdConfig
        - snapshotId
      type: object
    ArchivalSpec:
      properties:
        archivalThreshold:
          format: int64
          type: integer
        archivalTieringSpec:
          $ref: "#/components/schemas/ArchivalTieringSpec"
        isPassthroughSupported:
          description: |
            A Boolean value that identifies whether the archival location type supports direct archive backups.
          type: boolean
        locationId:
          type: string
        locationName:
          type: string
      required:
        - archivalThreshold
        - locationId
      type: object
    ArchivalSpecV2:
      properties:
        archivalThreshold:
          description: Amount of time, in seconds, after which the snapshot must be uploaded.
          format: int64
          type: integer
        archivalTieringSpec:
          $ref: "#/components/schemas/ArchivalTieringSpec"
        isPassthroughSupported:
          description: |
            Boolean value that indicates if the archival location type supports direct archive backups.
          type: boolean
        locationId:
          type: string
        locationName:
          type: string
        polarisManagedId:
          description: |
            The Polaris managed ID of an archival location. At least one of the parameters locationId and polarisManagedId must be defined to correctly refer to an archival location.
          type: string
      required:
        - archivalThreshold
      type: object
    ArchivalTieringSpec:
      properties:
        coldStorageClass:
          $ref: "#/components/schemas/CloudStorageColdTier"
        isInstantTieringEnabled:
          description: |
            A Boolean value that determines whether to immediately tier uploaded snapshots to cold storage. When this value is 'true,' uploaded snapshots are immediately tiered to cold storage. When this value is 'false,' snapshots are marked as eligible for tiering to cold storage after their time on the archival location exceeds the configured minimum accessible duration.
          type: boolean
        minAccessibleDurationInSeconds:
          description: |
            Specifies an interval in seconds. Uploaded snapshots are accessible for instant recovery for the duration of the specified interval. This value is ignored when Instant Tiering is enabled.
          format: int64
          type: integer
        shouldTierExistingSnapshots:
          description: |
            Indicates if existing snapshots for all objects protected by the SLA should be tiered. If not specified, this defaults to false. Only the snapshots that exist in the archival location associated with the SLA will be tiered.
          type: boolean
      required:
        - isInstantTieringEnabled
      type: object
    AsyncRequestStatus:
      properties:
        endTime:
          description: The end time of the request.
          format: date-time
          type: string
        error:
          $ref: "#/components/schemas/RequestErrorInfo"
        id:
          description: The ID of the request object used to poll the status.
          type: string
        links:
          description: References to any related objects.
          items:
            $ref: "#/components/schemas/Link"
          type: array
        nodeId:
          description: The ID of the node where the job ran.
          type: string
        progress:
          description: The current percentage progress of the asynchronous request.
          format: double
          type: number
        startTime:
          description: The start time of the request.
          format: date-time
          type: string
        status:
          description: Status of the ID.
          type: string
      required:
        - id
        - links
        - status
      type: object
    AuthDomainType:
      description: The type of authentication domain.
      enum:
        - Local
        - Ldap
        - Idp
      type: string
    AvailableVersionInfo:
      properties:
        availability:
          $ref: "#/components/schemas/SoftwareAvailability"
        description:
          description: |
            Brief description of the Rubrik CDM version. An example response value is "Rubrik 5.0 (GA)".
          type: string
        downloadJobInfo:
          $ref: "#/components/schemas/DownloadJobInfo"
        generalAvailabilityReleaseDateForReleaseFamily:
          description: The date the Rubrik CDM family was released. This date is only available for software images stored remotely and not yet downloaded.
          type: string
        md5sum:
          description: The MD5 checksum of the software image. This value is used to verify the integrity of the package download.
          type: string
        releaseDate:
          description: The date the Rubrik CDM version was released. This is only available for software images stored remotely and not yet downloaded.
          type: string
        releaseNotes:
          description: The URL used to access the version Release Notes for the Rubrik CDM software image. The URL is available only for software images stored remotely and not yet downloaded.
          type: string
        remoteDownloadUrl:
          description: The remote download URL of the Rubrik CDM software image. This URL is used to download the software to the Rubrik cluster.
          type: string
        size:
          description: The size, in bytes, of the downloaded software image.
          format: int64
          type: integer
        version:
          description: The version of Rubrik CDM available in the Rubrik cluster or in the Rubrik remote central repository.
          type: string
      required:
        - availability
        - version
      type: object
    AwsEc2InstanceSlaObjectCount:
      properties:
        numEc2Instances:
          description: The number of EC2 instances protected under this SLA Domain.
          format: int32
          type: integer
      type: object
    BackupTaskDiagnosticInfo:
      properties:
        expectedEndTime:
          description: The expected completion time of the task.
          format: date-time
          type: string
        queueTime:
          description: The scheduled start time of the task.
          format: date-time
          type: string
        taskStatus:
          $ref: "#/components/schemas/DiagnosticTaskStatus"
      required:
        - taskStatus
      type: object
    BackupWindow:
      properties:
        durationInHours:
          format: int32
          type: integer
        startTimeAttributes:
          $ref: "#/components/schemas/SlaStartTimeAttributes"
      required:
        - durationInHours
        - startTimeAttributes
      type: object
    BaseGuestCredential:
      properties:
        password:
          description: Password for the account used to login to the VM guest OS.
          type: string
          x-secret: true
        username:
          description: Username for the account used to login to the VM guest OS. To include a domain, use the format <domain>\<username>.
          type: string
      required:
        - password
        - username
      type: object
    BaseGuestCredentialDetail:
      properties:
        username:
          type: string
      required:
        - username
      type: object
    BaseOnDemandSnapshotConfig:
      properties:
        slaId:
          type: string
      type: object
    BaseSnapshotDetail:
      properties:
        config:
          type: string
        isCorrupt:
          type: boolean
      type: object
    BaseSnapshotSummary:
      properties:
        archivalLocationIds:
          items:
            type: string
          type: array
        cloudState:
          description: |
            Integer value that represents the archival state of a snapshot. 0 means the snapshot is not archived. 2 means the snapshot is archived. 3 means the snapshot is downloaded from the archival location. 4 means the snapshot is in the process of being downloaded from the archival location. 6 means the snapshot is stored locally and at the archival location.
          format: int64
          type: integer
        cloudStorageTier:
          $ref: "#/components/schemas/SnapshotCloudStorageTier"
        consistencyLevel:
          type: string
        date:
          format: date-time
          type: string
        expirationDate:
          format: date-time
          type: string
        id:
          type: string
        indexState:
          description: |
            Integer value representing the state of the indexing job for a snapshot. 0 means that the indexing has not begun or is in progress. 1 means indexing completed successfully. 2 means that the indexer failed to process this snapshot.
          format: int64
          type: integer
        isCustomRetentionApplied:
          description: |
            A Boolean that indicates whether or not custom retention is applied to the snapshot.
          type: boolean
        isOnDemandSnapshot:
          type: boolean
        isPlacedOnLegalHold:
          description: A Boolean that indicates whether the snapshot is placed on Legal Hold. When this value is 'true', the snapshot is placed on Legal Hold.
          type: boolean
        isRetainedByRetentionLockSla:
          description: A Boolean that indicates whether the snapshot is being retained under a Retention Lock SLA Domain. When this value is 'true', the snapshot is being retained under a Retention Lock SLA Domain.
          type: boolean
        parentSnapshotId:
          description: |
            ID of the parent snapshot if the current snapshot is a child snapshot. Child snapshots are snapshots of objects that are part of an app, either a vCloud Director vApp or an AppBlueprint. Snapshots of the app are parent snapshots.
          type: string
        replicationLocationIds:
          items:
            type: string
          type: array
        slaId:
          description: (Deprecated) For a policy based snapshot this parameter contains the ID of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.
          type: string
        slaName:
          description: (Deprecated) For a policy based snapshot this parameter contains the name of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.
          type: string
        snapshotRetentionInfo:
          $ref: "#/components/schemas/SnapshotRetentionInfo"
        sourceObjectType:
          type: string
      required:
        - date
        - id
        - isCustomRetentionApplied
        - isOnDemandSnapshot
        - replicationLocationIds
        - slaId
        - slaName
      type: object
    BatchAsyncRequest:
      properties:
        ids:
          description: Batch of the request object IDs used to poll the status.
          items:
            type: string
          type: array
      required:
        - ids
      type: object
    BatchAsyncRequestStatus:
      properties:
        responses:
          description: The asynchronous request status of a batch request.
          items:
            $ref: "#/components/schemas/AsyncRequestStatus"
          type: array
      required:
        - responses
      type: object
    BatchMountSnapshotJobConfig:
      properties:
        snapshots:
          description: Array of objects containing information about snapshots to mount.
          items:
            $ref: "#/components/schemas/MountSnapshotJobConfigForBatchV1"
          type: array
      required:
        - snapshots
      type: object
    BatchVmSnapshotSummaries:
      properties:
        responses:
          description: The snapshot summaries for a list of virtual machines.
          items:
            $ref: "#/components/schemas/VmSnapshotSummaries"
          type: array
      required:
        - responses
      type: object
    BatchVmwareCdpLiveInfo:
      properties:
        responses:
          description: The live CDP info for the virtual machines.
          items:
            $ref: "#/components/schemas/VmwareCdpLiveInfo"
          type: array
      required:
        - responses
      type: object
    BatchVmwareCdpStateInfo:
      properties:
        responses:
          description: The CDP state info for the virtual machines.
          items:
            $ref: "#/components/schemas/VmwareCdpStateInfo"
          type: array
      required:
        - responses
      type: object
    BatchVmwareVmMissedRecoverableRanges:
      properties:
        responses:
          description: Missed recoverable ranges for a set of virtual machines.
          items:
            $ref: "#/components/schemas/VmwareVmMissedRecoverableRanges"
          type: array
      required:
        - responses
      type: object
    BatchVmwareVmMissedRecoverableRangesRequest:
      properties:
        after_time:
          description: Query filter - only ranges that occur after this time are included. The date-time string should be in ISO8601 format. For example, `2018-01-01T01:23:45.678Z`.
          format: date-time
          type: string
        before_time:
          description: Query filter - only ranges that occur before this time are included. The date-time string should be in ISO8601 format. For example, `2018-01-01T01:23:45.678Z`.
          format: date-time
          type: string
        vmIds:
          description: ID of each CDP-enabled virtual machine for which missed recoverable ranges are being retrieved.
          items:
            description: ID of the CDP-enabled virtual machine.
            type: string
          type: array
      required:
        - vmIds
      type: object
    BatchVmwareVmRecoverableRanges:
      properties:
        responses:
          description: The recoverable ranges for a set of virtual machines.
          items:
            $ref: "#/components/schemas/VmwareVmRecoverableRanges"
          type: array
      required:
        - responses
      type: object
    BatchVmwareVmRecoverableRangesRequest:
      properties:
        after_time:
          description: Query filter - only ranges after this time will be included. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.
          format: date-time
          type: string
        before_time:
          description: Query filter - only ranges before this time will be included. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.
          format: date-time
          type: string
        vmIds:
          description: The ID of each CDP-enabled virtual machine for which recoverable ranges are being retrieved.
          items:
            description: ID of the CDP-enabled virtual machine.
            type: string
          type: array
      required:
        - vmIds
      type: object
    BlackoutWindow:
      properties:
        endTime:
          type: string
        startTime:
          type: string
      required:
        - startTime
      type: object
    BlackoutWindowResponseInfo:
      properties:
        blackoutWindowStatus:
          $ref: "#/components/schemas/BlackoutWindowStatus"
        blackoutWindows:
          $ref: "#/components/schemas/BlackoutWindows"
      required:
        - blackoutWindowStatus
        - blackoutWindows
      type: object
    BlackoutWindowStatus:
      properties:
        isGlobalBlackoutActive:
          type: boolean
        isSnappableBlackoutActive:
          type: boolean
      required:
        - isGlobalBlackoutActive
      type: object
    BlackoutWindows:
      properties:
        globalBlackoutWindows:
          items:
            $ref: "#/components/schemas/BlackoutWindow"
          type: array
        snappableBlackoutWindows:
          items:
            $ref: "#/components/schemas/BlackoutWindow"
          type: array
      required:
        - globalBlackoutWindows
      type: object
    BooleanResponse:
      properties:
        value:
          type: boolean
      required:
        - value
      type: object
    BootstrappableNodeInfoV1:
      properties:
        hostname:
          description: Hostname of a Rubrik node.
          type: string
        ipv6:
          description: IPv6 address of a Rubrik node.
          type: string
      required:
        - hostname
        - ipv6
      type: object
    BootstrappableNodeIpv4Info:
      properties:
        hostname:
          description: Hostname of a Rubrik node.
          type: string
        ipv4:
          description: IPv4 address of a Rubrik node.
          type: string
      required:
        - hostname
        - ipv4
      type: object
    BrowseResponse:
      properties:
        fileMode:
          description: The type of file, either a regular file or a directory.
          type: string
        filename:
          description: The name of the file.
          type: string
        lastModified:
          type: string
        path:
          description: The complete path of the file.
          type: string
        size:
          format: int64
          type: integer
        statusMessage:
          description: Description about the status.
          type: string
        unreadable:
          description: Reason the file is unreadable. Undefined if the file is readable.
          format: int32
          type: integer
      type: object
    BrowseResponseListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/BrowseResponse"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    BulkDeleteObjectSnapshotsConfig:
      properties:
        locationId:
          description: |
            The ID of the location that contains the snapshots to delete. When no location ID is present, this API endpoint deletes snapshots from all locations.
          type: string
        snapshotIds:
          description: A list of snapshot IDs for the snapshots to delete.
          items:
            type: string
          type: array
      required:
        - snapshotIds
      type: object
    BulkDeleteSnapshotsConfig:
      properties:
        objectIds:
          description: |
            List of object IDs. This endpoint deletes all snapshots from all locations for the objects with the specified IDs.
          items:
            type: string
          type: array
      required:
        - objectIds
      type: object
    BulkOnDemandSnapshotJobConfig:
      properties:
        slaId:
          description: The ID of the SLA Domain to assign to the virtual machines.
          type: string
        vms:
          description: The IDs of the virtual machines for which to take on-demand snapshots.
          items:
            type: string
          type: array
      required:
        - vms
      type: object
    BulkOracleDbDetails:
      properties:
        responses:
          description: An array that contains all Oracle Database update details.
          items:
            $ref: "#/components/schemas/OracleDbDetail"
          type: array
      required:
        - responses
      type: object
    BulkOracleHostDetails:
      properties:
        responses:
          description: An array that contains all Oracle Host update details.
          items:
            $ref: "#/components/schemas/OracleHostDetail"
          type: array
      required:
        - responses
      type: object
    BulkOracleRacDetails:
      properties:
        responses:
          description: An array that contains all Oracle RAC update details.
          items:
            $ref: "#/components/schemas/OracleRacDetail"
          type: array
      required:
        - responses
      type: object
    BulkShareAddResponse:
      properties:
        refreshJobStatus:
          $ref: "#/components/schemas/AsyncRequestStatus"
        sharesDetail:
          description: Details of created shares.
          items:
            $ref: "#/components/schemas/HostShareDetail"
          type: array
      required:
        - refreshJobStatus
        - sharesDetail
      type: object
    BulkSlaConflictsSummary:
      properties:
        responses:
          description: List of SLA domain conflict summaries for the specified managed IDs.
          items:
            $ref: "#/components/schemas/SlaConflictsSummary"
          type: array
      required:
        - responses
      type: object
    BulkTierSnapshotsConfig:
      properties:
        locationId:
          description: Users can specify the archival location ID in order to tier snapshots in the specified archival location. When an archival location ID is not specified, snapshots in the archival location specified in the SLA Domain policy for protected objects will be tiered. Relic and unprotected object snapshots across all archival locations will be tiered.
          type: string
        objectIds:
          description: A list of object IDs to tier.
          items:
            type: string
          type: array
      required:
        - objectIds
      type: object
    CdpLocalStatus:
      description: Current Local CDP Status of virtual machine.
      enum:
        - NotEnabled
        - Pending
        - TakingSnapshot
        - Failed
        - Active
        - Resyncing
      type: string
    CdpReplicationStatus:
      description: Current CDP Replication Status of virtual machine.
      enum:
        - NotEnabled
        - Failed
        - Healthy
        - Initializing
      type: string
    CdpState:
      description: Current CDP State of virtual machine.
      enum:
        - NotEnabled
        - Pending
        - WaitingForInitialSnapshot
        - Running
        - Broken
        - FailedToStart
        - TryingToStart
        - Resyncing
      type: string
    CertificateImportRequest:
      properties:
        csrId:
          description: ID of the certificate signing request (CSR) associated with the imported certificate.
          type: string
        description:
          description: User-friendly description for the certificate.
          type: string
        name:
          description: Display name for the certificate.
          type: string
        pemFile:
          description: The certificates, and optionally private key to be imported, in PEM format.
          type: string
          x-secret: true
        privateKey:
          description: The private key, in PEM format, to be imported. If a private key is provided using this field instead of the pemFile field, the import fails if the private key is not successfully parsed.
          type: string
          x-secret: true
      required:
        - name
        - pemFile
      type: object
    CertificateListSortAttributes:
      description: Attributes that are available to use when sorting query results for certificates.
      enum:
        - name
        - description
        - hasKey
        - expiration
      type: string
    CertificatePatchRequest:
      properties:
        description:
          description: User-friendly description for the certificate.
          type: string
        name:
          description: Display name for the certificate.
          type: string
        pemFile:
          description: The certificates to be imported, in PEM format.
          type: string
          x-secret: true
      type: object
    CertificateSummary:
      properties:
        certId:
          description: ID of the certificate.
          type: string
        description:
          description: User-friendly description for the certificate.
          type: string
        expiration:
          description: The expiration date for the certificate.
          format: date-time
          type: string
        hasKey:
          description: A Boolean value that specifies whether or not the certificate is associated with a stored private key. When this value is 'true,' the private key for the certificate is stored. When this value is 'false,' the private key for the certificate is not stored.
          type: boolean
        name:
          description: Display name for the certificate.
          type: string
        pemFile:
          description: The certificates, in PEM format.
          type: string
        usedBy:
          description: A list of components using the certificate.
          type: string
      required:
        - certId
        - expiration
        - hasKey
        - name
        - pemFile
        - usedBy
      type: object
    CertificateSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/CertificateSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    CloudInstantiationSpec:
      properties:
        imageRetentionInSeconds:
          description: |
            Specifies the number of seconds to retain an image file that is generated for a snappable. Setting this to -1 disables cloud instantiation for the snappable.
          format: int64
          type: integer
      required:
        - imageRetentionInSeconds
      type: object
    CloudOutComputeForecastSummaries:
      properties:
        forecastWithConsolidation:
          $ref: "#/components/schemas/CloudOutComputeForecastSummary"
        forecastWithoutConsolidation:
          $ref: "#/components/schemas/CloudOutComputeForecastSummary"
      type: object
    CloudOutComputeForecastSummary:
      properties:
        computeCostInUSD:
          description: The cost of running a compute instance. The list contains up to forecastPeriodInGranularityUnit values, one for each granularity. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values, the first value for the first year, the second value for the second year, and the third value for the third year.
          items:
            format: int64
            minimum: 0
            type: integer
          type: array
        computeDurationInHrs:
          description: Number of hours for which a compute instance is used. The list contains up to forecastPeriodInGranularityUnit values, one for each granularity. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values, the first value for the first year, the second value for the second year, and the third value for the third year.
          items:
            format: int64
            minimum: 0
            type: integer
          type: array
      required:
        - computeCostInUSD
        - computeDurationInHrs
      type: object
    CloudOutForecastRequest:
      properties:
        consolidationFilter:
          $ref: "#/components/schemas/ForecastConsolidationFilter"
        forecastPeriodInGranularityUnit:
          description: Length of forecast period, in multiples of granularity. The maximum supported forecast period is 10 years.
          format: int32
          minimum: 1
          type: integer
        granularity:
          $ref: "#/components/schemas/ForecastGranularity"
        slaParameters:
          $ref: "#/components/schemas/CloudOutForecastSlaParameters"
      required:
        - consolidationFilter
        - forecastPeriodInGranularityUnit
        - granularity
        - slaParameters
      type: object
    CloudOutForecastSlaParameters:
      properties:
        advancedUiConfig:
          description: The advanced UI configuration according to the SLA Domain.
          items:
            $ref: "#/components/schemas/AdvancedUiConfigAttributes"
          type: array
        archivalSpecs:
          $ref: "#/components/schemas/ArchivalSpecV2"
        frequencies:
          $ref: "#/components/schemas/SlaFrequencyV2"
        maxLocalRetentionLimit:
          description: Maximum local retention limit, in seconds, according to the SLA Domain. Required only for remote SLA Domains.
          format: int64
          type: integer
      required:
        - frequencies
      type: object
    CloudOutForecastSummary:
      properties:
        assumptions:
          $ref: "#/components/schemas/ForecastAssumptions"
        locationForecast:
          $ref: "#/components/schemas/PerLocationCloudOutForecastSummary"
      type: object
    CloudOutStorageForecastSummaries:
      properties:
        forecastWithConsolidation:
          $ref: "#/components/schemas/CloudOutStorageForecastSummary"
        forecastWithoutConsolidation:
          $ref: "#/components/schemas/CloudOutStorageForecastSummary"
      type: object
    CloudOutStorageForecastSummary:
      properties:
        dataRetrievalCostInUSD:
          description: Data retrieval costs, in USD, for the cloud archival location. The list contains forecastPeriodInGranularityUnit values, one for each granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. The first value corresponds to the first year, the second value corresponds to the second year, and the third value corresponds to the third year.
          items:
            format: int64
            minimum: 0
            type: integer
          type: array
        earlyDeletionCostInUSD:
          description: Early deletion costs, in USD, for the cloud archival location. The list contains forecastPeriodInGranularityUnit values, one for each granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. The first value corresponds to the first year, the second value corresponds to the second year, and the third value corresponds to the third year.
          items:
            format: int64
            minimum: 0
            type: integer
          type: array
        perStorageClassForecast:
          description: Storage utilization forecast for cloud archival location across various storage classes. The list contains one object per storage class that is used on the cloud archival location.
          items:
            $ref: "#/components/schemas/PerStorageClassCloudOutStorageForecastSummary"
          type: array
        storageCostInUSD:
          description: Storage costs, in USD, for the cloud archival location. The list contains forecastPeriodInGranularityUnit values, one for each granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. The first value corresponds to the first year, the second value corresponds to the second year, and the third value corresponds to the third year.
          items:
            format: int64
            minimum: 0
            type: integer
          type: array
        storageUsedInGB:
          description: Storage values, in GBs, used on the cloud archival location. The number of values in the list is specified by the value of the forecastPeriodInGranularityUnit parameter. Each value in the list is for the last day of the granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. First value corresponds to the last day of the first year. Second value corresponds to the last day of the second year. Third value corresponds to the last day of the third year.
          items:
            format: int64
            minimum: 0
            type: integer
          type: array
      required:
        - storageUsedInGB
      type: object
    CloudStorageColdTier:
      description: |
        The set of storage classes that support Cold tiering during smart or instant tiering.
      enum:
        - AzureArchive
        - Glacier
        - GlacierDeepArchive
      type: string
    CloudStorageRehydrationSpeed:
      description: |
        Specifies the retrieval speed option when retrieving data from the cold storage tier to the hot storage tier for restore purposes. Rubrik cannot directly restore data from the cold storage tier and the data must be first retrieved into the hot storage tier. This is applicable only for AWS S3 and Azure archival locations. For AWS, three speed options are supported -- AwsExpedited, AwsStandard, and AwsBulk. AwsBulk is the cheapest and slowest. AwsExpedited is the fastest and most expensive. AwsStandard is the recommended default value. For Azure the only option is AzureStandard.
      enum:
        - AwsBulk
        - AwsStandard
        - AwsExpedited
        - AzureStandard
      type: string
    ClusterApiVersion:
      properties:
        apiVersion:
          description: REST API version.
          type: string
      required:
        - apiVersion
      type: object
    ClusterCertificate:
      properties:
        certificate:
          description: Cluster certificate.
          type: string
      required:
        - certificate
      type: object
    ClusterGeolocation:
      properties:
        address:
          description: |
            Address information for mapping the location of the Rubrik cluster. This
             value is used to provide a location for the Rubrik cluster on the
             dashboard map.
          type: string
      required:
        - address
      type: object
    ClusterHostGroupInfo:
      properties:
        datacenterName:
          description: Name of data center the compute cluster is a member of.
          type: string
        hostGroups:
          description: Host groups configured in the compute cluster.
          items:
            $ref: "#/components/schemas/HostGroupInfo"
          type: array
        id:
          description: Moid of the compute cluster. This is not the Rubrik managed id.
          type: string
        name:
          description: Name of the compute cluster.
          type: string
      required:
        - datacenterName
        - hostGroups
        - id
        - name
      type: object
    ClusterInfo:
      properties:
        acceptedEulaVersion:
          description: Version of the EULA accepted by admin.
          type: string
        apiVersion:
          description: REST API version.
          type: string
        geolocation:
          $ref: "#/components/schemas/ClusterGeolocation"
        id:
          description: ID of the Rubrik cluster.
          type: string
        latestEulaVersion:
          description: Latest version of the EULA that must be accepted by admin.
          type: string
        name:
          description: Name of the cluster.
          type: string
        timezone:
          $ref: "#/components/schemas/ClusterTimezone"
        version:
          description: Rubrik cluster software version.
          type: string
      required:
        - acceptedEulaVersion
        - apiVersion
        - id
        - latestEulaVersion
        - name
        - timezone
        - version
      type: object
    ClusterTimezone:
      properties:
        timezone:
          description: Cluster time zone.
          enum:
            - Africa/Johannesburg
            - Africa/Lagos
            - Africa/Nairobi
            - America/Anchorage
            - America/Araguaina
            - America/Barbados
            - America/Chicago
            - America/Costa_Rica
            - America/Bogota
            - America/Panama
            - America/Atikokan
            - America/Denver
            - America/Los_Angeles
            - America/Mexico_City
            - America/New_York
            - America/Noronha
            - America/Phoenix
            - America/Santiago
            - America/St_Johns
            - America/Toronto
            - America/Vancouver
            - Asia/Bangkok
            - Asia/Dhaka
            - Asia/Dubai
            - Asia/Hong_Kong
            - Asia/Karachi
            - Asia/Kathmandu
            - Asia/Kolkata
            - Asia/Magadan
            - Asia/Singapore
            - Asia/Tokyo
            - Atlantic/Cape_Verde
            - Australia/Adelaide
            - Australia/Brisbane
            - Australia/Perth
            - Australia/Sydney
            - Europe/Amsterdam
            - Europe/Athens
            - Europe/London
            - Europe/Moscow
            - Pacific/Auckland
            - Pacific/Honolulu
            - Pacific/Midway
            - UTC
          type: string
      required:
        - timezone
      type: object
    ClusterUpdate:
      properties:
        acceptedEulaVersion:
          description: |
            Version of the EULA accepted by admin. By modifying this attribute you
             agree to the specific version of the EULA. You can view the EULA from
             UI.
          type: string
        geolocation:
          $ref: "#/components/schemas/ClusterGeolocation"
        name:
          description: New name for a Rubrik cluster.
          type: string
        timezone:
          $ref: "#/components/schemas/ClusterTimezone"
      type: object
    ClusterVersion:
      properties:
        version:
          description: Rubrik cluster software version.
          type: string
      required:
        - version
      type: object
    ClusterVisibilityConfig:
      properties:
        hostGroupFilter:
          description: Names of the host groups being protected.
          items:
            type: string
          type: array
        id:
          description: VMware managed object ID of the compute cluster. This is not the ID managed by Rubrik.
          type: string
      required:
        - hostGroupFilter
        - id
      type: object
    ClusterVisibilityInfo:
      allOf:
        - $ref: "#/components/schemas/ClusterVisibilityConfig"
        - properties:
            name:
              description: Name of the compute cluster.
              type: string
          required:
            - name
          type: object
    CommunityUserCredentials:
      properties:
        password:
          description: Password for the account used to login to the Rubrik community / self-serve website.
          type: string
          x-secret: true
        username:
          description: Username for the account used to login to the Rubrik community / self-serve website.
          type: string
      required:
        - password
        - username
      type: object
    ComplianceRangeFilter:
      description: Specifies a number of snapshots. Compliance for each object is calculated for the most recent snapshots, up to the specified number.
      enum:
        - LastSnapshot
        - Last2Snapshots
        - Last3Snapshots
        - AllSnapshots
      type: string
    ComplianceSummarySLAV1:
      properties:
        numberOfInComplianceSnapshots:
          description: Number of objects in compliance based on the snapshot range filter.
          format: int64
          type: integer
        numberOfOutOfComplianceSnapshots:
          description: Number of objects out of compliance based on the snapshot range filter.
          format: int64
          type: integer
        percentOfInComplianceSnapshots:
          description: Percent of objects in compliance based on the snapshot range filter.
          format: double
          type: number
        percentOfOutOfComplianceSnapshots:
          description: Percent of objects out of compliance based on the snapshot range filter.
          format: double
          type: number
        snapshotRange:
          $ref: "#/components/schemas/ComplianceRangeFilter"
        totalProtected:
          description: Total number of protected objects based on the snapshot range filter.
          format: int64
          type: integer
        updatedStatus:
          $ref: "#/components/schemas/ComplianceSummaryStatus"
        updatedTime:
          description: The timestamp of the most recent successful update to the compliance summary stats.
          format: date-time
          type: string
      required:
        - snapshotRange
        - updatedStatus
      type: object
    ComplianceSummaryStatus:
      description: Status of compliance summary.
      enum:
        - Updating
        - Updated
      type: string
    ComplianceSummaryV1:
      properties:
        numberOfAwaitingFirstFullSnapshot:
          description: Number of objects awaiting first full backup.
          format: int64
          type: integer
        numberOfInComplianceSnapshots:
          description: Number of objects in compliance.
          format: int64
          type: integer
        numberOfOutOfComplianceSnapshots:
          description: Number of objects out of compliance.
          format: int64
          type: integer
        percentOfInComplianceSnapshots:
          description: Percent of objects in compliance.
          format: double
          type: number
        percentOfOutOfComplianceSnapshots:
          description: Percent of objects out of compliance.
          format: double
          type: number
        totalProtected:
          description: Total number of protected objects.
          format: int64
          type: integer
        updatedTime:
          description: Last updated time.
          format: date-time
          type: string
      required:
        - numberOfAwaitingFirstFullSnapshot
        - numberOfInComplianceSnapshots
        - numberOfOutOfComplianceSnapshots
        - percentOfInComplianceSnapshots
        - percentOfOutOfComplianceSnapshots
        - totalProtected
      type: object
    ComputeClusterDetail:
      allOf:
        - $ref: "#/components/schemas/ComputeClusterSummary"
        - properties:
            hosts:
              items:
                $ref: "#/components/schemas/VmwareHostSummary"
              type: array
            moid:
              type: string
            virtualMachines:
              items:
                $ref: "#/components/schemas/VirtualMachineSummary"
              type: array
          required:
            - hosts
            - moid
            - virtualMachines
          type: object
    ComputeClusterSummary:
      allOf:
        - $ref: "#/components/schemas/SlaAssignable"
        - $ref: "#/components/schemas/EffectiveSlaHolder"
        - properties:
            datacenterId:
              type: string
            drsStatus:
              description: Current Drs Status of Cluster.
              type: boolean
            hostVersions:
              description: List of Versions of ESXi Hosts in Compute Cluster.
              items:
                type: string
              type: array
            ioFilterStatus:
              $ref: "#/components/schemas/IoFilterStatus"
            lastUsedFqdn:
              type: string
          required:
            - datacenterId
            - hostVersions
            - ioFilterStatus
          type: object
    ComputeClusterSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/ComputeClusterSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    ComputeClusterUpdate:
      properties:
        configuredSlaDomainId:
          description: The ID of the SLA Domain that is configured for this Compute Cluster. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
          type: string
      type: object
    ConfigChangeSource:
      description: Source of configuration change.
      enum:
        - Unknown
        - CustomerApi
        - Upgrade
        - ResetNode
        - Software
        - Init
      type: string
    ConfigParam:
      properties:
        keyName:
          type: string
        valName:
          type: string
      required:
        - keyName
        - valName
      type: object
    ConfigurationSummary:
      properties:
        currentValue:
          description: The current value of the configuration option.
          type: string
        defaultValue:
          description: The default value, if any, for this configuration value for this release version.
          type: string
        name:
          description: The name of the configuration value.
          type: string
        namespace:
          description: The configuration namespace.
          type: string
        nodeId:
          description: For local configuration options, the ID of the node. 'cluster' for cluster-wide configuration options.
          type: string
        onDate:
          description: The timestamp specified in the input query.
          format: date-time
          type: string
        valueOnDate:
          description: Value of the configuration option at the requested time.
          type: string
      type: object
    ConfigurationSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/ConfigurationSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    ConfigurationUpdateSummary:
      properties:
        apiUser:
          description: The username of the account that changed the value.
          type: string
        configChangeMetadata:
          description: |
            JSON-serialized blob of metadata used to fetch information about the configuration update. For example, the upgrade version, previous state, etc.
          type: string
        modifiedDateTime:
          description: The timestamp of the change.
          format: date-time
          type: string
        name:
          description: The name of the updated configuration option.
          type: string
        namespace:
          description: The namespace of the updated configuration. Changes that do not begin with the string `local_` are cluster-wide changes.
          type: string
        newValue:
          description: The value of the configuration option after the update.
          type: string
        nodeId:
          description: The updated node. For cluster-wide configuration changes, this value is `all`.
          type: string
        oldValue:
          description: The original value of the configuration option.
          type: string
        source:
          description: The source of the change.
          type: string
      type: object
    ConfigurationUpdateSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/ConfigurationUpdateSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    ConfiguredSlaType:
      description: Specifies whether the SLA Domain is used for protection or retention.
      enum:
        - ProtectionSla
        - RetentionSla
      type: string
    CorsConfiguration:
      properties:
        allowedHeaders:
          description: |
            The allowed headers as a comma separated string of values. The following headers are allowed by default: 'Accept', 'Accept-Language', 'Content-Language', 'and Content-Type'.
          type: string
        allowedOrigins:
          description: The allowed origins as a comma separated string of values. Use the special string '*' to allow any origin.
          type: string
        isEnabled:
          description: A Boolean value that indicates if CORS support is enabled.
          type: boolean
      required:
        - isEnabled
      type: object
    CorsConfigurationPatch:
      properties:
        allowedHeaders:
          description: |
            The allowed headers as a comma separated string of values. The following headers are allowed by default: 'Accept', 'Accept-Language', 'Content-Language', 'and Content-Type'.
          type: string
        allowedOrigins:
          description: The allowed origins as a comma separated string of values. Use the special string '*' to allow any origin.
          type: string
        isEnabled:
          description: A Boolean value that indicates if CORS support is enabled.
          type: boolean
      type: object
    CountResponse:
      properties:
        count:
          format: int64
          type: integer
      required:
        - count
      type: object
    CreateNewVappParams:
      properties:
        name:
          description: Name of the specified vApp within vCloud.
          type: string
        orgVdcId:
          description: ID assigned to the Organization VDC object that will contain the newly created vApp object.
          type: string
      required:
        - name
        - orgVdcId
      type: object
    CreateVappNetworkParams:
      allOf:
        - $ref: "#/components/schemas/VappNetworkSummary"
        - properties:
            newName:
              description: Name to assign to the vApp network that is referenced by the specified new vApp network object. If a name is specified, the Rubrik REST API server uses the name to rename the vApp network within the vCloud. If the value is empty, the vApp network is not renamed.
              type: string
          type: object
    CsrRequest:
      properties:
        city:
          description: The city where the provided organization is located, for example, New York or London.
          type: string
        country:
          description: The two-letter ISO code for the country where the provided organization is located, for example US, GB, or FR.
          type: string
        emailAddress:
          description: An email address associated with the organization, if applicable.
          type: string
        hostnames:
          description: A comma-separated list of host names that are associated with the certificate. This list accepts wildcard hostnames, such as '*.rubrik.example.com', in addition to fully-qualified domain names.
          items:
            type: string
          type: array
        organization:
          description: The name of the organization associated with the certificate, for example 'Rubrik, Inc.'.
          type: string
        organizationUnit:
          description: The name of the organizational unit associated with the certificate, for example, Engineering.
          type: string
        state:
          description: If applicable, the name of the state where the provided organization is located, for example, California.
          type: string
        surname:
          description: The surname associated with the certificate, if applicable.
          type: string
        uid:
          description: The user ID associated with the certificate, if applicable.
          type: string
      required:
        - hostnames
      type: object
    CsrSummary:
      properties:
        csr:
          description: Base64 encoded PKCS#10 certificate signing request. The request should start with -----BEGIN CERTIFICATE REQUEST-----.
          type: string
        csrId:
          description: ID of the generated CSR.
          type: string
        hostnames:
          description: A comma-separated list of host names that are associated with the certificate. This list accepts wildcard hostnames, such as '*.rubrik.example.com', in addition to fully-qualified domain names.
          items:
            type: string
          type: array
        name:
          description: Display name for the generated CSR.
          type: string
        subject:
          description: Subject line of the CSR.
          type: string
      required:
        - csr
        - csrId
        - hostnames
        - name
        - subject
      type: object
    CsrSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/CsrSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    DataCenterSummary:
      allOf:
        - $ref: "#/components/schemas/SlaAssignable"
        - $ref: "#/components/schemas/EffectiveSlaHolder"
        - properties:
            vcenterId:
              type: string
          type: object
    DataGuardGroupMember:
      properties:
        dbUniqueName:
          description: Unique name of the member Oracle database.
          type: string
        racId:
          description: Rubrik ID of the RAC on which this database is hosted. This field is empty when the database is not hosted on a RAC environment.
          type: string
        racName:
          description: Cluster name assigned to the Oracle RAC.
          type: string
        role:
          description: Current role of the member Oracle database.
          type: string
        standaloneHostId:
          description: Rubrik ID of the standalone Oracle host on which this database is hosted. This field is empty when the database is not hosted on a standalone system.
          type: string
        standaloneHostName:
          description: Name of the standalone Oracle database host.
          type: string
      required:
        - dbUniqueName
        - role
      type: object
    DataGuardType:
      description: Specifies whether this database is a Data Guard member, Data Guard group, or a non-Data Guard database.
      enum:
        - DataGuardGroup
        - DataGuardMember
        - NonDataGuard
      type: string
    DataStoreSummary:
      properties:
        capacity:
          format: int64
          type: integer
        dataCenterName:
          type: string
        dataStoreType:
          type: string
        id:
          type: string
        isLocal:
          type: boolean
        name:
          type: string
      required:
        - id
      type: object
    DatabaseType:
      description: Type of database.
      enum:
        - Oracle
        - SQL
      type: string
    DbLogReportProperties:
      properties:
        enableDelayNotification:
          description: Indicates whether the database log backup delay notification is enabled. Set to 'true' to send an email notification when the log backup delay is more than the configured threshold, and 'false' to disable the behavior.
          type: boolean
        logDelayNotificationFrequencyInMin:
          description: The frequency for sending an email notification to the customer when the log backup delay is more than the threshold.
          format: int64
          type: integer
        logDelayThresholdInMin:
          description: The threshold for the delay in log backup before an email notification should be created.
          format: int64
          type: integer
      required:
        - enableDelayNotification
        - logDelayNotificationFrequencyInMin
        - logDelayThresholdInMin
      type: object
    DbLogReportPropertiesUpdate:
      properties:
        enableDelayNotification:
          description: Indicates whether the database log backup delay notification is enabled. Set to 'true' to send an email notification when the log backup delay is more than the configured threshold, and 'false' to disable the behavior.
          type: boolean
        logDelayNotificationFrequencyInMin:
          description: An integer that specifies an interval in minutes. Email notifications about the log backup delay exceeding the specified threshold are sent at a maximum frequency specified by the interval.
          format: int64
          type: integer
        logDelayThresholdInMin:
          description: An integer that specifies an interval in minutes. The CDM cluster sends an email notification when a log backup is delayed for longer than the specified interval.
          format: int64
          type: integer
      type: object
    DbLogReportSummary:
      properties:
        databaseType:
          $ref: "#/components/schemas/DatabaseType"
        effectiveSlaDomainId:
          description: ID of the SLA Domain controlling the database protection.
          type: string
        effectiveSlaDomainName:
          description: Name of the SLA Domain controlling the database protection.
          type: string
        id:
          type: string
        lastSnapshotTime:
          description: Time, in UTC, of the last database backup.
          format: date-time
          type: string
        latestRecoveryTime:
          description: Latest point in time, in UTC, to which the database can be restored.
          format: date-time
          type: string
        location:
          description: Location of the customer database. For a standalone SQL database, this includes the host and instance name.
          type: string
        logBackupDelay:
          description: Amount of time, in seconds, that has elapsed since the next expected log backup.
          format: int64
          type: integer
        logBackupFrequency:
          description: Frequency, in seconds, of the database log backup.
          format: int32
          type: integer
        name:
          description: Name of the database.
          type: string
        primaryClusterId:
          description: ID of the primary Rubrik cluster on which the database is located.
          type: string
      required:
        - databaseType
        - effectiveSlaDomainId
        - effectiveSlaDomainName
        - id
        - location
        - name
        - primaryClusterId
      type: object
    DbLogReportSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/DbLogReportSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    DbLogReportSummaryListSortAttribute:
      description: Field used to sort when enumerating log report summary information.
      enum:
        - effectiveSlaDomainName
        - name
        - location
        - databaseType
        - logBackupFrequency
        - lastSnapshotTime
        - latestRecoveryTime
        - logBackupDelay
      type: string
    DiagnosticTaskStatus:
      description: Status of the task.
      enum:
        - Queued
        - Started
        - Retried
        - Succeeded
        - Failed
        - Canceled
      type: string
    DisablePerLocationPause:
      properties:
        shouldSkipOldSnapshots:
          description: |
            Specifies whether to replicate snapshots taken during and before replication pause. When this value is 'true,' snapshots taken during and before the replication pause are not replicated. In all other cases, snapshots taken before and during the replication pause are replicated.
          type: boolean
        sourceClusterUuids:
          description: |
            Replication from specified Rubrik clusters are resumed. Specified Rubrik clusters must be paused replication sources of local Rubrik cluster.
          items:
            description: |
              A Rubrik cluster's universally unique identifier.
            type: string
          type: array
      required:
        - shouldSkipOldSnapshots
        - sourceClusterUuids
      type: object
    DiscoveredNasShare:
      properties:
        exportPoint:
          description: The NFS export point or SMB share name for the NAS share.
          type: string
        shareType:
          description: The type of NAS Share.
          enum:
            - NFS
            - SMB
          type: string
      required:
        - exportPoint
        - shareType
      type: object
    DissolveLegalHoldDefinition:
      properties:
        snapshotIds:
          items:
            type: string
          type: array
      required:
        - snapshotIds
      type: object
    DissolveLegalHoldResponse:
      properties:
        dissolvedSnapshotIds:
          description: List of snapshots whose legal hold have been successfully dissolved.
          items:
            type: string
          type: array
      required:
        - dissolvedSnapshotIds
      type: object
    DownloadFileJobConfig:
      properties:
        legalHoldDownloadConfig:
          $ref: "#/components/schemas/LegalHoldDownloadConfig"
        path:
          description: Absolute file path.
          type: string
      required:
        - path
      type: object
    DownloadJobInfo:
      properties:
        eventId:
          description: Event identifier corresponding to the job instance.
          type: string
        jobInstanceId:
          description: |
            Identifier corresponding to the download job instance.
          type: string
        progress:
          description: Progress, as a percentage, of the job. Only populated if the job is currently running.
          format: double
          type: number
        remainingTimeEstimateInSeconds:
          description: Remaining time estimate for the job to complete. Only populated if the job is currently running.
          format: int64
          type: integer
        status:
          description: |
            Status of the download job instance.
          type: string
      required:
        - eventId
        - jobInstanceId
        - status
      type: object
    DownloadMssqlBackupFilesByIdJobConfig:
      properties:
        items:
          description: A list of snapshots and logs to download.
          items:
            type: string
          type: array
        legalHoldDownloadConfig:
          $ref: "#/components/schemas/LegalHoldDownloadConfig"
      required:
        - items
      type: object
    DownloadedSnapshotSlaAssignmentInfo:
      properties:
        objectId:
          description: The managed ID of the object that owns the downloaded snapshots in the provided list.
          type: string
        slaDomainId:
          description: The ID of the SLA Domain to assign to the provided list of downloaded snapshots.
          type: string
        snapshotIds:
          description: A list of snapshot IDs. The SLA Domain manages retention for the downloaded copy of the snapshots assigned to the snapshot IDs. If a snapshot in the list has no downloaded copy, its retention period remains unchanged.
          items:
            type: string
          type: array
      required:
        - objectId
        - slaDomainId
        - snapshotIds
      type: object
    EffectiveSlaHolder:
      properties:
        effectiveSlaDomainId:
          description: The ID of the SLA Domain that controls the protection of the Rubrik object.
          type: string
        effectiveSlaDomainName:
          description: The name of the SLA Domain that controls the protection of the Rubrik object.
          type: string
        effectiveSlaDomainPolarisManagedId:
          description: Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.
          type: string
        effectiveSlaSourceObjectId:
          description: The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
          type: string
        effectiveSlaSourceObjectName:
          description: The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
          type: string
        isEffectiveSlaDomainRetentionLocked:
          description: Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.
          type: boolean
      required:
        - effectiveSlaDomainId
        - effectiveSlaDomainName
      type: object
    EnablePerLocationPause:
      properties:
        shouldCancelImmediately:
          description: |
            Specifies whether replication jobs are canceled immediately. When this value is 'true,' replication jobs will be canceled immediately. In all other cases, current running replication jobs will be allowed to finish before pausing.
          type: boolean
        sourceClusterUuids:
          description: |
            Replication from specified Rubrik clusters are paused. Specified Rubrik clusters must be active replication sources of local Rubrik cluster.
          items:
            description: |
              A Rubrik cluster's universally unique identifier.
            type: string
          type: array
      required:
        - shouldCancelImmediately
        - sourceClusterUuids
      type: object
    EncryptionStatus:
      properties:
        cipher:
          description: Cipher method for encryption at rest.
          type: string
        isEncrypted:
          description: A Boolean value that specifies whether data on the cluster is encrypted at rest. When this value is 'true,' data stored on the cluster is encrypted. When this value is 'false,' data stored on the cluster is not encrypted.
          type: boolean
        keyLength:
          description: Key length for encryption at rest.
          format: int32
          type: integer
        keyProtection:
          description: Key protection method for encryption at rest.
          type: string
      required:
        - isEncrypted
      type: object
    EnvoyBulkUpdate:
      properties:
        id:
          description: ID assigned to a Rubrik Envoy object.
          type: string
        updateProperties:
          $ref: "#/components/schemas/EnvoyUpdate"
      required:
        - id
        - updateProperties
      type: object
    EnvoyCreate:
      properties:
        ipAddress:
          description: IPv4 address of a specified Rubrik Envoy object that can be accessed by the specified Rubrik cluster.
          type: string
        port:
          description: Rubrik cluster port assigned to the specified organization for tunnel connections to the Rubrik web UI.
          format: int32
          type: integer
      required:
        - ipAddress
        - port
      type: object
    EnvoyDetail:
      allOf:
        - $ref: "#/components/schemas/EnvoySummary"
    EnvoyDetailList:
      properties:
        envoyDetails:
          description: A list of detailed view of Rubrik Envoy objects.
          items:
            $ref: "#/components/schemas/EnvoyDetail"
          type: array
      required:
        - envoyDetails
      type: object
    EnvoyIdList:
      properties:
        envoyIds:
          description: A list of Rubrik Envoy objects IDs.
          items:
            type: string
          type: array
      required:
        - envoyIds
      type: object
    EnvoySummary:
      properties:
        id:
          description: ID assigned to a Rubrik Envoy object.
          type: string
        ipAddress:
          description: IPv4 address of a specified Rubrik Envoy object that can be accessed by the specified Rubrik cluster.
          type: string
        organizationId:
          description: ID assigned to the organization object that is associated with the specified Rubrik Envoy object.
          type: string
        port:
          description: Rubrik cluster port assigned to the specified organization for tunnel connections to the Rubrik web UI.
          format: int32
          type: integer
        status:
          description: Connection state of the specified Rubrik Envoy object.
          type: string
      required:
        - id
        - ipAddress
        - organizationId
        - port
        - status
      type: object
    EnvoyUpdate:
      properties:
        ipAddress:
          description: IPv4 address of a specified Rubrik Envoy object that can be accessed by the specified Rubrik cluster.
          type: string
        port:
          description: Rubrik cluster port assigned to the specified organization for tunnel connections to the Rubrik web UI.
          format: int32
          type: integer
      type: object
    EnvoyUserInfo:
      properties:
        password:
          description: Password of a specified Rubrik Envoy object that can be used to access envoy vm.
          type: string
        username:
          description: Username of a specified Rubrik Envoy object that can be used to access envoy vm.
          type: string
      required:
        - password
        - username
      type: object
    EventCsvDownloadResponse:
      properties:
        afterDate:
          description: The requested after date filter, if applicable.
          format: date-time
          type: string
        afterIdResponse:
          description: The serialized AfterId of the response, if any.
          type: string
        beforeDate:
          description: The requested before date filter, if applicable.
          format: date-time
          type: string
        downloadLink:
          description: The download link for the CSV file.
          type: string
        eventSeriesStatus:
          $ref: "#/components/schemas/EventSeriesStatusV1"
        eventSeverity:
          $ref: "#/components/schemas/EventSeverityV1"
        eventStatus:
          $ref: "#/components/schemas/EventStatusV1"
        eventType:
          $ref: "#/components/schemas/EventTypeV1"
        objectIds:
          description: The requested list of object ID to filter events, if applicable.
          items:
            type: string
          type: array
        objectName:
          description: The requested object name filter, if applicable.
          type: string
        objectType:
          $ref: "#/components/schemas/ObjectTypeV1"
      required:
        - downloadLink
      type: object
    EventNotification:
      properties:
        event:
          description: An event name.
          enum:
            - upgradeStart
            - periodicPrechecks
            - stageCdmSoftware
          type: string
        time:
          description: Timestamp of the event in ISO8601 format.
          format: date-time
          type: string
      required:
        - event
        - time
      type: object
    EventSeriesStatusV1:
      description: Status of an event series.
      enum:
        - Success
        - Failure
        - Scheduled
        - Active
        - Canceling
        - Canceled
        - SuccessWithWarnings
      type: string
    EventSeriesSummaryV1:
      properties:
        archiveTargetName:
          description: The name of the archive target related to the archival task.
          type: string
        dataToTransfer:
          description: The amount of data the job corresponding to the event needs to transfer.
          format: int64
          type: integer
        dataTransferred:
          description: The total amount of data that has been transferred by the event or job to date.
          format: int64
          type: integer
        duration:
          description: The current run time of the job that corresponds to the event series. For completed jobs, this time is equal to the total run time of the job (endTime - startTime). For an in-progress job, this time is equal to the Current Time minus the startTime. This field is empty for event series that do not correspond to a job.
          type: string
        endTime:
          description: For event series that correspond to a job, the time when the job finished. For a completed event series, the time of the last event in the series. This field is empty for jobs that have not completed or for event series that do not correspond to a job.
          format: date-time
          type: string
        estimatedTimeRemaining:
          description: The estimated time remaining of the job that corresponds to the event series. This field is empty for event series that do not correspond to a job.
          type: string
        eventDetailList:
          description: List of the events in the event series.
          items:
            $ref: "#/components/schemas/EventSummaryV1"
          type: array
        eventSeriesId:
          description: The ID of event series.
          type: string
        eventSeriesStatus:
          $ref: "#/components/schemas/EventSeriesStatusV1"
        hasJob:
          description: A Boolean value that specifies whether the event series is linked to a job on the backend. When this value is 'true,' the event series is linked to a job on the backend. When this value is 'false,' the event series is not linked to a job on the backend.
          type: boolean
        isFirstFullSnapshot:
          description: A Boolean value that determines whether the job associated with the event is a first full snapshot backup.
          type: boolean
        isOnDemand:
          description: Boolean value of true indicates an on demand job.
          type: boolean
        isSlaRetentionLocked:
          description: Boolean that indicates whether an SLA Domain is Retention Locked. When the value is true the SLA Domain is a Retention Lock SLA Domain.
          type: boolean
        location:
          description: The host of the object associated with the latest event.
          type: string
        logicalSize:
          description: The logical size of the object related to the event series.
          format: int64
          type: integer
        nodeIds:
          description: The IDs of the nodes where the job associated with the event is running.
          type: string
        numberOfRetries:
          description: The number of times the job has been retried.
          format: int64
          type: integer
        objectId:
          description: The ID of the object associated with the latest event.
          type: string
        objectName:
          description: The name of the object associated with the latest event.
          type: string
        objectType:
          $ref: "#/components/schemas/ObjectTypeV1"
        progressPercentage:
          description: The progress percentage of the event series.
          type: string
        remoteClusterName:
          description: The name of the remote cluster related to the replication task.
          type: string
        slaId:
          description: The ID of the SLA Domain associated with this job.
          type: string
        slaName:
          description: The name of the SLA Domain associated with the job, if any. This field is empty for jobs that are not driven by a SLA Domain.
          type: string
        startTime:
          description: The time when the job started. Only applicable to the event series that correspond to a job.
          format: date-time
          type: string
        status:
          $ref: "#/components/schemas/EventStatusV1"
        taskType:
          description: |
            Type of the event series. Matches the event type.
          type: string
        throughput:
          description: The average rate of data transfer, measured in bytes per second. This rate is the total amount of data transferred divided by the total time required by the transfer.
          format: int64
          type: integer
        username:
          description: The username of the user-initiated job. This field is empty for jobs that are not user-initiated.
          type: string
      required:
        - eventDetailList
        - eventSeriesId
        - hasJob
        - status
        - taskType
      type: object
    EventSeverityV1:
      description: Level of event's severity.
      enum:
        - Critical
        - Warning
        - Informational
      type: string
    EventStatusV1:
      description: Status of an event.
      enum:
        - Failure
        - Warning
        - Info
        - Running
        - Queued
        - Success
        - Canceled
        - Canceling
        - TaskSuccess
      type: string
    EventSummaryV1:
      properties:
        afterId:
          description: The serialized AfterId of the response, if any.
          type: string
        eventInfo:
          description: A string that contains all the information for this event.
          type: string
        eventName:
          description: The event name.
          type: string
        eventSeriesId:
          description: The ID of the event series that this event belongs to.
          type: string
        eventSeverity:
          $ref: "#/components/schemas/EventSeverityV1"
        eventStatus:
          $ref: "#/components/schemas/EventStatusV1"
        eventType:
          $ref: "#/components/schemas/EventTypeV1"
        id:
          description: The event ID.
          type: string
        jobInstanceId:
          description: The ID of the associated job instance, if any.
          type: string
        objectId:
          description: The ID of the object associated with the event.
          type: string
        objectName:
          description: The name of the object associated with the event.
          type: string
        objectType:
          $ref: "#/components/schemas/ObjectTypeV1"
        time:
          description: The time at which this event occurred.
          format: date-time
          type: string
      required:
        - eventInfo
        - eventSeriesId
        - eventStatus
        - eventType
        - id
        - objectType
        - time
      type: object
    EventTypeV1:
      description: Type of an event.
      enum:
        - Archive
        - Audit
        - AuthDomain
        - AwsEvent
        - Backup
        - Classification
        - CloudNativeSource
        - CloudNativeVm
        - Configuration
        - Connection
        - Conversion
        - Diagnostic
        - Discovery
        - Failover
        - Fileset
        - Hardware
        - HostEvent
        - HypervScvmm
        - HypervServer
        - Index
        - Instantiate
        - LegalHold
        - Maintenance
        - NutanixCluster
        - Recovery
        - Replication
        - ResourceOperations
        - Storage
        - StorageArray
        - StormResource
        - Support
        - System
        - TestFailover
        - Upgrade
        - VCenter
        - Vcd
        - VolumeGroup
        - UnknownEventType
      type: string
    EventsAndSeriesSummariesResponse:
      properties:
        events:
          description: List of the events.
          items:
            $ref: "#/components/schemas/EventSummaryV1"
          type: array
        seriesSummaries:
          description: The event series summaries of all events.
          items:
            $ref: "#/components/schemas/EventSeriesSummaryV1"
          type: array
      required:
        - events
      type: object
    EventsAndSeriesSummariesV1:
      properties:
        currentTime:
          description: Current cluster time.
          format: date-time
          type: string
        data:
          $ref: "#/components/schemas/EventsAndSeriesSummariesResponse"
        hasMore:
          description: Whether there are more events.
          type: boolean
      required:
        - currentTime
        - data
        - hasMore
      type: object
    ExampleEnum:
      description: Example enum.
      enum:
        - value1
        - value2
      type: string
    ExclusionPatternCreateConfig:
      properties:
        pattern:
          description: The pattern is used for existing and future snapshots. The pattern can be a regular expression or filename. Files or directories that match the pattern are not shown in the results of searches and are excluded from restore and download operations.
          type: string
        sourceId:
          description: ID of the protectable object to which the pattern applies.
          type: string
      required:
        - pattern
        - sourceId
      type: object
    ExclusionPatternDetail:
      properties:
        id:
          description: ID of the exclusion pattern.
          type: string
        isActive:
          description: Indicates if the exclusion pattern applies.
          type: boolean
        isMutable:
          description: Specifies whether the pattern is mutable. When this value is false, the pattern can not be altered.
          type: boolean
        pattern:
          description: The pattern is used for existing and future snapshots. The pattern can be a regular expression or filename. Files or directories that match the pattern are not shown in the results of searches and are excluded from restore and download operations.
          type: string
        patternStatus:
          $ref: "#/components/schemas/PatternStatus"
        primaryClusterId:
          type: string
        sourceId:
          description: ID of the protectable object to which the pattern applies.
          type: string
      required:
        - id
        - isActive
        - isMutable
        - pattern
        - patternStatus
        - primaryClusterId
        - sourceId
      type: object
    ExclusionPatternDetailList:
      properties:
        exclusionPatternDetails:
          description: A list of exclusion pattern objects.
          items:
            $ref: "#/components/schemas/ExclusionPatternDetail"
          type: array
      required:
        - exclusionPatternDetails
      type: object
    ExclusionPatternDetailListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/ExclusionPatternDetail"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    ExclusionPatternUpdateConfig:
      properties:
        isActive:
          description: Specifies whether or not the exclusion pattern applies. Only applicable to mutable patterns.
          type: boolean
        isMutable:
          description: Specifies whether the pattern is mutable. When this value is false, the pattern can not be altered.
          type: boolean
        pattern:
          description: The pattern is used for existing and future snapshots. The pattern can be a regular expression or filename. Files or directories that match the pattern are not shown in the results of searches and are excluded from restore and download operations.
          type: string
      type: object
    ExistingSnapshotRetention:
      description: Specifies the retention policy to apply to existing snapshots when unprotecting an object.
      enum:
        - RetainSnapshots
        - KeepForever
        - ExpireImmediately
      type: string
    ExpiredCustomRetentionSnapshotInfo:
      properties:
        birthSlaDomainName:
          description: |
            The SLA Domain in effect at the time the snapshot was taken. Identical to the SLA Domain assigned to the data source at that time.
          type: string
        globalExpirationDate:
          description: |
            Timestamp that indicates when the snapshot expires from all cluster-managed locations.
          format: date-time
          type: string
        id:
          description: The snapshot ID.
          type: string
        lastSlaDomainName:
          description: |
            The most recent SLA Domain assigned to the snapshot. Snapshots expire based on the last known configuration for the assigned SLA Domain.
          type: string
        snapshotDate:
          description: Creation timestamp for the snapshot.
          format: date-time
          type: string
      required:
        - birthSlaDomainName
        - globalExpirationDate
        - id
        - lastSlaDomainName
        - snapshotDate
      type: object
    ExpiredCustomRetentionSnapshots:
      description: |
        Array containing information of snapshot which have been expired due to snapshot-level SLA domain assignments.
      properties:
        snapshotInfo:
          items:
            $ref: "#/components/schemas/ExpiredCustomRetentionSnapshotInfo"
          type: array
      required:
        - snapshotInfo
      type: object
    ExportMssqlDbJobConfig:
      properties:
        allowOverwrite:
          default: false
          description: A Boolean value that determines whether an existing database can be overwritten by a database this is exported from a backup. Set to false to prevent overwrites. This is the default. Set to true to allow overwrites.
          type: boolean
        finishRecovery:
          description: A Boolean value that determines the recovery option to use during database restore. When this value is 'true', the database is restored using the RECOVERY option and is fully functional at the end of the restore operation. When this value is 'false', the database is restored using the NORECOVERY option and remains in recovering mode at the end of the restore operation.
          type: boolean
        maxDataStreams:
          description: Maximum number of parallel data streams that can be used to copy data to the target system.
          format: int32
          type: integer
        recoveryPoint:
          $ref: "#/components/schemas/MssqlRecoveryPoint"
        targetDataFilePath:
          description: The target path to store all data files.
          type: string
        targetDatabaseName:
          description: Name of the new database.
          type: string
        targetFilePaths:
          description: One target path for each individual database file. Overrides targetDataFilePath and targetLogFilePath.
          items:
            $ref: "#/components/schemas/MssqlDbFileExportPath"
          type: array
        targetInstanceId:
          description: ID of the Microsoft SQL instance for the new database.
          type: string
        targetLogFilePath:
          description: The target path to store all log files.
          type: string
      required:
        - recoveryPoint
        - targetDatabaseName
        - targetInstanceId
      type: object
    ExportSnapshotJobConfigV1:
      allOf:
        - $ref: "#/components/schemas/MountExportSnapshotJobCommonOptions"
        - properties:
            datastoreId:
              description: ID of the datastore to assign to the exported virtual machine.
              type: string
            hostId:
              description: ID of the ESXi host to export the new virtual machine to.
              type: string
            shouldRecoverTags:
              description: The job recovers any tags that were assigned to the virtual machine.
              type: boolean
            unregisterVm:
              description: Determines whether the new virtual machine created from a snapshot is registered with the vCenter Server. Use 'true' to remove the registration from vCenter Server. Use 'false' to keep the registration with the vCenter Server. The default is 'false'.
              type: boolean
          required:
            - datastoreId
          type: object
    FailoverClusterAppConfig:
      properties:
        configuredSlaDomainId:
          description: ID of the SLA Domain that is assigned to the specified failover cluster app. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
          type: string
        failoverClusterAppSource:
          $ref: "#/components/schemas/FailoverClusterAppSource"
        failoverClusterId:
          description: Cluster ID of the failover cluster app.
          type: string
        failoverClusterType:
          $ref: "#/components/schemas/FailoverClusterType"
        name:
          description: Name of the failover cluster app.
          type: string
      required:
        - failoverClusterAppSource
        - failoverClusterId
        - failoverClusterType
        - name
      type: object
    FailoverClusterAppConnectionStatus:
      description: Connection type options for the failover cluster app.
      enum:
        - Connected
        - Disconnected
        - ReplicationTarget
      type: string
    FailoverClusterAppDetail:
      allOf:
        - $ref: "#/components/schemas/FailoverClusterAppSummary"
        - properties:
            filesets:
              description: Fileset detail for the failover cluster app object.
              items:
                $ref: "#/components/schemas/FilesetDetail"
              type: array
          required:
            - filesets
          type: object
    FailoverClusterAppSource:
      properties:
        nodeOrders:
          description: Specifies an order for the failover cluster nodes. Failover cluster app backups use the failover cluster nodes in the specified order.
          items:
            $ref: "#/components/schemas/FailoverClusterNodeOrder"
          type: array
        virtualIps:
          description: Virtual IP addresses of the failover cluster.
          items:
            type: string
          type: array
      type: object
    FailoverClusterAppSummary:
      allOf:
        - $ref: "#/components/schemas/SlaAssignable"
        - $ref: "#/components/schemas/EffectiveSlaHolder"
        - $ref: "#/components/schemas/FailoverClusterAppConfig"
        - properties:
            connectionStatus:
              $ref: "#/components/schemas/FailoverClusterAppConnectionStatus"
            failoverClusterName:
              description: The failover cluster name of the failover cluster app. The failover cluster is a group of hosts that provides high availability for running failover clustered applications.
              type: string
            id:
              description: ID assigned to the failover cluster app.
              type: string
            operatingSystemType:
              $ref: "#/components/schemas/FailoverClusterOsType"
            primaryClusterId:
              type: string
            slaAssignment:
              $ref: "#/components/schemas/SlaAssignment"
          required:
            - connectionStatus
            - failoverClusterName
            - id
            - primaryClusterId
          type: object
    FailoverClusterAppSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/FailoverClusterAppSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    FailoverClusterConfig:
      properties:
        configuredSlaDomainId:
          description: ID of the SLA Domain that is assigned to the specified failover cluster. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
          type: string
        hostIds:
          description: Managed ID's of Hosts of the failover cluster.
          items:
            type: string
          type: array
        name:
          description: Name of the failover cluster.
          type: string
      required:
        - hostIds
        - name
      type: object
    FailoverClusterConnectionStatus:
      description: Connection type options for the failover cluster.
      enum:
        - Connected
        - Disconnected
        - PartiallyConnected
        - ReplicationTarget
      type: string
    FailoverClusterDetail:
      allOf:
        - $ref: "#/components/schemas/FailoverClusterSummary"
        - properties:
            numApps:
              description: Count of the number of failover cluster apps.
              format: int32
              type: integer
            numNodes:
              description: Count of the number of nodes on the failover cluster.
              format: int32
              type: integer
          required:
            - numApps
            - numNodes
          type: object
    FailoverClusterHierarchyObjectDescendentCount:
      properties:
        failoverCluster:
          format: int32
          type: integer
        failoverClusterApp:
          format: int32
          type: integer
        fileset:
          format: int32
          type: integer
      type: object
    FailoverClusterHierarchyObjectSortAttribute:
      description: Attributes that are available to use when sorting query results for failover cluster hierarchy objects.
      enum:
        - name
        - effectiveSlaDomainName
      type: string
    FailoverClusterHierarchyObjectSummary:
      allOf:
        - $ref: "#/components/schemas/SlaAssignable"
        - $ref: "#/components/schemas/EffectiveSlaHolder"
        - properties:
            descendentCount:
              $ref: "#/components/schemas/FailoverClusterHierarchyObjectDescendentCount"
            failoverClusterAppConnectionStatus:
              $ref: "#/components/schemas/FailoverClusterAppConnectionStatus"
            failoverClusterAppName:
              description: Failover cluster app name of this failover cluster hierarchy object. Only valid for failover cluster apps.
              type: string
            failoverClusterAppSource:
              $ref: "#/components/schemas/FailoverClusterAppSource"
            failoverClusterConnectionStatus:
              $ref: "#/components/schemas/FailoverClusterConnectionStatus"
            failoverClusterName:
              description: The failover cluster name for the failover cluster hierarchy object. Only valid for failover clusters.
              type: string
            failoverClusterType:
              $ref: "#/components/schemas/FailoverClusterType"
            filesets:
              description: Fileset summary for the failover cluster hierarchy object. Only valid for failover cluster apps.
              items:
                $ref: "#/components/schemas/FilesetSummary"
              type: array
            id:
              description: ID assigned to the failover cluster hierarchy object.
              type: string
            isDeleted:
              description: A Boolean that indicates whether the failover cluster hierarchy object has been deleted. When this value is 'true,' the hierarchy object has been deleted.
              type: boolean
            nodes:
              description: Node details for the failover cluster hierarchy object. Only valid for failover clusters.
              items:
                $ref: "#/components/schemas/FailoverClusterNode"
              type: array
            numFailoverClusterApps:
              description: The number of failover cluster apps in the failover cluster hierarchy object. Only valid for failover clusters.
              format: int32
              type: integer
            numNodes:
              description: The number of nodes in the failover cluster hierarchy object. Only valid for failover clusters.
              format: int32
              type: integer
            objectType:
              $ref: "#/components/schemas/FailoverClusterObjectType"
            operatingSystemType:
              $ref: "#/components/schemas/FailoverClusterOsType"
            primaryClusterId:
              type: string
            slaAssignment:
              $ref: "#/components/schemas/SlaAssignment"
          required:
            - descendentCount
            - id
            - isDeleted
            - objectType
            - primaryClusterId
          type: object
    FailoverClusterHierarchyObjectSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/FailoverClusterHierarchyObjectSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    FailoverClusterNode:
      properties:
        connectionStatus:
          $ref: "#/components/schemas/FailoverClusterNodeConnectionStatus"
        id:
          description: ID of the node in the failover cluster.
          type: string
        name:
          description: Name of the node in the failover cluster.
          type: string
        operatingSystem:
          description: Operating system of the node in the failover cluster.
          type: string
      required:
        - connectionStatus
        - id
        - name
        - operatingSystem
      type: object
    FailoverClusterNodeConnectionStatus:
      description: Connection type options for the failover cluster node.
      enum:
        - Connecting
        - Connected
        - Disconnected
        - Deleting
        - Deleted
        - ConnectorNotDeployed
        - PartiallyConnected
        - ReplicationTarget
      type: string
    FailoverClusterNodeOrder:
      properties:
        nodeId:
          description: ID of the failover cluster node.
          type: string
        nodeName:
          description: The name of the failover cluster node.
          type: string
        order:
          description: An integer that specifies the place occupied by this node in the failover cluster app backup order.
          format: int32
          type: integer
      required:
        - nodeId
        - nodeName
        - order
      type: object
    FailoverClusterNodeOsType:
      description: Operating system of a specified machine.
      enum:
        - AIX
        - SunOS
        - HPUX
        - Linux
        - Windows
        - Unknown
      type: string
    FailoverClusterObjectType:
      description: Types of object that can be present in the failover cluster hierarchy.
      enum:
        - FailoverClusterApp
        - Fileset
        - HostFailoverCluster
        - WindowsCluster
      type: string
    FailoverClusterOsType:
      description: Operating system type of the failover cluster.
      enum:
        - ANY
        - AIX
        - HPUX
        - Linux
        - SunOS
        - UnixLike
        - Windows
      type: string
    FailoverClusterSummary:
      allOf:
        - $ref: "#/components/schemas/SlaAssignable"
        - $ref: "#/components/schemas/EffectiveSlaHolder"
        - properties:
            connectionStatus:
              $ref: "#/components/schemas/FailoverClusterConnectionStatus"
            id:
              description: ID assigned to the failover cluster.
              type: string
            name:
              description: Cluster name assigned to the failover cluster.
              type: string
            nodes:
              description: Details of the nodes of this failover cluster.
              items:
                $ref: "#/components/schemas/FailoverClusterNode"
              type: array
            operatingSystemType:
              $ref: "#/components/schemas/FailoverClusterOsType"
            primaryClusterId:
              type: string
            slaAssignment:
              $ref: "#/components/schemas/SlaAssignment"
          required:
            - connectionStatus
            - id
            - name
            - nodes
            - primaryClusterId
          type: object
    FailoverClusterSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/FailoverClusterSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    FailoverClusterType:
      description: Cluster type options for the failover cluster app.
      enum:
        - Windows
        - UnixLike
      type: string
    FileSystemType:
      description: The type of the file system on this Volume.
      enum:
        - NTFS
        - ReFS
      type: string
    FileVersion:
      properties:
        fileMode:
          description: The type of file, either a regular file or a directory.
          type: string
        lastModified:
          type: string
        size:
          format: int64
          type: integer
        snapshotId:
          description: The snapshot this file belongs to.
          type: string
        source:
          description: The location where the file is stored, either in the cloud or locally.
          type: string
      type: object
    FilesetArraySpec:
      properties:
        proxyHostId:
          description: ID assigned to a proxy host for array-enabled backups. This property is only required for array-enabled backups.
          type: string
      type: object
    FilesetCreate:
      allOf:
        - properties:
            arraySpec:
              $ref: "#/components/schemas/FilesetArraySpec"
            enableHardlinkSupport:
              description: A Boolean value that determines whether to recognize and dedupe hardlinks in a fileset. When 'true,' performs a hardlink deduplication. When 'false,' performs a normal backup that treats hardlinks as normal files. If not specified, this defaults to false.
              type: boolean
            enableSymlinkResolution:
              description: A Boolean value that determines whether to resolve symlink in a fileset. When 'true,' performs a symlink resolution. When 'false,' performs no symlink resolution. If not specified, this defaults to false.
              type: boolean
            failoverClusterAppId:
              description: ID of the failover cluster app.
              type: string
            hostId:
              type: string
            isPassthrough:
              description: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup. If not specified, this defaults to false.
              type: boolean
            shareId:
              type: string
            snapMirrorLabelForFullBackup:
              description: Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
              type: string
            snapMirrorLabelForIncrementalBackup:
              description: Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
              type: string
            templateId:
              type: string
          required:
            - templateId
          type: object
    FilesetDetail:
      allOf:
        - $ref: "#/components/schemas/FilesetUpdate"
        - $ref: "#/components/schemas/FilesetSummary"
        - properties:
            archiveStorage:
              format: int64
              type: integer
            archivedSnapshotCount:
              format: int32
              type: integer
            backupScriptErrorHandling:
              description: Action taken if script fails. Options are "abort", "continue".
              type: string
            backupScriptTimeout:
              description: Number of seconds after which the script is killed if it has not completed execution.
              format: int64
              type: integer
            localStorage:
              format: int64
              type: integer
            postBackupScript:
              description: Script to run after backup of this Fileset ends.
              type: string
            preBackupScript:
              description: Script to run before backup of this Fileset starts.
              type: string
            protectionDate:
              format: date-time
              type: string
            snapshotCount:
              format: int32
              type: integer
            snapshots:
              items:
                $ref: "#/components/schemas/FilesetSnapshotSummary"
              type: array
          required:
            - snapshotCount
          type: object
    FilesetDownloadFileJobConfig:
      properties:
        legalHoldDownloadConfig:
          $ref: "#/components/schemas/LegalHoldDownloadConfig"
        sourceDir:
          description: Source directory to download from.
          type: string
      required:
        - sourceDir
      type: object
    FilesetExportFileJobConfig:
      allOf:
        - $ref: "#/components/schemas/FilesetRestoreFileJobConfig"
        - properties:
            hostId:
              description: Host ID.
              type: string
            shareId:
              description: Network share ID.
              type: string
          required:
            - hostId
          type: object
    FilesetOptions:
      properties:
        allowBackupHiddenFoldersInNetworkMounts:
          description: Include or exclude hidden folders inside locally-mounted remote file systems from backups.
          type: boolean
        allowBackupNetworkMounts:
          description: Include or exclude locally-mounted remote file systems from backups.
          type: boolean
        useWindowsVss:
          description: Use VSS during Windows backups.
          type: boolean
      type: object
    FilesetRestoreFileJobConfig:
      properties:
        destinationDir:
          description: Destination directory.
          type: string
        ignoreErrors:
          description: Optional field to determine if we should ignore single error during restore. Default value is false.
          type: boolean
        sourceDir:
          description: Source directory to restore from.
          type: string
      required:
        - destinationDir
        - sourceDir
      type: object
    FilesetSnapshotDetail:
      allOf:
        - $ref: "#/components/schemas/FilesetSnapshotSummary"
        - properties:
            lastModified:
              type: string
            size:
              format: int64
              type: integer
            verbose:
              $ref: "#/components/schemas/FilesetSnapshotVerbose"
          required:
            - lastModified
            - size
          type: object
    FilesetSnapshotSummary:
      allOf:
        - $ref: "#/components/schemas/BaseSnapshotSummary"
        - properties:
            fileCount:
              format: int64
              type: integer
            filesetName:
              type: string
            snapdiffUsed:
              type: boolean
          required:
            - filesetName
          type: object
    FilesetSnapshotVerbose:
      properties:
        hasFingerprint:
          description: Whether or not the fileset snapshot has fingerprint info.
          type: boolean
        partitionPaths:
          description: List a partition paths for the fileset snapshot.
          items:
            type: string
          type: array
      required:
        - hasFingerprint
        - partitionPaths
      type: object
    FilesetSummary:
      allOf:
        - $ref: "#/components/schemas/FilesetOptions"
        - $ref: "#/components/schemas/SlaAssignable"
        - properties:
            arraySpec:
              $ref: "#/components/schemas/FilesetArraySpec"
            effectiveSlaDomainId:
              description: The ID of the effective SLA Domain for this fileset.
              type: string
            effectiveSlaDomainName:
              description: The name of the effective SLA Domain for this fileset.
              type: string
            effectiveSlaDomainPolarisManagedId:
              description: Optional field containing Polaris managed ID of the effective SLA domain if it is Polaris managed.
              type: string
            enableHardlinkSupport:
              description: A Boolean value that determines whether to recognize and dedupe hardlinks in a fileset. When 'true,' performs a hardlink deduplication. When 'false,' performs a normal backup that treats hardlinks as normal files. If not specified, this defaults to false.
              type: boolean
            enableSymlinkResolution:
              description: A Boolean value that determines whether to resolve symlink in a fileset. When 'true,' performs a symlink resolution. When 'false,' performs no symlink resolution. If not specified, this defaults to false.
              type: boolean
            exceptions:
              items:
                type: string
              type: array
            excludes:
              items:
                type: string
              type: array
            failoverClusterAppId:
              description: ID of the failover cluster app.
              type: string
            failoverClusterAppName:
              description: The name of the failover cluster app.
              type: string
            hostId:
              type: string
            hostName:
              type: string
            includes:
              items:
                type: string
              type: array
            isEffectiveSlaDomainRetentionLocked:
              description: An optional Boolean value that specifies whether the effective SLA Domain of a fileset is Retention Locked. When this value is 'true,' the SLA Domain is retention locked. When this value is 'false,' the SLA Domain is not Retention Locked.
              type: boolean
            isPassthrough:
              description: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup. If not specified, this defaults to false.
              type: boolean
            isRelic:
              type: boolean
            operatingSystemType:
              type: string
            pendingSlaDomain:
              $ref: "#/components/schemas/ManagedObjectPendingSlaInfo"
            shareId:
              type: string
            snapMirrorLabelForFullBackup:
              description: Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
              type: string
            snapMirrorLabelForIncrementalBackup:
              description: Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
              type: string
            templateId:
              type: string
            templateName:
              type: string
          required:
            - hostName
            - includes
            - isRelic
            - templateId
            - templateName
          type: object
    FilesetSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/FilesetSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    FilesetTemplateCreate:
      allOf:
        - $ref: "#/components/schemas/FilesetOptions"
        - properties:
            backupScriptErrorHandling:
              description: Action taken if script fails. Options are "abort", "continue".
              type: string
            backupScriptTimeout:
              description: Number of seconds after which the script is killed if it has not completed execution.
              format: int64
              type: integer
            exceptions:
              items:
                type: string
              type: array
            excludes:
              items:
                type: string
              type: array
            includes:
              items:
                type: string
              type: array
            isArrayEnabled:
              description: Boolean value that determines whether the fileset is array-enabled. Set to true to indicate that the fileset is array-enabled. Set to false to indicate that the fileset is not array-enabled. When a fileset is array-enabled, the includes must be top-level LVM logical volume mount points.
              type: boolean
            name:
              type: string
            operatingSystemType:
              description: Operating system type of filesets created by template.
              enum:
                - UnixLike
                - Windows
              type: string
            postBackupScript:
              description: Script to run after backup of this fileset ends.
              type: string
            preBackupScript:
              description: Script to run before backup of this fileset starts.
              type: string
            shareType:
              enum:
                - NFS
                - SMB
              type: string
          required:
            - includes
            - name
          type: object
    FilesetTemplateDetail:
      allOf:
        - $ref: "#/components/schemas/FilesetTemplateCreate"
        - properties:
            hostCount:
              description: Number of hosts where this template has been applied.
              format: int32
              type: integer
            id:
              type: string
            isArchived:
              type: boolean
            isCreatedByKupr:
              description: Specifies whether this is created by a Kupr Host.
              type: boolean
            primaryClusterId:
              type: string
            shareCount:
              description: Number of shares where this template has been applied.
              format: int32
              type: integer
          required:
            - id
            - primaryClusterId
          type: object
    FilesetTemplateDetailListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/FilesetTemplateDetail"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    FilesetTemplatePatch:
      allOf:
        - $ref: "#/components/schemas/FilesetOptions"
        - properties:
            backupScriptErrorHandling:
              description: Action taken if script fails. Options are "abort", "continue".
              type: string
            backupScriptTimeout:
              description: Number of seconds after which the script is killed if it has not completed execution.
              format: int64
              type: integer
            exceptions:
              items:
                type: string
              type: array
            excludes:
              items:
                type: string
              type: array
            id:
              type: string
            includes:
              items:
                type: string
              type: array
            name:
              type: string
            operatingSystemType:
              description: Operating system type of filesets created by template.
              enum:
                - UnixLike
                - Windows
              type: string
            postBackupScript:
              description: Script to run after backup of this Fileset ends.
              type: string
            preBackupScript:
              description: Script to run before backup of this Fileset starts.
              type: string
            shareType:
              enum:
                - NFS
                - SMB
              type: string
          required:
            - id
          type: object
    FilesetUpdate:
      properties:
        configuredSlaDomainId:
          description: Assign Fileset to SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
          type: string
        forceFull:
          description: Whether to force a full on the whole fileset or certain partitions of the fileset. If this is set to true and no partitionIds are provided, then a full will be forced on the whole fileset. If set to true and partitionIds are provided, then we will force a full on only those partitions.
          type: boolean
        forceFullPartitionIds:
          description: Assign partition ids to set the force full. In order for this to be valid input, forceFull must be set to true.
          items:
            format: int32
            type: integer
          type: array
        snapMirrorLabelForFullBackup:
          description: Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
          type: string
        snapMirrorLabelForIncrementalBackup:
          description: Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
          type: string
      type: object
    FipsStatus:
      properties:
        isEnabledInFlight:
          description: |
            Boolean that specifies whether FIPS mode is enabled for in-flight encryption. When this value is true, FIPS mode is enabled for in-flight data encryption.
          type: boolean
      required:
        - isEnabledInFlight
      type: object
    FipsStatusPatch:
      properties:
        isEnabledInFlight:
          description: |
            Boolean that specifies whether FIPS mode is enabled for in-flight encryption. When this value is true, FIPS mode is enabled for in-flight data encryption.
          type: boolean
      type: object
    ForceFullVolumeInfo:
      description: Information to request a forced full snapshot for a volume within a Volume Group.
      properties:
        shouldDedupe:
          default: true
          description: Specifies whether deduplication should be enabled for the forced full snapshot of the Volume. When set to true, deduplication is performed against local data on the cluster.
          type: boolean
        volumeId:
          description: The unique ID of the volume within the Volume Group.
          type: string
      required:
        - shouldDedupe
        - volumeId
      type: object
    ForecastAssumptions:
      properties:
        annualGrowthRateInPercent:
          description: Annual growth rate of protected data.
          format: double
          minimum: 0
          type: number
        compressionFactor:
          description: Data compression factor.
          format: double
          type: number
        frequencyChangeRates:
          $ref: "#/components/schemas/FrequencyChangeRates"
        logicalDataSizeInGB:
          description: Logical data size protected by the SLA Domain.
          format: double
          minimum: 0
          type: number
      required:
        - annualGrowthRateInPercent
        - compressionFactor
        - frequencyChangeRates
        - logicalDataSizeInGB
      type: object
    ForecastConsolidationFilter:
      description: Filter to perform forecasts, with or without archival consolidation enabled.
      enum:
        - ForecastWithConsolidation
        - ForecastWithoutConsolidation
        - ForecastWithAndWithoutConsolidation
      type: string
    ForecastGranularity:
      description: Granularity of the cloud utilization forecast.
      enum:
        - Quarter
        - Year
      type: string
    FrequencyChangeRates:
      properties:
        dailyChangeRateInPercent:
          description: Daily change rate.
          format: double
          minimum: 0
          type: number
        monthlyChangeRateInPercent:
          description: Monthly change rate.
          format: double
          minimum: 0
          type: number
        quarterlyChangeRateInPercent:
          description: Quarterly change rate.
          format: double
          minimum: 0
          type: number
        weeklyChangeRateInPercent:
          description: Weekly change rate.
          format: double
          minimum: 0
          type: number
        yearlyChangeRateInPercent:
          description: Yearly change rate.
          format: double
          minimum: 0
          type: number
      type: object
    FrequencyConfig:
      properties:
        frequency:
          format: int32
          type: integer
        retention:
          format: int32
          type: integer
      required:
        - frequency
        - retention
      type: object
    FullyQualifiedDomainNameInfo:
      properties:
        fqdn:
          description: Fully qualified domain name where the filter should be hosted for install/upgrade operations.
          type: string
      required:
        - fqdn
      type: object
    GenericCsrRequest:
      properties:
        csrRequest:
          $ref: "#/components/schemas/CsrRequest"
        name:
          description: Display name for the generated CSR.
          type: string
      required:
        - csrRequest
        - name
      type: object
    GlobalBlackoutWindowStatus:
      properties:
        isGlobalBlackoutActive:
          type: boolean
      required:
        - isGlobalBlackoutActive
      type: object
    HdfsBaseConfig:
      properties:
        apiToken:
          description: API token to access Hdfs.
          type: string
        hosts:
          description: List of Hdfs Namenode Hosts.
          items:
            $ref: "#/components/schemas/HdfsHost"
          type: array
        kerberosTicket:
          description: Ticket Cache Path of Kerberos Ticket.
          type: string
        nameservices:
          description: Logical name for nameservice for Hdfs HA.
          type: string
        username:
          description: Username to access Hdfs API.
          type: string
      required:
        - hosts
      type: object
    HdfsConfig:
      allOf:
        - $ref: "#/components/schemas/HdfsBaseConfig"
    HdfsCreate:
      properties:
        hostId:
          type: string
        templateId:
          type: string
      required:
        - templateId
      type: object
    HdfsDetail:
      allOf:
        - $ref: "#/components/schemas/HdfsUpdate"
        - $ref: "#/components/schemas/HdfsSummary"
        - properties:
            localStorage:
              format: int64
              type: integer
            protectionDate:
              format: date-time
              type: string
            snapshotCount:
              format: int32
              type: integer
            snapshots:
              items:
                $ref: "#/components/schemas/HdfsSnapshotSummary"
              type: array
          required:
            - snapshotCount
          type: object
    HdfsExportFileJobConfig:
      allOf:
        - $ref: "#/components/schemas/HdfsRestoreFileJobConfig"
        - properties:
            hostId:
              description: Host ID.
              type: string
          required:
            - hostId
          type: object
    HdfsHost:
      properties:
        hostname:
          description: Hostname or Ip of Namenode.
          type: string
        port:
          description: Port number of Namenode.
          format: int32
          type: integer
      required:
        - hostname
        - port
      type: object
    HdfsRestoreFileJobConfig:
      properties:
        destinationDir:
          description: The destination directory.
          type: string
        shouldIgnoreErrors:
          description: An optional Boolean that determines whether to ignore single errors during the restore process. When this value is 'true', single errors are ignored. This field is 'false' by default.
          type: boolean
        sourceDir:
          description: The source directory being restored.
          type: string
      required:
        - destinationDir
        - sourceDir
      type: object
    HdfsSnapshotDetail:
      allOf:
        - $ref: "#/components/schemas/HdfsSnapshotSummary"
        - properties:
            lastModified:
              format: date-time
              type: string
            size:
              format: int64
              type: integer
          required:
            - lastModified
            - size
          type: object
    HdfsSnapshotSummary:
      allOf:
        - $ref: "#/components/schemas/BaseSnapshotSummary"
        - properties:
            fileCount:
              format: int64
              type: integer
            hdfsName:
              type: string
          required:
            - hdfsName
          type: object
    HdfsSummary:
      allOf:
        - $ref: "#/components/schemas/SlaAssignable"
        - properties:
            effectiveSlaDomainId:
              description: The ID of the effective SLA Domain for a HDFS directory.
              type: string
            effectiveSlaDomainName:
              description: The name of the effective SLA Domain for this HDFS directory.
              type: string
            effectiveSlaDomainPolarisManagedId:
              description: An optional field that contains the Polaris managed ID of the effective SLA Domain. Only applicable to SLA Domains managed by Polaris.
              type: string
            exceptions:
              items:
                type: string
              type: array
            excludes:
              items:
                type: string
              type: array
            hostId:
              type: string
            hostName:
              type: string
            includes:
              items:
                type: string
              type: array
            isEffectiveSlaDomainRetentionLocked:
              description: An optional Boolean value that specifies whether the effective SLA Domain of a HDFS directory is Retention Locked. When this value is 'true,' the SLA Domain is retention locked. When this value is 'false,' the SLA Domain is not Retention Locked.
              type: boolean
            isRelic:
              type: boolean
            templateId:
              type: string
            templateName:
              type: string
          required:
            - hostName
            - includes
            - isRelic
            - templateId
            - templateName
          type: object
    HdfsSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/HdfsSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    HdfsTemplateCreate:
      properties:
        exceptions:
          items:
            type: string
          type: array
        excludes:
          items:
            type: string
          type: array
        includes:
          items:
            type: string
          type: array
        name:
          type: string
      required:
        - includes
        - name
      type: object
    HdfsTemplateDetail:
      allOf:
        - $ref: "#/components/schemas/HdfsTemplateCreate"
        - properties:
            hostCount:
              description: Number of hosts where this template has been applied.
              format: int32
              type: integer
            id:
              type: string
            primaryClusterId:
              type: string
          required:
            - id
            - primaryClusterId
          type: object
    HdfsTemplateDetailListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/HdfsTemplateDetail"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    HdfsTemplatePatch:
      properties:
        exceptions:
          items:
            type: string
          type: array
        excludes:
          items:
            type: string
          type: array
        id:
          type: string
        includes:
          items:
            type: string
          type: array
        name:
          type: string
      required:
        - id
      type: object
    HdfsUpdate:
      properties:
        configuredSlaDomainId:
          description: Assign HDFS to SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
          type: string
      required:
        - configuredSlaDomainId
      type: object
    HealthMonitorPolicy:
      properties:
        causes:
          items:
            type: string
          type: array
        configParams:
          items:
            $ref: "#/components/schemas/ConfigParam"
          type: array
        dependencies:
          items:
            type: string
          type: array
        description:
          type: string
        isEnabled:
          type: boolean
        isHidden:
          type: boolean
        kbInfo:
          type: string
        notificationConfig:
          $ref: "#/components/schemas/NotificationConfig"
        policyId:
          type: string
        policyName:
          type: string
        policyType:
          $ref: "#/components/schemas/PolicyTypeEnum"
        remedies:
          items:
            type: string
          type: array
        runInState:
          items:
            $ref: "#/components/schemas/NodeStatusEnum"
          type: array
        scheduleFreqInSec:
          format: int64
          type: integer
        scope:
          $ref: "#/components/schemas/PolicyScopeEnum"
        script:
          type: string
      required:
        - causes
        - configParams
        - dependencies
        - description
        - isEnabled
        - isHidden
        - policyId
        - policyName
        - policyType
        - remedies
        - runInState
        - scheduleFreqInSec
        - scope
        - script
      type: object
    HierarchyObjectIds:
      properties:
        ids:
          items:
            type: string
          type: array
      required:
        - ids
      type: object
    HoldConfig:
      properties:
        isHoldInPlace:
          description: A Boolean that specifies whether snapshots that are currently local will be kept local after archiving. When this value is 'true', a snapshot that is currently local is retained locally after being archived. The default value is 'false'.
          type: boolean
      type: object
    HostConfigurationPropertyEnabled:
      description: Defines the boolean type for host configuration. 'Enabled' specifies true, 'Disabled' specifies False, and 'Default' specifies to delete the entry and default to the global configuration.
      enum:
        - Enabled
        - Disabled
        - Default
      type: string
    HostDetail:
      allOf:
        - $ref: "#/components/schemas/HostSummary"
        - properties:
            agentId:
              description: ID of the Rubrik Backup Service (RBS) installed on the host.
              type: string
            compressionEnabled:
              description: Indicates if compression is enabled while transferring data between the host and the Rubrik cluster.
              type: boolean
            hostVfdDriverState:
              $ref: "#/components/schemas/HostVfdState"
            hostVfdEnabled:
              $ref: "#/components/schemas/HostVfdInstallConfig"
            isOracleHost:
              description: |
                Specifies whether this is an Oracle host. This indicates whether to show Oracle discovery fields in the UI.
              type: boolean
            isRelic:
              description: A relic host is deleted, but still may have snapshots associated with its children (e.g. Fileset).
              type: boolean
            mssqlCbtDriverInstalled:
              description: Indicates if the CBT driver is installed for SQL Server instances on the specified Windows host. Set to true when the CBT driver is installed. Set to false when the CBT driver is not installed.
              type: boolean
            oracleQueryUser:
              description: Specifies the Oracle username for an account with query privileges.
              type: string
            oracleSysDbaUser:
              description: |
                Specifies the Oracle username for an account with sysdba privileges.
              type: string
          required:
            - hostVfdDriverState
            - isRelic
            - mssqlCbtDriverInstalled
          type: object
    HostFilterStatus:
      description: Status of Rubrik Io Filter on Hosts.
      enum:
        - Installed
        - UnsupportedByVmware
        - OutOfDate
        - PastExpectedDate
        - Uninstalled
        - Unknown
      type: string
    HostGroupInfo:
      properties:
        id:
          description: ID of the host group.
          type: string
        name:
          description: Name of the host group.
          type: string
      required:
        - name
      type: object
    HostHierarchyObjectDescendantCount:
      properties:
        share:
          description: Number of descendant share objects in a specified hierarchy.
          format: int32
          type: integer
      type: object
    HostHierarchyObjectSortAttribute:
      description: Attributes that are available to use when sorting query results for host/share hierarchy objects.
      enum:
        - Status
        - Name
        - ExportPoint
        - ShareType
        - Hostname
      type: string
    HostHierarchyObjectSummary:
      allOf:
        - properties:
            alias:
              description: A user-specified string that returns this host in searches for host/share hierarchy objects. Only valid for host object.
              type: string
            descendantCount:
              $ref: "#/components/schemas/HostHierarchyObjectDescendantCount"
            domain:
              description: The share domain name. This value is only valid for host share objects.
              type: string
            exportPoint:
              description: The export point of host/share hierarchy objects. Only valid for share object.
              type: string
            filesets:
              description: Fileset summary for the host/share hierarchy object. Only valid for share object.
              items:
                $ref: "#/components/schemas/FilesetSummary"
              type: array
            hostId:
              description: The host ID of host/share hierarchy objects. Only valid for share object.
              type: string
            hostname:
              description: The host name of host/share hierarchy objects. Only valid for share object.
              type: string
            id:
              description: ID assigned to the host/share hierarchy object.
              type: string
            isChangeList:
              description: A Boolean that specifies whether ChangeList is enabled for the host/share hierarchy object. Only valid for share objects.
              type: boolean
            isOnSnapMirrorDestVolume:
              description: Indicates if the NetApp SnapMirror destination volume includes the NAS share. Only valid for share objects.
              type: boolean
            isSnapDiff:
              description: A Boolean that specifies whether SnapDiff is enabled for the host/share hierarchy object. Only valid for share objects.
              type: boolean
            isilonChangelistEnabledDescendantCount:
              description: The number of host shares that have the Isilon Changelist feature enabled which improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job. This value is only valid for physical host objects.
              format: int32
              type: integer
            name:
              description: The name of host/share hierarchy objects. Only valid for host object.
              type: string
            nasBaseConfig:
              $ref: "#/components/schemas/NasBaseConfig"
            objectType:
              $ref: "#/components/schemas/HostObjectType"
            operatingSystem:
              description: The operating system detailed information of host/share hierarchy objects. Only valid for physical host object.
              type: string
            operatingSystemType:
              description: The operating system type of host/share hierarchy objects. Only valid for physical host object.
              type: string
            primaryClusterId:
              type: string
            shareType:
              enum:
                - NFS
                - SMB
              type: string
            slaAssignment:
              $ref: "#/components/schemas/SlaAssignment"
            snapDiffEnabledDescendantCount:
              description: The number of host shares that have enabled SnapDiff. This value is only valid for physical host objects.
              format: int32
              type: integer
            status:
              type: string
            username:
              description: The share user name. This value is only valid for host share objects.
              type: string
          required:
            - descendantCount
            - id
            - objectType
            - primaryClusterId
            - status
          type: object
    HostHierarchyObjectSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/HostHierarchyObjectSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    HostInfo:
      properties:
        hostname:
          description: Name of the host.
          type: string
        id:
          description: The managed id of the host.
          type: string
        oracleQueryUser:
          description: Oracle discovery user.
          type: string
        oracleSysDbaUser:
          description: Oracle sysdba user to use on the host.
          type: string
      required:
        - hostname
        - id
        - oracleQueryUser
        - oracleSysDbaUser
      type: object
    HostMakePrimaryRequest:
      properties:
        ids:
          description: IDs of hosts to migrate.
          items:
            type: string
          type: array
        oldPrimaryClusterUuid:
          description: For all hosts and virtual machines registered with this cluster, make itself the primary if the current primary is oldPrimaryClusterUuid.
          type: string
      type: object
    HostObjectType:
      description: Types of object that can be present in the host/share hierarchy.
      enum:
        - Host
        - Share
      type: string
    HostOperatingSystemType:
      description: The host operating system type.
      enum:
        - ANY
        - NONE
        - UnixLike
        - Windows
      type: string
    HostRbsStatus:
      description: The status of the Rubrik Backup Service on the host.
      enum:
        - Installed
        - NotInstalled
        - Disconnected
      type: string
    HostRegister:
      properties:
        alias:
          description: A user-specified string that returns this host in searches.
          type: string
        hasAgent:
          type: boolean
        hdfsConfig:
          $ref: "#/components/schemas/HdfsConfig"
        hostname:
          type: string
        isOracleHost:
          description: |
            A Boolean that specifies whether to discover Oracle information at registration. A value of 'true' discovers Oracle information at registration.
          type: boolean
        nasConfig:
          $ref: "#/components/schemas/NasConfig"
        oracleQueryUser:
          description: |
            Specifies the Oracle username for an account with query privileges. The account must have query privileges for a specified Oracle installation to enable Oracle discovery queries for that installation.
          type: string
        oracleSysDbaUser:
          description: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
          type: string
        organizationId:
          description: The ID of the organization to which the host is assigned.
          type: string
      required:
        - hostname
      type: object
    HostShareDetail:
      properties:
        domain:
          description: The domain of the SMB share.
          type: string
        exportPoint:
          description: The NFS export point or SMB share name for the NAS share.
          type: string
        hostId:
          description: The host ID of the NAS Share host.
          type: string
        hostShareParameters:
          $ref: "#/components/schemas/HostShareParameters"
        hostname:
          description: The hostname of the NAS host.
          type: string
        id:
          description: The unique ID of the NAS Share.
          type: string
        primaryClusterId:
          description: The ID of the primary Rubrik cluster.
          type: string
        shareType:
          description: The type of NAS share.
          enum:
            - NFS
            - SMB
          type: string
        status:
          description: The status of connection between the Rubrik cluster and the NAS Share. Possible responses are Connected and Disconnected.
          type: string
        username:
          description: The username to access the NAS share.
          type: string
        vendorType:
          $ref: "#/components/schemas/NasVendorType"
      required:
        - exportPoint
        - hostname
        - id
        - primaryClusterId
        - shareType
        - status
      type: object
    HostShareParameters:
      properties:
        isIsilonChangelistEnabled:
          description: Indicates if Changelist is enabled on Isilon NAS share. When this value is 'true', metadata fetches during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
          type: boolean
        isNetAppSnapDiffEnabled:
          description: Indicates if SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata fetches during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
          type: boolean
        isOnNetAppSnapMirrorDestVolume:
          description: Indicates whether the share is on a SnapMirror destination volume on a NetApp NAS share. When this value is 'true', fileset backup operations pick the latest Netapp snapshot on the volume, subject to the configured label matching. During share registration, Rubrik checks with NetApp NAS to find out whether the share is on SnapMirror destination and sets this parameter.
          type: boolean
      type: object
    HostSharePatch:
      properties:
        domain:
          type: string
        exportPoint:
          type: string
        hostShareParameters:
          $ref: "#/components/schemas/HostShareParameters"
        password:
          type: string
          x-secret: true
        username:
          type: string
      type: object
    HostShareUpdate:
      properties:
        shareId:
          description: ID of the network share.
          type: string
        updateProperties:
          $ref: "#/components/schemas/HostSharePatch"
      required:
        - shareId
        - updateProperties
      type: object
    HostShareVendorType:
      description: The NAS vendor for the host share.
      enum:
        - Isilon
        - NetApp
        - FlashBlade
      type: string
    HostSummary:
      properties:
        alias:
          description: A user-specified string that returns this host in searches.
          type: string
        hdfsBaseConfig:
          $ref: "#/components/schemas/HdfsBaseConfig"
        hostname:
          description: Deprecated. Please use 'name' instead.
          type: string
        id:
          description: Unique identifier for host.
          type: string
        mssqlCbtEffectiveStatus:
          $ref: "#/components/schemas/MssqlCbtEffectiveStatusType"
        mssqlCbtEnabled:
          $ref: "#/components/schemas/MssqlCbtStatusType"
        name:
          description: IP address or hostname of the host.
          type: string
        nasBaseConfig:
          $ref: "#/components/schemas/NasBaseConfig"
        operatingSystem:
          description: Operating system of the host. One of Windows, Linux, AIX, HPUX, and SunOS.
          type: string
        operatingSystemType:
          description: The operating system of the host. Possible choices are Windows, Linux, AIX, HPUX, SunOS.
          type: string
        organizationId:
          description: The ID of the organization to which the host is assigned (set by envoy).
          type: string
        organizationName:
          description: The name of the organization to which the host is assigned (set by envoy).
          type: string
        primaryClusterId:
          description: ID of the Rubrik cluster to which the host belongs.
          type: string
        status:
          description: Specifies the connect status for the host. Status is Refreshing while discovery is running or Connected once discovery was successful and the host is available.
          type: string
      required:
        - hostname
        - id
      type: object
    HostSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/HostSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    HostUiFilterStatus:
      description: Status of Rubrik Io Filter on ESX Host.
      enum:
        - Ok
        - InstallInProgress
        - UninstallInProgress
        - UpgradeInProgress
        - UpgradeNeeded
        - RetryInstall
        - CheckVcenter
        - ErrorContactSupport
        - ErrorMaintenanceMode
        - NoFilter
        - Unknown
        - UnsupportedByVmware
      type: string
    HostUpdate:
      properties:
        alias:
          description: A user-specified string that returns this host in searches.
          type: string
        compressionEnabled:
          type: boolean
        hdfsConfig:
          $ref: "#/components/schemas/HdfsConfig"
        hostVfdDriverInstalled:
          description: When VFD is disabled on the specified Windows host, set this property to false to instruct the Rubrik cluster to remove the VFD driver from a specified Windows host. Before using this property, disable VFD on the specified Windows host by setting the value of HostVfdEnabled to Disabled.
          type: boolean
        hostVfdEnabled:
          $ref: "#/components/schemas/HostVfdInstallConfig"
        hostname:
          type: string
        isOracleHost:
          description: |
            A Boolean that specifies whether to discover Oracle information during host refresh. A value of 'true' discovers Oracle information during host refresh.
          type: boolean
        mssqlCbtDriverInstalled:
          description: When CBT is disabled on the specified Windows host, set this property to false to instruct the Rubrik cluster to remove the CBT driver from a specified Windows host. Before using this property, disable CBT on the specified Windows host by setting the value of mssqlCbtEnabled to Disabled.
          type: boolean
        mssqlCbtEnabled:
          $ref: "#/components/schemas/MssqlCbtStatusType"
        nasConfig:
          $ref: "#/components/schemas/NasConfig"
        oracleQueryUser:
          description: |
            Specifies the Oracle username for an account with query privileges. The account must have query privileges for a specified Oracle installation to enable Oracle discovery queries for that installation.
          type: string
        oracleSysDbaUser:
          description: |
            Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
          type: string
      type: object
    HostVfdInstallConfig:
      description: VFD host support status.
      enum:
        - Enabled
        - Disabled
      type: string
    HostVfdState:
      description: VFD host install state.
      enum:
        - NotInstalled
        - Installed
        - InstalledButRestartRequired
        - UninstalledButRestartRequired
      type: string
    HostVolumeSummary:
      allOf:
        - $ref: "#/components/schemas/VolumeGroupSnapshotVolumeSummary"
        - properties:
            isCurrentlyPresentOnSystem:
              description: Indicates whether a volume is present on the host. When 'true', the volume is present. When 'false', the volume is not present. Volumes that are not present on the host are still included in snapshots and trigger warnings until the missing volumes are excluded from snapshots.
              type: boolean
            naturalId:
              description: The unique ID of the volume on the Windows host.
              type: string
            volumeGroupId:
              description: The unique ID of the Volume Group.
              type: string
          required:
            - isCurrentlyPresentOnSystem
            - naturalId
          type: object
    HostVolumeSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/HostVolumeSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    HotAddBandwidthInfo:
      properties:
        exportLimit:
          description: The HotAdd bandwidth limit in Mbps for export.
          format: int32
          type: integer
        ingestLimit:
          description: The HotAdd bandwidth limit in Mbps for ingest.
          format: int32
          type: integer
      required:
        - exportLimit
        - ingestLimit
      type: object
    HotAddNetworkConfigWithId:
      properties:
        network_id:
          description: The ID of a user-configured vCenter network selected for HotAdd backup and recovery.
          type: string
        static_ip_info:
          $ref: "#/components/schemas/StaticIpInfo"
      required:
        - network_id
      type: object
    HotAddNetworkConfigWithName:
      properties:
        networkName:
          description: The name of the HotAdd proxy virtual machine network.
          type: string
        staticIpConfig:
          $ref: "#/components/schemas/StaticIpInfo"
      type: object
    HotAddProxiesNeededInfo:
      properties:
        needed:
          description: The number of HotAdd proxies the vCenter requires.
          format: int32
          type: integer
      required:
        - needed
      type: object
    HotAddProxyVmInfo:
      properties:
        UsedPortCount:
          description: The number of port in use for the HotAdd proxy virtual machine.
          format: int32
          type: integer
        computeClusterName:
          description: The name of the compute cluster that contains the HotAdd proxy virtual machine.
          type: string
        datastoreName:
          description: The name of the datastore that the HotAdd proxy virtual machine uses.
          type: string
        hostName:
          description: The name of the ESX host that contains the HotAdd proxy virtual machine.
          type: string
        id:
          description: The ID of the HotAdd proxy virtual machine.
          type: string
        name:
          description: The name of the HotAdd proxy virtual machine.
          type: string
        proxyNetworkInfo:
          $ref: "#/components/schemas/HotAddNetworkConfigWithName"
        status:
          $ref: "#/components/schemas/HotAddProxyVmStatusType"
        vcenterName:
          description: The name of the vCenter that contains the HotAdd proxy virtual machine.
          type: string
      required:
        - UsedPortCount
        - datastoreName
        - id
        - name
        - status
        - vcenterName
      type: object
    HotAddProxyVmInfoListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/HotAddProxyVmInfo"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    HotAddProxyVmStatusType:
      description: The type of the HotAdd proxy virtual machine.
      enum:
        - Running
        - Failed
        - Expired
        - Maintaining
      type: string
    HypervVirtualDiskForceFullInfo:
      description: Information required to request a force full snapshot for a Hyper-V virtual disk running in a Hyper-V virtual machine.
      properties:
        shouldDedupe:
          default: true
          description: Indicates if deduplication should be enabled for the forced full snapshot of the Virtual Disk. When set to true, deduplication is performed against local data on the Rubrik cluster.
          type: boolean
        virtualDiskId:
          description: ID of the virtual disk running in the Hyper-V virtual machine.
          type: string
      required:
        - shouldDedupe
        - virtualDiskId
      type: object
    HypervVirtualMachineForceFullRequest:
      properties:
        virtualDiskInfos:
          description: Configuration to force a full snapshot for the virtual disks listed in the request. The configuration specifies which virtual disks in HyperV VM receive forced full snapshots, and whether to perform deduplication. If the configuration is missing, a forced full snapshot is not requested. If the configuration contains an empty array, a forced full snapshot is requested for all virtual disks in the HyperV virtual machine, and deduplication is performed by default. If the configuration array contains specific virtual disks, a forced full snapshot is requested only for these disks. The shouldDedupe flag determines if deduplication is performed. If a forced full snapshot is requested, the next backup job checks the configuration and takes the full snapshot according to the configuration. After the full snapshot is taken, the backup job clears the configuration to prevent additional full snapshots from being taken.
          items:
            $ref: "#/components/schemas/HypervVirtualDiskForceFullInfo"
          type: array
      type: object
    HypervVirtualMachineForceFullResponse:
      properties:
        virtualDiskInfos:
          description: Configuration for each virtual disk that requested a forced full snapshot. If the configuration does not exist, either a forced full snapshot was not requested for the HyperV virtual machine, or a backup job took the requested full snapshot and cleared the configuration.
          items:
            $ref: "#/components/schemas/HypervVirtualDiskForceFullInfo"
          type: array
        vmId:
          description: ID of the Hyper-V virtual machine containing all virtual disks.
          type: string
      required:
        - vmId
      type: object
    HypervVmSlaObjectCount:
      properties:
        numHypervVms:
          description: The number of Hyper-V virtual machines protected under this SLA domain.
          format: int32
          type: integer
      type: object
    IdNamePair:
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
      type: object
    IdProviderAuthDomainInfo:
      allOf:
        - $ref: "#/components/schemas/IdProviderSamlInfo"
        - properties:
            name:
              description: Human friendly name of the Id Provider (IdP).
              type: string
          required:
            - name
          type: object
    IdProviderAuthDomainInfoUpdate:
      allOf:
        - $ref: "#/components/schemas/IdProviderSamlInfoUpdate"
        - properties:
            name:
              description: Human friendly name of the Id Provider (IdP).
              type: string
          type: object
    IdProviderAuthDomainSummary:
      properties:
        entityId:
          description: Entity ID of the Id Provider (IdP).
          type: string
        id:
          description: ID of this authentication domain.
          type: string
        name:
          description: Domain name.
          type: string
        organizationId:
          description: ID of the organization that added the authentication domain.
          type: string
        signCert:
          description: The Identity Provider (IdP) X509 certificate, stored using the PEM format, used to sign the SAML assertion.
          type: string
        signCertExpiryDate:
          description: The expiry date of the Identity Provider (IdP) X509 certificate. The date is a string with the ISO-8601 format like 2017-01-23T20:12:45.000Z with milliseconds precision.
          type: string
        skewnessInSec:
          description: The clock skewness tolerance, in seconds, between the Identity Provider (IdP) and the Rubrik cluster.
          format: int64
          type: integer
        ssoUrl:
          description: The Identity Provider (IdP) endpoint that Rubrik sends authentication request to in order to initiate SSO login.
          type: string
      required:
        - entityId
        - id
        - name
        - signCert
        - signCertExpiryDate
        - skewnessInSec
        - ssoUrl
      type: object
    IdProviderAuthDomainSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/IdProviderAuthDomainSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    IdProviderSamlInfo:
      properties:
        metadataXmlBase64:
          description: Identity Provider (IdP) metadata XML file in a base64 encoded format.
          type: string
        skewnessInSec:
          default: 300
          description: The clock skewness tolerance, in seconds, between the Identity Provider (IdP) and the Rubrik cluster.
          format: int64
          minimum: 0
          type: integer
      required:
        - metadataXmlBase64
      type: object
    IdProviderSamlInfoUpdate:
      properties:
        metadataXmlBase64:
          description: Identity Provider (IdP) metadata XML file in a base64 encoded format.
          type: string
        skewnessInSec:
          default: 300
          description: The clock skewness tolerance, in seconds, between the Identity Provider (IdP) and the Rubrik cluster.
          format: int64
          minimum: 0
          type: integer
      type: object
    InstantRecoveryJobConfig:
      allOf:
        - $ref: "#/components/schemas/MountExportSnapshotJobCommonOptions"
        - properties:
            hostId:
              description: ID of the ESXi host to use for Instant Recovery.
              type: string
            preserveMoid:
              default: false
              description: Determines whether to preserve the moid of the source virtual machine in a restore operation. Use 'true' to keep the moid of the source. Use 'false' to assign a new moid. The default is 'false'.
              type: boolean
            shouldRecoverTags:
              description: The job recovers the tags that were assigned to the virtual machine.
              type: boolean
            vlan:
              description: VLAN ID for the VLAN ESXi host prefer to use for mounting the datastore.
              format: int32
              type: integer
          type: object
    InternalJobInstanceDetail:
      properties:
        archived:
          description: Whether this job instance has been archived.
          type: boolean
        childJobDebugInfo:
          description: Some job types create other 'child' jobs to perform their work. Here we show information on how this job is being affected by its child jobs (if any).
          type: string
        endTime:
          description: End time of the job instance.
          type: string
        errorInfo:
          description: Error information of the job instance.
          type: string
        id:
          description: ID of the instance.
          type: string
        isDisabled:
          description: Whether this job is disabled or not.
          type: boolean
        jobProgress:
          description: The current progress in terms of percentage of the async request.
          format: double
          type: number
        jobType:
          description: Type of the job.
          type: string
        nodeId:
          description: ID of the node where the job runs.
          type: string
        result:
          description: Result of the job instance. Its meaning depends on the job type but is usually an ID.
          type: string
        startTime:
          description: Start time of the job instance.
          type: string
        status:
          description: Status of the job instance.
          type: string
      required:
        - archived
        - id
        - isDisabled
        - jobType
        - nodeId
        - status
      type: object
    IoFilterStatus:
      description: Status of Rubrik Io Filter on Cluster.
      enum:
        - Uninstalled
        - InstallInProgress
        - UpgradeInProgress
        - UninstallInProgress
        - OutOfDate
        - Installed
        - InstallError
        - UpgradeError
        - UninstallError
        - Unknown
        - Inconsistent
        - Unsupported
        - UnsupportedByRubrik
        - UnsupportedByVmware
        - Unavailable
      type: string
    IoFilterSummary:
      properties:
        id:
          type: string
        name:
          type: string
        releaseDate:
          type: string
        summary:
          type: string
        vendor:
          type: string
        version:
          type: string
      required:
        - id
        - name
        - vendor
        - version
      type: object
    IoFilterSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/IoFilterSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    JobMonitoringCsvDownloadResponse:
      properties:
        downloadLink:
          description: The download link for the CSV file.
          type: string
        jobEventStatus:
          $ref: "#/components/schemas/JobMonitoringStatus"
        jobMonitoringState:
          $ref: "#/components/schemas/JobMonitoringState"
        jobTaskType:
          $ref: "#/components/schemas/JobMonitoringTaskType"
        objectName:
          description: The requested object name (if applicable).
          type: string
        objectType:
          $ref: "#/components/schemas/ReportableObjectType"
        shouldIncludeLogRelatedJob:
          description: A Boolean that specifies whether log-related jobs are included. When this value is 'true,' log-related jobs are included.
          type: boolean
      required:
        - downloadLink
        - jobMonitoringState
        - shouldIncludeLogRelatedJob
      type: object
    JobMonitoringInfo:
      properties:
        dataToTransfer:
          description: Amount of data to transfer in bytes.
          format: int64
          type: integer
        dataTransferred:
          description: The amount of data transferred as part of the job in bytes.
          format: int64
          type: integer
        duration:
          description: The number of seconds since the job started to active jobs. The number of seconds the job ran for completed jobs.
          format: int64
          type: integer
        endTime:
          description: End time of the job. Leave this value empty for queued and running jobs.
          format: date-time
          type: string
        errorInfo:
          description: Description of error information for the job.
          type: string
        eventSeriesId:
          description: The event series id associated with the job.
          type: string
        isFirstFullSnapshot:
          description: A Boolean value that determines whether or not the job associated with the event is a first full snapshot backup.
          type: boolean
        isLogTask:
          description: A boolean value indication if the job is a log related job.
          type: boolean
        isOnDemand:
          description: A boolean value indication if the job is a an on demand job.
          type: boolean
        jobMonitoringState:
          $ref: "#/components/schemas/JobMonitoringState"
        jobStatus:
          $ref: "#/components/schemas/JobMonitoringStatus"
        jobType:
          $ref: "#/components/schemas/JobMonitoringTaskType"
        lastSuccessfulJobTime:
          description: Time of the last successful job of the same job type. The return value is None if no successful jobs are present.
          format: date-time
          type: string
        lastUpdatedTime:
          description: The time the status for the job has been updated.
          format: date-time
          type: string
        locationId:
          description: Id of the location of the object.
          type: string
        locationName:
          description: Location Name.
          type: string
        maximumAttemptsForJob:
          description: The maximum number of times the job will run in case of a failure.
          format: int32
          type: integer
        nextJobTime:
          description: Expected start time of the next job of the same job type. The return value is None if no new job is scheduled.
          format: date-time
          type: string
        nodeId:
          description: Id of the node the job is running on.
          type: string
        objectId:
          description: The managed id of the object.
          type: string
        objectLogicalSize:
          description: The object size in bytes.
          format: int64
          type: integer
        objectName:
          description: The name of the object in the job.
          type: string
        objectType:
          $ref: "#/components/schemas/ReportableObjectType"
        retryCount:
          description: The number of times the job has retired.
          format: int32
          type: integer
        retryStatus:
          $ref: "#/components/schemas/JobMonitoringRetryStatus"
        slaDomainId:
          description: Sla Domain Id.
          type: string
        slaDomainName:
          description: Sla Domain name.
          type: string
        sourceClusterName:
          description: For replication jobs, this stores the source cluster name. Leave this value empty for other jobs.
          type: string
        startTime:
          description: Start time for running or completed jobs. It is the scheduled start time for Queued jobs.
          format: date-time
          type: string
        throughput:
          description: The throughput for running or completed jobs (measured in bytes/s). When no running or completed jobs exist no value is provided.
          format: int64
          type: integer
        warningCount:
          description: The number of warning events in the event series associated with the job.
          format: int32
          type: integer
      required:
        - eventSeriesId
        - isLogTask
        - isOnDemand
        - jobMonitoringState
        - jobStatus
        - jobType
        - lastUpdatedTime
        - objectId
        - retryStatus
        - startTime
      type: object
    JobMonitoringJobProgressInfo:
      properties:
        dataToTransfer:
          description: Amount of data to transfer in bytes.
          format: int64
          type: integer
        dataTransferred:
          description: The amount of data transferred in bytes.
          format: int64
          type: integer
        monitoring_id:
          description: Monitoring ID of the row.
          type: string
        throughput:
          description: The throughput for active jobs (measured in bytes/s). When no active jobs exist, no value is provided.
          format: int64
          type: integer
      required:
        - monitoring_id
      type: object
    JobMonitoringObjectsCountByState:
      properties:
        active:
          description: The total count of all jobs with the 'Running' status.
          format: int32
          type: integer
        canceled:
          description: The total count of all jobs with the 'Canceled' status.
          format: int32
          type: integer
        failure:
          description: The total count of all jobs with the 'Failure' status.
          format: int32
          type: integer
        scheduled:
          description: The total count of all jobs with the 'Scheduled' status.
          format: int32
          type: integer
        success:
          description: The total count of all jobs with the 'Succeeded' status.
          format: int32
          type: integer
        total:
          description: The total count of all jobs.
          format: int32
          type: integer
      required:
        - active
        - canceled
        - failure
        - scheduled
        - success
        - total
      type: object
    JobMonitoringObjectsCountByType:
      properties:
        archival:
          description: The total count of all Archival jobs.
          format: int32
          type: integer
        backup:
          description: The total count of all Backup jobs.
          format: int32
          type: integer
        conversion:
          description: The total count of all Conversion jobs.
          format: int32
          type: integer
        index:
          description: The total count of all Index jobs.
          format: int32
          type: integer
        logArchival:
          description: The total count of all Log Archival jobs.
          format: int32
          type: integer
        logBackup:
          description: The total count of all Log Backup jobs.
          format: int32
          type: integer
        logReplication:
          description: The total count of all Log Replication jobs.
          format: int32
          type: integer
        logShipping:
          description: The total count of all Log Shipping jobs.
          format: int32
          type: integer
        recovery:
          description: The total count of all Recovery jobs.
          format: int32
          type: integer
        replication:
          description: The total count of all Replication jobs.
          format: int32
          type: integer
        total:
          description: The total count of all jobs.
          format: int32
          type: integer
      required:
        - archival
        - backup
        - conversion
        - index
        - logArchival
        - logBackup
        - logReplication
        - logShipping
        - recovery
        - replication
        - total
      type: object
    JobMonitoringResponse:
      properties:
        afterId:
          description: Cursor of the last table row sent in the response. Used for setting the cursor when getting the next page of the table.
          type: string
        effectiveSlaDomainId:
          description: The requested SLA domain id (if applicable).
          type: string
        hasMore:
          description: A Boolean value that specifies whether or not the list has more elements. This value is 'true' when the list has more elements. This value is 'false' when the list has no more elements.
          type: boolean
        isFirstFull:
          description: A Boolean to specify if the jobs are first full backups or not.
          type: boolean
        jobEventStatus:
          description: The requested event status of the jobs (if applicable).
          items:
            $ref: "#/components/schemas/JobMonitoringStatus"
          type: array
        jobMonitoringInfoList:
          description: A list of jobs.
          items:
            $ref: "#/components/schemas/JobMonitoringInfo"
          type: array
        jobType:
          $ref: "#/components/schemas/JobMonitoringTaskType"
        lastUpdateTime:
          description: The earliest possible time at which the latest update to all rows has been made.
          format: date-time
          type: string
        nodeName:
          description: The requested node (if applicable).
          type: string
        objectName:
          description: The requested object name (if applicable).
          type: string
        objectType:
          $ref: "#/components/schemas/ReportableObjectType"
        shouldIncludeLogRelatedJob:
          description: A Boolean to specify whether or not to include log-related jobs.
          type: boolean
      required:
        - hasMore
        - jobMonitoringInfoList
        - shouldIncludeLogRelatedJob
      type: object
    JobMonitoringRetryStatus:
      description: Monitoring retry status of the job (default is NotRetried).
      enum:
        - RequestReceived
        - ScheduleSuccess
        - ScheduleFailure
        - NotRetried
      type: string
    JobMonitoringState:
      description: Monitoring state of the job used for monitoring tabs.
      enum:
        - Failure
        - Scheduled
        - Success
        - Active
        - Canceled
      type: string
    JobMonitoringStatus:
      description: Monitoring status of the job break down.
      enum:
        - Failure
        - Success
        - Queued
        - Scheduled
        - Active
        - Canceling
        - Canceled
        - SuccessfulWithWarnings
        - CancelingScheduled
      type: string
    JobMonitoringStream:
      properties:
        afterId:
          description: The ID to use with subsequent queries to get entires after this entry.
          type: string
        jobMonitoringResponse:
          $ref: "#/components/schemas/JobMonitoringInfo"
        monitoringId:
          description: Monitoring ID of the row.
          type: string
        rowType:
          $ref: "#/components/schemas/MonitoringRowType"
      required:
        - afterId
        - monitoringId
        - rowType
      type: object
    JobMonitoringStreamingResponse:
      properties:
        clusterTime:
          description: Current time of the cluster when the request was made.
          format: date-time
          type: string
        data:
          description: Response data.
          items:
            $ref: "#/components/schemas/JobMonitoringStream"
          type: array
        hasMore:
          description: True if the list has more elements.
          type: boolean
      required:
        - clusterTime
        - data
        - hasMore
      type: object
    JobMonitoringSummaryByState:
      properties:
        jobTypes:
          description: Job types of the jobs included in the result.
          items:
            $ref: "#/components/schemas/JobMonitoringTaskType"
          type: array
        lastUpdatedTime:
          description: The time in the cluster time zone at which the counts were updated.
          format: date-time
          type: string
        objectCounts:
          $ref: "#/components/schemas/JobMonitoringObjectsCountByState"
      required:
        - jobTypes
        - objectCounts
      type: object
    JobMonitoringSummaryByType:
      properties:
        jobMonitoringState:
          $ref: "#/components/schemas/JobMonitoringState"
        lastUpdatedTime:
          description: The time in the cluster time zone at which the counts were updated.
          format: date-time
          type: string
        objectCounts:
          $ref: "#/components/schemas/JobMonitoringObjectsCountByType"
      required:
        - jobMonitoringState
        - objectCounts
      type: object
    JobMonitoringTaskType:
      description: Task type.
      enum:
        - Archival
        - Backup
        - Conversion
        - Recovery
        - Replication
        - Index
        - LogBackup
        - LogArchival
        - LogReplication
        - LogShipping
      type: string
    JobScheduledResponse:
      properties:
        jobInstanceId:
          type: string
      required:
        - jobInstanceId
      type: object
    KmipClientConfiguration:
      properties:
        clientCertificateId:
          description: The ID of an imported certificate in the CDM certificate management table.
          type: string
        password:
          description: The password for the KMIP server.
          type: string
          x-secret: true
        username:
          description: The username for the KMIP server.
          type: string
      required:
        - username
      type: object
    KmipClientDetail:
      properties:
        clientCertificateId:
          description: The ID of an imported certificate in the CDM certificate management table.
          type: string
        isPasswordSet:
          description: Specifies whether a password is configured for authentication. When a password is configured, this value is 'true'. When a password is not configured, this value is 'false'.
          type: boolean
        username:
          description: The username for the KMIP server.
          type: string
      type: object
    KmipServerConfiguration:
      properties:
        serverAddress:
          description: The KMIP server's address.
          type: string
        serverCertificateId:
          description: ID corresponding to KMIP server's X.509 certificate in Base64 encoded DER format.
          type: string
        serverPort:
          description: The KMIP server's port number.
          format: int32
          minimum: 0
          type: integer
      required:
        - serverAddress
        - serverCertificateId
      type: object
    KmipServerDetail:
      allOf:
        - $ref: "#/components/schemas/KmipServerConfiguration"
    KuprHostRegister:
      properties:
        agentCertificate:
          description: |
            The agent certificate of the registered host. X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
          type: string
        agentId:
          description: The agent ID of the registered host.
          type: string
        hostname:
          type: string
        ipv4Addresses:
          items:
            type: string
          type: array
        operatingSystemInfo:
          description: Operating system information of a specified kupr host.
          enum:
            - Linux
            - Rhel
            - Ubuntu
            - Suse
            - Centos
          type: string
        operatingSystemType:
          description: Operating system of a specified kupr host.
          enum:
            - Linux
          type: string
        operatingSystemVersion:
          description: Operating system version of a specified kupr host.
          type: string
      required:
        - agentCertificate
        - agentId
        - hostname
        - operatingSystemInfo
        - operatingSystemType
      type: object
    KuprHostUpdate:
      properties:
        agentCertificate:
          description: |
            The agent certificate of the registered host. X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
          type: string
        agentId:
          description: The agent ID of the registered host.
          type: string
        hostname:
          type: string
        ipv4Addresses:
          description: |
            An array containing the IPv4 address to Kupr host.
          items:
            type: string
          type: array
        operatingSystemInfo:
          description: Operating system information of a specified kupr host.
          enum:
            - Linux
            - Rhel
            - Ubuntu
            - Suse
            - Centos
          type: string
        operatingSystemType:
          description: Operating system of a specified kupr host.
          enum:
            - Linux
          type: string
        operatingSystemVersion:
          description: Operating system version of a specified kupr host.
          type: string
      type: object
    LdapDomainName:
      properties:
        name:
          description: Name of an LDAP domain.
          type: string
      required:
        - name
      type: object
    LdapDomainNameListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/LdapDomainName"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    LdapServiceInfo:
      properties:
        advancedOptions:
          $ref: "#/components/schemas/AdvancedLdapConfiguration"
        authServers:
          description: An ordered list of authentication servers. Servers on this list have priority over servers discovered using dynamic DNS.
          items:
            type: string
          type: array
        baseDn:
          description: The path to the directory where searches for users begin.
          type: string
          x-hidden: true
        bindUserName:
          description: The name of the user that searches the authentication server for other users.
          type: string
        bindUserPassword:
          description: Password for the bind user.
          type: string
          x-secret: true
        certificateId:
          description: ID of the imported certificate to use for connections to this server.
          type: string
        dynamicDnsName:
          description: Dynamic DNS name for locating authentication servers.
          type: string
        isTotpEnforced:
          description: |
            Indicates whether the time-based one time password (TOTP) authentication method is being enforced. Returns true when TOTP is enforced and false when TOTP is not enforced.
          type: boolean
        mfaServerId:
          description: MFA server associated with LDAP service.
          type: string
        name:
          description: Human friendly name.
          type: string
      required:
        - bindUserName
        - bindUserPassword
      type: object
    LdapServiceInfoUpdate:
      properties:
        advancedOptions:
          $ref: "#/components/schemas/AdvancedLdapConfiguration"
        authServers:
          description: An ordered list of authentication servers. Servers on this list have priority over servers discovered using dynamic DNS.
          items:
            type: string
          type: array
        baseDn:
          description: The path to the directory where searches for users begin.
          type: string
          x-hidden: true
        bindUserName:
          description: The name of the user that searches the authentication server for other users.
          type: string
        bindUserPassword:
          description: Password for the bind user.
          type: string
          x-secret: true
        certificateId:
          description: ID of the imported certificate to use for connections to this server.
          type: string
        dynamicDnsName:
          description: Dynamic DNS name for locating authentication servers.
          type: string
        isTotpEnforced:
          description: |
            Indicates whether the time-based one time password (TOTP) authentication method is being enforced. Returns true when TOTP is enforced and false when TOTP is not enforced.
          type: boolean
        mfaServerId:
          description: MFA server associated with LDAP service.
          type: string
        name:
          description: Human friendly name.
          type: string
      type: object
    LdapServiceSummary:
      properties:
        advancedOptions:
          $ref: "#/components/schemas/AdvancedLdapConfiguration"
        authServers:
          description: An ordered list of authentication servers. Servers on this list have priority over servers discovered using dynamic DNS.
          items:
            type: string
          type: array
        baseDn:
          description: The path to the directory where searches for users begin.
          type: string
          x-hidden: true
        bindUserName:
          description: The name of the user that searches the authentication server for other users.
          type: string
        certificateId:
          description: ID of the imported certificate to use for connections to this server.
          type: string
        domainType:
          description: Domain type, for example local or LDAP/Active Directory.
          type: string
        dynamicDnsName:
          description: Dynamic DNS name for locating authentication servers.
          type: string
        id:
          description: ID of this authentication domain.
          type: string
        initialRefreshStatus:
          description: Status message from the initial refresh.
          type: string
          x-hidden: true
        isTotpEnforced:
          description: |
            Indicates whether the time-based one time password (TOTP) authentication method is being enforced. Returns true when TOTP is enforced and false when TOTP is not enforced.
          type: boolean
        mfaServerId:
          description: MFA server associated with LDAP service.
          type: string
        name:
          description: Domain name.
          type: string
        serviceAccount:
          description: Computer account name associated with this cluster.
          type: string
      required:
        - domainType
        - id
        - name
      type: object
    LdapServiceSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/LdapServiceSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    LegalHoldDownloadConfig:
      properties:
        isLegalHoldDownload:
          description: Specifies if the download action is in response to a Legal Hold. This download generates a SHA1 checksum of downloaded data that external bodies can use for integrity verification.
          type: boolean
      required:
        - isLegalHoldDownload
      type: object
    LegalHoldObjectSortAttribute:
      description: Attributes that are available to use when sorting query results for objects whose snapshots are on Legal Hold.
      enum:
        - objectName
        - objectType
        - numberOfSnapshotsHeld
      type: string
    LegalHoldSnapshotSortAttribute:
      description: Attributes that are available to use when sorting query results for snapshots on Legal Hold.
      enum:
        - SnapshotTime
        - PlaceOnHoldTime
        - SnapshotType
      type: string
    LegalHoldSummary:
      allOf:
        - $ref: "#/components/schemas/ObjectHolder"
        - properties:
            expectedExpirationDateWithoutLegalHold:
              description: |
                Date at which the snapshot will expire if the legal hold is dissolved.
              format: date-time
              type: string
            isCustomRetentionApplied:
              description: |
                A Boolean value that indicates whether custom retention is applied to the specified snapshot. Value is true when custom retention is applied to the snapshot.
              type: boolean
            isOnDemandSnapshot:
              description: A Boolean that specifies whether a snapshot is an On Demand snapshot. When this value is 'true,' the snapshot is an On Demand snapshot.
              type: boolean
            locationsPresent:
              description: Current locations of the snapshot.
              items:
                type: string
              type: array
            placeOnHoldTime:
              description: Time at which the snapshot was put on hold.
              format: date-time
              type: string
            snapshotId:
              type: string
            snapshotTime:
              description: Time at which the snapshot was taken.
              format: date-time
              type: string
          required:
            - isCustomRetentionApplied
            - isOnDemandSnapshot
            - locationsPresent
            - placeOnHoldTime
            - snapshotId
            - snapshotTime
          type: object
    LegalHoldSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/LegalHoldSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    Link:
      properties:
        href:
          description: The destination of the link.
          type: string
        rel:
          description: The relation of the destination of this link to the current resource.
          type: string
      required:
        - href
        - rel
      type: object
    LocalUserAccountLockoutConfig:
      properties:
        accountLockoutDurationInMinutes:
          description: |
            Specifies the duration in minutes after which a locked user account is automatically unlocked. When set to 0, the user account is not unlocked automatically.
          format: int32
          type: integer
        enabled:
          description: |
            Specifies whether local user accounts are locked. When 'true' the local user account is locked after 'x' failed consecutive login attempts where 'x' is specified by 'maxFailedLoginsForLocalUser'. When 'false' failed login attempts are not recorded and will not lock the local user account.
          type: boolean
        maxFailedLoginsForLocalUser:
          description: |
            Specifies the number of consecutive failed logins after which the local user account is locked.
          format: int32
          type: integer
      type: object
    LocalUserAccountLockoutStatus:
      properties:
        accountLockoutDurationInMinutes:
          description: |
            Specifies the duration in minutes after which a locked user account is automatically unlocked. When set to 0, the user account is not unlocked automatically.
          format: int32
          type: integer
        enabled:
          description: |
            Specifies whether local user accounts are locked. When 'true' the local user account is locked after 'x' failed consecutive login attempts where 'x' is specified by 'maxFailedLoginsForLocalUser'. When 'false' failed login attempts are not recorded and will not lock the local user account.
          type: boolean
        maxFailedLoginsForLocalUser:
          description: |
            Specifies the number of consecutive failed logins after which the local user account is locked.
          format: int32
          type: integer
      required:
        - accountLockoutDurationInMinutes
        - enabled
        - maxFailedLoginsForLocalUser
      type: object
    LocationPathPoint:
      properties:
        managedId:
          type: string
        name:
          type: string
      required:
        - managedId
        - name
      type: object
    LsnRecoveryPoint:
      properties:
        lsn:
          description: LSN of the recovery point.
          type: string
        recoveryForkGuid:
          description: Recovery fork GUID of the recovery point. If not provided, the recovery fork GUID of the latest snapshot is used.
          type: string
      required:
        - lsn
      type: object
    ManagedHierarchyObjectAncestor:
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
      type: object
    ManagedHierarchyObjectSummary:
      allOf:
        - $ref: "#/components/schemas/Snappable"
        - properties:
            infraPath:
              items:
                $ref: "#/components/schemas/ManagedHierarchyObjectAncestor"
              type: array
            isDeleted:
              description: Indicates whether the managed hierarchy object is deleted.
              type: boolean
            isRelic:
              description: Whether this managed object is a relic (an archived snappable with unexpired snapshots).
              type: boolean
            slaPath:
              items:
                $ref: "#/components/schemas/ManagedHierarchyObjectAncestor"
              type: array
          required:
            - isDeleted
            - isRelic
          type: object
    ManagedObjectDescendantCountVcdVappFields:
      properties:
        vapp:
          description: Number of vCD vApps.
          format: int32
          type: integer
      type: object
    ManagedObjectPendingSlaInfo:
      properties:
        isPendingSlaDomainRetentionLocked:
          type: boolean
        objectId:
          description: Managed ID of the object.
          type: string
        pendingSlaDomainId:
          type: string
        pendingSlaDomainName:
          type: string
      required:
        - objectId
        - pendingSlaDomainId
        - pendingSlaDomainName
      type: object
    ManagedVolumeSlaObjectCount:
      properties:
        numManagedVolumes:
          description: The number of Managed volumes protected under this SLA Domain.
          format: int32
          type: integer
      type: object
    ManualDiscoveryNodeInfo:
      properties:
        nodeInfo:
          items:
            $ref: "#/components/schemas/BootstrappableNodeInfoV1"
          type: array
      required:
        - nodeInfo
      type: object
    ManualDiscoveryNodeIpv4Info:
      properties:
        nodeInfo:
          items:
            $ref: "#/components/schemas/BootstrappableNodeIpv4Info"
          type: array
      required:
        - nodeInfo
      type: object
    Map_Boolean:
      additionalProperties:
        type: boolean
      type: object
    Map_String:
      additionalProperties:
        type: string
      type: object
    MfaServerConfig:
      properties:
        name:
          description: |
            Specifies the name to identify MFA server configuration.
          type: string
        timeout:
          default: 120
          description: |
            Specifies a number of seconds to wait for server response to a given authentication method.
          format: int32
          type: integer
      required:
        - name
      type: object
    MissedSnapshot:
      properties:
        archivalLocationType:
          items:
            type: string
          type: array
        missedSnapshotTime:
          format: date-time
          type: string
        missedSnapshotTimeUnits:
          items:
            $ref: "#/components/schemas/MissedSnapshotTimeUnitConfig"
          type: array
      required:
        - archivalLocationType
        - missedSnapshotTime
        - missedSnapshotTimeUnits
      type: object
    MissedSnapshotDayOfTimeUnit:
      description: Units for missed snapshot dayOfTime.
      enum:
        - Monday
        - Tuesday
        - Wednesday
        - Thursday
        - Friday
        - Saturday
        - Sunday
        - FirstDay
        - Fifteenth
        - LastDay
      type: string
    MissedSnapshotListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/MissedSnapshot"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    MissedSnapshotTimeUnitConfig:
      properties:
        dayOfTime:
          $ref: "#/components/schemas/MissedSnapshotDayOfTimeUnit"
        frequency:
          format: int32
          type: integer
        retention:
          format: int32
          type: integer
        timeUnit:
          $ref: "#/components/schemas/SlaTimeUnit"
      required:
        - frequency
        - retention
        - timeUnit
      type: object
    MonitoringEmailSubscriptionRequest:
      properties:
        attachments:
          description: Attachment files to send with the subscription.
          items:
            $ref: "#/components/schemas/SubscriptionAttachmentType"
          type: array
        emailAddresses:
          description: Email addresses to send monitoring subscriptions to.
          items:
            type: string
          type: array
        jobStates:
          description: User-selected job states.
          items:
            $ref: "#/components/schemas/JobMonitoringState"
          type: array
        timeAttributes:
          $ref: "#/components/schemas/SubscriptionScheduleTimeAttributes"
      required:
        - attachments
        - emailAddresses
        - jobStates
        - timeAttributes
      type: object
    MonitoringEmailSubscriptionUpdate:
      allOf:
        - $ref: "#/components/schemas/MonitoringEmailSubscriptionRequest"
        - properties:
            assumeOwnership:
              description: Changes the owner of an email subscription object to the username of the account that is logged into the current session.
              type: boolean
            id:
              description: ID assigned to an email subscription object.
              type: string
          required:
            - id
          type: object
    MonitoringRowType:
      description: The job monitoring row type.
      enum:
        - Upsert
        - Deletion
      type: string
    MonitoringSubscriptionSummary:
      allOf:
        - $ref: "#/components/schemas/MonitoringEmailSubscriptionRequest"
        - properties:
            id:
              description: ID assigned to an email subscription object.
              type: string
            owner:
              $ref: "#/components/schemas/SubscriptionOwner"
            status:
              $ref: "#/components/schemas/SubscriptionStatus"
          required:
            - id
            - status
          type: object
    MonthlyConfig:
      allOf:
        - $ref: "#/components/schemas/FrequencyConfig"
        - properties:
            dayOfMonth:
              $ref: "#/components/schemas/SlaDayOfMonth"
          required:
            - dayOfMonth
          type: object
    MountExportSnapshotJobCommonOptions:
      properties:
        disableNetwork:
          description: Sets the state of the network interfaces when the virtual machine is mounted or exported. Use 'false' to enable the network interfaces. Use 'true' to disable the network interfaces. Disabling the interfaces can prevent IP conflicts.
          type: boolean
        keepMacAddresses:
          description: Determines whether the MAC addresses of the network interfaces on the source virtual machine are assigned to the new virtual machine. Set to 'true' to assign the original MAC addresses to the new virtual machine. Set to 'false' to assign new MAC addresses. The default is 'false'. When removeNetworkDevices is set to true, this property is ignored.
          type: boolean
        powerOn:
          description: Determines whether the virtual machine should be powered on after mount or export. Set to 'true' to power on the virtual machine. Set to 'false' to mount or export the virtual machine but not power it on. The default is 'true'.
          type: boolean
        removeNetworkDevices:
          description: Determines whether to remove the network interfaces from the mounted or exported virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'.
          type: boolean
        vmName:
          description: Name of the new VM created by mount or export.
          type: string
      type: object
    MountMssqlDbConfig:
      properties:
        mountedDatabaseName:
          description: Name to assign to the mounted database.
          type: string
        recoveryModel:
          $ref: "#/components/schemas/MssqlDatabaseRecoveryModel"
        recoveryPoint:
          $ref: "#/components/schemas/MssqlRecoveryPoint"
        targetInstanceId:
          description: ID of the SQL Server instance to mount the database on. For availability source databases, this must be specified. When unspecified for non-availability source databases, the source SQL Server instance is used.
          type: string
      required:
        - mountedDatabaseName
        - recoveryPoint
      type: object
    MountSnapshotJobConfigForBatchV1:
      properties:
        config:
          $ref: "#/components/schemas/MountSnapshotJobConfigV1"
        snapshotAfterDate:
          description: Mounts the oldest snapshot taken after the specified date. This parameter is only evaluated when no values are set for snapshotId and snapshotBeforeDate.
          format: date-time
          type: string
        snapshotBeforeDate:
          description: Mounts the most recent snapshot taken prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.
          format: date-time
          type: string
        snapshotId:
          description: The ID of the snapshot to export. This parameter is optional if either of the `snapshotBeforeDate` or `snapshotAfterDate` parameters is configured.
          type: string
        vmId:
          description: ID of the virtual machine whose snapshot needs to be mounted.
          type: string
      required:
        - config
        - vmId
      type: object
    MountSnapshotJobConfigV1:
      allOf:
        - $ref: "#/components/schemas/MountExportSnapshotJobCommonOptions"
        - properties:
            createDatastoreOnly:
              description: The job creates a datastore that contains the VMDK, but does not create the corresponding virtual machine.
              type: boolean
            dataStoreName:
              description: Obsolete parameter.
              type: string
            hostId:
              description: ID of the ESXi host to mount the new virtual machine on.
              type: string
            shouldRecoverTags:
              description: The job recovers the tags that were assigned to the virtual machine.
              type: boolean
            vlan:
              description: VLAN ID for the VLAN ESXi host prefer to use for mounting the datastore.
              format: int32
              type: integer
          type: object
    MssqlAvailabilityGroupDetail:
      allOf:
        - $ref: "#/components/schemas/MssqlAvailabilityGroupSummary"
    MssqlAvailabilityGroupSummary:
      allOf:
        - $ref: "#/components/schemas/Snappable"
        - $ref: "#/components/schemas/MssqlSlaRelatedProperties"
    MssqlAvailabilityGroupSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/MssqlAvailabilityGroupSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    MssqlAvailabilityGroupUpdate:
      allOf:
        - $ref: "#/components/schemas/MssqlSlaPatchProperties"
    MssqlBackup:
      properties:
        backupId:
          description: The unique identifier for the object.
          type: string
        backupSize:
          description: The total uncompressed size of the files in bytes.
          format: int64
          type: integer
        backupType:
          $ref: "#/components/schemas/MssqlBackupType"
        date:
          description: Timestamp of the backup.
          format: date-time
          type: string
        lsn:
          description: LSN of the backup.
          type: string
        path:
          description: The file path the backup will be stored at in downloaded zip files containing it.
          type: string
        recoveryForkGuid:
          description: GUID of the recovery fork attached to the LSN.
          type: string
      required:
        - backupId
        - backupSize
        - backupType
        - date
        - lsn
        - path
        - recoveryForkGuid
      type: object
    MssqlBackupJobConfig:
      allOf:
        - $ref: "#/components/schemas/BaseOnDemandSnapshotConfig"
        - properties:
            forceFullSnapshot:
              description: Whether to force a full snapshot or an incremental.
              type: boolean
          type: object
    MssqlBackupSelection:
      properties:
        backupType:
          $ref: "#/components/schemas/MssqlBackupType"
        endPoint:
          $ref: "#/components/schemas/MssqlRecoveryPoint"
        legalHoldDownloadConfig:
          $ref: "#/components/schemas/LegalHoldDownloadConfig"
        recoveryPoint:
          $ref: "#/components/schemas/MssqlRecoveryPoint"
        startPoint:
          $ref: "#/components/schemas/MssqlRecoveryPoint"
      type: object
    MssqlBackupType:
      description: The type of the backup.
      enum:
        - Snapshot
        - Log
      type: string
    MssqlBackups:
      properties:
        items:
          description: A list of snapshots and logs.
          items:
            $ref: "#/components/schemas/MssqlBackup"
          type: array
      required:
        - items
      type: object
    MssqlBatchBackupCanceledSummary:
      properties:
        databaseId:
          description: ID of the Microsoft SQL database.
          type: string
      required:
        - databaseId
      type: object
    MssqlBatchBackupFailureSummary:
      properties:
        databaseId:
          description: ID of the Microsoft SQL database.
          type: string
        error:
          description: Information specifying why this snapshot failed.
          type: string
      required:
        - databaseId
        - error
      type: object
    MssqlBatchBackupJobConfig:
      allOf:
        - $ref: "#/components/schemas/BaseOnDemandSnapshotConfig"
        - properties:
            availabilityGroupIds:
              description: IDs of the Microsoft SQL availability groups. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.
              items:
                type: string
              type: array
            databaseIds:
              description: IDs of the Microsoft SQL databases. All databases in this list are considered for taking an on demand snapshot.
              items:
                type: string
              type: array
            forceFullSnapshot:
              description: Determines whether to force a full or incremental snapshot.
              type: boolean
            hostIds:
              description: IDs of the hosts. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.
              items:
                type: string
              type: array
            instanceIds:
              description: IDs of the Microsoft SQL instances. All non-availability databases on these instances are considered for taking an on demand snapshot.
              items:
                type: string
              type: array
            windowsClusterIds:
              description: IDs of the Windows clusters. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.
              items:
                type: string
              type: array
          type: object
    MssqlBatchBackupSuccessSummary:
      properties:
        databaseId:
          description: ID of the Mirosoft SQL database.
          type: string
        snapshotId:
          description: ID of the snapshot.
          type: string
      required:
        - databaseId
        - snapshotId
      type: object
    MssqlBatchBackupSummary:
      properties:
        canceledSnapshots:
          description: List of summary information for each canceled snapshot.
          items:
            $ref: "#/components/schemas/MssqlBatchBackupCanceledSummary"
          type: array
        failedSnapshots:
          description: List of summary information for each failed snapshot.
          items:
            $ref: "#/components/schemas/MssqlBatchBackupFailureSummary"
          type: array
        id:
          description: ID of the on-demand backup request.
          type: string
        successfulSnapshots:
          description: List of summary information for each successful snapshot.
          items:
            $ref: "#/components/schemas/MssqlBatchBackupSuccessSummary"
          type: array
      required:
        - canceledSnapshots
        - failedSnapshots
        - id
        - successfulSnapshots
      type: object
    MssqlCbtEffectiveStatusType:
      description: Effective CBT host status.
      enum:
        - On
        - Off
        - OnDefault
        - OffDefault
      type: string
    MssqlCbtStatusType:
      description: CBT host support status.
      enum:
        - Enabled
        - Disabled
        - Default
      type: string
    MssqlDatabaseFileType:
      description: File type of a database file.
      enum:
        - Data
        - Log
        - Filestream
      type: string
    MssqlDatabaseListSortAttribute:
      description: The field by which to sort when enumerating database summary information.
      enum:
        - copyOnly
        - effectiveSlaDomainName
        - logBackupRetentionHours
        - name
      type: string
    MssqlDatabaseRecoveryModel:
      description: Recovery model for a SQL Server database.
      enum:
        - SIMPLE
        - FULL
        - BULK_LOGGED
      type: string
    MssqlDbDefaults:
      properties:
        cbtStatus:
          description: True to enable a CBT-based backup, false to disable a CBT-based backup.
          type: boolean
        logBackupFrequencyInSeconds:
          format: int64
          type: integer
        logRetentionTimeInHours:
          format: int32
          type: integer
      required:
        - cbtStatus
        - logBackupFrequencyInSeconds
        - logRetentionTimeInHours
      type: object
    MssqlDbDefaultsUpdate:
      properties:
        cbtStatus:
          description: True to enable a CBT-based backup, false to disable a CBT-based backup.
          type: boolean
        logBackupFrequencyInSeconds:
          format: int64
          type: integer
        logRetentionTimeInHours:
          format: int32
          type: integer
      type: object
    MssqlDbDetail:
      allOf:
        - $ref: "#/components/schemas/MssqlDbSummary"
        - $ref: "#/components/schemas/BlackoutWindowResponseInfo"
        - properties:
            archiveStorage:
              format: int64
              type: integer
            isLocal:
              type: boolean
            isStandby:
              description: This field is deprecated. Use the isStandby field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
              type: boolean
            latestRecoveryPoint:
              format: date
              type: string
            localStorage:
              format: int64
              type: integer
            maxDataStreams:
              format: int32
              type: integer
            oldestRecoveryPoint:
              format: date
              type: string
            postBackupScript:
              $ref: "#/components/schemas/MssqlScriptDetail"
            preBackupScript:
              $ref: "#/components/schemas/MssqlScriptDetail"
            protectionDate:
              format: date
              type: string
            recoveryForkGuid:
              description: This field is deprecated. Use the recoveryForkGuid field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
              type: string
            snapshotCount:
              format: int32
              type: integer
          required:
            - snapshotCount
          type: object
    MssqlDbFileExportPath:
      properties:
        exportPath:
          description: The target path for the database file.
          type: string
        logicalName:
          description: Logical name of the database file.
          type: string
        newFilename:
          description: New filename for the database file.
          type: string
        newLogicalName:
          description: New logical name for the database file.
          type: string
      required:
        - exportPath
        - logicalName
      type: object
    MssqlDbReplica:
      properties:
        availabilityInfo:
          $ref: "#/components/schemas/MssqlDbReplicaAvailabilityInfo"
        hasPermissions:
          description: "`True` when the Rubrik cluster has sufficient permissions to perform all necessary operations."
          type: boolean
        instanceId:
          description: ID of the SQL Server instance managing the replica.
          type: string
        instanceName:
          description: Name of the SQL Server instance managing the replica.
          type: string
        isArchived:
          description: Deprecated. Please use 'isDeleted' instead.
          type: boolean
        isDeleted:
          description: "`True` when the replica is deleted."
          type: boolean
        isStandby:
          description: "`True` when the replica is in standby mode."
          type: boolean
        recoveryForkGuid:
          description: The recovery fork GUID of the replica.
          type: string
        recoveryModel:
          description: The recovery model of the replica.
          enum:
            - SIMPLE
            - FULL
            - BULK_LOGGED
          type: string
        rootProperties:
          $ref: "#/components/schemas/MssqlRootProperties"
        state:
          description: The state of the replica.
          type: string
      required:
        - hasPermissions
        - instanceId
        - instanceName
        - isArchived
        - isDeleted
        - isStandby
        - recoveryModel
        - rootProperties
        - state
      type: object
    MssqlDbReplicaAvailabilityInfo:
      properties:
        role:
          description: "Role of the availability database replica. Possible values are: `PRIMARY`, `SECONDARY`, or `RESOLVING`."
          enum:
            - PRIMARY
            - SECONDARY
            - RESOLVING
          type: string
      required:
        - role
      type: object
    MssqlDbSlaObjectCount:
      properties:
        numDbs:
          description: The number of actively protected databases under this SLA domain.
          format: int32
          type: integer
      type: object
    MssqlDbSnapshotDetail:
      allOf:
        - $ref: "#/components/schemas/BaseSnapshotSummary"
        - $ref: "#/components/schemas/BaseSnapshotDetail"
        - properties:
            canLiveMount:
              type: boolean
            database:
              $ref: "#/components/schemas/MssqlDbSummary"
          required:
            - canLiveMount
          type: object
    MssqlDbSnapshotSummary:
      allOf:
        - $ref: "#/components/schemas/BaseSnapshotSummary"
        - properties:
            canLiveMount:
              type: boolean
            databaseName:
              type: string
          required:
            - canLiveMount
            - databaseName
          type: object
    MssqlDbSnapshotSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/MssqlDbSnapshotSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    MssqlDbSummary:
      allOf:
        - $ref: "#/components/schemas/Snappable"
        - properties:
            availabilityGroupId:
              description: For an availability database, the ID of the availability group that the database belongs to.
              type: string
            copyOnly:
              description: Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
              type: boolean
            currentBackupTaskInfo:
              $ref: "#/components/schemas/BackupTaskDiagnosticInfo"
            hasPermissions:
              description: A Boolean value that specifies whether the cluster has permission to back up the database. When this value is 'true', the cluster has permission to back up the database.
              type: boolean
            id:
              type: string
            includeBackupTaskInfo:
              description: True/false value indicating if backup task information is included in the response.
              type: boolean
            instanceId:
              description: This field is deprecated. Use the instanceId field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
              type: string
            instanceName:
              description: This field is deprecated. Use the instanceName field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
              type: string
            isInAvailabilityGroup:
              type: boolean
            isLiveMount:
              description: Boolean value that specifies whether a database object is a Live Mount. Value is 'true' when the database object is a Live Mount.
              type: boolean
            isLogShippingSecondary:
              description: Boolean value that specifies whether a database object represents a secondary database. Value is 'true' when the database object represents a secondary database in a log shipping configuration.
              type: boolean
            isOnline:
              description: A Boolean value that specifies whether the database is in the ONLINE state. When this value is 'true', the database is in the ONLINE state.
              type: boolean
            isRelic:
              type: boolean
            lastSnapshotTime:
              description: The timestamp of the previous snapshot.. Only available in the /v1/mssql/db endpoint request body. The information will not be available for other endpoints.
              format: date-time
              type: string
            logBackupFrequencyInSeconds:
              format: int32
              type: integer
            logBackupRetentionHours:
              description: Hours to keep a log backup. A value of -1 indicates that a log will only expire when the preceding snapshots have expired.
              format: int32
              type: integer
            name:
              type: string
            numMissedSnapshot:
              description: An integer that specifies the number of missed snapshots. Only available in the /v1/mssql/db endpoint request body. The information will not be available for other endpoints.
              format: int32
              type: integer
            pendingSlaDomain:
              $ref: "#/components/schemas/ManagedObjectPendingSlaInfo"
            primaryClusterId:
              type: string
            recoveryModel:
              description: This field is deprecated. Use the recoveryModel field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
              enum:
                - SIMPLE
                - FULL
                - BULK_LOGGED
              type: string
            replicas:
              description: List of replicas of this database. An availability database may have multiple replicas, while other databases will have only one replica.
              items:
                $ref: "#/components/schemas/MssqlDbReplica"
              type: array
            rootProperties:
              $ref: "#/components/schemas/MssqlRootProperties"
            state:
              description: This field is deprecated. Use the state field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
              type: string
            unprotectableReasons:
              description: A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM.
              items:
                type: string
              type: array
          required:
            - copyOnly
            - hasPermissions
            - id
            - isInAvailabilityGroup
            - isLiveMount
            - isLogShippingSecondary
            - isOnline
            - isRelic
            - logBackupFrequencyInSeconds
            - logBackupRetentionHours
            - name
            - numMissedSnapshot
            - primaryClusterId
            - replicas
            - rootProperties
            - unprotectableReasons
          type: object
    MssqlDbSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/MssqlDbSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    MssqlDbUpdate:
      allOf:
        - $ref: "#/components/schemas/MssqlSlaPatchProperties"
        - properties:
            isPaused:
              description: Whether to pause or resume backups/archival for this database.
              type: boolean
            maxDataStreams:
              description: Maximum number of parallel data streams that can be used to back up the database.
              format: int32
              type: integer
            postBackupScript:
              $ref: "#/components/schemas/MssqlScriptDetail"
            preBackupScript:
              $ref: "#/components/schemas/MssqlScriptDetail"
            shouldForceFull:
              description: Determines whether to force a full for the next snapshot of a SQL Server database. When this value is true, the Rubrik cluster takes a full snapshot. This value is false by default and is reset to false after a successful full snapshot.
              type: boolean
          type: object
    MssqlDbUpdateId:
      properties:
        databaseId:
          description: ID of the Microsoft SQL database.
          type: string
        updateProperties:
          $ref: "#/components/schemas/MssqlDbUpdate"
      required:
        - databaseId
        - updateProperties
      type: object
    MssqlDownloadFromArchiveConfig:
      properties:
        recoveryPoint:
          $ref: "#/components/schemas/MssqlRecoveryPoint"
      required:
        - recoveryPoint
      type: object
    MssqlHierarchyObjectDescendantCount:
      properties:
        MssqlDatabase:
          format: int32
          type: integer
        MssqlInstance:
          format: int32
          type: integer
      type: object
    MssqlHierarchyObjectSummary:
      allOf:
        - $ref: "#/components/schemas/ManagedHierarchyObjectSummary"
        - $ref: "#/components/schemas/MssqlSlaRelatedProperties"
        - properties:
            cbtEffectiveStatus:
              $ref: "#/components/schemas/MssqlHostCbtEffectiveStatusType"
            cbtEnabled:
              $ref: "#/components/schemas/MssqlHostCbtStatusType"
            clusterInstanceAddress:
              description: |
                Property that indicates the address of the instance in a Windows Server failover cluster. This property is only set when the value of objectType is MssqlInstance, when the instance belongs to a Windows Server failover cluster, and when the address is known.
              type: string
            descendantCount:
              $ref: "#/components/schemas/MssqlHierarchyObjectDescendantCount"
            descendantSlaDomains:
              description: |
                Lists the effective SLA Domains of this object's child SQL Server instances. This property is set when the value of objectType is Host or WindowsCluster.
              items:
                $ref: "#/components/schemas/MssqlSlaDomainInfo"
              type: array
            hasInstances:
              description: |
                A Boolean that specifies whether the object has children of type MssqlInstance. This property is only set when the value of objectType is Host or WindowsCluster.
              type: boolean
            hasPermissions:
              description: Boolean value that specifies whether the cluster has permission to back up the database. This property is only set when the value of objectType is MssqlDatabase.
              type: boolean
            hostStatus:
              description: Property that indicates the current connection status of a Windows host.This property is only set when the value of objectType is Host.
              type: string
            hosts:
              description: |
                This property is only used with SQL Server availability groups. Every object in a SQL Server availability group has the Host rootType.
              items:
                $ref: "#/components/schemas/MssqlRootProperties"
              type: array
            instanceChildren:
              description: |
                A list of children of type MssqlInstance. This property is only set when the value of objectType is Host or WindowsCluster.
              items:
                type: string
              type: array
            instanceChildrenInfo:
              description: |
                MssqlInstanceShortSummary list providing information about MssqlInstance children. This property is set only when the value of objectType is WindowsCluster.
              items:
                $ref: "#/components/schemas/MssqlInstanceShortSummary"
              type: array
            isClustered:
              description: |
                A Boolean that specifies whether the object is clustered. This property is only set when the value of objectType is MssqlInstance or MssqlDatabase.
              type: boolean
            isInAvailabilityGroup:
              description: Boolean value that specifies whether this database is part of an availability group. This property is only set when the value of objectType is MssqlDatabase.
              type: boolean
            isLiveMount:
              description: Boolean value that specifies whether a database object is a Live Mount. Value is 'true' when the database object is a Live Mount. This property is only set when the value of objectType is MssqlDatabase.
              type: boolean
            isLogShippingSecondary:
              description: Boolean value that specifies whether a database object represents a secondary database. Value is 'true' when the database object represents a secondary database in a log shipping configuration. This property is only set when the value of objectType is MssqlDatabase.
              type: boolean
            objectType:
              $ref: "#/components/schemas/MssqlHierarchyObjectType"
            pendingSlaDomain:
              $ref: "#/components/schemas/ManagedObjectPendingSlaInfo"
            replicas:
              description: |
                A list of the replicas available for the specified database. Databases that are not in an availability group have only a single replica. This property is only set when the value of objectType is MssqlDatabase.
              items:
                $ref: "#/components/schemas/MssqlDbReplica"
              type: array
            unprotectableReasons:
              description: A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM. This property is only set when the value of objectType is MssqlDatabase.
              items:
                type: string
              type: array
          required:
            - descendantCount
            - objectType
          type: object
    MssqlHierarchyObjectSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/MssqlHierarchyObjectSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    MssqlHierarchyObjectType:
      description: The type of the SQL Server hierarchy object.
      enum:
        - Host
        - MssqlInstance
        - MssqlDatabase
        - WindowsCluster
        - MssqlAvailabilityGroup
      type: string
    MssqlHostCbtEffectiveStatusType:
      description: Effective CBT status for Host/Windows Failover Cluster.
      enum:
        - On
        - Off
        - PartiallyEnabled
        - OnDefault
        - OffDefault
      type: string
    MssqlHostCbtStatusType:
      description: CBT host support status.
      enum:
        - Enabled
        - Disabled
        - Default
      type: string
    MssqlHostConfiguration:
      properties:
        enableDatabaseBatchSnapshots:
          $ref: "#/components/schemas/HostConfigurationPropertyEnabled"
        enableGroupFetch:
          $ref: "#/components/schemas/HostConfigurationPropertyEnabled"
        enableVdi:
          $ref: "#/components/schemas/HostConfigurationPropertyEnabled"
        enableVdiDb:
          $ref: "#/components/schemas/HostConfigurationPropertyEnabled"
        fileRestoreReadParallelism:
          description: Number of concurrent read requests for restoring a file from the Rubrik cluster to a remote host.
          format: int32
          type: integer
        fileRestoreWriteParallelism:
          description: Number of concurrent write requests for restoring a file from the Rubrik cluster to a remote host.
          format: int32
          type: integer
        fileTransferParallelism:
          description: Number of concurrent requests for transferring a file from a remote host to the Rubrik cluster.
          format: int32
          type: integer
        mssqlDefaultMaxDataStreamsPerDatabase:
          description: The default value for maximum number of data streams per database.
          format: int32
          type: integer
        physicalHostDatabaseRestoreThrottleMaxRefCount:
          description: The maximum number of concurrent database restore job running on a host.
          format: int32
          type: integer
        physicalHostLogBackupThrottleMaxRefCount:
          description: Maximum number of concurrent SQL Server log backup jobs per physical host.
          format: int32
          type: integer
        throttlePhysicalHostMaxRefCount:
          description: Maximum number of concurrent snapshots per physical host.
          format: int32
          type: integer
      type: object
    MssqlHostConfigurationWithHostId:
      allOf:
        - $ref: "#/components/schemas/MssqlHostConfiguration"
        - properties:
            hostId:
              description: the ID of the host.
              type: string
          required:
            - hostId
          type: object
    MssqlHostConfigurationWithHostIdListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/MssqlHostConfigurationWithHostId"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    MssqlInstanceDetail:
      allOf:
        - $ref: "#/components/schemas/MssqlInstanceSummary"
    MssqlInstanceShortSummary:
      properties:
        activeNode:
          description: Active node of the instance in a Windows server failover cluster. Populated only if the node belongs to a Windows server failover cluster.
          type: string
        id:
          type: string
        name:
          type: string
        networkName:
          description: Network name of the instance in a Windows server failover cluster. Populated only if the node belongs to a Windows server failover cluster.
          type: string
      required:
        - id
        - name
      type: object
    MssqlInstanceSummary:
      allOf:
        - $ref: "#/components/schemas/MssqlSlaRelatedProperties"
        - properties:
            clusterInstanceAddress:
              description: The address of the instance in a Windows server failover cluster, populated only if it belongs to one.
              type: string
            configuredSlaDomainId:
              description: SLA Domain ID assigned to instance.
              type: string
            configuredSlaDomainName:
              description: SLA Domain name assigned to instance.
              type: string
            configuredSlaDomainType:
              description: Specifies whether the SLA Domain is used for protection or retention.
              type: string
            id:
              type: string
            internalTimestamp:
              format: int64
              type: integer
            isRetentionLocked:
              description: Boolean value that identifies a Retention Lock SLA Domain. Value is true when the SLA Domain assigned to the instance is Retention Locked and false when it is not.
              type: boolean
            name:
              type: string
            primaryClusterId:
              type: string
            protectionDate:
              format: date
              type: string
            rootProperties:
              $ref: "#/components/schemas/MssqlRootProperties"
            unprotectableReasons:
              description: A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM.
              items:
                type: string
              type: array
            version:
              type: string
          required:
            - id
            - primaryClusterId
            - rootProperties
          type: object
    MssqlInstanceSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/MssqlInstanceSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    MssqlInstanceUpdate:
      allOf:
        - $ref: "#/components/schemas/MssqlSlaPatchProperties"
    MssqlLogShippingCreateConfig:
      allOf:
        - $ref: "#/components/schemas/MssqlLogShippingTargetStateOptions"
        - properties:
            maxDataStreams:
              description: Maximum number of parallel data streams that can be used to copy data to the target system.
              format: int32
              type: integer
            targetDataFilePath:
              description: The path to the default target location for data file storage.
              type: string
            targetDatabaseName:
              description: The name of the secondary database.
              type: string
            targetFilePaths:
              description: Array of database file storage paths. Each path is the target storage location for a database file. Values in this array override the values in targetDataFilePath and targetLogFilePath for the specified database files.
              items:
                $ref: "#/components/schemas/MssqlDbFileExportPath"
              type: array
            targetInstanceId:
              description: The ID of the SQL Server instance that hosts the secondary database.
              type: string
            targetLogFilePath:
              description: The path to the location of the log files.
              type: string
          required:
            - targetDatabaseName
            - targetInstanceId
          type: object
    MssqlLogShippingDetail:
      allOf:
        - $ref: "#/components/schemas/MssqlLogShippingSummary"
        - properties:
            links:
              $ref: "#/components/schemas/MssqlLogShippingLinks"
            shouldDisconnectStandbyUsers:
              description: Whether to automatically disconnect users from a secondary database in Standby mode when a restore operation is performed. If this value is false and users remain connected, then any scheduled restore operations will fail. This is only returned when the secondary database is in Standby mode.
              type: boolean
          required:
            - links
          type: object
    MssqlLogShippingLinks:
      properties:
        primaryDatabase:
          $ref: "#/components/schemas/Link"
        secondaryDatabase:
          $ref: "#/components/schemas/Link"
        secondaryInstance:
          $ref: "#/components/schemas/Link"
        seedRequest:
          $ref: "#/components/schemas/Link"
      required:
        - primaryDatabase
        - secondaryInstance
      type: object
    MssqlLogShippingListSortAttribute:
      description: Field used for sorts when enumerating log shipping entries.
      enum:
        - secondaryDatabaseName
        - primaryDatabaseName
        - lastAppliedPoint
        - location
      type: string
    MssqlLogShippingOkState:
      description: Secondary database states for log shipping configurations with a status of OK.
      enum:
        - RESTORING
        - STANDBY
      type: string
    MssqlLogShippingReseedConfig:
      allOf:
        - $ref: "#/components/schemas/MssqlLogShippingTargetStateOptions"
    MssqlLogShippingStatus:
      description: Status of the log shipping configuration.
      enum:
        - OK
        - Broken
        - Initializing
        - Stale
      type: string
    MssqlLogShippingStatusInfo:
      properties:
        message:
          description: Detailed message describing the status of the log shipping configuration.
          type: string
        status:
          $ref: "#/components/schemas/MssqlLogShippingStatus"
      required:
        - message
        - status
      type: object
    MssqlLogShippingSummary:
      properties:
        id:
          description: ID assigned to the log shipping configuration object.
          type: string
        lagTime:
          description: Number of milliseconds elapsed since the latest backup was applied to the secondary database and the time the backup was taken on the primary database.
          format: int64
          type: integer
        lastAppliedPoint:
          description: Timestamp of the last transaction applied using the specified log shipping configuration object.
          format: date-time
          type: string
        location:
          description: 'Location of a specified secondary database. Location uses this format: "host/instance".'
          type: string
        primaryDatabaseId:
          description: ID of the primary database.
          type: string
        primaryDatabaseLogBackupFrequency:
          description: Log backup frequency, in seconds, of the primary database.
          format: int64
          type: integer
        primaryDatabaseName:
          description: Name of the primary database.
          type: string
        secondaryDatabaseId:
          description: ID of the secondary database.
          type: string
        secondaryDatabaseName:
          description: Name of the secondary database.
          type: string
        state:
          description: The current state of the secondary database.
          type: string
        status:
          $ref: "#/components/schemas/MssqlLogShippingStatusInfo"
      required:
        - id
        - location
        - primaryDatabaseId
        - primaryDatabaseLogBackupFrequency
        - primaryDatabaseName
        - secondaryDatabaseName
        - status
      type: object
    MssqlLogShippingSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/MssqlLogShippingSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    MssqlLogShippingTargetStateOptions:
      properties:
        shouldDisconnectStandbyUsers:
          description: Specifies whether to automatically disconnect users from a secondary database in standby mode when a restore operation is performed. If this value is set to false and users remain connected, any scheduled restore operations fail. If the "state" field is `RESTORING`, this value can be omitted and is ignored.
          type: boolean
        state:
          $ref: "#/components/schemas/MssqlLogShippingOkState"
      required:
        - state
      type: object
    MssqlLogShippingUpdate:
      allOf:
        - $ref: "#/components/schemas/MssqlLogShippingTargetStateOptions"
    MssqlMissedRecoverableRange:
      properties:
        beginTime:
          format: date-time
          type: string
        description:
          type: string
        endTime:
          format: date-time
          type: string
        errorType:
          type: string
        firstError:
          $ref: "#/components/schemas/MssqlMissedRecoverableRangeError"
        lastError:
          $ref: "#/components/schemas/MssqlMissedRecoverableRangeError"
      required:
        - beginTime
        - description
        - endTime
        - errorType
      type: object
    MssqlMissedRecoverableRangeError:
      properties:
        eventMessage:
          type: string
        eventSeriesId:
          type: string
        time:
          format: date-time
          type: string
      required:
        - time
      type: object
    MssqlMissedRecoverableRangeListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/MssqlMissedRecoverableRange"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    MssqlMountDetail:
      allOf:
        - $ref: "#/components/schemas/MssqlMountSummary"
        - properties:
            links:
              $ref: "#/components/schemas/MssqlMountLinks"
            mountRequestId:
              description: ID of the async request object for the mount task.
              type: string
            unmountRequestId:
              description: ID of the async request object for the delete task.
              type: string
          required:
            - links
          type: object
    MssqlMountLinks:
      properties:
        mountRequest:
          $ref: "#/components/schemas/Link"
        mountedDatabase:
          $ref: "#/components/schemas/Link"
        sourceDatabase:
          $ref: "#/components/schemas/Link"
        targetInstance:
          $ref: "#/components/schemas/Link"
        unmountRequest:
          $ref: "#/components/schemas/Link"
      required:
        - sourceDatabase
        - targetInstance
      type: object
    MssqlMountSummary:
      properties:
        creationDate:
          description: The date this mount was created.
          format: date-time
          type: string
        id:
          type: string
        mountedDatabaseId:
          description: ID for the mounted SQL Server database, once it is available.
          type: string
        mountedDatabaseName:
          description: Name for the mounted SQL Server database.
          type: string
        ownerId:
          description: ID of the user who created this mount.
          type: string
        ownerName:
          description: Name of the user who created this mount.
          type: string
        sourceDatabaseId:
          type: string
        sourceDatabaseName:
          type: string
        sourceRecoveryPoint:
          $ref: "#/components/schemas/MssqlRecoveryPoint"
        status:
          description: The status of this mount. The status is **_Available_** when the database is successfully mounted and ready to use.
          enum:
            - Available
            - Unavailable
            - Mounting
            - Unmounting
          type: string
        targetInstanceId:
          type: string
        targetInstanceName:
          type: string
        targetRootName:
          description: Name of the top-level object on which the target instance resides.
          type: string
      required:
        - creationDate
        - id
        - mountedDatabaseName
        - sourceDatabaseId
        - sourceDatabaseName
        - sourceRecoveryPoint
        - status
        - targetInstanceId
        - targetInstanceName
        - targetRootName
      type: object
    MssqlMountSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/MssqlMountSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    MssqlRecoverableRange:
      properties:
        beginTime:
          format: date-time
          type: string
        endTime:
          format: date-time
          type: string
        isMountAllowed:
          type: boolean
        status:
          type: string
      required:
        - beginTime
        - endTime
        - isMountAllowed
        - status
      type: object
    MssqlRecoverableRangeListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/MssqlRecoverableRange"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    MssqlRecoveryPoint:
      properties:
        date:
          description: Recovery point specified in ISO8601 format, such as "2016-01-01T01:23:45.678".
          format: date-time
          type: string
        lsnPoint:
          $ref: "#/components/schemas/LsnRecoveryPoint"
        timestampMs:
          description: Recovery point specified in the form of a timestamp (in milliseconds). Deprecated. Please use 'date' instead.
          format: int64
          type: integer
      type: object
    MssqlRestoreEstimateResult:
      properties:
        bytesFromCloud:
          description: Estimate of the number of bytes to be downloaded from the cloud.
          format: int64
          type: integer
      required:
        - bytesFromCloud
      type: object
    MssqlRestoreFile:
      properties:
        fileId:
          description: Original file ID of the database file to be restored.
          format: int64
          type: integer
        fileType:
          $ref: "#/components/schemas/MssqlDatabaseFileType"
        logicalName:
          description: Logical name of the database file to be restored.
          type: string
        originalName:
          description: Original filename of the database file to be restored.
          type: string
        originalPath:
          description: Original path to the database file to be restored.
          type: string
      required:
        - fileId
        - fileType
        - logicalName
        - originalName
        - originalPath
      type: object
    MssqlRootProperties:
      properties:
        rootId:
          description: ID of the root of this object.
          type: string
        rootName:
          description: Name of the root of this object.
          type: string
        rootRole:
          description: Role of the root object for this object if the root object is a Host and part of a **_MssqlAvailabilityGroup_**.
          type: string
        rootType:
          description: Type of the root object for this object. The root object is the top-level object from which this object is derived. If this object is an availability database, the root object is **_MssqlAvailabilityGroup_**. Otherwise, if this object is part of a cluster, the root object is **_WindowsCluster_**. Otherwise, the root object is **_Host_**.
          enum:
            - Host
            - WindowsCluster
            - MssqlAvailabilityGroup
          type: string
      required:
        - rootName
        - rootType
      type: object
    MssqlScriptDetail:
      properties:
        scriptErrorAction:
          $ref: "#/components/schemas/ScriptErrorAction"
        scriptPath:
          description: The script to be run.
          type: string
        timeoutMs:
          description: Time (in ms) after which the script will be terminated if it has not completed.
          format: int64
          type: integer
      required:
        - scriptErrorAction
        - scriptPath
        - timeoutMs
      type: object
      x-rk-nullable-properties:
        - scriptPath
        - timeoutMs
        - scriptErrorAction
    MssqlSlaDomainAssignInfo:
      allOf:
        - $ref: "#/components/schemas/MssqlSlaPatchProperties"
        - properties:
            existingSnapshotRetention:
              $ref: "#/components/schemas/ExistingSnapshotRetention"
            ids:
              description: |
                List of SQL Server object IDs which should be assigned these properties.
              items:
                type: string
              type: array
          required:
            - ids
          type: object
    MssqlSlaDomainInfo:
      properties:
        id:
          description: The ID of the SLA Domain.
          type: string
        isRetentionLocked:
          description: Boolean value that identifies a Retention Lock SLA Domain. Value is true when an SLA Domain is Retention Locked and false when it is not.
          type: boolean
        name:
          description: The name of the SLA Domain.
          type: string
      required:
        - id
        - isRetentionLocked
        - name
      type: object
    MssqlSlaPatchProperties:
      allOf:
        - $ref: "#/components/schemas/MssqlSlaRelatedProperties"
        - properties:
            configuredSlaDomainId:
              description: SLA Domain ID assigned to instance. Existing snapshots of the instance will be retained with the configuration of specified SLA Domain.
              type: string
            useConfiguredDefaultLogRetention:
              description: Determines whether to use the configured default value of log backup retention.
              type: boolean
          type: object
    MssqlSlaRelatedProperties:
      properties:
        copyOnly:
          description: Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
          type: boolean
        logBackupFrequencyInSeconds:
          description: Seconds between two log backups. A value of 0 disables log backup.
          format: int32
          type: integer
        logRetentionHours:
          description: Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.
          format: int32
          type: integer
      type: object
    MssqlSnappableId:
      properties:
        snappableId:
          description: ID of the protected object.
          type: string
      required:
        - snappableId
      type: object
    NasBaseConfig:
      properties:
        apiCertificate:
          description: TLS certification to validate NAS server.
          type: string
        apiEndpoint:
          description: API endpoint to access NAS API 'FLASHBLADE'.
          type: string
        apiHostname:
          description: Hostname or IP used in the NAS API calls.
          type: string
        apiUsername:
          description: Username to access NAS API.
          type: string
        isIsilonChangelistEnabled:
          description: Indicates if Changelist is enabled on Isilon NAS share. When this value is 'true', metadata fetches during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
          type: boolean
        isNetAppSnapDiffEnabled:
          description: Indicates if SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata fetches during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
          type: boolean
        isShareAutoDiscoveryEnabled:
          description: Specifies whether shares on the NAS host are automatically discovered. When this value is 'true', Rubrik periodically (every 30 minutes by default) connects to the NAS host to discover NFS and SMB shares.
          type: boolean
        vendorType:
          description: Type of NAS vendor 'ISILON/NETAPP/FLASHBLADE'.
          type: string
        zoneName:
          description: Name of the Isilon zone that data IP belongs to.
          type: string
      required:
        - vendorType
      type: object
    NasConfig:
      properties:
        apiCertificate:
          description: TLS certification to validate NAS server.
          type: string
        apiEndpoint:
          description: API endpoint to access NAS API 'FLASHBLADE'.
          type: string
        apiHostname:
          description: Hostname or IP used in the NAS API calls.
          type: string
        apiPassword:
          description: Password to access NAS API 'ISILON/NETAPP'.
          type: string
          x-secret: true
        apiToken:
          description: API token to access NAS API 'FLASHBLADE'.
          type: string
          x-secret: true
        apiUsername:
          description: Username to access NAS API 'ISILON/NETAPP'.
          type: string
        isIsilonChangelistEnabled:
          description: Indicates if Changelist is enabled on Isilon NAS share. When this value is 'true', metadata fetches during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
          type: boolean
        isNetAppSnapDiffEnabled:
          description: Indicates if SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata fetches during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
          type: boolean
        isShareAutoDiscoveryEnabled:
          description: Specifies whether shares on the NAS host are automatically discovered. When this value is 'true', Rubrik periodically (every 30 minutes by default) connects to the NAS host to discover NFS and SMB shares.
          type: boolean
        vendorType:
          description: Type of NAS vendor 'ISILON/NETAPP/FLASHBLADE'.
          type: string
        zoneName:
          description: Name of the Isilon zone that data IP belongs to.
          type: string
      required:
        - vendorType
      type: object
    NasSharesToAdd:
      properties:
        hostId:
          description: The host ID of the NAS Share host.
          type: string
        nasShares:
          description: The NAS shares to bulk add for the NAS host.
          items:
            $ref: "#/components/schemas/DiscoveredNasShare"
          type: array
      required:
        - hostId
        - nasShares
      type: object
    NasVendorType:
      description: NAS Vendor Type.
      enum:
        - NETAPP
        - ISILON
        - FLASHBLADE
      type: string
    NetworkInfo:
      properties:
        id:
          description: The ID of a user-configured vCenter network.
          type: string
        name:
          description: The name of a user-configured vCenter network.
          type: string
      required:
        - id
        - name
      type: object
    NetworkInfoListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/NetworkInfo"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    NodeHostnameInfo:
      properties:
        hostname:
          description: Hostname of a Rubrik node.
          type: string
        id:
          description: ID of a Rubrik node.
          type: string
      required:
        - hostname
        - id
      type: object
    NodeHostnameInfoListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/NodeHostnameInfo"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    NodeId:
      properties:
        id:
          type: string
      required:
        - id
      type: object
    NodePolicyCheckResult:
      properties:
        checkResults:
          items:
            $ref: "#/components/schemas/PolicyCheckResult"
          type: array
        nodeId:
          type: string
      required:
        - checkResults
        - nodeId
      type: object
    NodeStatusEnum:
      description: Node status.
      enum:
        - UNKNOWN
        - OK
        - BAD
        - PRE_MAINTENANCE
        - MAINTENANCE
        - BOOTSTRAPPING
        - UPGRADE
        - REMOVED
      type: string
    NotificationConfig:
      properties:
        criticalDetails:
          $ref: "#/components/schemas/NotificationDetails"
        infoDetails:
          $ref: "#/components/schemas/NotificationDetails"
        name:
          description: Name of notification config.
          type: string
        notificationMessage:
          description: Notification Message.
          type: string
        notificationType:
          $ref: "#/components/schemas/NotificationTypeEnum"
        warnDetails:
          $ref: "#/components/schemas/NotificationDetails"
      required:
        - name
        - notificationMessage
        - notificationType
      type: object
    NotificationDetails:
      properties:
        action:
          $ref: "#/components/schemas/ActionDetails"
        failureWindow:
          description: Window to check for number of failures.
          format: int64
          type: integer
        numFailures:
          description: Number of failures before notification is triggered.
          format: int32
          type: integer
      required:
        - failureWindow
        - numFailures
      type: object
    NotificationTypeEnum:
      description: Notification type.
      enum:
        - NOTIFICATION_TYPE_UNKNOWN
        - DIAGNOSTIC
      type: string
    NutanixVmSlaObjectCount:
      properties:
        numNutanixVms:
          description: The number of Nutanix virtual machines protected under this SLA domain.
          format: int32
          type: integer
      type: object
    ObjectHoldSummary:
      allOf:
        - $ref: "#/components/schemas/ObjectHolder"
        - properties:
            numberOfSnapshotsHeld:
              description: Number of snapshots for the object currently under legal hold.
              format: int32
              type: integer
          required:
            - numberOfSnapshotsHeld
          type: object
    ObjectHoldSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/ObjectHoldSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    ObjectHolder:
      properties:
        objectId:
          type: string
        objectName:
          type: string
        objectType:
          type: string
      required:
        - objectId
        - objectName
        - objectType
      type: object
    ObjectTypeV1:
      description: Type of the object associated with the event.
      enum:
        - AggregateAhvVm
        - AggregateAwsAzure
        - AggregateHypervVm
        - AggregateLinuxUnixHosts
        - AggregateNasShares
        - AggregateOracleDb
        - AggregateSapHanaDb
        - AggregateStorageArrays
        - AggregateVcdVapps
        - AggregateVsphereVm
        - AggregateWindowsHosts
        - AppBlueprint
        - AppFlows
        - AuthDomain
        - AwsAccount
        - AwsEventType
        - Certificate
        - Cluster
        - ComputeInstance
        - DataLocation
        - Ec2Instance
        - Envoy
        - Host
        - HypervScvmm
        - HypervServer
        - HypervVm
        - JobInstance
        - Ldap
        - LinuxHost
        - LinuxFileset
        - ManagedVolume
        - Mssql
        - NasHost
        - NutanixCluster
        - NutanixVm
        - OracleDb
        - OracleHost
        - OracleRac
        - PublicCloudMachineInstance
        - SamlSso
        - SapHanaDb
        - SapHanaSystem
        - ShareFileset
        - SlaDomain
        - SmbDomain
        - StorageArray
        - StorageArrayVolumeGroup
        - Storm
        - SupportBundle
        - UnknownObjectType
        - Upgrade
        - UserActionAudit
        - Vcd
        - VcdVapp
        - Vcenter
        - VmwareVm
        - VolumeGroup
        - WindowsHost
        - WindowsFileset
      type: string
    OperatingSystemFamily:
      description: The family type of the host operating system.
      enum:
        - AIX
        - HPUX
        - Linux
        - Solaris
      type: string
    OperationMode:
      description: The operation mode determines if the API call waits until the operation is completed or returns immediately. The default operation mode is synchronous.
      enum:
        - Synchronous
        - Asynchronous
      type: string
    OracleAcoParameterDetail:
      properties:
        parameter:
          description: Name of the Advanced Cloning Options (ACO) parameter.
          type: string
        value:
          description: Value for the Advanced Cloning Options (ACO) parameter.
          type: string
      required:
        - parameter
        - value
      type: object
    OracleAcoParameterList:
      properties:
        parameters:
          description: An array that contains the supported Advanced Cloning Options (ACO) parameters.
          items:
            type: string
          type: array
      required:
        - parameters
      type: object
    OracleAcoValidationResult:
      properties:
        acoMap:
          description: List of Advanced Cloning Options (ACO) parameter values that were parsed.
          items:
            $ref: "#/components/schemas/OracleAcoParameterDetail"
          type: array
        acoParameterErrors:
          description: Other generic errors with the Advanced Cloning Options (ACO) parameters.
          items:
            type: string
          type: array
        acoValueValidationErrors:
          description: List of Advanced Cloning Options (ACO) errors pertaining to the specified values.
          items:
            $ref: "#/components/schemas/OracleAcoValueErrorDetail"
          type: array
      type: object
    OracleAcoValueErrorDetail:
      properties:
        error:
          description: Validation error message for the provided value.
          type: string
        parameter:
          description: Name of the Advanced Cloning Options (ACO) parameter.
          type: string
      required:
        - error
        - parameter
      type: object
    OracleBulkUpdate:
      allOf:
        - $ref: "#/components/schemas/OracleUpdate"
        - properties:
            ids:
              description: An array containing the IDs assigned to Oracle host, Oracle RAC, and Oracle Database objects.
              items:
                type: string
              type: array
          required:
            - ids
          type: object
    OracleDataGuardGroupUpdate:
      allOf:
        - $ref: "#/components/schemas/OracleUpdateCommon"
        - properties:
            preferredDGMemberUniqueNames:
              description: Ordered list of database unique names to use for backup.
              items:
                type: string
              type: array
            shouldBackupFromPrimaryOnly:
              description: Value that indicates whether to backup from the PRIMARY member only, or from any available member.
              type: boolean
          type: object
    OracleDbDetail:
      allOf:
        - $ref: "#/components/schemas/OracleDbSummary"
        - $ref: "#/components/schemas/OracleNonSlaProperties"
        - properties:
            hostsInfo:
              description: An array that contains the host info for each instance.
              items:
                $ref: "#/components/schemas/HostInfo"
              type: array
            isLiveMount:
              description: Value that indicates whether an Oracle database object is a Live Mount or not. A true value indicates that the object is a Live Mount.
              type: boolean
            lastValidationResult:
              $ref: "#/components/schemas/OracleLastValidationResult"
            latestRecoveryPoint:
              description: The time stamp of the most recent recovery point for this database.
              format: date
              type: string
            oldestRecoveryPoint:
              description: The time stamp of the earliest recovery point for this database.
              format: date
              type: string
            oracleHome:
              description: Oracle Home of the Oracle database.
              type: string
            pendingSlaDomain:
              $ref: "#/components/schemas/ManagedObjectPendingSlaInfo"
            preferredDGMemberUniqueNames:
              description: Ordered list of database unique names to use for backup in a Data Guard group.
              items:
                type: string
              type: array
            shouldBackupFromPrimaryDGGroupMemberOnly:
              description: Indicates whether to backup only from the PRIMARY Data Guard member or from any available member.
              type: boolean
            snapshotCount:
              format: int32
              type: integer
            tablespaces:
              description: An array that contains tablespace names of the specified Oracle database.
              items:
                type: string
              type: array
          required:
            - snapshotCount
            - tablespaces
          type: object
    OracleDbSummary:
      allOf:
        - $ref: "#/components/schemas/Snappable"
        - properties:
            archiveLogDestinations:
              description: An array that contains the archive log destinations for the specified Oracle database.
              items:
                type: string
              type: array
            currentBackupTaskInfo:
              $ref: "#/components/schemas/BackupTaskDiagnosticInfo"
            dataGuardGroupId:
              description: Rubrik ID of the Data Guard group to which this database belongs.
              type: string
            dataGuardGroupMembers:
              description: List of Data Guard group members.
              items:
                $ref: "#/components/schemas/DataGuardGroupMember"
              type: array
            dataGuardGroupName:
              description: Name of the Data Guard group to which this database belongs.
              type: string
            dataGuardType:
              $ref: "#/components/schemas/DataGuardType"
            databaseRole:
              description: Current role of the database.
              type: string
            dbUniqueName:
              description: Unique name for the Oracle database (DB_UNIQUE_NAME).
              type: string
            hostLogRetentionHours:
              description: Specifies an interval in hours. The next log snapshot job deletes archived Oracle redo log files whose 'nextTime' field specifies a time more than the specified number of hours ago. To immediately delete archived redo log files regardless of age, specify an interval of -1. To preserve all archived redo log files, specify an interval of -2.
              format: int32
              type: integer
            id:
              description: ID assigned to the Oracle database.
              type: string
            includeBackupTaskInfo:
              description: True/false value indicating if backup task information is included in the response.
              type: boolean
            infraPath:
              description: An array that contains information about the objects in the infrastructure path of a specified Oracle database.
              items:
                $ref: "#/components/schemas/ManagedHierarchyObjectAncestor"
              type: array
            instances:
              description: Details of the instances of the Oracle database.
              items:
                $ref: "#/components/schemas/OracleInstanceProperties"
              type: array
            isArchiveLogModeEnabled:
              description: Boolean value that indicates whether the ARCHIVELOG mode is enabled on the Oracle database or not.
              type: boolean
            isDbLocalToTheCluster:
              description: A Boolean value that specifies whether the Oracle database is local to the cluster. When this value is 'true', the Oracle database is local to the cluster.
              type: boolean
            isPrimary:
              description: Indicates whether the current DATABASE_ROLE is PRIMARY which specifies the database is accepting read/write transactions as the primary database in a Data Guard configuration.
              type: boolean
            isRelic:
              description: Boolean value that indicates whether a Oracle database object is in an archived state and has retained snapshots. Value is true when the object is archived with retained snapshots.
              type: boolean
            lastSnapshotTime:
              description: The timestamp of the previous snapshot.
              format: date-time
              type: string
            logBackupFrequencyInMinutes:
              description: Specifies an interval in minutes. This interval is the period between successive log backups.
              format: int32
              type: integer
            name:
              description: Service name of the Oracle database.
              type: string
            numInstances:
              description: Count of the number of instances of the Oracle database.
              format: int32
              type: integer
            numMissedSnapshot:
              description: An integer that specifies the number of missed snapshots.
              format: int32
              type: integer
            numTablespaces:
              description: Count of the number of table spaces in Oracle database.
              format: int32
              type: integer
            primaryClusterId:
              type: string
            racId:
              description: Rubrik ID of the RAC on which this database is hosted. This field will be empty if the database is not hosted on a RAC environment.
              type: string
            racName:
              description: RAC name of the cluster database.
              type: string
            sid:
              description: System identifier (SID) of the Oracle database.
              type: string
            standaloneHostId:
              description: Rubrik ID of the standalone Oracle host on which this database is hosted. This field will be empty if the database is not hosted on a standalone system.
              type: string
            standaloneHostName:
              description: Hostname of the standalone Oracle database host.
              type: string
          required:
            - hostLogRetentionHours
            - id
            - infraPath
            - isDbLocalToTheCluster
            - isRelic
            - name
            - numMissedSnapshot
            - numTablespaces
            - primaryClusterId
          type: object
    OracleDbSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/OracleDbSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    OracleFileDownloadLink:
      properties:
        downloadLink:
          description: Link for file download.
          type: string
      required:
        - downloadLink
      type: object
    OracleHostDetail:
      allOf:
        - $ref: "#/components/schemas/OracleHostSummary"
        - $ref: "#/components/schemas/OracleNonSlaProperties"
    OracleHostSummary:
      allOf:
        - $ref: "#/components/schemas/SlaAssignable"
        - properties:
            id:
              description: ID assigned to the standalone Oracle host.
              type: string
            infraPath:
              description: An array that contains information about the objects in the infrastructure path of a specified Oracle database.
              items:
                $ref: "#/components/schemas/ManagedHierarchyObjectAncestor"
              type: array
            name:
              description: Hostname of the standalone Oracle host.
              type: string
            numDbs:
              description: Count of the number of databases on the Oracle RAC.
              format: int32
              type: integer
            primaryClusterId:
              type: string
            status:
              description: Connectivity status of the Oracle RAC.
              type: string
          required:
            - id
            - infraPath
            - name
            - numDbs
            - primaryClusterId
            - status
          type: object
    OracleInstanceProperties:
      properties:
        hostName:
          description: Name of the Oracle host.
          type: string
        instanceSid:
          description: System identifier (SID) of the Oracle database instance.
          type: string
      required:
        - hostName
        - instanceSid
      type: object
    OracleLastValidationResult:
      properties:
        eventSeriesId:
          description: The eventseries ID for the last validation job.
          type: string
        isSuccess:
          description: A Boolean that specifies whether the last validation successfully completed.
          type: boolean
        validationTime:
          description: The timestamp of the recovery point to validate.
          format: date-time
          type: string
      required:
        - eventSeriesId
        - isSuccess
        - validationTime
      type: object
    OracleNodeOrder:
      properties:
        nodeName:
          description: Nodename of the Oracle RAC node.
          type: string
        order:
          description: Order in which Rubrik uses this node for automated Oracle backup.
          format: int32
          type: integer
      required:
        - nodeName
        - order
      type: object
    OracleNodeProperties:
      properties:
        nodeName:
          description: Node name of the Oracle RAC node.
          type: string
        status:
          description: Connectivity status of the Oracle RAC node.
          type: string
      required:
        - nodeName
        - status
      type: object
    OracleNonSlaProperties:
      properties:
        hostLogRetentionHours:
          description: Specifies an interval in hours. The next log snapshot job deletes archived Oracle redo log files whose 'nextTime' field specifies a time more than the specified number of hours ago. To immediately delete archived redo log files regardless of age, specify an interval of -1. To preserve all archived redo log files, specify an interval of -2.
          format: int32
          type: integer
        hostMount:
          description: Path where the NFS share is mounted on the host.
          type: string
        logBackupFrequencyInMinutes:
          description: Specifies an interval in minutes. This interval is the period between successive log backups.
          format: int32
          type: integer
        logRetentionHours:
          description: Specifies an interval in hours. Log backups are retained for the duration of the interval.
          format: int32
          type: integer
        numChannels:
          description: Number of channels used to backup the Oracle database.
          format: int32
          type: integer
      required:
        - hostLogRetentionHours
        - hostMount
        - logBackupFrequencyInMinutes
        - logRetentionHours
        - numChannels
      type: object
    OracleRacDetail:
      allOf:
        - $ref: "#/components/schemas/OracleRacSummary"
        - $ref: "#/components/schemas/OracleNonSlaProperties"
        - properties:
            scan:
              description: Single Client Access Name (SCAN) of the Oracle RAC cluster.
              type: string
          required:
            - scan
          type: object
    OracleRacSummary:
      allOf:
        - $ref: "#/components/schemas/SlaAssignable"
        - properties:
            id:
              description: ID assigned to the Oracle RAC.
              type: string
            name:
              description: Cluster name assigned to the Oracle RAC.
              type: string
            nodeOrder:
              description: Specifies an order for the RAC nodes. Automated Oracle backups use the RAC nodes in the specified order.
              items:
                $ref: "#/components/schemas/OracleNodeOrder"
              type: array
            nodes:
              description: Details of the nodes of this Oracle RAC.
              items:
                $ref: "#/components/schemas/OracleNodeProperties"
              type: array
            numDbs:
              description: Count of the number of databases on the Oracle RAC.
              format: int32
              type: integer
            numNodes:
              description: Count of the number of nodes on the Oracle RAC.
              format: int32
              type: integer
            primaryClusterId:
              type: string
            status:
              description: Connectivity status of the Oracle RAC.
              type: string
          required:
            - id
            - name
            - nodeOrder
            - nodes
            - numDbs
            - numNodes
            - primaryClusterId
            - status
          type: object
    OracleRecoveryApiValidationErrors:
      allOf:
        - $ref: "#/components/schemas/OracleAcoValidationResult"
        - properties:
            otherErrors:
              description: Other generic validation error messages in the API.
              items:
                type: string
              type: array
            postScriptError:
              description: Error message when post-script path is invalid.
              type: string
            preScriptError:
              description: Error message when pre-script path is invalid.
              type: string
          type: object
    OracleRecoveryPoint:
      properties:
        snapshotId:
          description: Snapshot ID of the Oracle database.
          type: string
        timestampMs:
          description: A timestamp in milliseconds that specifies a recovery point.
          format: int64
          type: integer
      type: object
    OracleRestoreEstimateResult:
      properties:
        bytesToRestore:
          description: The estimated size, in bytes required to restore an Oracle database.
          format: int64
          type: integer
      required:
        - bytesToRestore
      type: object
    OracleUpdate:
      allOf:
        - $ref: "#/components/schemas/OracleUpdateCommon"
        - properties:
            configuredSlaDomainIdDeprecated:
              description: ID of the SLA domain protecting the specified Oracle object. Log backup jobs are no longer scheduled if the SLA domain indicates the Oracle object is unprotected. The specified SLA domain is not used to configure the protection or retention for this Oracle object. This is a DEPRECATED field, and will be removed in later releases.
              type: string
            nodeOrder:
              description: Specifies an order for the RAC nodes. Automated Oracle backups use the RAC nodes in the specified order.
              items:
                $ref: "#/components/schemas/OracleNodeOrder"
              type: array
          type: object
    OracleUpdateCommon:
      properties:
        hostLogRetentionHours:
          description: Specifies an interval in hours. For Oracle archived redo log files whose nextTime is before (now - interval), the next log snapshot job will delete them from the host. Set to 0 for inheriting the value from its parent; -1 for immediate deletion; and -2 to skip log deletion.
          format: int32
          type: integer
        hostMount:
          description: Path where the NFS share is mounted on the host.
          type: string
        logBackupFrequencyInMinutes:
          description: Specifies an interval in minutes. This interval is the period between successive log backups.
          format: int32
          type: integer
        logRetentionHours:
          description: Specifies an interval in hours. Log backups are retained for the duration of the interval.
          format: int32
          type: integer
        numChannels:
          description: Number of channels used to backup the Oracle database.
          format: int32
          type: integer
      type: object
    OracleValidateConfig:
      properties:
        numChannels:
          description: Number of channels used during backup validation.
          format: int32
          type: integer
        recoveryPoint:
          $ref: "#/components/schemas/OracleRecoveryPoint"
        sgaMaxSizeInMb:
          description: System Global Area(SGA) size used to create the instance on the target host with unit in MB. SGA is a group of shared memory structures for one Oracle Database instance.
          format: int64
          type: integer
        targetMountPath:
          description: The full path on the target host where the NFS share with the snapshot files will be mounted.
          type: string
        targetOracleHome:
          description: The full path on the target host for the Oracle Home which is the directory location where all Oracle software is installed.
          type: string
        targetOracleHostOrRacId:
          description: ID of the Oracle host or Oracle RAC object that is the target for the validation job. The referenced Oracle host or Oracle RAC must have the Rubrik Backup Service (RBS) installed and connected.
          type: string
      required:
        - recoveryPoint
        - targetOracleHostOrRacId
      type: object
    ParentAppInfo:
      properties:
        id:
          description: ID assigned to the vApp object that manages a specified virtual machine.
          type: string
        isProtectedThruHierarchy:
          description: Boolean value that indicates whether a virtual machine is protected through the SLA Domain assigned to the parent vApp. Set to 'true' when the virtual machine is protected through the parent vApp, otherwise set to 'false'. Direct assignment of a virtual machine to an SLA Domain is not possible when this value is 'true'. Also, setting this value to true is not possible when the virtual machine has an existing direct assignment to an SLA Domain.
          type: boolean
      required:
        - isProtectedThruHierarchy
      type: object
    PasswordRequirementsPatchRequest:
      properties:
        blockPreviousPasswords:
          type: boolean
        clearApiTokens:
          type: boolean
        clearWebSessions:
          type: boolean
        minLength:
          format: int32
          type: integer
        minLowerCase:
          format: int32
          type: integer
        minNumerics:
          format: int32
          type: integer
        minSpecial:
          format: int32
          type: integer
        minUpperCase:
          format: int32
          type: integer
        useZxcvbn:
          type: boolean
      type: object
    PasswordRequirementsSummary:
      properties:
        blockPreviousPasswords:
          type: boolean
        clearApiTokens:
          type: boolean
        clearWebSessions:
          type: boolean
        maxLength:
          format: int32
          type: integer
        minLength:
          format: int32
          type: integer
        minLowerCase:
          format: int32
          type: integer
        minNumerics:
          format: int32
          type: integer
        minSpecial:
          format: int32
          type: integer
        minUpperCase:
          format: int32
          type: integer
        useZxcvbn:
          type: boolean
      required:
        - blockPreviousPasswords
        - clearApiTokens
        - clearWebSessions
        - maxLength
        - minLength
        - minLowerCase
        - minNumerics
        - minSpecial
        - minUpperCase
        - useZxcvbn
      type: object
    PatternStatus:
      description: Status of the exclusion pattern. The 'Applied' state indicates that a pattern is already in force. The 'Applying' state indicates that the index job that applies the pattern is still running. The 'Queued' state indicates that the indexing job to apply the pattern has not launched yet.
      enum:
        - Applied
        - Applying
        - Queued
      type: string
    PerLocationCloudOutForecastSummary:
      properties:
        computeForecast:
          $ref: "#/components/schemas/CloudOutComputeForecastSummaries"
        instanceType:
          description: Type of compute instance used at the cloud archival location.
          type: string
        locationName:
          description: Name of the cloud archival location.
          type: string
        locationRegion:
          description: Region of the cloud archival location.
          type: string
        locationType:
          description: Type of cloud archival location.
          type: string
        storageForecast:
          $ref: "#/components/schemas/CloudOutStorageForecastSummaries"
      required:
        - locationName
        - locationType
        - storageForecast
      type: object
    PerStorageClassCloudOutStorageForecastSummary:
      properties:
        storageClass:
          description: Storage class of the cloud archival location.
          type: string
        storageCostInUSD:
          description: Storage costs, in USD, for a particular storage class in the cloud archival location. The list contains forecastPeriodInGranularityUnit values, one for each granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. The first value corresponds to the first year, the second value corresponds to the second year, and the third value corresponds to the third year.
          items:
            format: int64
            minimum: 0
            type: integer
          type: array
        storageUsedInGB:
          description: Storage values, in GBs, used on a particular storage class in the cloud archival location. The number of values in the list is specified by the value of the forecastPeriodInGranularityUnit parameter. Each value in the list is for the last day of the granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. First value corresponds to the last day of the first year. Second value corresponds to the last day of the second year. Third value corresponds to the last day of the third year.
          items:
            format: int64
            minimum: 0
            type: integer
          type: array
      required:
        - storageClass
        - storageCostInUSD
        - storageUsedInGB
      type: object
    PolicyCheckResult:
      properties:
        checkOutput:
          description: Output from the policy.
          type: string
        isCheckPassed:
          description: Individual check results.
          type: boolean
        nodeId:
          description: Node ID on which policy is enforced.
          type: string
        policyId:
          description: Policy ID for which result is collected.
          type: string
      required:
        - isCheckPassed
        - nodeId
        - policyId
      type: object
    PolicyScopeEnum:
      description: Scope of a policy.
      enum:
        - POLICY_SCOPE_UNKNOWN
        - NODE
        - CLUSTER
        - CHASSIS
      type: string
    PolicyTypeEnum:
      description: Type of policy.
      enum:
        - POLICY_TYPE_UNKNOWN
        - CHECKER
        - COLLECTOR
        - NOTIFIER
      type: string
    PrecheckFailureResult:
      properties:
        cause:
          description: The cause of the failure.
          type: string
        errorCode:
          description: The precheck failure error code. This is used as a reference to a KB article about the error.
          type: string
        errorMessage:
          description: The precheck failure message.
          type: string
        id:
          description: The ID of the precheck error message.
          type: string
        isUpgradeBlocker:
          description: Specifies whether a failed precheck prevents an upgrade from starting.
          type: boolean
        isUserRemediable:
          description: Can the user fix this precheck failure.
          type: boolean
        precheckName:
          description: The name of the failed upgrade precheck.
          type: string
        remedy:
          description: The user action needed to recover from this failure.
          type: string
      required:
        - errorCode
        - errorMessage
        - id
        - isUpgradeBlocker
        - isUserRemediable
        - precheckName
      type: object
    PrecheckStatusNextRunInfo:
      properties:
        jobInstanceId:
          description: |
            Identifier corresponding to the currently running or next upgrade prechecks job instance.
          type: string
        startTime:
          description: |
            The Unix epoch timestamp, in milliseconds, corresponding to the start of the currently running or next upgrade prechecks job instance.
          format: int64
          type: integer
        status:
          description: |
            Status of the currently running or next upgrade prechecks job instance.
          type: string
      required:
        - jobInstanceId
        - startTime
        - status
      type: object
    PrecheckStatusResponse:
      properties:
        endTime:
          description: |
            The Unix epoch timestamp, in milliseconds, corresponding to the end of the last completed upgrade prechecks job instance.
          format: int64
          type: integer
        failureResults:
          description: The results of the failed prechecks. This includes the name of the failed prechecks and details of the error.
          items:
            $ref: "#/components/schemas/PrecheckFailureResult"
          type: array
        isOnDemand:
          description: Specifies whether this result is from a user-triggered job.
          type: boolean
        nextRunInfo:
          $ref: "#/components/schemas/PrecheckStatusNextRunInfo"
        numPrechecksRun:
          description: Total number of upgrade prechecks that were run.
          format: int32
          type: integer
        runPeriodInMinutes:
          description: |
            Time, in minutes, between consecutive runs of scheduled upgrade prechecks job instances.
          format: int32
          type: integer
        startTime:
          description: |
            The Unix epoch timestamp, in milliseconds, corresponding to the start of the last completed upgrade prechecks job instance.
          format: int64
          type: integer
      required:
        - endTime
        - failureResults
        - isOnDemand
        - numPrechecksRun
        - runPeriodInMinutes
        - startTime
      type: object
    PreferredCdpNetworkProtocol:
      description: The preferred network protocol to use for transferring CDP data.
      enum:
        - IPv4
        - IPv6
      type: string
    PreferredCdpNetworkProtocolObject:
      properties:
        preferredCdpNetworkProtocol:
          $ref: "#/components/schemas/PreferredCdpNetworkProtocol"
      required:
        - preferredCdpNetworkProtocol
      type: object
    PrincipalSearchSortAttribute:
      description: Attributes used to sort principal search results.
      enum:
        - Name
        - PrincipalType
        - Description
        - FirstName
        - LastName
        - EmailAddress
        - DisplayName
      type: string
    PrincipalSummaryV1:
      properties:
        authDomainId:
          description: ID of the authentication domain for a specified principal.
          type: string
        authDomainType:
          $ref: "#/components/schemas/AuthDomainType"
        description:
          description: |
            Short description for a principal of type group. For all other types the value is null.
          type: string
        emailAddress:
          description: Email address associated with a principal.
          type: string
        firstName:
          description: |
            First name of a principal of type user. For all other types the value is null.
          type: string
        id:
          description: ID of a principal in an authentication domain.
          type: string
        isAssignedRoles:
          description: |
            A Boolean that specifies whether the principal has any roles assigned. When this value is 'true,' the principal has one or more roles assigned.
          type: boolean
        isAssignedRolesOrIsLocal:
          description: |
            A Boolean that specifies whether the principal is a local user or has any roles assigned. When this value is 'true,' the principal either has one or more roles assigned or is a local user.
          type: boolean
        isLocked:
          description: |
            Boolean value that shows the lock state of a user account. Value is true when the account is locked and false when the account is not locked.
          type: boolean
        isTotpEnabled:
          description: |
            Indicates if the principal has TOTP authentication enabled. Returns true when TOTP is enabled, returns false when TOTP is not enabled.
          type: boolean
        isTotpEnforced:
          description: |
            Indicates if the TOTP authentication is enforced. Returns true when TOTP is enforced, returns false when TOTP is not enforced.
          type: boolean
        lastName:
          description: |
            Last name of a principal of type user. For all other types the value is null.
          type: string
        mfaServerName:
          description: |
            Name of the MFA server assgined to the user.
          type: string
        name:
          description: The name of a principal in an authentication domain.
          type: string
        principalType:
          $ref: "#/components/schemas/PrincipalType"
        roles:
          description: Roles assigned to this principal.
          items:
            $ref: "#/components/schemas/RoleInfo"
          type: array
      required:
        - authDomainId
        - authDomainType
        - id
        - isAssignedRoles
        - isAssignedRolesOrIsLocal
        - isLocked
        - name
        - principalType
        - roles
      type: object
    PrincipalSummaryV1ListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/PrincipalSummaryV1"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    PrincipalType:
      description: |
        The Type of a principal in an authentication domain. Type can be user or group.
      enum:
        - User
        - Group
      type: string
    PrincipalWithRoleInfo:
      properties:
        principal:
          description: The principal that is assigned the roles.
          type: string
        roles:
          description: The roles that are assigned to the principal.
          items:
            $ref: "#/components/schemas/RoleInfo"
          type: array
      required:
        - principal
        - roles
      type: object
    ProtectedObjectsCount:
      properties:
        numDoNotProtect:
          format: int64
          type: integer
        numNoSla:
          format: int64
          type: integer
        numProtected:
          format: int64
          type: integer
        numTotal:
          format: int64
          type: integer
      required:
        - numProtected
        - numTotal
      type: object
    QuarterlyConfig:
      allOf:
        - $ref: "#/components/schemas/FrequencyConfig"
        - properties:
            dayOfQuarter:
              $ref: "#/components/schemas/SlaDayOfQuarter"
            firstQuarterStartMonth:
              $ref: "#/components/schemas/SlaMonth"
          required:
            - dayOfQuarter
            - firstQuarterStartMonth
          type: object
    RbsHostOperationRequest:
      allOf:
        - $ref: "#/components/schemas/RbsHostUserConfig"
        - properties:
            operationMode:
              $ref: "#/components/schemas/OperationMode"
          type: object
    RbsHostOperationResponse:
      properties:
        asyncRequestStatus:
          $ref: "#/components/schemas/AsyncRequestStatus"
        rbsHostSummary:
          $ref: "#/components/schemas/RbsHostSummary"
      type: object
    RbsHostSummary:
      properties:
        agentId:
          description: UUID that uniquely identifies the Rubrik Backup Service on the Rubrik cluster.
          type: string
        agentVersion:
          description: Version of the Rubrik Backup Service.
          type: string
        name:
          description: IP address or hostname of the host.
          type: string
        osInfo:
          description: Version of the operating system that the host is running.
          type: string
        osType:
          description: Type of the operating system that the host is running.
          type: string
        status:
          $ref: "#/components/schemas/HostRbsStatus"
      required:
        - name
        - status
      type: object
    RbsHostUserConfig:
      properties:
        name:
          description: IP address or hostname of the host.
          type: string
        operationTimeout:
          default: 600
          description: Number of seconds after which the operation is terminated if it has not completed execution. Default value is 600 seconds.
          format: int64
          type: integer
        password:
          description: Password associated with the username that has access to the host.
          type: string
          x-secret: true
        username:
          description: Name of the user account that has sudo/admin privileges on the RBS host. This is required to install/uninstall/upgrade RBS packages on the RBS host.
          type: string
      required:
        - name
        - password
        - username
      type: object
    ReaderRefreshDataSourcesRequest:
      properties:
        archivalDataSourceIds:
          description: |
            The owner cluster assigned IDs for data sources previously recovered from a reader archival location, which is a read only archival location connected from the local cluster to the archival location owned by some other cluster through connect-as-reader operation.
          items:
            type: string
          type: array
        localDataSourceIds:
          description: |
            The locally assigned IDs for data sources previously recovered from a reader archival location, which is a read only archival location connected from the local cluster to the archival location owned by some other cluster through connect-as-reader operation.
          items:
            type: string
          type: array
      type: object
    RefreshableObjectConnectionStatus:
      properties:
        message:
          description: Details about the object status. Will be populated if the status is "BadlyConfigured".
          type: string
        status:
          $ref: "#/components/schemas/RefreshableObjectConnectionStatusType"
      required:
        - status
      type: object
    RefreshableObjectConnectionStatusType:
      description: Status of the refreshable object. Possible values are "Disconnected" (no communication possible with object), "Refreshing" (able to communicate with object but has not refreshed yet), "Connected" (refreshed the metadata for the object), "BadlyConfigured" (object not configured correctly), "Deleting" (in process of removing the object), and "Remote" (replicated object that we should not connect to).
      enum:
        - Disconnected
        - Refreshing
        - Connected
        - BadlyConfigured
        - Deleting
        - Remote
      type: string
    RelocateMountConfig:
      properties:
        datastoreId:
          description: The ID of the datastore that is the target of relocation.
          type: string
      required:
        - datastoreId
      type: object
    RemediationRequest:
      properties:
        config:
          $ref: "#/components/schemas/RemediationRequestRunConfig"
        spec:
          description: |
            List of identifiers to uniquely identify failed tasks.
          items:
            $ref: "#/components/schemas/RemediationRequestSpec"
          type: array
      required:
        - config
        - spec
      type: object
    RemediationRequestRunConfig:
      properties:
        runNow:
          description: |
            If false, Rubrik CDM uses the configured SLA domain backup window to reschedule the task.
          type: boolean
      required:
        - runNow
      type: object
    RemediationRequestSpec:
      properties:
        eventSeriesId:
          description: |
            Event series ID of the failed or cancelled task.
          type: string
        objectId:
          description: |
            Object id.
          type: string
      required:
        - eventSeriesId
        - objectId
      type: object
    RemediationResponse:
      properties:
        asyncRequestStatus:
          $ref: "#/components/schemas/AsyncRequestStatus"
        eventSeriesId:
          description: |
            Aggregated ID for the series of events, including the status for all retry attempts.
          type: string
      required:
        - asyncRequestStatus
        - eventSeriesId
      type: object
    ReplicationSpec:
      properties:
        locationId:
          type: string
        locationName:
          type: string
        logRetentionLimit:
          description: Specifies an interval in seconds. Logs are retained at the replication location until the specified interval expires.
          format: int64
          type: integer
        replicationType:
          $ref: "#/components/schemas/ReplicationType"
        retentionLimit:
          format: int64
          type: integer
      required:
        - locationId
        - retentionLimit
      type: object
    ReplicationType:
      description: The type of replication for an SLA Domain.
      enum:
        - REPLICATION_TO_CLUSTER
        - REPLICATION_TO_CLOUD_LOCATION
      type: string
    ReportConfigPatch:
      properties:
        cleanupReportJobInstanceForLogJobs:
          format: int32
          type: integer
      type: object
    ReportConfigResponse:
      properties:
        cleanupReportJobInstanceForLogJobs:
          format: int32
          type: integer
      type: object
    ReportableObjectType:
      description: Object types that are reported on.
      enum:
        - AppBlueprint
        - Ec2Instance
        - Hdfs
        - HypervVirtualMachine
        - LinuxFileset
        - ManagedVolume
        - Mssql
        - NutanixVirtualMachine
        - OracleDatabase
        - SapHanaDatabase
        - ShareFileset
        - StorageArrayVolumeGroup
        - VcdVapp
        - VmwareVirtualMachine
        - WindowsFileset
        - WindowsVolumeGroup
      type: string
    RequestErrorInfo:
      properties:
        message:
          description: The error message for failed IDs.
          type: string
      required:
        - message
      type: object
    RequestFailedException:
      properties:
        code:
          type: string
        errorType:
          type: string
        message:
          type: string
        param:
          type: string
      required:
        - errorType
        - message
      type: object
    ResourceTagDefinition:
      description: |
        Provides the definition to create a new user-defined resource tag.
      properties:
        key:
          description: The key of the resource tag.
          type: string
        scopeRefId:
          description: |
            The ID of the archival location associated with the resource that has the specified user-defined resource tag.
          type: string
        value:
          description: The value of the resource tag.
          type: string
      required:
        - key
        - scopeRefId
        - value
      type: object
    ResourceTagDeleteResponse:
      description: |
        Lists the IDs of resource tags that were deleted successfully.
      properties:
        ids:
          description: List of deleted IDs.
          items:
            type: string
          type: array
      required:
        - ids
      type: object
    ResourceTagDetail:
      description: |
        Provides the details for a user-defined resource tag, which tags cloud compute resources created by CloudOn and CloudOut.
      properties:
        id:
          description: The ID of the resource tag.
          type: string
        key:
          description: The key of the resource tag.
          type: string
        lastUpdateTime:
          description: |
            A timestamp (in UTC) that indicates when the resource tag was last updated.
          type: string
        scopeRefId:
          description: |
            The ID of the archival location associated with the resource that has the specified user-defined resource tag.
          type: string
        value:
          description: The value of the resource tag.
          type: string
      required:
        - id
        - key
        - lastUpdateTime
        - scopeRefId
        - value
      type: object
    ResourceTagGetResponse:
      description: |
        Returns the results of a query on user-defined resource tags.
      properties:
        resourceTags:
          description: List of resource tags.
          items:
            $ref: "#/components/schemas/ResourceTagDetail"
          type: array
      required:
        - resourceTags
      type: object
    ResourceTagUpdate:
      description: |
        Updates an existing user-defined resource tag.
      properties:
        value:
          description: The value of the resource tag.
          type: string
      required:
        - value
      type: object
    RestoreFileJobConfig:
      properties:
        domainName:
          description: Domain name (Use . for local admin).
          type: string
        ignoreErrors:
          default: false
          description: Optional Boolean field to determine whether to ignore errors during restore jobs that use the Rubrik Backup Service. When 'true', errors are ignored. Default value is 'false', errors are not ignored.
          type: boolean
        password:
          description: Password.
          type: string
          x-secret: true
        path:
          description: Absolute file path.
          type: string
        restorePath:
          description: Directory of folder to copy files into.
          type: string
        shouldRestoreXAttrs:
          description: Boolean value that determines restore file settings for Linux systems and for Windows systems. For Linux, use 'true' to include the extended attributes of restored files. For Window, use 'true' to include alternate data streams for restored files. For both, use 'false' to exclude this additional metadata.
          type: boolean
        shouldSaveCredentials:
          description: A Boolean value that specifies whether to save the user-entered credentials. When 'true', the user-entered credentials are saved.
          type: boolean
        shouldUseAgent:
          default: true
          description: A Boolean that specifies whether to use the Rubrik Backup Service or VMware tools to restore file. When 'true', the RBS restores file. When 'false', the VMware tools restores file.
          type: boolean
        username:
          description: Username.
          type: string
      required:
        - path
        - restorePath
      type: object
    RestoreMssqlDbJobConfig:
      properties:
        finishRecovery:
          description: A Boolean value that determines the recovery option to use during database restore. When this value is 'true', the database is restored using the RECOVERY option and is fully functional at the end of the restore operation. When this value is 'false', the database is restored using the NORECOVERY option and remains in recovering mode at the end of the restore operation.
          type: boolean
        maxDataStreams:
          description: Maximum number of parallel data streams that can be used to copy data to the target system.
          format: int32
          type: integer
        recoveryPoint:
          $ref: "#/components/schemas/MssqlRecoveryPoint"
      required:
        - recoveryPoint
      type: object
    RoleAssignmentRequest:
      properties:
        principals:
          items:
            type: string
          type: array
        roles:
          items:
            type: string
          type: array
      required:
        - principals
        - roles
      type: object
    RoleInfo:
      properties:
        description:
          description: The description of the role.
          type: string
        name:
          description: The name of the role.
          type: string
        organizationId:
          description: The ID of the organization that owns the role.
          type: string
        roleId:
          description: The ID of the role.
          type: string
        roleTemplate:
          description: The role template associated with the role.
          type: string
      required:
        - name
        - organizationId
        - roleId
      type: object
    RoleInfoCreate:
      properties:
        description:
          description: The description of the role.
          type: string
        name:
          description: The name of the role.
          type: string
        organizationId:
          description: The ID of the organization that owns the role.
          type: string
        roleTemplate:
          description: The role template associated with the role.
          type: string
      required:
        - name
      type: object
    RoleInfoListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/RoleInfo"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    RoleInfoUpdate:
      properties:
        description:
          description: The description of the role.
          type: string
        name:
          description: The name of the role.
          type: string
      type: object
    RoleInfoWithPrincipals:
      properties:
        principals:
          description: The principals that are assigned the role.
          items:
            type: string
          type: array
        role:
          $ref: "#/components/schemas/RoleInfo"
      required:
        - principals
        - role
      type: object
    RoleListSortAttributes:
      description: |
        Attributes that are available to use when sorting query results for roles.
      enum:
        - Name
        - Description
        - RoleTemplate
      type: string
    RsaMfaServerConfig:
      allOf:
        - $ref: "#/components/schemas/RsaMfaServerConfigWithoutSecrets"
        - properties:
            restApiAccessId:
              description: |
                A unique string that RSA SecurID Access uses to identify individual REST API clients (not to be confused with a REST API Key described above).
              type: string
              x-secret: true
            restApiKey:
              description: |
                A unique string that RSA SecurID Access generates and uses as a shared secret with REST API clients.
              type: string
              x-secret: true
          required:
            - restApiKey
          type: object
    RsaMfaServerConfigUpdate:
      allOf:
        - properties:
            assurancePolicyName:
              description: |
                The name of a Cloud Authentication Service policy. This setting is only required for RSA Cloud Service configurations.
              type: string
            baseUrl:
              description: |
                The base url for RSA REST API server including the host name and port number. A valid input looks like https://<SECURID_ACCESS_HOST >:<REST_API_PORT>/mfa/v1_1.
              type: string
            certificateId:
              description: ID corresponding to the imported certificate.
              type: string
            clientId:
              description: |
                A unique name to identify the client. When the client is configured to use RSA Authentication Manager, the client ID must match an authentication agent name.
              type: string
            ldapUsernameAttribute:
              description: |
                LDAP attribute to query the username used for performing MFA.
              type: string
            name:
              description: Unique name to identify MFA server configuration.
              type: string
            restApiAccessId:
              description: |
                A unique string that RSA SecurID Access uses to identify individual REST API clients (not to be confused with a REST API Key described above).
              type: string
              x-secret: true
            restApiKey:
              description: |
                A unique string that RSA SecurID Access generates and uses as a shared secret with REST API clients.
              type: string
              x-secret: true
            timeout:
              description: |
                Specifies a number of seconds to wait for server response to a given authentication method.
              format: int32
              type: integer
          type: object
    RsaMfaServerConfigWithoutSecrets:
      allOf:
        - $ref: "#/components/schemas/MfaServerConfig"
        - properties:
            assurancePolicyName:
              description: |
                The name of a Cloud Authentication Service policy. This setting is only required for RSA Cloud Service configurations.
              type: string
            baseUrl:
              description: |
                The base url for RSA REST API server including the host name and port number. A valid input looks like https://<SECURID_ACCESS_HOST >:<REST_API_PORT>/mfa/v1_1.
              type: string
            certificateId:
              description: ID corresponding to the imported certificate.
              type: string
            clientId:
              description: |
                A unique name to identify the client. When the client is configured to use RSA Authentication Manager, the client ID must match an authentication agent name.
              type: string
            ldapUsernameAttribute:
              description: |
                LDAP attribute to query the username used for performing MFA.
              type: string
          required:
            - baseUrl
          type: object
    RsaMfaServerDetail:
      allOf:
        - $ref: "#/components/schemas/RsaMfaServerConfigWithoutSecrets"
        - properties:
            id:
              description: Unique server identifier.
              type: string
            ldapUsernameAttribute:
              description: |
                LDAP attribute to query the username used for performing MFA.
              type: string
            timeout:
              description: |
                Specifies a number of seconds to wait for server response to a given authentication method.
              format: int32
              type: integer
          required:
            - id
            - ldapUsernameAttribute
            - timeout
          type: object
    RsaMfaServerDetailListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/RsaMfaServerDetail"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    RubrikMibFileDownloadLink:
      properties:
        downloadLink:
          description: Rubrik MIB file download link.
          type: string
      required:
        - downloadLink
      type: object
    RubrikSamlMetadataDetail:
      properties:
        metadataXmlBase64:
          description: Rubrik metadata XML file in a base64 encoded format.
          type: string
      required:
        - metadataXmlBase64
      type: object
    RubrikSamlMetadataInfo:
      properties:
        hostAddress:
          description: The IP address or FQDN of the host that consumes the SAML assertions from the ID provider. When hostAddress is blank, an arbitrary floating IP address is assigned as the host.
          type: string
      type: object
    RubrikSamlMetadataSummary:
      properties:
        metadataUrl:
          description: URL of the metadata file for downloading.
          type: string
      required:
        - metadataUrl
      type: object
    RunPolicyArg:
      properties:
        nodeIds:
          description: List of node IDs where policies will be enforced.
          items:
            type: string
          type: array
        policyIds:
          description: List of policy IDs.
          items:
            type: string
          type: array
      required:
        - policyIds
      type: object
    SamlSsoAuthnRequestDetail:
      properties:
        idpSsoUrl:
          description: The SSO endpoint where the SAML authentication request is sent.
          type: string
        relayState:
          description: The SAML relay state associated with the SAML response and request.
          type: string
        samlRequest:
          description: SAML authentication request XML in base-64 encoding.
          type: string
      required:
        - idpSsoUrl
        - relayState
        - samlRequest
      type: object
    SamlSsoAuthnRequestInfo:
      properties:
        isForIdpTest:
          default: false
          description: A Boolean that determines whether the authentication request is part of an identity provider test. A value of 'true' indicates that the authentication request is part of an identity provider test. A value of 'false' indicates that the authentication request is not part of an identity provider test.
          type: boolean
        redirectPath:
          description: The resource location that the Rubrik cluster redirects the browser to after a successful login. The value is the resource path portion of the URL of the resource. For example, for resource1 at http://example-host.com/resources/resource1, the value is "/resources/resource1".
          type: string
      type: object
    SamlSsoStatus:
      properties:
        defaultIdp:
          description: The name of the default IdP authentication domain used for SSO.
          type: string
        isGpsLoginEnabled:
          description: To specify whether Federated Login is enabled. When the value is 'true', Federated Login is enabled. When this value is 'false', or this field not present, Federated Login is disabled. Federated login enables the inheritance of user roles and privileges from Polaris to CDM clusters registered on Polaris.
          type: boolean
        isSsoEnabled:
          description: A Boolean value that specifies whether SAML SSO is enabled. When this value is 'true', SAML SSO is enabled. When this value is 'false', SAML SSO is disabled.
          type: boolean
      required:
        - isSsoEnabled
      type: object
    SapHanaAddSystemResponse:
      properties:
        asyncRequestStatus:
          $ref: "#/components/schemas/AsyncRequestStatus"
        id:
          description: The ID of the added SAP HANA system.
          type: string
      required:
        - asyncRequestStatus
        - id
      type: object
    SapHanaDataPathSpec:
      properties:
        name:
          description: The name of the data backup storage. For on-premises backups, this value is the name of the Managed Volume. For GCP backups, this value is the name of the Google Cloud Platform bucket.
          type: string
      required:
        - name
      type: object
    SapHanaDataPathType:
      description: Data path of the SAP HANA BACKINT interface specifying the location where the BACKINT interface stores backups. Supported data path types are MANAGED_VOLUME, GCP, and LOCAL. MANAGED_VOLUME specifies a data path used by the BACKINT interface to store backups on an on-premises Rubrik CDM cluster. GCP specifies that backups are stored on Google Cloud Platform. LOCAL indicates the backup is stored locally.
      enum:
        - GCP
        - MANAGED_VOLUME
        - LOCAL
      type: string
    SapHanaDatabaseDetail:
      allOf:
        - $ref: "#/components/schemas/SapHanaDatabaseSummary"
        - properties:
            dataPathSpec:
              $ref: "#/components/schemas/SapHanaDataPathSpec"
            forceFull:
              description: Determines whether to force a full snapshot for the next backup of the SAP HANA database. Use true to force a full snapshot and false to use the default. The backup job resets the parameter to false after a successful full backup.
              type: boolean
            latestRecoveryPoint:
              description: The most recent recovery point for the database.
              format: date-time
              type: string
            logSnapshotJobIntervalInMinutes:
              description: The log snapshot job interval in minutes.
              format: int32
              type: integer
            numChannels:
              description: The number of channels for multistream backups.
              format: int32
              type: integer
            oldestRecoveryPoint:
              description: The earliest recovery point for the database.
              format: date-time
              type: string
            previousFailedBackupPrefixes:
              description: The Prefixes of previous failed backup jobs. Prefix is an identifier used by SAP HANA BACKINT to uniquely identify backups.
              items:
                type: string
              type: array
            snapshotCount:
              description: The total number of SAP HANA snapshots that have been taken.
              format: int32
              type: integer
          required:
            - forceFull
            - logSnapshotJobIntervalInMinutes
            - previousFailedBackupPrefixes
            - snapshotCount
          type: object
    SapHanaDatabaseListSortAttribute:
      description: The SAP HANA database attribute to use in sorting the responses.
      enum:
        - effectiveSlaDomainName
        - name
        - sapHanaSystemName
      type: string
    SapHanaDatabasePatch:
      properties:
        configuredSlaDomainId:
          description: The ID of the SLA Domain that is configured for the SAP HANA database.
          type: string
        logSnapshotJobIntervalInMinutes:
          description: The log snapshot job interval in minutes.
          format: int32
          type: integer
      type: object
    SapHanaDatabaseSnapshotDetail:
      allOf:
        - $ref: "#/components/schemas/BaseSnapshotDetail"
        - $ref: "#/components/schemas/SapHanaDatabaseSnapshotSummary"
    SapHanaDatabaseSnapshotSummary:
      allOf:
        - $ref: "#/components/schemas/BaseSnapshotSummary"
        - properties:
            backupId:
              description: ID of the SAP HANA backup. This ID uniquely identifies a backup to SAP HANA. All backup files from a single backup share the same backup ID.
              format: int64
              type: integer
            backupPrefix:
              description: The backup prefix that was used while taking the backup.
              type: string
            backupType:
              description: Type of the SAP HANA backup.
              enum:
                - FULL
                - INCREMENTAL
              type: string
            baseBackupId:
              description: The backup ID of the full data backup or the delta backup on which the current delta backup is based.
              format: int64
              type: integer
            isExternalBackup:
              description: This specifies whether the backup was triggered by HANA studio, SAP HANA cockpit, or using HDBSQL commands.
              type: boolean
            isRubrikTriggeredOnDemandBackup:
              description: This specifies whether the backup was triggered by Rubrik and and whether the backup is an on-demand snapshot.
              type: boolean
            rubrikSnapshotEndTime:
              description: The end time, in UTC, of the backup with respect to the Rubrik cluster.
              format: date-time
              type: string
            rubrikSnapshotStartTime:
              description: The start time, in UTC, of the backup with respect to the Rubrik cluster.
              format: date-time
              type: string
            sapHanaEndTime:
              description: The end time, in UTC, of the backup with respect to the SAP HANA system.
              format: date-time
              type: string
            sapHanaStartTime:
              description: The start time, in UTC, of the backup with respect to the SAP HANA system.
              format: date-time
              type: string
          required:
            - backupId
            - backupPrefix
            - backupType
            - isExternalBackup
            - isRubrikTriggeredOnDemandBackup
            - rubrikSnapshotEndTime
            - rubrikSnapshotStartTime
            - sapHanaEndTime
            - sapHanaStartTime
          type: object
    SapHanaDatabaseSnapshotSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/SapHanaDatabaseSnapshotSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    SapHanaDatabaseSummary:
      allOf:
        - $ref: "#/components/schemas/Snappable"
        - properties:
            dataPathType:
              $ref: "#/components/schemas/SapHanaDataPathType"
            dbStatus:
              description: Whether the database is in an ACTIVE,INACTIVE, or UNKNOWN state.
              enum:
                - ACTIVE
                - INACTIVE
                - UNKNOWN
              type: string
            dbType:
              description: The type of SAP HANA database. Possible values are SYSTEM or TENANT. The SYSTEM database stores information about SAP HANA users and central system management. The TENANT database contains databases used by applications.
              enum:
                - SYSTEM
                - TENANT
              type: string
            id:
              description: The ID of the SAP HANA database.
              type: string
            isRelic:
              description: Specifies whether the SAP HANA database is accessible on the CDM cluster.
              type: boolean
            logBackupIntervalInSecs:
              description: The log backup interval in seconds.
              format: int32
              type: integer
            name:
              description: The name of the SAP HANA database.
              type: string
            primaryClusterUuid:
              description: The ID of the CDM cluster that protects the SAP HANA database.
              type: string
            protectionDate:
              description: The UTC timestamp for when the SAP HANA database was first protected.
              format: date-time
              type: string
            sapHanaSystemId:
              description: The ID of the SAP HANA system that owns the database.
              type: string
            sapHanaSystemName:
              description: Name of the SAP HANA system that owns the database.
              type: string
          required:
            - dataPathType
            - dbStatus
            - dbType
            - id
            - isRelic
            - name
            - primaryClusterUuid
            - sapHanaSystemId
            - sapHanaSystemName
          type: object
    SapHanaDatabaseSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/SapHanaDatabaseSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    SapHanaHost:
      properties:
        hostName:
          description: The IP address or fully qualified domain name of the SAP HANA host.
          type: string
        hostType:
          description: The type of the SAP HANA system host. Possible values are MASTER, SLAVE, SECONDARY_MASTER or SECONDARY_SLAVE .
          enum:
            - MASTER
            - SLAVE
            - SECONDARY_MASTER
            - SECONDARY_SLAVE
          type: string
        hostUuid:
          description: The ID of the SAP HANA system host.
          type: string
        sapHanaHostName:
          description: The local name of the SAP HANA host.
          type: string
        status:
          description: The status of the SAP HANA system host.
          type: string
      required:
        - hostName
        - hostUuid
        - status
      type: object
    SapHanaPatchSystemResponse:
      properties:
        asyncRequestStatus:
          $ref: "#/components/schemas/AsyncRequestStatus"
        systemSummary:
          $ref: "#/components/schemas/SapHanaSystemSummary"
      required:
        - asyncRequestStatus
        - systemSummary
      type: object
    SapHanaRecoverableRange:
      properties:
        beginTime:
          description: Start time of the SAP HANA recoverable range.
          format: date-time
          type: string
        endTime:
          description: End time of the SAP HANA recoverable range.
          format: date-time
          type: string
      required:
        - beginTime
        - endTime
      type: object
    SapHanaRecoverableRangeListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/SapHanaRecoverableRange"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    SapHanaRestoreSourceConfig:
      properties:
        snappable_id:
          description: ID of the source database.
          type: string
      type: object
    SapHanaSslInfo:
      properties:
        encryptionProvider:
          description: The encryption provider for the SAPA HANA system. Possible values are OPENSSL, COMMON_CRYPTO, SAP_CRYPTO.
          enum:
            - OPENSSL
            - COMMON_CRYPTO
            - SAP_CRYPTO
          type: string
        keyStorePath:
          description: The path where the encryption key for the SAP HANA system is stored.
          type: string
      required:
        - encryptionProvider
        - keyStorePath
      type: object
    SapHanaSystemConfig:
      properties:
        dataPathSpec:
          $ref: "#/components/schemas/SapHanaSystemDataPathSpec"
        hostIds:
          description: The SAP HANA system hosts.
          items:
            type: string
          type: array
        instanceNumber:
          description: The instance number of the SAP HANA system.
          type: string
        password:
          description: The password of the SAP HANA system.
          type: string
          x-secret: true
        sid:
          description: The SAP System Identification (SID) code for the SAP HANA system.
          type: string
        username:
          description: The username of the SAP HANA system.
          type: string
      required:
        - hostIds
        - instanceNumber
        - password
        - sid
        - username
      type: object
    SapHanaSystemDataPathSpec:
      properties:
        dataPathType:
          $ref: "#/components/schemas/SapHanaDataPathType"
      type: object
    SapHanaSystemInfo:
      properties:
        hanaVersion:
          description: The version of the SAP HANA system.
          type: string
        isSystemReplicationEnabled:
          description: Indicates whether the SAP HANA system has replication enabled.
          type: boolean
      required:
        - hanaVersion
        - isSystemReplicationEnabled
      type: object
    SapHanaSystemListSortAttribute:
      description: The SAP HANA system attribute to use in sorting the responses.
      enum:
        - sid
      type: string
    SapHanaSystemPatch:
      properties:
        configuredSlaDomainId:
          description: The ID of the SLA Domain that is configured for the SAP HANA system.
          type: string
        hostIds:
          description: The SAP HANA system hosts.
          items:
            type: string
          type: array
        instanceNumber:
          description: The instance number of the SAP HANA system.
          type: string
        password:
          description: The password of the SAP HANA system.
          type: string
          x-secret: true
        sid:
          description: The SAP System Identification (SID) code for the SAP HANA system.
          type: string
        username:
          description: The username of the SAP HANA system.
          type: string
      type: object
    SapHanaSystemSummary:
      allOf:
        - $ref: "#/components/schemas/SlaAssignable"
        - properties:
            containerType:
              description: The container type of the SAP HANA system. Possible values are SINGLE_CONTAINER, MULTI_CONTAINER.
              enum:
                - SINGLE_CONTAINER
                - MULTI_CONTAINER
              type: string
            hosts:
              items:
                $ref: "#/components/schemas/SapHanaHost"
              type: array
            id:
              description: The ID of the SAP HANA system.
              type: string
            instanceNumber:
              description: The instance number of the SAP HANA system.
              type: string
            lastRefreshTime:
              description: The UTC timestamp for when the SAP HANA system was last refreshed.
              format: date-time
              type: string
            numDbs:
              description: The number of databases in the SAP HANA system.
              format: int32
              type: integer
            sid:
              description: The SAP System Identification (SID) code for the SAP HANA system.
              type: string
            sslInfo:
              $ref: "#/components/schemas/SapHanaSslInfo"
            status:
              description: The status of the SAP HANA system.
              enum:
                - OK
                - WARNING
                - ERROR
                - UNKNOWN
              type: string
            statusMessage:
              description: The message associated with the current SAP HANA system status.
              type: string
            systemInfo:
              $ref: "#/components/schemas/SapHanaSystemInfo"
            username:
              description: The username of the SAP HANA system.
              type: string
          required:
            - hosts
            - id
            - instanceNumber
            - numDbs
            - sid
            - status
            - username
          type: object
    SapHanaSystemSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/SapHanaSystemSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    ScriptErrorAction:
      description: Action to take if the script returns an error or times out.
      enum:
        - abort
        - continue
      type: string
    SearchResponse:
      properties:
        fileVersions:
          items:
            $ref: "#/components/schemas/FileVersion"
          type: array
        filename:
          description: Just the filename without the whole path.
          type: string
        path:
          type: string
      type: object
    SearchResponseListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/SearchResponse"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    SessionSummary:
      properties:
        expiration:
          type: string
        groups:
          items:
            type: string
          type: array
        id:
          type: string
        organizationId:
          type: string
        tag:
          type: string
        token:
          type: string
        userId:
          type: string
      required:
        - id
        - organizationId
        - token
        - userId
      type: object
    SlaAssignable:
      properties:
        configuredSlaDomainId:
          description: The ID of the SLA Domain configured directly on the Rubrik object.
          type: string
        configuredSlaDomainName:
          description: The name of the SLA Domain configured directly on the Rubrik object.
          type: string
        configuredSlaDomainType:
          $ref: "#/components/schemas/ConfiguredSlaType"
        id:
          description: The ID of the Rubrik object.
          type: string
        isConfiguredSlaDomainRetentionLocked:
          description: Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
          type: boolean
        name:
          description: The name of the Rubrik object.
          type: string
        primaryClusterId:
          description: The ID of the cluster that manages the Rubrik object.
          type: string
        slaLastUpdateTime:
          description: The UTC time when the SLA Domain was last updated.
          format: date-time
          type: string
      required:
        - configuredSlaDomainId
        - configuredSlaDomainName
        - id
        - name
        - primaryClusterId
      type: object
    SlaAssignment:
      description: Specifies the method used to apply an SLA Domain to an object. Possible values are Derived, Direct, and Unassigned.
      enum:
        - Derived
        - Direct
        - Unassigned
      type: string
    SlaConflictsSummary:
      properties:
        conflicts:
          items:
            $ref: "#/components/schemas/ManagedHierarchyObjectSummary"
          type: array
        id:
          description: managedId.
          type: string
        isPossiblyInconsistent:
          description: |
            Indicates if the results returned are inconsistent due to an ongoing SLA assignment operation within this object's hierarchy. This endpoint does not consider the results of in flight SLA operations since they have not yet completed. Because the results may change once the operation completes, Rubrik advises waiting until all SLA assignments have completed on this hierarchy before reassigning, unless changing the childrens' SLAs directly with this assignment is unacceptable.
          type: boolean
      required:
        - conflicts
        - id
        - isPossiblyInconsistent
      type: object
    SlaDayOfMonth:
      description: The day of the month when snapshot will be taken.
      enum:
        - FirstDay
        - Fifteenth
        - LastDay
      type: string
    SlaDayOfQuarter:
      description: The day of the quarter when snapshot will be taken.
      enum:
        - FirstDay
        - LastDay
      type: string
    SlaDayOfWeek:
      description: The day of the week when snapshot will be taken.
      enum:
        - Monday
        - Tuesday
        - Wednesday
        - Thursday
        - Friday
        - Saturday
        - Sunday
      type: string
    SlaDayOfYear:
      description: The day of the year when snapshot will be taken.
      enum:
        - FirstDay
        - LastDay
      type: string
    SlaDomainDefinition:
      properties:
        allowedBackupWindows:
          items:
            $ref: "#/components/schemas/BackupWindow"
          type: array
        archivalSpecs:
          items:
            $ref: "#/components/schemas/ArchivalSpec"
          type: array
        firstFullAllowedBackupWindows:
          items:
            $ref: "#/components/schemas/BackupWindow"
          type: array
        frequencies:
          items:
            $ref: "#/components/schemas/SlaFrequency"
          type: array
        isRetentionLocked:
          description: Boolean value that identifies a Retention Lock SLA Domain. Value is true when an SLA Domain is Retention Locked and false when it is not.
          type: boolean
        localRetentionLimit:
          format: int64
          type: integer
        name:
          type: string
        replicationSpecs:
          items:
            $ref: "#/components/schemas/ReplicationSpec"
          type: array
      required:
        - firstFullAllowedBackupWindows
        - frequencies
        - name
      type: object
    SlaDomainPatchDefinition:
      properties:
        allowedBackupWindows:
          items:
            $ref: "#/components/schemas/BackupWindow"
          type: array
        archivalSpecs:
          items:
            $ref: "#/components/schemas/ArchivalSpec"
          type: array
        firstFullAllowedBackupWindows:
          items:
            $ref: "#/components/schemas/BackupWindow"
          type: array
        frequencies:
          items:
            $ref: "#/components/schemas/SlaFrequency"
          type: array
        isRetentionLocked:
          description: Boolean value that identifies a Retention Lock SLA Domain. Value is true when an SLA Domain is Retention Locked and false when it is not.
          type: boolean
        localRetentionLimit:
          format: int64
          type: integer
        name:
          type: string
        replicationSpecs:
          items:
            $ref: "#/components/schemas/ReplicationSpec"
          type: array
      type: object
    SlaDomainSummary:
      allOf:
        - $ref: "#/components/schemas/SlaObjectCounts"
        - properties:
            allowedBackupWindows:
              items:
                $ref: "#/components/schemas/BackupWindow"
              type: array
            archivalSpecs:
              description: Specification for archival locations on this SLA.
              items:
                $ref: "#/components/schemas/ArchivalSpec"
              type: array
            firstFullAllowedBackupWindows:
              items:
                $ref: "#/components/schemas/BackupWindow"
              type: array
            frequencies:
              items:
                $ref: "#/components/schemas/SlaFrequency"
              type: array
            id:
              type: string
            isDefault:
              type: boolean
            isPaused:
              description: A Boolean value that specifies whether protection for all the snappables that are protected by the specified SLA Domain is paused. When the value is 'true' protection is paused.
              type: boolean
            isRetentionLocked:
              description: Boolean value that identifies a Retention Lock SLA Domain. Value is true when an SLA Domain is Retention Locked and false when it is not.
              type: boolean
            localRetentionLimit:
              description: Retention limit for snapshots on the local Rubrik system. If none, they will remain as long as SLA requires.
              format: int64
              type: integer
            maxLocalRetentionLimit:
              description: Maximum limit for snapshots to be retained on the local Rubrik system. For local sla, it would be max of frequencies but for remote sla, it would be the retentionLimit set on the replication target location. (Local location is the replication target location for remote sla).
              format: int64
              type: integer
            name:
              type: string
            primaryClusterId:
              type: string
            replicationSpecs:
              description: Specification for replication locations on this SLA.
              items:
                $ref: "#/components/schemas/ReplicationSpec"
              type: array
            uiColor:
              type: string
          required:
            - allowedBackupWindows
            - firstFullAllowedBackupWindows
            - frequencies
            - id
            - isDefault
            - maxLocalRetentionLimit
            - name
            - primaryClusterId
          type: object
    SlaDomainSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/SlaDomainSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    SlaFrequency:
      properties:
        frequency:
          format: int32
          type: integer
        retention:
          format: int32
          type: integer
        timeUnit:
          description: Units for frequency and retention. Accepted values are Hourly, Daily, Weekly, Monthly, and Yearly.
          type: string
      required:
        - frequency
        - retention
        - timeUnit
      type: object
    SlaFrequencyV2:
      properties:
        daily:
          $ref: "#/components/schemas/FrequencyConfig"
        hourly:
          $ref: "#/components/schemas/FrequencyConfig"
        minute:
          $ref: "#/components/schemas/FrequencyConfig"
        monthly:
          $ref: "#/components/schemas/MonthlyConfig"
        quarterly:
          $ref: "#/components/schemas/QuarterlyConfig"
        weekly:
          $ref: "#/components/schemas/WeeklyConfig"
        yearly:
          $ref: "#/components/schemas/YearlyConfig"
      type: object
    SlaMonth:
      description: The month of the year when snapshot will be taken.
      enum:
        - January
        - February
        - March
        - April
        - May
        - June
        - July
        - August
        - September
        - October
        - November
        - December
      type: string
    SlaObjectCounts:
      allOf:
        - $ref: "#/components/schemas/NutanixVmSlaObjectCount"
        - $ref: "#/components/schemas/AwsEc2InstanceSlaObjectCount"
        - $ref: "#/components/schemas/HypervVmSlaObjectCount"
        - $ref: "#/components/schemas/ManagedVolumeSlaObjectCount"
        - $ref: "#/components/schemas/MssqlDbSlaObjectCount"
        - $ref: "#/components/schemas/VcdVappSlaObjectCount"
        - properties:
            numFilesets:
              description: The number of filesets protected under this SLA Domain.
              format: int32
              type: integer
            numLinuxHosts:
              description: The number of Linux servers with filesets protected under this SLA Domain.
              format: int32
              type: integer
            numOracleDbs:
              description: The number of actively protected oracle databases under this SLA Domain.
              format: int32
              type: integer
            numProtectedObjects:
              description: The total number of protected ojects under this SLA Domain.
              format: int32
              type: integer
            numShares:
              description: The number of shares protected under this SLA Domain.
              format: int32
              type: integer
            numStorageArrayVolumeGroups:
              description: The number of storage array volume groups protected under this SLA Domain.
              format: int32
              type: integer
            numVms:
              format: int32
              type: integer
            numWindowsHosts:
              description: The number of Windows servers with filesets protected under this SLA Domain.
              format: int32
              type: integer
            numWindowsVolumeGroups:
              description: The number of Windows volume groups protected under this SLA Domain.
              format: int32
              type: integer
          type: object
    SlaStartTimeAttributes:
      properties:
        dayOfWeek:
          format: int32
          type: integer
        hour:
          format: int32
          type: integer
        minutes:
          format: int32
          type: integer
      required:
        - hour
        - minutes
      type: object
    SlaTimeUnit:
      description: Units for frequency and retention. Accepted values are Minute, Hourly, Daily, Weekly, Monthly, Quarterly, and Yearly.
      enum:
        - Minute
        - Hourly
        - Daily
        - Weekly
        - Monthly
        - Quarterly
        - Yearly
      type: string
    Snappable:
      allOf:
        - $ref: "#/components/schemas/SlaAssignable"
        - $ref: "#/components/schemas/EffectiveSlaHolder"
        - properties:
            retentionSlaDomainId:
              description: The ID of the SLA Domain whose retention policy is in use.
              type: string
            slaAssignment:
              description: The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.
              enum:
                - Derived
                - Direct
                - Unassigned
              type: string
          required:
            - slaAssignment
          type: object
    SnappablePrivilegeStatus:
      description: Whether the data source passes additional privilege checks.
      enum:
        - Protectable
      type: string
    SnappableRecoveryInfo:
      properties:
        isRefreshInProgressOpt:
          description: Indicates whether snapshot metadata refresh is in progress for this data source.
          type: boolean
        lastUpdatedTimeOpt:
          description: The time when the recovery infomation was updated.
          format: date-time
          type: string
        locationId:
          description: The reader location ID.
          type: string
        newSnappableId:
          description: The newly assigned ID of the recovered data source.
          type: string
        oldSnappableId:
          description: The original data source ID used in the owner cluster.
          type: string
      required:
        - locationId
        - newSnappableId
        - oldSnappableId
      type: object
    SnapshotCloudStorageTier:
      description: |
        The current cloud storage tier of a snapshot. A snapshot's cloud storage tier determines how the cloud provider will determine storage and retrieval costs, as well as retrieval latency. Accepted values are Hot, Cool, AzureArchive (with Azure locations), Glacier, and GlacierDeepArchive (for AWS S3 locations). The value Cold has been deprecated in favor of AzureArchive, which is the recommended replacement value.
      enum:
        - Hot
        - Cool
        - Cold
        - AzureArchive
        - Glacier
        - GlacierDeepArchive
      type: string
    SnapshotEventSeries:
      properties:
        eventSeriesId:
          description: The event series ID for the events triggered during the verification process for that snapshot.
          type: string
        snapshotId:
          description: The ID of the snapshot.
          type: string
      required:
        - eventSeriesId
        - snapshotId
      type: object
    SnapshotLocationRetentionInfo:
      properties:
        expirationTime:
          description: Time when the snapshot expired or is expected to expire at this location. This field will only be set if the snapshot has ever existed at the location. If the snapshot is present at the location, but the expiration time calculation is pending, this field will be absent. If the expiration time calculation is complete and the field is still absent, the snapshot will be retained forever at this location.
          format: date-time
          type: string
        id:
          description: ID of the location.
          type: string
        isExpirationDateCalculated:
          description: A Boolean that indicates whether expiration date for snapshot has been calculated. This field will be absent if the snapshot has never existed at this location.
          type: boolean
        isExpirationInformationUnavailable:
          description: |
            Indicates whether expiration information of the snapshot is unavailable at this location. This field is always and only present for replication locations. Its value is true if and only if the replicated snapshots are from pre-5.2 cluster.
          type: boolean
        isSnapshotPresent:
          description: Boolean that specifies whether the snapshot is present at this location. When this value is 'false,' the snapshot is expired at this location. Because retention information is unreliable for locations where the snapshots are not present, confirming that this value is 'true' is the best practice.
          type: boolean
        name:
          description: Name of the location.
          type: string
        snapshotFrequency:
          description: |
            The tag to determine what frequency the snapshot corresponds to at this location. The snapshot tag can be hourly, daily, weekly, monthly, quarterly, or yearly depending on the SLA frequency which is used to determine the retention of the snapshot. A value of "Ready for Deletion" means that the snapshot will be deleted soon. A value of "Forever" means that the snapshot will never be deleted. This field is absent when the tag computation is incomplete.
          type: string
      required:
        - id
        - isSnapshotPresent
        - name
      type: object
    SnapshotRetentionInfo:
      properties:
        archivalInfos:
          description: List of snapshot retention information on the archival locations.
          items:
            $ref: "#/components/schemas/SnapshotLocationRetentionInfo"
          type: array
        cloudNativeLocationInfo:
          description: |
            Snapshot retention information such as frequency tag and expected expiration time on the cloud native locations.
          items:
            $ref: "#/components/schemas/SnapshotLocationRetentionInfo"
          type: array
        localInfo:
          $ref: "#/components/schemas/SnapshotLocationRetentionInfo"
        replicationInfos:
          description: List of snapshot retention information on the replicated locations.
          items:
            $ref: "#/components/schemas/SnapshotLocationRetentionInfo"
          type: array
      required:
        - archivalInfos
        - cloudNativeLocationInfo
        - replicationInfos
      type: object
    SnapshotSortAttribute:
      description: Attributes that are available to use when sorting query results for snapshots.
      enum:
        - SnapshotDateAndTime
        - LocalExpirationDate
        - ArchivalLocation
      type: string
    SnapshotStorageStats:
      properties:
        historicIngestedBytes:
          description: Amount of bytes actually ingested for the snapshot. This value reflects the amount of bytes ingested during snapshot capture and remains consistent across different physical representations.
          format: int64
          type: integer
        ingestedBytes:
          description: Amount of bytes inferred to be ingested to our system for the snapshot. This may change for existing logical content, as physical representation of content changes.
          format: int64
          type: integer
        logicalBytes:
          description: Amount of logical bytes the snapshot represents.
          format: int64
          type: integer
        physicalBytes:
          description: Amount of bytes physically stored for the snapshot.
          format: int64
          type: integer
      required:
        - historicIngestedBytes
        - ingestedBytes
        - logicalBytes
        - physicalBytes
      type: object
    SnapshotSummary:
      properties:
        date:
          description: Time at which the snapshot was taken.
          format: date-time
          type: string
        id:
          description: ID of the snapshot.
          type: string
        isCustomRetentionApplied:
          description: |
            A Boolean value that indicates whether custom retention is applied to the specified snapshot. Value is true when custom retention is applied to the snapshot.
          type: boolean
        isRetentionLockApplied:
          description: |
            Indicates whether the snapshot is protected by a Retention Locked SLA Domain.
          type: boolean
        snapshotRetentionInfo:
          $ref: "#/components/schemas/SnapshotRetentionInfo"
        snapshotType:
          $ref: "#/components/schemas/UnmanagedSnapshotType"
      required:
        - date
        - id
        - isCustomRetentionApplied
        - isRetentionLockApplied
        - snapshotRetentionInfo
        - snapshotType
      type: object
    SnapshotSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/SnapshotSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    SnapshotType:
      description: Specifies the type of snapshots to be returned.
      enum:
        - OnDemand
        - Scheduled
        - Protected
        - Unprotected
      type: string
    SoftwareAvailability:
      description: |
        Specifies the source from which the CDM software is available.
      enum:
        - LocalCluster
        - LocalNode
        - Remote
        - Downloading
      type: string
    SortColumn:
      description: Columns that jobs can be sorted on.
      enum:
        - StartTime
        - JobStatus
        - JobType
        - ObjectType
        - SlaDomainName
        - EndTime
        - ObjectLogicalSize
        - DataTransferred
        - Duration
        - ObjectName
      type: string
    SortOrder:
      description: Sort order.
      enum:
        - asc
        - desc
      type: string
    StageCdmSoftwareInfo:
      properties:
        md5sum:
          description: The MD5 checksum for the CDM software package.
          type: string
        packageUrl:
          description: |
            The URL where the package that contains CDM software is located.
          type: string
        size:
          description: Size, in bytes, of the package containing CDM software.
          format: int64
          type: integer
        skipDownload:
          default: false
          description: Specifies whether to download the CDM software externally. When this value is false, the CDM software package must be available on the cluster. When this value is true, provide the version.
          type: boolean
        version:
          description: |
            The version of the CDM software package. If the version is not provided, an attempt is made to parse the version from the package URL. The version is not needed unless the Rubrik provided software package has been renamed.
          type: string
      required:
        - md5sum
        - packageUrl
      type: object
    StaticIpInfo:
      description: Information about static IP configuration.
      properties:
        dns_servers:
          description: DNS Servers for the specified IP addresses.
          items:
            type: string
          type: array
        gateway:
          description: Gateway for the specified IP addresses.
          type: string
        ip_addresses:
          description: IP addresses and ranges, separated by commas.
          items:
            type: string
          type: array
        subnet_mask:
          description: Subnet mask for the specified IP addresses.
          type: string
      required:
        - ip_addresses
        - subnet_mask
      type: object
    Status:
      properties:
        description:
          type: string
        status:
          type: string
      required:
        - status
      type: object
    StringResponse:
      properties:
        response:
          type: string
      required:
        - response
      type: object
    SubscriptionAttachmentType:
      description: Email subscription attachment file type.
      enum:
        - Csv
      type: string
    SubscriptionOwner:
      properties:
        userId:
          description: User ID of the email subscription object owner.
          type: string
        username:
          description: Username of the email subscription object owner.
          type: string
      required:
        - userId
        - username
      type: object
    SubscriptionScheduleTimeAttributes:
      properties:
        dailyScheduleHour:
          description: Hour of the day to send the scheduled email, if the user picks a daily schedule. 0 = 12AM, 23 = 11PM.
          format: int32
          type: integer
        dayOfMonth:
          description: Day of the month to send the scheduled email, if the user picks a monthly schedule.
          format: int32
          type: integer
        daysOfWeek:
          description: Day of the week, represented by numbers, to send the scheduled email, if the user picks a weekly schedule. 0 = Sunday, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday.
          items:
            format: int32
            type: integer
          type: array
        monthlyScheduleHour:
          description: Hour of the user-specified day to send the scheduled email, if the user picks a monthly schedule. 0 = 12AM, 23 = 11PM.
          format: int32
          type: integer
        weeklyScheduleHour:
          description: Hour of the user-specified day to send the scheduled email, if the user picks a weekly schedule. 0 = 12AM, 23 = 11PM.
          format: int32
          type: integer
      type: object
    SubscriptionStatus:
      description: Status of email subscription.
      enum:
        - Active
        - Suspended
        - Unknown
      type: string
    SupportDataConfig:
      properties:
        dataTypeToConfig:
          items:
            $ref: "#/components/schemas/SupportDataTypeConfig"
          type: array
      required:
        - dataTypeToConfig
      type: object
    SupportDataType:
      description: |
        The type of data that the Rubrik cluster uploads to Rubrik support. Valid data types are systemstats, errorlogs, traces, or uploads. System metrics such as CPU, memory, or storage are systemstats data. Errors encountered by the system, services or apps are errorlogs data. Routes followed by processes are traces data. Bundled data such as support bundles, report bundles, or metadata tables are uploads data.
      enum:
        - systemstats
        - errorlogs
        - traces
        - uploads
        - capacityutilization
      type: string
    SupportDataTypeConfig:
      properties:
        dataType:
          $ref: "#/components/schemas/SupportDataType"
        shouldToggleChisel:
          default: false
          description: Controls all the traffic to/from the Rubrik cluster. If set to true, and the user opts-out, this flag will be used to disable all telemetry, including the creation of the support tunnel. If the user opts-in, the flag will be used to enable a service to allow traffic movement to/from the Rubrik cluster.
          type: boolean
        status:
          $ref: "#/components/schemas/SupportDataTypeStatus"
      required:
        - dataType
        - status
      type: object
    SupportDataTypeStatus:
      description: |
        Specifies whether upload of support data of a given type is enabled or disabled.
      enum:
        - enabled
        - disabled
      type: string
    SyslogExportRuleFull:
      properties:
        certificateId:
          description: |
            The ID corresponding to the imported certificate used by the syslog server.
          type: string
        enableTls:
          description: |
            Specifies whether TLS should be used to communicate with the syslog server.
          type: boolean
        facility:
          $ref: "#/components/schemas/SyslogFacility"
        hostname:
          type: string
        port:
          format: int32
          type: integer
        protocol:
          $ref: "#/components/schemas/TransportLayerProtocol"
        severity:
          $ref: "#/components/schemas/SyslogSeverity"
      required:
        - enableTls
        - facility
        - hostname
        - port
        - protocol
        - severity
      type: object
    SyslogExportRulePartial:
      properties:
        certificateId:
          description: |
            The ID corresponding to the imported certificate used by the syslog server.
          type: string
        enableTls:
          description: |
            Specifies whether TLS should be used to communicate with the syslog server.
          type: boolean
        facility:
          $ref: "#/components/schemas/SyslogFacility"
        hostname:
          type: string
        port:
          format: int32
          type: integer
        protocol:
          $ref: "#/components/schemas/TransportLayerProtocol"
        severity:
          $ref: "#/components/schemas/SyslogSeverity"
      type: object
    SyslogExportRuleSummary:
      allOf:
        - $ref: "#/components/schemas/SyslogExportRuleFull"
        - properties:
            id:
              description: ID corresponding to the syslog export rule.
              type: string
          required:
            - id
          type: object
    SyslogExportRuleSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/SyslogExportRuleSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    SyslogFacility:
      description: The syslog message classification based on RFC 5424.
      enum:
        - Kernel
        - User
        - Mail
        - Daemon
        - Auth
        - Syslog
        - Lpr
        - News
        - UUCP
        - Cron
        - Security
        - FTP
        - NTP
        - LogAudit
        - LogAlert
        - Clock
        - RubrikEvent
        - RubrikCLI
        - RubrikSSH
        - RubrikApp
        - All
      type: string
    SyslogMsgMibFileDownloadLink:
      properties:
        downloadLink:
          description: Download link for the SYSLOG-MSG-MIB file.
          type: string
      required:
        - downloadLink
      type: object
    SyslogServerTestResult:
      properties:
        message:
          description: The test message that was sent.
          type: string
      required:
        - message
      type: object
    SyslogSeverity:
      description: The syslog message severity based on RFC 5424.
      enum:
        - Emergency
        - Alert
        - Critical
        - Error
        - Warning
        - Notice
        - Informational
        - Debug
        - All
      type: string
    SyslogTcMibFileDownloadLink:
      properties:
        downloadLink:
          description: Download link for the SYSLOG-TC-MIB file.
          type: string
      required:
        - downloadLink
      type: object
    TelemetryConfig:
      properties:
        telemetryLevel:
          $ref: "#/components/schemas/TelemetryLevel"
      required:
        - telemetryLevel
      type: object
    TelemetryLevel:
      description: |
        The level of telemetry set for the cluster. Basic is only stats while Full includes stats and logs.
      enum:
        - Basic
        - Disabled
        - Full
      type: string
    TotpConfigUpdateRequest:
      properties:
        otpForValidation:
          description: |
            String containing a one time password for the time-based one time password (TOTP) authentication method.
          type: string
          x-secret: true
        secret:
          description: |
            String containing a secret key for the time-based one time password (TOTP) authentication method.
          type: string
          x-secret: true
      required:
        - otpForValidation
        - secret
      type: object
    TotpGlobalSetting:
      properties:
        isEnforced:
          description: Indicates whether the TOTP is enforced globally or not.
          type: boolean
      required:
        - isEnforced
      type: object
    TotpGlobalSettingUpdate:
      properties:
        isEnforced:
          description: Indicates whether the TOTP is enforced globally or not.
          type: boolean
      required:
        - isEnforced
      type: object
    TotpSecret:
      properties:
        secret:
          description: |
            String containing a generated secret key for the time-based one time password (TOTP) authentication method.
          type: string
        secretUri:
          description: |
            String containing a generated URI for the time-based one time password (TOTP) authentication method. The URI includes the secret key and configuration information.
          type: string
      required:
        - secret
        - secretUri
      type: object
    TotpStatus:
      properties:
        isEnabled:
          description: |
            Boolean value that indicates whether the time-based one time password (TOTP) authentication method is enabled. Returns Yes when TOTP is enable and No when it is not.
          type: boolean
        isEnforced:
          description: |
            Boolean value that indicates whether the time-based one time password (TOTP) authentication method is being enforced. Returns Yes when TOTP is enforced and No when it is not.
          type: boolean
      required:
        - isEnabled
        - isEnforced
      type: object
    TransportLayerProtocol:
      description: The network protocol to use, either UDP or TCP.
      enum:
        - TCP
        - UDP
      type: string
    TruststorePayload:
      properties:
        certIds:
          items:
            description: Certificate to associate with truststore.
            type: string
          type: array
        truststoreType:
          $ref: "#/components/schemas/TruststoreType"
      required:
        - certIds
        - truststoreType
      type: object
    TruststoreSummary:
      properties:
        certificates:
          description: Signed certificate associated with truststore.
          items:
            $ref: "#/components/schemas/CertificateSummary"
          type: array
        truststoreType:
          $ref: "#/components/schemas/TruststoreType"
      required:
        - certificates
        - truststoreType
      type: object
    TruststoreSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/TruststoreSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    TruststoreType:
      description: The truststore type.
      enum:
        - System
        - Gcp
      type: string
    UnmanagedObjectDetails:
      properties:
        archiveStorage:
          description: The amount of storage on the archival location used by unmanaged snapshots.
          format: int64
          type: integer
        hasSnapshotsWithPolicy:
          description: |
            A boolean that specifies whether any of the snapshots for this object are being retained by a SLA Domain at any location.
          type: boolean
        id:
          type: string
        isRemote:
          description: |
            Boolean that specifies whether the object is remote or local. A value of true indicates that the object is remote.
          type: boolean
        localStorage:
          description: The amount of storage on the local cluster used by unmanaged snapshots.
          format: int64
          type: integer
        name:
          type: string
        objectType:
          description: The type of the unmanaged object. Valid object types are VirtualMachine, MssqlDatabase, LinuxFileset, ShareFileset, WindowsFileset, NutanixVirtualMachine, Ec2Instance and StorageArrayVolumeGroup.
          enum:
            - VirtualMachine
            - MssqlDatabase
            - LinuxFileset
            - WindowsFileset
            - ShareFileset
            - NutanixVirtualMachine
            - HypervVirtualMachine
            - ManagedVolume
            - Ec2Instance
            - StorageArrayVolumeGroup
            - VcdVapp
            - LinuxHost
            - WindowsHost
            - OracleDatabase
            - VolumeGroup
            - AppBlueprint
          type: string
        pendingSlaDomain:
          $ref: "#/components/schemas/ManagedObjectPendingSlaInfo"
        physicalLocation:
          description: Summary information of all objects on the physical path to this object.
          items:
            $ref: "#/components/schemas/LocationPathPoint"
          type: array
        recoveryInfo:
          $ref: "#/components/schemas/SnappableRecoveryInfo"
        retentionSlaDomainId:
          description: ID assigned to an SLA Domain retention policy.
          type: string
        retentionSlaDomainName:
          description: Name of an SLA Domain retention policy.
          type: string
        retentionSlaDomainPolarisManagedId:
          description: Optional field with the ID assigned to an SLA Domain by Polaris.
          type: string
        snapshotCount:
          description: Total number of snapshots to for the specified object.
          format: int64
          type: integer
        unmanagedStatus:
          description: Unmanaged Status of this object. Protected means that this object is still protected by an SLA Policy. Unprotected means that this object has become unprotected. Relic means that Rubrik has lost contact with this object.
          enum:
            - Protected
            - Relic
            - Unprotected
            - ReplicatedRelic
            - RemoteUnprotected
          type: string
      required:
        - archiveStorage
        - hasSnapshotsWithPolicy
        - id
        - localStorage
        - name
        - objectType
        - physicalLocation
        - retentionSlaDomainId
        - retentionSlaDomainName
        - snapshotCount
        - unmanagedStatus
      type: object
    UnmanagedObjectDetailsListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/UnmanagedObjectDetails"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    UnmanagedObjectSlaAssignmentInfo:
      properties:
        managedIds:
          items:
            type: string
          type: array
        shouldApplyToNonPolicySnapshots:
          type: boolean
        slaDomainId:
          type: string
      required:
        - managedIds
        - slaDomainId
      type: object
    UnmanagedObjectSortAttribute:
      description: Attributes that are available to use when sorting query results for unmanaged objects.
      enum:
        - Name
        - UnmanagedStatus
        - Location
        - UnmanagedSnapshotCount
        - LocalStorage
        - ArchiveStorage
        - RetentionSlaDomainName
        - ObjectType
        - SnapshotCount
        - AutoSnapshotCount
        - ManualSnapshotCount
      type: string
    UnmanagedObjectStatus:
      description: Attributes that are available to use when filtering query results based on unmanaged object status.
      enum:
        - Protected
        - Relic
        - Unprotected
        - ReplicatedRelic
        - RemoteUnprotected
      type: string
    UnmanagedObjectSummary:
      properties:
        archiveStorage:
          description: Storage being taken up in the archival location by unmanaged snapshots.
          format: int64
          type: integer
        autoSnapshotCount:
          description: Number of policy-based snapshots to retain for the specified object.
          format: int64
          type: integer
        hasSnapshotsWithPolicy:
          description: |
            A boolean that specifies whether any of the snapshots for this object are being retained by a SLA  at any location.
          type: boolean
        id:
          type: string
        isRemote:
          description: A boolean that specifies if the object is remote or local. When this value is true, the object is remote.
          type: boolean
        localStorage:
          description: Storage being taken up on the local cluster by unmanaged snapshots.
          format: int64
          type: integer
        manualSnapshotCount:
          description: Number of on-demand snapshots and snapshots retrieved from an archival location for specified object.
          format: int64
          type: integer
        name:
          type: string
        objectType:
          description: The type of the unmanaged object. This may be VirtualMachine, MssqlDatabase, LinuxFileset, ShareFileset, WindowsFileset, NutanixVirtualMachine, Ec2Instance or StorageArrayVolumeGroup.
          enum:
            - VirtualMachine
            - MssqlDatabase
            - LinuxFileset
            - WindowsFileset
            - ShareFileset
            - NutanixVirtualMachine
            - HypervVirtualMachine
            - ManagedVolume
            - Ec2Instance
            - StorageArrayVolumeGroup
            - VcdVapp
            - LinuxHost
            - WindowsHost
            - OracleDatabase
            - VolumeGroup
            - AppBlueprint
          type: string
        pendingSlaDomain:
          $ref: "#/components/schemas/ManagedObjectPendingSlaInfo"
        physicalLocation:
          description: Brief info of all the objects in the physical path to this Object.
          items:
            $ref: "#/components/schemas/LocationPathPoint"
          type: array
        recoveryInfo:
          $ref: "#/components/schemas/SnappableRecoveryInfo"
        retentionSlaDomainId:
          description: ID assigned to an SLA retention policy.
          type: string
        retentionSlaDomainName:
          description: Name of an SLA retention policy.
          type: string
        retentionSlaDomainPolarisManagedId:
          description: Optional field with the ID assigned to an SLA Domain by Polaris.
          type: string
        unmanagedStatus:
          description: Unmanaged Status of this object. Protected means that this object is still protected by an SLA Policy. Unprotected means that this object has become unprotected. Relic means that Rubrik has lost contact with this object.
          enum:
            - Protected
            - Relic
            - Unprotected
            - ReplicatedRelic
            - RemoteUnprotected
          type: string
      required:
        - archiveStorage
        - autoSnapshotCount
        - hasSnapshotsWithPolicy
        - id
        - localStorage
        - manualSnapshotCount
        - name
        - objectType
        - physicalLocation
        - retentionSlaDomainId
        - retentionSlaDomainName
        - unmanagedStatus
      type: object
    UnmanagedObjectSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/UnmanagedObjectSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    UnmanagedObjectType:
      description: Attributes that are available to use when filtering query results based on unmanaged object type.
      enum:
        - VirtualMachine
        - MssqlDatabase
        - LinuxFileset
        - WindowsFileset
        - ShareFileset
        - NutanixVirtualMachine
        - HypervVirtualMachine
        - ManagedVolume
        - Ec2Instance
        - StorageArrayVolumeGroup
        - VcdVapp
        - LinuxHost
        - WindowsHost
        - OracleDatabase
        - VolumeGroup
        - AppBlueprint
      type: string
    UnmanagedSnapshotType:
      description: |
        Attributes that are available to use when filtering query results based on snapshot type.
      enum:
        - OnDemand
        - PolicyBased
        - Retrieved
      type: string
    UpdateMountConfig:
      properties:
        powerStatus:
          description: True to power on, false to power off.
          type: boolean
        shouldForce:
          description: A Boolean that specifies whether to forcibly power down a virtual machine that is already mounted with Storage vMotion. When this value is 'true', the virtual machine is forcibly powered down. The default value for this Boolean is 'false'.
          type: boolean
      required:
        - powerStatus
      type: object
    UserActionV1:
      description: Type of an user action.
      enum:
        - Assign
        - Create
        - Delete
        - Update
      type: string
    VappAttributes:
      properties:
        isVappTemplate:
          description: Indicates whether the vCD hierarchy object is a vApp template object.
          type: boolean
      required:
        - isVappTemplate
      type: object
    VappExportMode:
      description: Target type for the specified vApp export.
      enum:
        - ExportToNewVapp
        - ExportToTargetVapp
      type: string
    VappExportOptions:
      properties:
        allChildVmsWithDefaultNetworkConnections:
          description: Array containing summary information for the vApp virtual machines in the specified vApp snapshot, including the default network mappings.
          items:
            $ref: "#/components/schemas/VappVmRestoreSpec"
          type: array
        availableStoragePolicies:
          description: Storage policies that can be used as a target for virtual machines being exported.
          items:
            $ref: "#/components/schemas/VcdOrgVdcStorageProfile"
          type: array
        restorableNetworks:
          description: Array of vApp networks in the vApp snapshot being exported that can be enabled at the export location.
          items:
            $ref: "#/components/schemas/CreateVappNetworkParams"
          type: array
        targetVappNetworks:
          description: Array of vApp networks at the export location that can be connected to the vApp virtual machines in the exported vApp snapshot.
          items:
            $ref: "#/components/schemas/VappNetworkSummary"
          type: array
      required:
        - allChildVmsWithDefaultNetworkConnections
        - availableStoragePolicies
        - restorableNetworks
      type: object
    VappExportSnapshotJobConfig:
      properties:
        exportMode:
          $ref: "#/components/schemas/VappExportMode"
        networksToRestore:
          description: Array of vApp networks that are in the specified vApp snapshot and should be set up as part of the export operation. A vApp network that is not included in the array will not be set up in the exported vApp.
          items:
            $ref: "#/components/schemas/CreateVappNetworkParams"
          type: array
        newVappParams:
          $ref: "#/components/schemas/CreateNewVappParams"
        shouldPowerOnVappAfterExport:
          default: false
          description: Boolean value that indicates whether to power on the exported vApp. Use 'true' to turn the power on for the exported vApp or use 'false' to leave the power off for the exported vApp.
          type: boolean
        targetVappId:
          description: ID assigned to the target vApp object, when the export is into an existing vApp. When the export is not into a target vApp, remove the 'targetVappId' member.
          type: string
        vmsToExport:
          description: An array containing summary information for the virtual machines included in the vApp export.
          items:
            $ref: "#/components/schemas/VappVmRestoreSpec"
          type: array
      required:
        - exportMode
        - networksToRestore
        - vmsToExport
      type: object
    VappInstantRecoveryJobConfig:
      properties:
        shouldPowerOnVmsAfterRecovery:
          default: false
          description: Boolean value that indicates whether to power on the recovered virtual machines in a vApp after Instant Recovery. Use 'true' to turn the power on for the recovered virtual machines or use 'false' to leave the power off for the virtual machines.
          type: boolean
        vmsToRestore:
          description: An array containing the restore specification for an Instant Recovery of virtual machines in a vApp snapshot.
          items:
            $ref: "#/components/schemas/VappVmRestoreSpec"
          type: array
      required:
        - vmsToRestore
      type: object
    VappInstantRecoveryOptions:
      properties:
        availableVappNetworks:
          description: An array of network connections available through the specified vApp object.
          items:
            $ref: "#/components/schemas/VappNetworkSummary"
          type: array
        restorableVms:
          description: An array of virtual machines that can be restored and their associated default network connections.
          items:
            $ref: "#/components/schemas/VappVmRestoreSpec"
          type: array
      required:
        - availableVappNetworks
        - restorableVms
      type: object
    VappNetworkMode:
      description: Mode of connection of a vApp network to a vCloud organization VDC network.
      enum:
        - Isolated
        - NATRouted
        - Bridged
      type: string
    VappNetworkSummary:
      properties:
        isDeployed:
          description: Boolean value that indicates whether the specified vApp network object has been deployed. Value is 'true' when the vApp network object has been deployed and 'false' when it has not been deployed.
          type: boolean
        name:
          description: Name of the specified vApp network object.
          type: string
        parentNetworkId:
          description: vCloud Director ID of the associated organization VDC network object. For an Isolated network, the value is empty.
          type: string
      required:
        - isDeployed
        - name
      type: object
    VappTemplateExportJobConfig:
      properties:
        catalogId:
          description: ID of the target catalog.
          type: string
        name:
          description: Name of vApp template.
          type: string
        orgVdcId:
          description: ID of the target organization vDC.
          type: string
        storagePolicyId:
          description: ID of the storage policy of the organization VDC used to create the template. When this field is absent, the default from the organization vDC is used.
          type: string
      required:
        - catalogId
        - name
        - orgVdcId
      type: object
    VappTemplateExportOptions:
      properties:
        availableStoragePolicies:
          description: An array of the available storage profile policies where the vApp snapshot can be exported.
          items:
            $ref: "#/components/schemas/VcdOrgVdcStorageProfile"
          type: array
        orgVdcId:
          description: The ID of the organization vDC where the vApp template can be exported.
          type: string
      required:
        - availableStoragePolicies
        - orgVdcId
      type: object
    VappTemplateExportOptionsUnion:
      description: Provides different options available for a vApp template snapshot export. Fields that correspond to unavailable choices are skipped.
      properties:
        advancedExportOptions:
          $ref: "#/components/schemas/VappTemplateExportOptions"
        defaultCatalogExportOptions:
          $ref: "#/components/schemas/VappTemplateExportOptions"
        originalVdcExportOptions:
          $ref: "#/components/schemas/VappTemplateExportOptions"
      type: object
    VappVmDetail:
      allOf:
        - $ref: "#/components/schemas/VappVmSummary"
        - properties:
            vcenterVm:
              $ref: "#/components/schemas/VirtualMachineDetail"
          type: object
    VappVmIpAddressingMode:
      description: Method used to allocate IP addresses for the specified vApp network.
      enum:
        - DHCP
        - Manual
        - Pool
        - None
      type: string
    VappVmNetworkConnection:
      properties:
        addressingMode:
          $ref: "#/components/schemas/VappVmIpAddressingMode"
        ipAddress:
          description: IPv4 address to assign to the specified vApp network connection. Set this value only when the network address allocation method is 'Static'. Otherwise, the value should be empty.
          type: string
        isConnected:
          description: Boolean value that indicates whether the specified vApp network connection is enabled. Set the value to 'true' to enable the connection or 'false' to disable the connection.
          type: boolean
        macAddress:
          description: MAC address of the NIC that is used by the specified vApp network connection.
          type: string
        networkAdapterType:
          description: The network adapter type of the NIC.
          type: string
        nicIndex:
          description: Index assigned to the NIC that is used by the specified vApp network connection.
          format: int32
          type: integer
        vappNetworkName:
          description: Name of the vApp network to which the NIC corresponding to this connection will connect to.
          type: string
      required:
        - addressingMode
        - isConnected
        - nicIndex
      type: object
    VappVmRestoreSpec:
      properties:
        name:
          description: Name of the specified vApp virtual machine within vCloud.
          type: string
        networkConnections:
          items:
            $ref: "#/components/schemas/VappVmNetworkConnection"
          type: array
        storagePolicyId:
          description: Storage policy where this vApp virtual machine should be restored to. If omitted, the virtual machines will be exported to the default storage policy of the target Organization VDC.
          type: string
        vcdMoid:
          description: vCloud managed object ID (moid) of the specified vApp virtual machine.
          type: string
      required:
        - name
        - networkConnections
        - vcdMoid
      type: object
    VappVmSummary:
      allOf:
        - $ref: "#/components/schemas/VappVmRestoreSpec"
        - properties:
            storagePolicyId:
              description: Storage policy where this vApp virtual machine should be restored to. If omitted, the virtual machines will be exported to the default storage policy of the target Organization VDC.
              type: string
          required:
            - storagePolicyId
          type: object
    VcdClusterBaseConfig:
      properties:
        caCerts:
          description: Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
          type: string
        hostname:
          type: string
        username:
          type: string
      required:
        - hostname
        - username
      type: object
    VcdClusterConfig:
      allOf:
        - $ref: "#/components/schemas/VcdClusterBaseConfig"
        - properties:
            password:
              type: string
              x-secret: true
          required:
            - password
          type: object
    VcdClusterDetail:
      allOf:
        - $ref: "#/components/schemas/VcdClusterSummary"
    VcdClusterListSortAttribute:
      description: Attributes that are available to use when sorting query results for vCD Cluster objects.
      enum:
        - Name
        - Status
      type: string
    VcdClusterPatch:
      properties:
        caCerts:
          description: Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
          type: string
        configuredSlaDomainId:
          description: Assign this Vcd Cluster to the given SLA Domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
          type: string
        hostname:
          type: string
        password:
          type: string
          x-secret: true
        username:
          type: string
      type: object
    VcdClusterSummary:
      allOf:
        - $ref: "#/components/schemas/SlaAssignable"
        - $ref: "#/components/schemas/VcdClusterBaseConfig"
        - properties:
            connectionStatus:
              $ref: "#/components/schemas/VcdConnectionStatus"
            id:
              description: ID assigned to a vCD Cluster object.
              type: string
          required:
            - id
          type: object
    VcdClusterSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/VcdClusterSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    VcdConnectionStatus:
      properties:
        message:
          description: Status details for a specified vCD Cluster object. Empty except when the status of the vCD Cluster object is 'BadlyConfigured'.
          type: string
        status:
          $ref: "#/components/schemas/RefreshableObjectConnectionStatusType"
      required:
        - status
      type: object
    VcdHierarchyObjectAttributes:
      description: attributes pertaining to each vCD hierarchy object.
      properties:
        vappAtributes:
          $ref: "#/components/schemas/VappAttributes"
      type: object
    VcdHierarchyObjectDescendantCount:
      properties:
        catalog:
          description: Number of descendant vCD catalog objects in a specified; hierarchy.
          format: int32
          type: integer
        connectedVimServer:
          description: Number of descendant VIM Server objects that are linked to a vCenter Server object.
          format: int32
          type: integer
        disconnectedVimServer:
          description: Number of descendant VIM Server objects that are not linked to a vCenter Server object.
          format: int32
          type: integer
        org:
          description: Number of descendant Organization objects in a specified hierarchy.
          format: int32
          type: integer
        orgVdc:
          description: Number of descendant virtual data center objects in a specified hierarchy.
          format: int32
          type: integer
        vApp:
          description: Number of descendant vApp objects in a specified hierarchy.
          format: int32
          type: integer
        vcdCluster:
          description: Number of descendant vCD cluster objects in a specified hierarchy.
          format: int32
          type: integer
      type: object
    VcdHierarchyObjectSortAttribute:
      description: Attributes that are available to use when sorting query results for vCD hierarchy objects.
      enum:
        - Name
        - EffectiveSlaDomainName
        - SlaAssignment
        - ConnectionStatus
        - VappCount
      type: string
    VcdHierarchyObjectSummary:
      allOf:
        - $ref: "#/components/schemas/ManagedHierarchyObjectSummary"
        - properties:
            connectionStatus:
              $ref: "#/components/schemas/VcdConnectionStatus"
            descendantCount:
              $ref: "#/components/schemas/VcdHierarchyObjectDescendantCount"
            extendedAttributes:
              $ref: "#/components/schemas/VcdHierarchyObjectAttributes"
            ipAddress:
              description: IPv4 address for a vCD cluster or vCenter Server that is managed through a VIM Server.
              type: string
            isDeleted:
              description: Indicates whether the vCD hierarchy object is deleted.
              type: boolean
            objectType:
              $ref: "#/components/schemas/VcdObjectType"
            pendingSlaDomain:
              $ref: "#/components/schemas/ManagedObjectPendingSlaInfo"
            vcenterId:
              description: ID assigned to a vCenter Server instance that is managed through a VIM Server.
              type: string
          required:
            - descendantCount
            - isDeleted
            - objectType
          type: object
    VcdHierarchyObjectSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/VcdHierarchyObjectSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    VcdObjectType:
      description: Types of object that can be present in the vCD hierarchy.
      enum:
        - Cluster
        - VimServer
        - Org
        - OrgVdc
        - Catalog
        - vApp
      type: string
    VcdOrgVdcStorageProfile:
      properties:
        id:
          description: ID assigned to the Organization VDC storage profile.
          type: string
        name:
          description: Name of the Organization VDC storage profile.
          type: string
      required:
        - id
        - name
      type: object
    VcdVappDetail:
      allOf:
        - $ref: "#/components/schemas/VcdVappPatch"
        - $ref: "#/components/schemas/VcdVappSummary"
        - properties:
            isPaused:
              description: Boolean value that indicates whether protection activity is paused for the specified vApp. Set to 'true' when protection activity is paused and 'false' when protection activity is not paused. Protection activity includes backup, replication, and archiving.
              type: boolean
            networks:
              description: Array that lists the vApp network objects that exist in the specified vApp object.
              items:
                $ref: "#/components/schemas/VappNetworkSummary"
              type: array
            vms:
              description: Array containing detailed information for all of the vApp virtual machine objects.
              items:
                $ref: "#/components/schemas/VappVmDetail"
              type: array
          required:
            - isPaused
            - networks
            - vms
          type: object
    VcdVappObjectSortAttribute:
      description: Attributes that are available to use when sorting query results for vApp objects.
      enum:
        - Name
        - EffectiveSlaDomainName
        - SlaAssignment
      type: string
    VcdVappPatch:
      properties:
        configuredSlaDomainId:
          description: ID assigned to the SLA Domain object that manages protection for the specified vApp object. Existing snapshots of the object will be retained with the configuration of the specified SLA Domain.
          type: string
        isBestEffortSynchronizationEnabled:
          description: Boolean value that indicates whether the Rubrik cluster should attempt taking synchronized snapshots across all child virtual machines of the vApp.
          type: boolean
        isPaused:
          description: Boolean value that indicates whether protection activity is paused for the specified vApp. Set to 'true' when protection activity is paused and 'false' when protection activity is not paused. Protection activity includes backup, replication, and archiving.
          type: boolean
        vcdVmMoidsToExcludeFromSnapshot:
          description: Array containing vCloud Director virtual machine moids that will be excluded from vApp snapshots.
          items:
            type: string
          type: array
      type: object
    VcdVappSlaObjectCount:
      properties:
        numVcdVapps:
          description: The number of vApps protected under this SLA Domain.
          format: int32
          type: integer
      type: object
    VcdVappSnapshotDetail:
      allOf:
        - $ref: "#/components/schemas/BaseSnapshotSummary"
        - $ref: "#/components/schemas/VcdVappSnapshotSummaryDetailSharedFields"
        - properties:
            excludedVcdVmMoids:
              description: Array that lists the Virtual Machines of the vApp that where excluded from the snapshot.
              items:
                type: string
              type: array
            networks:
              description: Array that lists the vApp networks in the vApp at the time of the snapshot.
              items:
                $ref: "#/components/schemas/VappNetworkSummary"
              type: array
            vmSnapshots:
              items:
                $ref: "#/components/schemas/VcdVmSnapshotDetail"
              type: array
          required:
            - networks
            - vmSnapshots
          type: object
    VcdVappSnapshotSummary:
      allOf:
        - $ref: "#/components/schemas/BaseSnapshotSummary"
        - $ref: "#/components/schemas/VcdVappSnapshotSummaryDetailSharedFields"
        - properties:
            vmSnapshots:
              items:
                $ref: "#/components/schemas/VcdVmSnapshotSummary"
              type: array
          required:
            - vmSnapshots
          type: object
    VcdVappSnapshotSummaryDetailSharedFields:
      properties:
        isSynchronized:
          description: Boolean value that indicates whether a vApp snapshot is synchronized with the source vApp. Set to 'true' when the vApp snapshot is synchronized, and set to 'false' when it is not synchronized.
          type: boolean
        vappName:
          description: ID assigned to the vApp object that is the source of the specified snapshot object.
          type: string
      required:
        - vappName
      type: object
    VcdVappSnapshotSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/VcdVappSnapshotSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    VcdVappSummary:
      allOf:
        - $ref: "#/components/schemas/Snappable"
        - properties:
            catalogId:
              description: ID of the parent catalog if the vApp object is a template.
              type: string
            currentBackupTaskInfo:
              $ref: "#/components/schemas/BackupTaskDiagnosticInfo"
            id:
              description: ID assigned to a vCD vApp object.
              type: string
            includeBackupTaskInfo:
              description: Boolean value that indicates if backup task information isincluded in the response.
              type: boolean
            infraPath:
              description: Brief information of all the objects in the infrastructure path to this vCD vApp object.
              items:
                $ref: "#/components/schemas/ManagedHierarchyObjectAncestor"
              type: array
            isRelic:
              description: Boolean value that indicates whether a vApp is present on the specified vCD cluster. Set to 'true' when the vApp is present and 'false' when the vApp is not present.
              type: boolean
            isTemplate:
              description: A Boolean value that indicates whether the vApp object is a template. When this value is 'true,' the vApp object is a template. When this value is 'false,' the vApp object is not a template.
              type: boolean
            lastSnapshotTime:
              description: The timestamp of the previous snapshot.
              format: date-time
              type: string
            name:
              description: Name assigned to a vCD vApp object.
              type: string
            numMissedSnapshot:
              description: An integer that specifies the number of missed snapshots.
              format: int32
              type: integer
            pendingSlaDomain:
              $ref: "#/components/schemas/ManagedObjectPendingSlaInfo"
            vcdClusterId:
              description: ID assigned to a vCD Cluster object that contains a specified vApp object.
              type: string
            vcdClusterName:
              description: Name assigned to a vCD Cluster object that contains a specified vApp object.
              type: string
          required:
            - id
            - infraPath
            - name
            - numMissedSnapshot
          type: object
    VcdVappSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/VcdVappSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    VcdVmSnapshotDetail:
      allOf:
        - $ref: "#/components/schemas/VcdVmSnapshotSummary"
        - properties:
            networkConnections:
              description: Array of networks present in the virtual machine at the time of the snapshot.
              items:
                $ref: "#/components/schemas/VappVmNetworkConnection"
              type: array
          required:
            - networkConnections
          type: object
    VcdVmSnapshotSummary:
      properties:
        indexState:
          description: |
            Integer value representing the state of the indexing job for a snapshot. 0 means that the indexing has not begun or is in progress. 1 means indexing completed successfully. 2 means that the indexer failed to process this snapshot.
          format: int64
          type: integer
        vcdVmMoid:
          description: Id assigned by vCloud Director to the virtual machine of the specified snapshot.
          type: string
        vcenterVmId:
          description: ID assigned to the object that represents the virtual machine that is the source of a specified snapshot object.
          type: string
        vmName:
          description: Name of the virtual machine object of the snapshot.
          type: string
        vmSnapshotId:
          description: ID assigned to the object that represents a virtual machine snapshot.
          type: string
      required:
        - vcdVmMoid
        - vcenterVmId
        - vmName
        - vmSnapshotId
      type: object
    VcenterConfig:
      properties:
        caCerts:
          description: Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
          type: string
        computeVisibilityFilter:
          description: Select compute clusters that must be visible to this Rubrik cluster. All other compute resources are hidden. If 'computeVisibilityFilter' is not specified, all resources are visible. If 'hostGroupFilter' is not specified for a compute cluster, all compute resources in the compute cluster are visible. If 'hostGroupFilter' is specified for a compute cluster, only virtual machinesthat currently reside on these hosts are visible. For the stretched cluster configuration (vMSC), specify the appropriate host groups.
          items:
            $ref: "#/components/schemas/ClusterVisibilityConfig"
          type: array
        conflictResolutionAuthz:
          description: Set to 'AllowAutoConflictResolution' to link the relic virtual machine objects of a virtual machine to the current object for the virtual machine or to 'NoConflictResolution' to prevent linking. The Rubrik cluster generates a unique ID for each virtual machine when a vCenter Server is added. When a virtual machine changes to another vCenter Server or unregisters and registers with the same vCenter Server, a new unique ID is generated for that virtual machine. When this happens, the virtual machine object associated with the original ID becomes a relic. This option links relic virtual machine objects with the current virtual machine object of a specific virtual machine, and makes the collective snapshot history available through the current object. Default value is 'NoConflictResolution'.
          enum:
            - AllowAutoConflictResolution
            - NoConflictResolution
          type: string
        hostname:
          type: string
        password:
          type: string
          x-secret: true
        username:
          type: string
      required:
        - hostname
        - password
        - username
      type: object
    VcenterConnectionConfig:
      properties:
        caCerts:
          description: Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
          type: string
        hostname:
          description: Hostname of the new vCenter.
          type: string
        password:
          description: Password for the new vCenter.
          type: string
          x-secret: true
        username:
          description: Username of the new vCenter.
          type: string
      required:
        - hostname
        - password
        - username
      type: object
    VcenterDetail:
      allOf:
        - $ref: "#/components/schemas/VcenterSummary"
        - properties:
            status:
              description: Status of a vCenter. DEPRECATED. Please use connectionStatus.
              type: string
          required:
            - status
          type: object
    VcenterPatch:
      properties:
        caCerts:
          description: Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----. Use an empty string to remove the existing certificates for the vCenter.
          type: string
        configuredSlaDomainId:
          description: ID of the SLA Domain that is configured for this vCenter Server.
          type: string
      type: object
    VcenterPreAddConfig:
      properties:
        connectionConfig:
          $ref: "#/components/schemas/VcenterConnectionConfig"
        id:
          description: Id of the vCenter. Specify this if the vCenter is already added to the Rubrik cluster.
          type: string
      type: object
    VcenterPreAddInfo:
      properties:
        clusterHostGroupInfo:
          description: List of compute clusters present in the vCenter, including the host groups each cluster contains.
          items:
            $ref: "#/components/schemas/ClusterHostGroupInfo"
          type: array
      required:
        - clusterHostGroupInfo
      type: object
    VcenterSummary:
      allOf:
        - $ref: "#/components/schemas/VcenterPatch"
        - $ref: "#/components/schemas/SlaAssignable"
        - properties:
            computeVisibilityFilter:
              description: Compute clusters that are visible to this Rubrik Cluster. All other compute resources are hidden. If 'computeVisibilityFilter' is not specified, all resources are visible. If 'hostGroupFilter' is not specified for a compute cluster, all compute resources in the compute cluster are visible. If a 'hostGroupFilter' is specified for a compute cluster, only vms that currently reside on these hosts are visible.
              items:
                $ref: "#/components/schemas/ClusterVisibilityInfo"
              type: array
            configuredSlaDomainPolarisManagedId:
              description: Optional field containing Polaris managed id of the configured SLA domain if it is Polaris managed.
              type: string
            conflictResolutionAuthz:
              description: Set to 'AllowAutoConflictResolution' to link the relic virtual machine objects of a virtual machine to the current object for the virtual machine or to 'NoConflictResolution' to prevent linking. The Rubrik cluster generates a unique ID for each virtual machine when a vCenter Server is added. When a virtual machine changes to another vCenter Server or unregisters and registers with the same vCenter Server, a new unique ID is generated for that virtual machine. When this happens, the virtual machine object associated with the original ID becomes a relic. This option links relic virtual machine objects with the current virtual machine object of a specific virtual machine, and makes the collective snapshot history available through the current object. Default value is 'NoConflictResolution'.
              enum:
                - AllowAutoConflictResolution
                - NoConflictResolution
              type: string
            connectionStatus:
              $ref: "#/components/schemas/RefreshableObjectConnectionStatus"
            hostname:
              type: string
            isIoFilterInstalled:
              description: A Boolean value that specifies whether Rubrik IO filters are installed on any compute clusters in the vCenter. When this value is 'true,' Rubrik IO filters are present on at least one compute cluster in the vCenter. When this value is 'false,' no Rubrik IO filters are present on any compute clusters in the vCenter.
              type: boolean
            isVmc:
              description: Indicates if the vCenter is a VMC instance.
              type: boolean
            lastRefreshTime:
              description: Optional field containing the last time that a vcenter was refreshed (either lite or full).
              format: date-time
              type: string
            username:
              type: string
            version:
              description: Version of vCenter.
              type: string
          required:
            - computeVisibilityFilter
            - connectionStatus
            - hostname
            - username
            - version
          type: object
    VcenterSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/VcenterSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    VerificationParameters:
      properties:
        locationIdOpt:
          description: |
            Snapshot stored in the provided data location id will be verified. If not provided, we will use Rubrik cluster ID. Currently it only verifies Snapshot present Rubrik cluster.
          type: string
        objectId:
          description: |
            ID assigned to the object. This objectId will be used to fetch the associated object.
          type: string
        shouldVerifyAfterOpt:
          description: |
            The backup should be verified exactly once after the given timestamp. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678". If not provided, it will default to "1970-01-01T00:00:00.000".
          format: date-time
          type: string
        snapshotIdsOpt:
          description: |
            ID assigned to a snapshot. This snapshotId will be used to fetch the associated snapshot. The scheduled job will verify this snapshot.
          items:
            type: string
          type: array
      required:
        - objectId
      type: object
    VerificationResponse:
      allOf:
        - $ref: "#/components/schemas/AsyncRequestStatus"
        - properties:
            snapshotVerificationInfo:
              description: |
                List of IDs of the snapshots requested for verification and their corresponding event series IDs.
              items:
                $ref: "#/components/schemas/SnapshotEventSeries"
              type: array
          required:
            - snapshotVerificationInfo
          type: object
    VimserverSummary:
      properties:
        connectionStatus:
          $ref: "#/components/schemas/VcdConnectionStatus"
        hostname:
          description: Hostname of a vCenter Server that is the target of a connection from a specified VimServer object.
          type: string
        id:
          description: ID assigned to a VimServer object.
          type: string
        name:
          description: Name of a VimServer object.
          type: string
        vcdClusterId:
          description: ID assigned to a vCD Cluster object that contains a specified VimServer object.
          type: string
        vcdClusterName:
          description: Name of a vCD Cluster object that contains a specified VimServer object.
          type: string
        vcenterId:
          description: ID assigned to a vCenter Server object that is attached to a specified VimServer object.
          type: string
      required:
        - connectionStatus
        - hostname
        - id
        - name
        - vcdClusterId
        - vcdClusterName
      type: object
    VimserverSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/VimserverSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    VirtualDiskDetail:
      properties:
        deviceKey:
          description: Unique and reusable key that vSphere uses to identify VMDK files and other devices in the hardware of a virtual machine.
          format: int64
          type: integer
        excludeFromSnapshots:
          type: boolean
        fileName:
          type: string
        id:
          type: string
        size:
          format: int64
          type: integer
      type: object
    VirtualDiskUpdate:
      properties:
        excludeFromSnapshots:
          type: boolean
      type: object
    VirtualMachineDetail:
      allOf:
        - $ref: "#/components/schemas/VirtualMachineUpdate"
        - $ref: "#/components/schemas/VirtualMachineSummary"
        - $ref: "#/components/schemas/BlackoutWindowResponseInfo"
        - properties:
            cdpState:
              $ref: "#/components/schemas/CdpState"
            currentHost:
              $ref: "#/components/schemas/VmwareHostSummary"
            effectiveSlaDomain:
              $ref: "#/components/schemas/SlaDomainSummary"
            guestCredential:
              $ref: "#/components/schemas/BaseGuestCredentialDetail"
            guestOsName:
              description: Long form name, including type and release designation, for the operating system that is installed on a virtual machine.
              type: string
            guestOsType:
              description: Type of operating system used by the VMware virtual machine.
              enum:
                - Linux
                - Windows
                - Unknown
              type: string
            isAgentRegistered:
              description: Boolean value that indicates whether the Rubrik Backup Service is installed and registered for the specified virtual machine. Set to 'true' when the Rubrik Backup Service is installed and registered and in all other cases set to 'false'.
              type: boolean
            isArrayIntegrationEnabled:
              description: Boolean value that determines whether the available storage array integration is used with the specified virtual machine. Set to 'true' to use storage array integration and set to 'false' to not use storage array integration. Refer to the value of 'isArrayIntegrationPossible' to determine whether storage array integration is available for a virtual machine.
              type: boolean
            isArrayIntegrationPossible:
              description: Boolean value that indicates whether the performance enhancements of storage array integration are available for the specified virtual machine object. Storage array integration is available when all of the datastores that are assigned to the virtual machine reside on a qualified storage array. Set to 'true' when storage array integration is available and set to 'false' when storage array integration is not available.
              type: boolean
            isCdpEnabled:
              type: boolean
            isInVmc:
              description: A Boolean that specifies whether the virtual machine is in a VMC environment.
              type: boolean
            latestRecoveryPoint:
              description: Latest point in time that we can recover to if this is a CDP enabled VM.
              format: date-time
              type: string
            logicalSize:
              description: This returns the sum of all virtual disk sizes in the specified virtual machine.
              format: int64
              type: integer
            maxNestedVsphereSnapshots:
              format: int32
              type: integer
            oldestRecoveryPoint:
              description: Oldest point in time that we can recover to if this is a CDP enabled VM.
              format: date-time
              type: string
            pendingSlaDomain:
              $ref: "#/components/schemas/ManagedObjectPendingSlaInfo"
            physicalStorage:
              format: int64
              type: integer
            snapshotCount:
              format: int32
              type: integer
            snapshots:
              items:
                $ref: "#/components/schemas/VmSnapshotSummary"
              type: array
            vcenterName:
              description: The name of vCenter that the virtual machine belongs to.
              type: string
            virtualDiskIds:
              items:
                type: string
              type: array
          required:
            - cdpState
            - effectiveSlaDomain
            - guestOsType
            - isArrayIntegrationEnabled
            - isArrayIntegrationPossible
            - isCdpEnabled
            - isInVmc
            - maxNestedVsphereSnapshots
            - physicalStorage
            - vcenterName
          type: object
    VirtualMachineScriptDetail:
      properties:
        failureHandling:
          description: Action to take if the script returns an error or times out.
          enum:
            - abort
            - continue
          type: string
        scriptPath:
          description: The command to be run in VM guest OS.
          type: string
        timeoutMs:
          description: Time (in ms) after which the script will be terminated if it has not completed.
          format: int64
          type: integer
      required:
        - failureHandling
        - scriptPath
        - timeoutMs
      type: object
    VirtualMachineSummary:
      allOf:
        - $ref: "#/components/schemas/Snappable"
        - properties:
            agentStatus:
              $ref: "#/components/schemas/AgentStatus"
            cloudInstantiationSpec:
              $ref: "#/components/schemas/CloudInstantiationSpec"
            clusterName:
              type: string
            folderPath:
              description: Brief info of all the objects in the folder path to this VM.
              items:
                $ref: "#/components/schemas/VmPathPoint"
              type: array
            guestCredentialAuthorizationStatus:
              description: "Status of authentication with a specific virtual machine using guest credentials. Possible values are: SUCCESSFUL, PENDING, or FAILED."
              type: string
            guestOsName:
              type: string
            hostId:
              type: string
            hostName:
              type: string
            infraPath:
              description: Brief info of all the objects in the infrastructure path to this VM.
              items:
                $ref: "#/components/schemas/VmPathPoint"
              type: array
            ipAddress:
              type: string
            isRelic:
              type: boolean
            isReplicationEnabled:
              type: boolean
            moid:
              type: string
            parentAppInfo:
              $ref: "#/components/schemas/ParentAppInfo"
            powerStatus:
              description: The power status of VM(ON,OFF,SLEEP etc.).
              type: string
            protectionDate:
              format: date-time
              type: string
            snapshotConsistencyMandate:
              description: Consistency level mandated for this VM or empty string for none.
              enum:
                - UNKNOWN
                - INCONSISTENT
                - CRASH_CONSISTENT
                - FILE_SYSTEM_CONSISTENT
                - VSS_CONSISTENT
                - APP_CONSISTENT
              type: string
            toolsInstalled:
              type: boolean
            vcenterId:
              type: string
            vmwareToolsInstalled:
              type: boolean
          required:
            - folderPath
            - guestCredentialAuthorizationStatus
            - infraPath
            - ipAddress
            - isRelic
            - isReplicationEnabled
            - moid
            - snapshotConsistencyMandate
            - vmwareToolsInstalled
          type: object
    VirtualMachineSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/VirtualMachineSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    VirtualMachineUpdate:
      properties:
        cloudInstantiationSpec:
          $ref: "#/components/schemas/CloudInstantiationSpec"
        configuredSlaDomainId:
          description: Assign this VM to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
          type: string
        isArrayIntegrationEnabled:
          description: User setting to dictate whether to use storage array snaphots for ingest. This setting only makes sense for VMs where array based ingest is possible.
          type: boolean
        isVmPaused:
          description: Whether to pause or resume backups/archival for this VM.
          type: boolean
        maxNestedVsphereSnapshots:
          format: int32
          type: integer
        postBackupScript:
          $ref: "#/components/schemas/VirtualMachineScriptDetail"
        postSnapScript:
          $ref: "#/components/schemas/VirtualMachineScriptDetail"
        preBackupScript:
          $ref: "#/components/schemas/VirtualMachineScriptDetail"
        snapshotConsistencyMandate:
          description: Consistency level mandated for this VM or empty string for none.
          enum:
            - UNKNOWN
            - INCONSISTENT
            - CRASH_CONSISTENT
            - FILE_SYSTEM_CONSISTENT
            - VSS_CONSISTENT
            - APP_CONSISTENT
          type: string
        throttlingSettings:
          $ref: "#/components/schemas/VmwareAdaptiveThrottlingSettings"
      type: object
    VirtualMachineUpdateWithSecret:
      allOf:
        - $ref: "#/components/schemas/VirtualMachineUpdate"
        - properties:
            guestCredential:
              $ref: "#/components/schemas/BaseGuestCredential"
            shouldRefreshCacheAfterUpdate:
              description: A boolean value that specifies whether an update also refreshes the in-memory cache. When 'false' updates do not refresh the in-memory cache. When 'true' updates refresh the in-memory cache. By default, this value is 'true'. Setting this value to 'false' reduces the time required for updates to complete.
              type: boolean
          type: object
    VmForceFullRequest:
      properties:
        virtualDiskInfos:
          description: List of virtual disks to be configured to force a full snapshot. The configuration specifies which virtual disks in VMware VM should do forced full snapshots and whether to perform deduplication. If it contains an empty array, a forced full snapshot is requested for all virtual disks in the VMware VM and deduplication is performed by default; otherwise a forced full snapshot is requested for the virtual disks in the array and the shouldDedupe determines whether deduplication is performed. The next backup job checks the configuration and takes full snapshot according to the specification. After the backup job is done, it clears the configuration in order to prevent further full snapshots.
          items:
            $ref: "#/components/schemas/VmwareVdiskForceFullInfo"
          type: array
      type: object
    VmForceFullResponse:
      properties:
        virtualDiskInfos:
          description: List of objects that provide information about each virtual disk that has requested a forced full snapshot.
          items:
            $ref: "#/components/schemas/VmwareVdiskForceFullInfo"
          type: array
        vmId:
          description: VMware virtual machine ID.
          type: string
      required:
        - vmId
      type: object
    VmGuestScriptRunConfig:
      properties:
        phase:
          description: Run the script configured (if any) for this phase.
          enum:
            - PreBackup
            - PostSnap
            - PostBackup
          type: string
      required:
        - phase
      type: object
    VmPathPoint:
      properties:
        id:
          description: ID of the object.
          type: string
        managedId:
          description: (Deprecated) - See **id**.
          type: string
        name:
          description: Name of the object.
          type: string
      required:
        - id
        - managedId
        - name
      type: object
    VmSnapshotDetail:
      allOf:
        - $ref: "#/components/schemas/VmSnapshotSummary"
        - $ref: "#/components/schemas/BaseSnapshotDetail"
        - properties:
            snapshotDiskDetails:
              items:
                $ref: "#/components/schemas/VmSnapshotDiskDetail"
              type: array
            snapshotDiskIds:
              description: This field is deprecated, use snapshotDiskDetails instead.
              items:
                type: string
              type: array
            virtualMachine:
              $ref: "#/components/schemas/VirtualMachineSummary"
            vmwareTagList:
              description: List of vSphere tags assigned to the virtual machine.
              items:
                type: string
              type: array
            vmxFileContent:
              type: string
          required:
            - snapshotDiskDetails
          type: object
    VmSnapshotDiskDetail:
      properties:
        deviceKey:
          description: Unique and reusable key that vSphere uses to identify VMDK files and other devices in the hardware of a virtual machine.
          format: int64
          type: integer
        fileName:
          type: string
        id:
          type: string
        size:
          format: int64
          type: integer
        virtualDiskId:
          type: string
      type: object
    VmSnapshotSummaries:
      description: Snapshot summaries for the virtual machine.
      properties:
        vmId:
          description: The ID of the virtual machine.
          type: string
        vmSnapshotsSummaries:
          description: A list of VmSnapshotSummary for the virtual machine.
          items:
            $ref: "#/components/schemas/VmSnapshotSummary"
          type: array
      required:
        - vmId
        - vmSnapshotsSummaries
      type: object
    VmSnapshotSummary:
      allOf:
        - $ref: "#/components/schemas/BaseSnapshotSummary"
        - properties:
            vNicsInfo:
              items:
                $ref: "#/components/schemas/VmwareVNicBindingInfo"
              type: array
            vmName:
              type: string
          required:
            - vmName
          type: object
    VmSnapshotSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/VmSnapshotSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    VmwareAdaptiveThrottlingSettings:
      properties:
        cpuUtilizationThreshold:
          description: Threshold virtual machine CPU utilization value that determines whether to postpone a scheduled snapshot of a vSphere virtual machine. Specify the threshold value as a percentage.
          format: int32
          type: integer
        datastoreIoLatencyThreshold:
          description: Threshold datastore latency value, measured across all datastores, that determines whether to postpone a scheduled snapshot of a vSphere virtual machine. Specify the threshold value in milliseconds (ms).
          format: int32
          type: integer
        ioLatencyThreshold:
          description: Threshold virtual machine latency value that determines whether to postpone a scheduled snapshot of the vSphere virtual machine. Specify the threshold value in milliseconds (ms).
          format: int32
          type: integer
      type: object
    VmwareCdpLiveInfo:
      properties:
        currentTime:
          description: The time on this node. Computed after computing the live CDP info for the virtual machine.
          format: date-time
          type: string
        localRecoveryPoint:
          description: The latest time to which this virtual machine can be recovered locally.
          format: date-time
          type: string
        remoteRecoveryPoint:
          description: The latest time to which this virtual machine can be recovered on a remote cluster.
          format: date-time
          type: string
        vmId:
          description: The ID of the virtual machine that we are getting CDP live fields for.
          type: string
      required:
        - vmId
      type: object
    VmwareCdpStateInfo:
      properties:
        healthPercentage:
          description: The percentage of healthy time over all CDP-enabled time over the last 24 hours. Range from 0.0 to 100.0 .
          format: double
          type: number
        localStatus:
          $ref: "#/components/schemas/CdpLocalStatus"
        replicationStatus:
          $ref: "#/components/schemas/CdpReplicationStatus"
        vmId:
          description: The ID of the virtual machine for which the cluster is retrieving CDP state information.
          type: string
      required:
        - vmId
      type: object
    VmwareHierarchyInfo:
      properties:
        datastores:
          items:
            $ref: "#/components/schemas/DataStoreSummary"
          type: array
        hasChildren:
          type: boolean
        id:
          type: string
        location:
          type: string
        name:
          type: string
        objectType:
          $ref: "#/components/schemas/VmwareHierarchyObjectType"
        recoverableTo:
          type: boolean
        rootId:
          type: string
      required:
        - datastores
        - hasChildren
        - id
        - location
        - name
        - objectType
        - recoverableTo
      type: object
    VmwareHierarchyInfoListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/VmwareHierarchyInfo"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    VmwareHierarchyObjectType:
      description: Vmware Hierarchy Object Type.
      enum:
        - ComputeCluster
        - Host
        - ResourcePool
      type: string
    VmwareHostDatastoreDetail:
      properties:
        datastores:
          items:
            $ref: "#/components/schemas/DataStoreSummary"
          type: array
        hostId:
          type: string
        hostName:
          type: string
      required:
        - hostId
      type: object
    VmwareHostDetail:
      allOf:
        - $ref: "#/components/schemas/VmwareHostUpdate"
        - $ref: "#/components/schemas/VmwareHostSummary"
        - properties:
            computeClusterId:
              type: string
            datacenter:
              $ref: "#/components/schemas/DataCenterSummary"
            datastores:
              items:
                $ref: "#/components/schemas/DataStoreSummary"
              type: array
            moid:
              type: string
            virtualMachines:
              items:
                $ref: "#/components/schemas/VirtualMachineSummary"
              type: array
          type: object
    VmwareHostSummary:
      allOf:
        - $ref: "#/components/schemas/SlaAssignable"
        - $ref: "#/components/schemas/EffectiveSlaHolder"
        - properties:
            computeClusterId:
              type: string
            datacenterId:
              type: string
            datastores:
              items:
                $ref: "#/components/schemas/DataStoreSummary"
              type: array
            esxiVersion:
              description: API Version of the ESXi Host.
              type: string
            ioFilterStatus:
              $ref: "#/components/schemas/HostFilterStatus"
            ioFilterUiStatus:
              $ref: "#/components/schemas/HostUiFilterStatus"
            isInVmc:
              type: boolean
          required:
            - ioFilterStatus
          type: object
    VmwareHostSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/VmwareHostSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    VmwareHostUpdate:
      properties:
        configuredSlaDomainId:
          description: |
            ID of the SLA Domain that is configured for this ESXi hypervisor. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
          type: string
      type: object
    VmwareNetworkCollection:
      description: A collection of VMware networks.
      properties:
        networks:
          description: A list of VMware network information.
          items:
            $ref: "#/components/schemas/VmwareNetworkInfo"
          type: array
      required:
        - networks
      type: object
    VmwareNetworkDeviceInfo:
      properties:
        key:
          format: int32
          type: integer
        name:
          type: string
      required:
        - key
        - name
      type: object
    VmwareNetworkInfo:
      properties:
        id:
          description: ID of the VMware network.
          type: string
        moid:
          type: string
        name:
          type: string
        networkType:
          $ref: "#/components/schemas/VmwareNetworkType"
      required:
        - moid
        - name
      type: object
    VmwareNetworkType:
      description: VMware network type.
      enum:
        - LOCAL_NETWORK
        - DISTRIBUTED_PORT_GROUP
        - OPAQUE_NETWORK
        - OTHER
      type: string
    VmwareRecoverableRange:
      properties:
        beginTime:
          format: date-time
          type: string
        endTime:
          format: date-time
          type: string
      type: object
    VmwareRecoverableRangeListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/VmwareRecoverableRange"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    VmwareVNicBindingInfo:
      properties:
        backingNetworkInfo:
          $ref: "#/components/schemas/VmwareNetworkInfo"
        networkDeviceInfo:
          $ref: "#/components/schemas/VmwareNetworkDeviceInfo"
      required:
        - backingNetworkInfo
        - networkDeviceInfo
      type: object
    VmwareVdiskForceFullInfo:
      properties:
        shouldDedupe:
          default: true
          description: Specifies whether deduplication should be enabled for the forced full snapshot of the virtual disk.
          type: boolean
        virtualDiskId:
          description: Virtual disk ID within the VMware virtual machine.
          type: string
      required:
        - shouldDedupe
        - virtualDiskId
      type: object
    VmwareVmMissedRecoverableRanges:
      properties:
        missedRecoverableRanges:
          description: Missed recoverable ranges for the virtual machine.
          items:
            $ref: "#/components/schemas/VmwareRecoverableRange"
          type: array
        vmId:
          description: ID of the virtual machine for which missed recoverable ranges are being retrieved.
          type: string
      required:
        - missedRecoverableRanges
        - vmId
      type: object
    VmwareVmMountDetailV1:
      allOf:
        - $ref: "#/components/schemas/VmwareVmMountSummaryV1"
        - properties:
            powerStatus:
              description: The power status of the mounted VM(ON,OFF,SLEEP etc.).
              type: string
          type: object
    VmwareVmMountSummaryV1:
      properties:
        attachingDiskCount:
          description: An integer value that identifies how many disks are attached.
          format: int32
          type: integer
        createDatastoreOnlyMount:
          description: This boolean value determines whether or not the mount is created as a datastore only. When 'true,' the mount is created with datastore and not the associated virtual machine. When 'false,' the mount is created with both the datastore and the associated virtual machine.
          type: boolean
        datastoreName:
          description: The name of the datastore that contains the mounted VMDK.
          type: string
        datastoreReady:
          description: A boolean value that specifies whether the datastore is ready. When 'true,' the datastore is ready. When 'false,' the datastore is not ready.
          type: boolean
        hasAttachingDisk:
          description: A Boolean value that determines whether this job is an attaching disk mount job. When 'true,' this is an attaching disk mount job. When 'false,' this is not an attaching disk mount job.
          type: boolean
        hostId:
          type: string
        id:
          type: string
        isReady:
          type: boolean
        mountRequestId:
          type: string
        mountTimestamp:
          description: Gives the timestamp at which the mount was created.
          format: date-time
          type: string
        mountedVmId:
          type: string
        snapshotDate:
          format: date-time
          type: string
        unmountRequestId:
          type: string
        vmId:
          type: string
      required:
        - id
        - isReady
        - snapshotDate
        - vmId
      type: object
    VmwareVmMountSummaryV1ListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/VmwareVmMountSummaryV1"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    VmwareVmRecoverableRanges:
      properties:
        recoverableRanges:
          description: The recoverable ranges for the virtual machine.
          items:
            $ref: "#/components/schemas/VmwareRecoverableRange"
          type: array
        vmId:
          description: The ID of the virtual machine for which to retrieve recoverable ranges.
          type: string
      required:
        - recoverableRanges
        - vmId
      type: object
    VolumeGroupDetail:
      allOf:
        - $ref: "#/components/schemas/VolumeGroupSummary"
        - $ref: "#/components/schemas/BlackoutWindowResponseInfo"
        - properties:
            configuredSlaDomainId:
              description: The ID of the SLA Domain policy to assign to the Volume Group.
              type: string
            isPaused:
              description: Indicates whether backup, archival, and replication are paused for this Volume Group.
              type: boolean
            pendingSlaDomain:
              $ref: "#/components/schemas/ManagedObjectPendingSlaInfo"
            volumes:
              description: Configuration details for the volumes in the Volume Group.
              items:
                $ref: "#/components/schemas/HostVolumeSummary"
              type: array
          required:
            - configuredSlaDomainId
            - isPaused
            - volumes
          type: object
    VolumeGroupForceFullRequest:
      properties:
        volumeInfos:
          description: Configuration for forcing a full snapshot for the listed volumes in the request. The configuration specifies which volumes in a Volume Group should get forced full snapshots, and whether to perform deduplication. If the configuration is missing, no forced full snapshot is requested. If the configuration contains an empty array, a forced full snapshot is requested for all volumes in the Volume Group and deduplication is performed by default. If the configuration array contains specific volumes, a forced full snapshot is requested for these volumes only. The shouldDedupe flag determines whether deduplication is performed. If a forced full snapshot is requested, the next backup job checks the configuration and takes the full snapshot according to the specification. After the full snapshot is taken, the backup job clears the configuration to prevent additional full snapshots from being taken.
          items:
            $ref: "#/components/schemas/ForceFullVolumeInfo"
          type: array
      type: object
    VolumeGroupForceFullResponse:
      properties:
        volumeGroupId:
          description: The ID of the Volume group.
          type: string
        volumeInfos:
          description: Configuration for each volume that has requested a forced full snapshot. If the configuration is absent, that means either a forced full snapshot has not been requested for the Volume Group, or a backup job has taken the requested full snapshot and cleared the configuration.
          items:
            $ref: "#/components/schemas/ForceFullVolumeInfo"
          type: array
      required:
        - volumeGroupId
      type: object
    VolumeGroupListSortAttribute:
      description: Attributes that are available to use when sorting query results for Volume Groups.
      enum:
        - name
        - effectiveSlaDomainName
      type: string
    VolumeGroupMountListSortAttribute:
      description: Attributes that are available to use when sorting query results for Volume Group snapshot mounts.
      enum:
        - name
        - sourceHostName
        - snapshotDate
        - mountedDate
      type: string
    VolumeGroupMountSummary:
      properties:
        canUnmount:
          description: Indicates if the logged-in user has the authority to remove the specified mount.
          type: boolean
        id:
          description: The unique ID of the mount.
          type: string
        isReady:
          description: Specifies whether the volume mount operation has successfully completed and is ready to use.
          type: boolean
        mountRequestId:
          description: The ID of the job instance that initiated the request for the specified mount.
          type: string
        mountedDate:
          description: The UTC timestamp at which the mount was created.
          format: date-time
          type: string
        mountedVolumes:
          description: Configuration details for each of the mounted Volumes in the Volume Group.
          items:
            $ref: "#/components/schemas/VolumeMountInfo"
          type: array
        name:
          description: The name of the Volume Group.
          type: string
        restoreScriptSmbPath:
          description: The link to the script that can perform bare-metal recovery for the mounted snapshot.
          type: string
        snapshotDate:
          description: The UTC timestamp at which the snapshot was originally taken.
          format: date-time
          type: string
        snapshotSourceVersion:
          $ref: "#/components/schemas/VolumeGroupReleaseVersion"
        sourceHostId:
          description: The ID of the Host on which the snapshot was originally taken.
          type: string
        sourceHostName:
          description: The name of the Host on which the snapshot was originally taken.
          type: string
        sourceVolumeGroupId:
          description: The ID of the Volume Group from which this snapshot was created.
          type: string
        targetHostId:
          description: The ID of the host where the volumes are mounted.
          type: string
        targetHostName:
          description: The name of the host where the volumes are mounted.
          type: string
        unmountRequestId:
          description: The ID of the job instance that initiated the request to remove the specified mount.
          type: string
      required:
        - id
        - isReady
        - mountedDate
        - mountedVolumes
        - name
        - snapshotDate
        - snapshotSourceVersion
        - sourceHostId
        - sourceHostName
        - sourceVolumeGroupId
      type: object
    VolumeGroupMountSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/VolumeGroupMountSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    VolumeGroupOnDemandSnapshotConfig:
      allOf:
        - $ref: "#/components/schemas/BaseOnDemandSnapshotConfig"
        - properties:
            volumeIdsIncludedInSnapshot:
              description: The unique ID of each volume included in the Volume Group snapshot.
              items:
                type: string
              type: array
          type: object
    VolumeGroupPatch:
      properties:
        configuredSlaDomainId:
          description: The ID of the SLA Domain policy to assign to the Volume Group.
          type: string
        forceFull:
          description: Determines whether the next snapshot of the Volume Group is a full. After the snapshot has completed, this parameter will be reset to the default false value.
          type: boolean
        isPaused:
          description: Indicates whether backup, archival, and replicated is paused for this Volume Group.
          type: boolean
        volumeIdsIncludedInSnapshots:
          description: The unique ID of each volume included in the Volume Group.
          items:
            type: string
          type: array
      type: object
    VolumeGroupReleaseVersion:
      description: Rubrik release version that supports volume group snappable.
      enum:
        - WithLayoutInfo
        - WithoutLayoutInfo
      type: string
    VolumeGroupRestoreVolumeSpec:
      properties:
        targetVolumePath:
          description: Path of the target volume for the restore operation.
          type: string
        volumeId:
          description: ID of volume in snapshot to restore.
          type: string
      required:
        - targetVolumePath
        - volumeId
      type: object
    VolumeGroupRestoreVolumesConfig:
      properties:
        restoreSpec:
          description: Array of volume ID and target volume path pairs.
          items:
            $ref: "#/components/schemas/VolumeGroupRestoreVolumeSpec"
          type: array
        targetHostId:
          description: ID of the host where this restore operation restores volumes.
          type: string
      required:
        - restoreSpec
        - targetHostId
      type: object
    VolumeGroupSnapshotDetail:
      allOf:
        - $ref: "#/components/schemas/VolumeGroupSnapshotSummary"
    VolumeGroupSnapshotSummary:
      allOf:
        - $ref: "#/components/schemas/BaseSnapshotSummary"
        - properties:
            fileSizeInBytes:
              description: The logical size of the Volume Group snapshot in bytes.
              format: int64
              type: integer
            includedVolumes:
              description: Configuration details of the volume(s) included in the snapshot.
              items:
                $ref: "#/components/schemas/VolumeGroupSnapshotVolumeSummary"
              type: array
            name:
              description: A human-readable name of the mount points included in the snapshot.
              type: string
            usedFastVhdx:
              description: Specifies whether the snapshot was taken using the fast VHDX builder, which became available in the Rubrik CDM 5.1 release.
              type: boolean
            volumeGroupId:
              description: The unique ID of the Volume Group that was snapshoted.
              type: string
          required:
            - includedVolumes
            - name
            - volumeGroupId
          type: object
    VolumeGroupSnapshotSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/VolumeGroupSnapshotSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    VolumeGroupSnapshotVolumeSummary:
      properties:
        fileSystemType:
          $ref: "#/components/schemas/FileSystemType"
        id:
          description: The unique ID of the snapshot volume summary.
          type: string
        mountPoints:
          description: The mount points of the volume on the host.
          items:
            type: string
          type: array
        size:
          description: The size of the volume in bytes.
          format: int64
          type: integer
      required:
        - fileSystemType
        - id
        - mountPoints
        - size
      type: object
    VolumeGroupSummary:
      allOf:
        - $ref: "#/components/schemas/Snappable"
        - properties:
            forceFull:
              description: Specifies whether the Volume Group is set to take a full snapshot for the next backup.
              type: boolean
            hostId:
              description: The unique ID of the host that contains the Volume Group.
              type: string
            hostname:
              description: The name of the host that contains the Volume Group.
              type: string
            id:
              description: The unique ID of the Volume Group.
              type: string
            isRelic:
              description: Specifies whether the Volume Group is accessible on the Rubrik cluster.
              type: boolean
            name:
              description: The name of the Volume Group.
              type: string
            needsMigration:
              description: Specifies whether the Volume Group needs to be migrated in order to use the fast VHDX builder. This flag is set only when the Volume Group's last backup job failed due to an error during data fetch, and the backup job did not use the fast VHDX builder.
              type: boolean
          required:
            - id
            - isRelic
            - name
          type: object
    VolumeGroupSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/VolumeGroupSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    VolumeMountInfo:
      properties:
        fileSystemType:
          $ref: "#/components/schemas/FileSystemType"
        hostMountedPath:
          description: The mount path of volume on the new host.
          type: string
        id:
          description: The unique ID of the mount.
          type: string
        originalMountPoints:
          description: The source host mount points of the specified volume.
          items:
            type: string
          type: array
        size:
          description: The size of the volume in bytes.
          format: int64
          type: integer
        smbPath:
          description: The SMB path to the VHD file that contains the snapshot volume. This path is available when the mount is ready.
          type: string
      required:
        - fileSystemType
        - id
        - originalMountPoints
        - size
      type: object
    WebServerCertificatePayload:
      properties:
        certificateId:
          description: ID assigned to the imported certificate object.
          type: string
      required:
        - certificateId
      type: object
    WebServerCertificateSummary:
      properties:
        cert:
          $ref: "#/components/schemas/CertificateSummary"
        webServerConfiguredWithCASignedCertificate:
          description: A Boolean value that indicates if the web server is configured to use a certificate signed by an external CA.
          type: boolean
      required:
        - webServerConfiguredWithCASignedCertificate
      type: object
    WeeklyConfig:
      allOf:
        - $ref: "#/components/schemas/FrequencyConfig"
        - properties:
            dayOfWeek:
              $ref: "#/components/schemas/SlaDayOfWeek"
          required:
            - dayOfWeek
          type: object
    WindowsClusterDetail:
      allOf:
        - $ref: "#/components/schemas/WindowsClusterSummary"
        - properties:
            naturalId:
              description: Obtained from ClusterInstanceID under the registry key HKLM\Cluster.
              type: string
          required:
            - naturalId
          type: object
    WindowsClusterSummary:
      properties:
        fqdn:
          description: Fully qualified domain name of this cluster.
          type: string
        hostIds:
          description: IDs of the hosts in this cluster.
          items:
            type: string
          type: array
        id:
          type: string
        isAgentless:
          description: Indicates whether the Rubrik Backup Service is installed on hosts in a Windows cluster. The value is true when all hosts in the cluster do not have the Rubrik Backup Service installed. The value is false when one or more of the hosts in the cluster have the Rubrik Backup Service installed.
          type: boolean
        name:
          type: string
        primaryClusterId:
          type: string
      required:
        - fqdn
        - hostIds
        - id
        - isAgentless
        - name
        - primaryClusterId
      type: object
    WindowsClusterSummaryListResponse:
      properties:
        data:
          description: List of matching objects.
          items:
            $ref: "#/components/schemas/WindowsClusterSummary"
          type: array
        hasMore:
          description: If there is more.
          type: boolean
        total:
          description: Total list responses.
          format: int32
          type: integer
      type: object
    YearlyConfig:
      allOf:
        - $ref: "#/components/schemas/FrequencyConfig"
        - properties:
            dayOfYear:
              $ref: "#/components/schemas/SlaDayOfYear"
            yearStartMonth:
              $ref: "#/components/schemas/SlaMonth"
          required:
            - dayOfYear
            - yearStartMonth
          type: object
  securitySchemes:
    BasicAuth:
      scheme: basic
      type: http
    Bearer:
      in: header
      name: Authorization
      type: apiKey
